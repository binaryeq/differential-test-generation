/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:22:14 GMT 2024
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JPasswordField;
import javax.swing.JViewport;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastScatterPlot_ESTest extends FastScatterPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double((-10.0), 1.0F);
      fastScatterPlot0.zoomRangeAxes(2983.0167828628, 0.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getStartPoint();
      fastScatterPlot0.zoomRangeAxes((-1.0), plotRenderingInfo0, point2D0, true);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double(50.0, 0.0);
      // Undeclared exception!
      try { 
        fastScatterPlot0.zoomRangeAxes(1922.0964, (PlotRenderingInfo) null, (Point2D) point2D_Double0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("bs|=Ng?PoM#7n2p");
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.0F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      assertEquals(1.0E-105, logAxis0.getLowerBound(), 0.01);
      assertEquals(100000.0, logAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("bs|=Ng?PoM#7n2p");
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[4];
      floatArray1[1] = 441.9087F;
      floatArray0[1] = floatArray1;
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("bs|=Ng?PoM#7n2p");
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[4];
      floatArray1[1] = 441.9087F;
      floatArray0[0] = floatArray1;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      assertEquals(5.992377579893114E7, logAxis0.getUpperBound(), 0.01);
      assertEquals(7.374513463387933E-106, logAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(2146936917);
      Stroke stroke0 = xYSplineRenderer0.getDefaultOutlineStroke();
      fastScatterPlot0.setRangeGridlineStroke(stroke0);
      BasicStroke basicStroke0 = (BasicStroke)fastScatterPlot0.getRangeGridlineStroke();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      Color color0 = defaultStyledDocument0.getForeground(simpleAttributeSet0);
      fastScatterPlot0.setDomainGridlinePaint(color0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logarithmicAxis0, logarithmicAxis0);
      fastScatterPlot0.setDomainGridlineStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      BasicStroke basicStroke0 = (BasicStroke)fastScatterPlot0.getDomainGridlineStroke();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logarithmicAxis0, logarithmicAxis0);
      fastScatterPlot0.setPaint(logarithmicAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 289, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      ArrayList<FastScatterPlot> arrayList0 = new ArrayList<FastScatterPlot>();
      fastScatterPlot0.drawRangeGridlines(graphics2D0, rectangle0, arrayList0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("QCSua]~-PEQ0", font0, fastScatterPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      Vector<Object> vector0 = new Vector<Object>();
      fastScatterPlot0.drawDomainGridlines(graphics2D0, rectangle0, vector0);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0F, 0.0);
      fastScatterPlot0.zoomDomainAxes(2766.502108603, plotRenderingInfo0, (Point2D) point2D_Double0, true);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JPasswordField jPasswordField0 = new JPasswordField("T!4-oa<`wr%!e$QB");
      Color color0 = jPasswordField0.getSelectionColor();
      fastScatterPlot0.setRangeGridlinePaint(color0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      LogAxis logAxis0 = new LogAxis("5+");
      fastScatterPlot0.setDomainAxis(logAxis0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setRangePannable(true);
      boolean boolean0 = fastScatterPlot0.isRangePannable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setAutoTickUnitSelection(false, false);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      fastScatterPlot0.getRangeAxis();
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, logAxis0, logAxis0);
      fastScatterPlot0.getRangeAxis();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      LogAxis logAxis0 = new LogAxis("");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      fastScatterPlot0.getDomainAxis();
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      PeriodAxis periodAxis0 = new PeriodAxis("/V2hg&");
      periodAxis0.setLabelAngle(1444.0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, periodAxis0);
      ValueAxis valueAxis0 = fastScatterPlot0.getDomainAxis();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, valueAxis0.getLowerBound(), 0.01);
      assertEquals(1.0, valueAxis0.getUpperBound(), 0.01);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1942.4538639);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      fastScatterPlot0.getDomainAxis();
      assertEquals((-1942.4538639), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[8][9];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-297.051F);
      floatArray0[0] = floatArray1;
      PeriodAxis periodAxis0 = new PeriodAxis("~]g/");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, periodAxis0);
      fastScatterPlot0.getDataRange(periodAxis0);
      assertEquals((-297.0), periodAxis0.getLowerBound(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("bs|=Ng?PoM#7n2p");
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.0F;
      floatArray0[0] = floatArray1;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      fastScatterPlot0.getDataRange(logAxis0);
      assertEquals(1.0E-105, logAxis0.getLowerBound(), 0.01);
      assertEquals(100000.0, logAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      LogAxis logAxis0 = new LogAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      fastScatterPlot0.getData();
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setRangeAxis((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        fastScatterPlot0.drawDomainGridlines((Graphics2D) null, defaultCaret0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 3527.15F, (-1.0F));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultStatisticalCategoryDataset0, tableOrder0);
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle2D_Float0, 1.0F, 10);
      PlotState plotState0 = new PlotState();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        fastScatterPlot0.draw((Graphics2D) null, rectangle2D_Float0, point2D0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      // Undeclared exception!
      try { 
        fastScatterPlot0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'object' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      PeriodAxis periodAxis0 = new PeriodAxis("/V2hg&");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("/V2hg&");
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, logarithmicAxis0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Values less than or equal to zero not allowed with logarithmic axis
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[4][7];
      FastScatterPlot fastScatterPlot0 = null;
      try {
        fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) null, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'domainAxis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, dateAxis0, logAxis0);
      fastScatterPlot0.getDataRange(logAxis0);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      PeriodAxis periodAxis0 = new PeriodAxis("Preceding");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, periodAxis0, periodAxis0);
      Range range0 = fastScatterPlot0.getDataRange(periodAxis0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.isDomainPannable();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = (Color)fastScatterPlot0.getRangeGridlinePaint();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(192, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = (Color)fastScatterPlot0.getDomainGridlinePaint();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(192, color0.getGreen());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isRangeGridlinesVisible();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isDomainGridlinesVisible();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.isRangePannable();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = (FastScatterPlot)fastScatterPlot0.clone();
      assertTrue(fastScatterPlot1.equals((Object)fastScatterPlot0));
      
      fastScatterPlot1.setDomainGridlinePaint(fastScatterPlot0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = (FastScatterPlot)fastScatterPlot0.clone();
      assertTrue(fastScatterPlot1.equals((Object)fastScatterPlot0));
      
      fastScatterPlot1.setPaint(fastScatterPlot0.DEFAULT_GRIDLINE_PAINT);
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DateAxis dateAxis0 = new DateAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, dateAxis0, dateAxis0);
      FastScatterPlot fastScatterPlot1 = new FastScatterPlot((float[][]) null, dateAxis0, logAxis0);
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot((float[][]) null, numberAxis0, numberAxis0);
      FastScatterPlot fastScatterPlot1 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertTrue(fastScatterPlot1.isDomainGridlinesVisible());
      assertFalse(boolean0);
      assertTrue(fastScatterPlot1.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      LogAxis logAxis0 = new LogAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setRangePannable(true);
      FastScatterPlot fastScatterPlot1 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertTrue(fastScatterPlot0.isRangePannable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      LogAxis logAxis0 = new LogAxis("");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      FastScatterPlot fastScatterPlot1 = (FastScatterPlot)fastScatterPlot0.clone();
      fastScatterPlot1.setDomainPannable(true);
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot1);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Object object0 = new Object();
      boolean boolean0 = fastScatterPlot0.equals(object0);
      assertFalse(boolean0);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.equals(fastScatterPlot0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(boolean0);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      FastScatterPlot fastScatterPlot1 = (FastScatterPlot)fastScatterPlot0.clone();
      boolean boolean0 = fastScatterPlot1.equals(fastScatterPlot0);
      assertNotSame(fastScatterPlot1, fastScatterPlot0);
      assertTrue(boolean0);
      assertTrue(fastScatterPlot1.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot1.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      fastScatterPlot0.zoomRangeAxes(1272.7589968535, plotRenderingInfo0, (Point2D) null, false);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double((-10.0), 1.0F);
      // Undeclared exception!
      try { 
        fastScatterPlot0.zoomDomainAxes(4539.25395106858, (PlotRenderingInfo) null, (Point2D) point2D_Double0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double((-10.0), 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      fastScatterPlot0.zoomDomainAxes(2918.580990949903, plotRenderingInfo0, (Point2D) point2D_Double0, false);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("w&l$0");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getDataRange(dateAxis0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      LogAxis logAxis0 = new LogAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, logAxis0, logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Pto-oi)+C", logAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
      jFreeChart0.createBufferedImage(500, 10);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      
      fastScatterPlot0.setRangeGridlinesVisible(false);
      Object object0 = fastScatterPlot0.clone();
      boolean boolean0 = fastScatterPlot0.equals(object0);
      assertFalse(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      
      fastScatterPlot0.setRangeGridlinesVisible(true);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      
      fastScatterPlot0.setDomainGridlinesVisible(false);
      assertFalse(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      
      fastScatterPlot0.setDomainGridlinesVisible(true);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.setRangePannable(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      fastScatterPlot0.panRangeAxes(1.0E-8, plotRenderingInfo0, (Point2D) null);
      fastScatterPlot0.getRangeAxis();
      assertTrue(fastScatterPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isRangeZoomable();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(boolean0);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getOrientation();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getPlotType();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      fastScatterPlot0.zoomRangeAxes(0.001, plotRenderingInfo0, (Point2D) null);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      fastScatterPlot0.zoomDomainAxes(0.05, (double) 500, plotRenderingInfo0, (Point2D) null);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      float[][] floatArray0 = new float[0][8];
      fastScatterPlot0.setData(floatArray0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double((-10.0), 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      fastScatterPlot0.zoomDomainAxes(1.0E-8, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      boolean boolean0 = fastScatterPlot0.isDomainZoomable();
      assertTrue(boolean0);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Color color0 = (Color)fastScatterPlot0.getPaint();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      fastScatterPlot0.setRangeAxis(numberAxis0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      fastScatterPlot0.panDomainAxes(0.0, plotRenderingInfo0, (Point2D) null);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setDomainAxis((ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      // Undeclared exception!
      try { 
        fastScatterPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      fastScatterPlot0.panRangeAxes(1.0E-8, plotRenderingInfo0, (Point2D) null);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getData();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", fastScatterPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(10);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      fastScatterPlot0.render(graphics2D0, rectangle0, plotRenderingInfo0, categoryCrosshairState0);
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      ValueAxis valueAxis0 = fastScatterPlot0.getRangeAxis();
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals("Y", valueAxis0.getLabel());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        fastScatterPlot0.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.FastScatterPlot", e);
      }
  }
}
