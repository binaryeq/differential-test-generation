/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:43:57 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.threeten.bp.Clock;
import org.threeten.bp.Duration;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.LocalTime;
import org.threeten.bp.Period;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.ZonedDateTime;
import org.threeten.bp.chrono.ChronoLocalDate;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.ChronoPeriod;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.Era;
import org.threeten.bp.chrono.HijrahChronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.HijrahEra;
import org.threeten.bp.chrono.IsoChronology;
import org.threeten.bp.chrono.JapaneseChronology;
import org.threeten.bp.chrono.JapaneseDate;
import org.threeten.bp.chrono.MinguoChronology;
import org.threeten.bp.chrono.MinguoDate;
import org.threeten.bp.chrono.MinguoEra;
import org.threeten.bp.chrono.ThaiBuddhistChronology;
import org.threeten.bp.chrono.ThaiBuddhistDate;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDate_ESTest extends ChronoLocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(2835, 1989);
      String string0 = hijrahDate0.toString();
      assertEquals("Hijrah-umalqura AH 2840-08-10", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateEpochDay(3176L);
      // Undeclared exception!
      try { 
        LocalTime.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalTime from TemporalAccessor: Hijrah-umalqura AH 1398-10-09, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(365, 29);
      hijrahDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = hijrahDate0.plusMonths(2378L);
      boolean boolean0 = hijrahDate1.equals(hijrahDate0);
      assertFalse(boolean0);
      assertFalse(hijrahDate0.equals((Object)hijrahDate1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(1735, 1735);
      LocalDate localDate0 = LocalDate.now();
      boolean boolean0 = localDate0.isEqual(hijrahDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate1 = hijrahChronology0.dateNow((ZoneId) zoneOffset0);
      boolean boolean0 = hijrahDate1.isBefore(hijrahDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.date(9999, 1, 1);
      boolean boolean0 = hijrahDate0.isAfter(japaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoField chronoField0 = ChronoField.YEAR;
      ChronoLocalDate chronoLocalDate0 = hijrahDate0.with((TemporalField) chronoField0, 1049L);
      assertTrue(chronoLocalDate0.isLeapYear());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      ChronoLocalDate chronoLocalDate0 = japaneseChronology0.dateEpochDay(1);
      HijrahDate hijrahDate1 = (HijrahDate)hijrahDate0.with((TemporalAdjuster) chronoLocalDate0);
      assertEquals(1, HijrahDate.MIN_VALUE_OF_ERA);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = Clock.tickSeconds(zoneOffset0);
      HijrahDate hijrahDate0 = HijrahDate.now(clock0);
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoPeriod chronoPeriod0 = thaiBuddhistDate0.until((ChronoLocalDate) hijrahDate0);
      assertNotNull(chronoPeriod0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      long long0 = hijrahDate0.toEpochDay();
      assertEquals(16115L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      ChronoLocalDate chronoLocalDate0 = hijrahDate0.plus((long) 1, (TemporalUnit) chronoUnit0);
      assertTrue(chronoLocalDate0.isLeapYear());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.BASIC_ISO_DATE;
      LocalDate localDate0 = LocalDate.parse((CharSequence) "23091227", dateTimeFormatter0);
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateEpochDay(1);
      ChronoPeriod chronoPeriod0 = thaiBuddhistDate0.until((ChronoLocalDate) localDate0);
      ChronoLocalDate chronoLocalDate0 = thaiBuddhistDate0.minus((TemporalAmount) chronoPeriod0);
      assertEquals((-124175L), chronoLocalDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      ChronoLocalDate chronoLocalDate0 = hijrahDate0.minus(13L, (TemporalUnit) chronoUnit0);
      assertEquals(30, chronoLocalDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      int int0 = hijrahDate0.lengthOfMonth();
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoField chronoField0 = ChronoField.MONTH_OF_YEAR;
      TemporalUnit temporalUnit0 = chronoField0.getRangeUnit();
      boolean boolean0 = thaiBuddhistDate0.isSupported(temporalUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      boolean boolean0 = hijrahDate0.isSupported((TemporalUnit) chronoUnit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(1735, 1735);
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      boolean boolean0 = hijrahDate0.isSupported((TemporalField) chronoField0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoField chronoField0 = ChronoField.MILLI_OF_SECOND;
      boolean boolean0 = hijrahDate0.isSupported((TemporalField) chronoField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = Clock.tickSeconds(zoneOffset0);
      HijrahDate hijrahDate0 = HijrahDate.now(clock0);
      Era era0 = hijrahDate0.getEra();
      assertEquals(HijrahEra.AH, era0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Chronology chronology0 = hijrahDate0.getChronology();
      assertEquals("islamic-umalqura", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("");
      String string0 = hijrahDate0.format(dateTimeFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateNow();
      int int0 = hijrahDate0.compareTo((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTime<?> chronoLocalDateTime0 = hijrahDate0.atTime(localTime0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = Clock.tickSeconds(zoneOffset0);
      HijrahDate hijrahDate0 = HijrahDate.now(clock0);
      TemporalField[] temporalFieldArray0 = new TemporalField[3];
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      temporalFieldArray0[0] = (TemporalField) chronoField0;
      // Undeclared exception!
      try { 
        hijrahDate0.with(temporalFieldArray0[0], (-2438L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      // Undeclared exception!
      try { 
        hijrahDate0.with((TemporalField) chronoField0, (long) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for AlignedDayOfWeekInYear (valid values 1 - 7): 9999
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.with((TemporalField) null, 102876L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      // Undeclared exception!
      try { 
        japaneseDate0.with((TemporalAdjuster) localTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: NanoOfDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      // Undeclared exception!
      try { 
        hijrahDate0.until((ChronoLocalDate) localDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported in ThreeTen backport
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.query((TemporalQuery<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Duration duration0 = Duration.ofMinutes(8L);
      // Undeclared exception!
      try { 
        hijrahDate0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Seconds not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      TemporalUnit temporalUnit0 = chronoField0.getRangeUnit();
      // Undeclared exception!
      try { 
        hijrahDate0.plus(664L, temporalUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // HalfDays not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.plus((-9223372036854775808L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.minus(1L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.lengthOfYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.isEqual((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.isBefore((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.isAfter((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDate.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
      // Undeclared exception!
      try { 
        hijrahDate0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: HourOfDay
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.BASIC_ISO_DATE;
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      Clock clock0 = Clock.systemDefaultZone();
      JapaneseDate japaneseDate0 = japaneseChronology0.dateNow(clock0);
      JapaneseDate japaneseDate1 = japaneseDate0.plusYears(9999);
      // Undeclared exception!
      try { 
        japaneseDate1.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Field Year cannot be printed as the value 12013 exceeds the maximum print width of 4
         //
         verifyException("org.threeten.bp.format.DateTimeFormatterBuilder$NumberPrinterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.compareTo((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.atTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // time must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      String string0 = dateTimeFormatter0.format(hijrahDate0);
      assertEquals("2014-W07-5", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      // Undeclared exception!
      try { 
        hijrahDate0.minus(0L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Hours not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(1719, 1719);
      // Undeclared exception!
      try { 
        LocalTime.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalTime from TemporalAccessor: Hijrah-umalqura AH 1723-11-07, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(2835, 2835);
      String string0 = hijrahDate0.toString();
      assertEquals("Hijrah-umalqura AH 2842-12-29", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = HijrahDate.now();
      boolean boolean0 = hijrahDate1.equals(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = hijrahDate0.plusMonths(2378L);
      boolean boolean0 = hijrahDate0.equals(hijrahDate1);
      assertFalse(hijrahDate1.equals((Object)hijrahDate0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.equals(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Clock clock0 = Clock.systemUTC();
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now(clock0);
      boolean boolean0 = hijrahDate0.isEqual(thaiBuddhistDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay((-2405L));
      boolean boolean0 = hijrahDate0.isEqual(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = hijrahDate0.plusMonths(2938L);
      boolean boolean0 = hijrahDate0.isBefore(hijrahDate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.isBefore(hijrahDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.date(9999, 1, 1);
      boolean boolean0 = japaneseDate0.isAfter(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.isAfter(hijrahDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      int int0 = hijrahDate0.compareTo((ChronoLocalDate) hijrahDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = hijrahDate0.plusYears((-353L));
      int int0 = hijrahDate0.compareTo((ChronoLocalDate) hijrahDate1);
      assertFalse(hijrahDate1.equals((Object)hijrahDate0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        ZoneOffset.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: Hijrah-umalqura AH 1435-04-13, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Clock clock0 = Clock.systemUTC();
      LocalDate localDate0 = LocalDate.now(clock0);
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      Object object0 = localDate0.query(temporalQuery0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        ZonedDateTime.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZonedDateTime from TemporalAccessor: Hijrah-umalqura AH 1435-04-13, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.ZonedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.isSupported((TemporalUnit) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(minguoChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.formatTo(hijrahDate0, pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: WeekBasedYear
         //
         verifyException("org.threeten.bp.temporal.IsoFields$Field$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.isSupported((TemporalField) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateYearDay(1, 1);
      int int0 = minguoDate0.lengthOfYear();
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      ThaiBuddhistDate thaiBuddhistDate0 = new ThaiBuddhistDate(localDate0);
      int int0 = thaiBuddhistDate0.lengthOfYear();
      assertEquals(365, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.MIN;
      LocalDate localDate0 = (LocalDate)ChronoLocalDate.from(localDateTime0);
      assertEquals(1, localDate0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = (HijrahDate)ChronoLocalDate.from(hijrahDate0);
      assertEquals(1, HijrahDate.MIN_VALUE_OF_ERA);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MAX;
      // Undeclared exception!
      try { 
        ChronoLocalDate.from(localTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDate: class org.threeten.bp.LocalTime
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Period period0 = Period.ZERO;
      HijrahDate hijrahDate1 = (HijrahDate)hijrahDate0.plus((TemporalAmount) period0);
      assertEquals(9999, HijrahDate.MAX_VALUE_OF_ERA);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Comparator<ChronoLocalDate> comparator0 = ChronoLocalDate.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.with((TemporalAdjuster) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = (HijrahDate)hijrahDate0.adjustInto(hijrahDate0);
      assertFalse(hijrahDate1.isLeapYear());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      String string0 = hijrahDate0.format(dateTimeFormatter0);
      assertEquals("2014-W07-5", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Duration duration0 = Duration.ofMinutes(9999);
      // Undeclared exception!
      try { 
        hijrahDate0.minus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Seconds not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      MinguoEra minguoEra0 = minguoDate0.getEra();
      assertEquals(MinguoEra.ROC, minguoEra0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      ThaiBuddhistDate thaiBuddhistDate0 = new ThaiBuddhistDate(localDate0);
      boolean boolean0 = thaiBuddhistDate0.isLeapYear();
      assertFalse(boolean0);
  }
}
