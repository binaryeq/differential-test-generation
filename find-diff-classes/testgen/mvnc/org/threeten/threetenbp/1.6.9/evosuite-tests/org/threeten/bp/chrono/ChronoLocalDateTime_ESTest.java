/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:45:21 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.threeten.bp.Clock;
import org.threeten.bp.Instant;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.LocalTime;
import org.threeten.bp.Period;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.ZonedDateTime;
import org.threeten.bp.chrono.ChronoLocalDate;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.ChronoLocalDateTimeImpl;
import org.threeten.bp.chrono.ChronoZonedDateTime;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.HijrahChronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.JapaneseDate;
import org.threeten.bp.chrono.MinguoDate;
import org.threeten.bp.chrono.ThaiBuddhistChronology;
import org.threeten.bp.chrono.ThaiBuddhistDate;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.format.FormatStyle;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.Temporal;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDateTime_ESTest extends ChronoLocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateEpochDay(934L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3835));
      LocalDateTime localDateTime0 = LocalDateTime.now((ZoneId) zoneOffset0);
      ZonedDateTime zonedDateTime0 = ZonedDateTime.ofStrict(localDateTime0, zoneOffset0, zoneOffset0);
      LocalTime localTime0 = zonedDateTime0.toLocalTime();
      ChronoLocalDateTime<ThaiBuddhistDate> chronoLocalDateTime0 = thaiBuddhistDate0.atTime(localTime0);
      chronoLocalDateTime0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(17115L);
      boolean boolean0 = chronoLocalDateTimeImpl1.equals(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
      assertFalse(chronoLocalDateTimeImpl0.equals((Object)chronoLocalDateTimeImpl1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(146097L);
      LocalDateTime localDateTime0 = localDate0.atStartOfDay();
      boolean boolean0 = chronoLocalDateTimeImpl1.isEqual(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl2 = chronoLocalDateTimeImpl1.plus((-1L), (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTimeImpl2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus((-6004L), (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isAfter(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalDate localDate0 = LocalDate.ofEpochDay(11L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.with((TemporalAdjuster) japaneseDate0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      String string0 = chronoLocalDateTimeImpl0.toString();
      assertEquals("Minguo ROC 103-02-14T12:00", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      LocalTime localTime1 = chronoLocalDateTimeImpl0.toLocalTime();
      assertEquals(86399, localTime1.toSecondOfDay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      LocalTime localTime1 = chronoLocalDateTimeImpl0.toLocalTime();
      assertEquals(0L, localTime1.toNanoOfDay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MAX;
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) thaiBuddhistDate0, localTime0);
      ChronoLocalDate chronoLocalDate0 = chronoLocalDateTimeImpl0.toLocalDate();
      assertSame(chronoLocalDate0, thaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime0 = minguoDate0.atTime(localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = chronoLocalDateTime0.toInstant(zoneOffset0);
      assertEquals(1392271200L, instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MAX;
      MinguoDate minguoDate0 = MinguoDate.now();
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime0 = minguoDate0.atTime(localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = chronoLocalDateTime0.toInstant(zoneOffset0);
      assertEquals(1392357599L, instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      Object object0 = chronoLocalDateTimeImpl0.query(temporalQuery0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      Object object0 = chronoLocalDateTimeImpl0.query(temporalQuery0);
      //  // Unstable assertion: assertEquals(ChronoUnit.MICROS, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.plus(3724L, (TemporalUnit) chronoUnit0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      Period period0 = Period.ofYears((-3799));
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.minus((TemporalAmount) period0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTime<ChronoLocalDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.minus((-1L), (TemporalUnit) chronoUnit0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.BASIC_ISO_DATE;
      String string0 = chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
      assertEquals("20140214", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(146097L);
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ChronoZonedDateTime<MinguoDate> chronoZonedDateTime0 = chronoLocalDateTimeImpl0.atZone(zoneOffset0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      Temporal temporal0 = chronoLocalDateTimeImpl0.adjustInto(chronoLocalDateTimeImpl0);
      assertNotNull(temporal0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 85522999999999L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoField chronoField0 = ChronoField.AMPM_OF_DAY;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, (-400L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for AmPmOfDay (valid values 0 - 1): -400
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalField) null, 29L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalAdjuster) thaiBuddhistDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Chrono mismatch, expected: Minguo, actual: ThaiBuddhist
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.toEpochSecond((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.query((TemporalQuery<MinguoDate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = hijrahChronology0.localDateTime(chronoLocalDateTimeImpl0);
      Period period0 = Period.ofDays((-2147298199));
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.plus((TemporalAmount) period0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid year of Hijrah Era
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus(16L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Forever not valid for chronology Minguo
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1116L);
      HijrahChronology hijrahChronology0 = hijrahDate0.getChronology();
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = hijrahChronology0.localDateTime(chronoLocalDateTimeImpl0);
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.plus((-1215L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      Period period0 = Period.ofYears((-2147480172));
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus((TemporalAmount) period0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid int value for Year: 2147482186
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime0 = minguoDate0.atTime(localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.minus(86399999900999L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid int value for Year: -86399999900996986
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus(898L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.isBefore((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.isAfter((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MAX;
      Clock clock0 = Clock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now(clock0);
      ChronoLocalDateTimeImpl<ThaiBuddhistDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(thaiBuddhistDate0, localTime0);
      FormatStyle formatStyle0 = FormatStyle.LONG;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedDateTime(formatStyle0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to extract value: class org.threeten.bp.format.DateTimePrintContext$1
         //
         verifyException("org.threeten.bp.format.DateTimePrintContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.atZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.adjustInto(minguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: NanoOfDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ChronoField chronoField0 = ChronoField.MILLI_OF_DAY;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 68L);
      int int0 = chronoLocalDateTime0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      Chronology chronology0 = chronoLocalDateTimeImpl0.getChronology();
      assertEquals("roc", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      LocalDateTime localDateTime0 = LocalDateTime.MIN;
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      LocalDateTime localDateTime0 = localDate0.atStartOfDay();
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(localDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(146097L);
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus((-16L), (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isBefore(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 2L);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      LocalTime localTime1 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime1);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus(6L, (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus(816L, (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isAfter(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl1.equals(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds((-730L));
      boolean boolean0 = chronoLocalDateTimeImpl1.equals(chronoLocalDateTimeImpl0);
      assertFalse(chronoLocalDateTimeImpl0.equals((Object)chronoLocalDateTimeImpl1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIN;
      LocalDate localDate0 = LocalDate.ofEpochDay(146097L);
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      LocalDateTime localDateTime0 = localDate0.atStartOfDay();
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) localDateTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.RFC_1123_DATE_TIME;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        ZoneId.from(chronoLocalDateTimeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Minguo ROC 103-02-14T23:59:59.999999999, type org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTime<MinguoDate> chronoZonedDateTime0 = chronoLocalDateTimeImpl0.atZone(zoneId0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MAX;
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(localTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDateTime: class org.threeten.bp.LocalTime
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoLocalDateTime<?> chronoLocalDateTime0 = ChronoLocalDateTime.from(chronoLocalDateTimeImpl0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(minguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ChronoLocalDateTime from TemporalAccessor: class org.threeten.bp.chrono.MinguoDate
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparator<ChronoLocalDateTime<?>> comparator0 = ChronoLocalDateTime.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.toInstant((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.adjustInto((Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      Period period0 = Period.of(1204, 1204, 1204);
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.plus((TemporalAmount) period0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        ZoneOffset.from(chronoLocalDateTimeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: Minguo ROC 103-02-14T20:21:21.320, type org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      Chronology chronology0 = Chronology.from(chronoLocalDateTimeImpl0);
      assertEquals("Minguo", chronology0.getId());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      long long0 = chronoLocalDateTimeImpl0.toEpochSecond(zoneOffset0);
      assertEquals(1392487199L, long0);
  }
}
