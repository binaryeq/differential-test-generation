* EvoSuite 1.2.0
* Going to generate test cases for class: org.threeten.bp.chrono.ChronoLocalDate
* Starting Client-0
* Connecting to master process on port 11767
* Analyzing classpath: 
  - /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/org/threeten/threetenbp/1.6.9/threetenbp-1.6.9.jar
  - t/dependency/jcommander-1.27.jar
  - t/dependency/testng-6.8.21.jar
* Finished analyzing classpath
* Generating tests for class org.threeten.bp.chrono.ChronoLocalDate
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 439
* Using seed 1729723350789
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 224 / 439
[MASTER] 11:42:33.613 [logback-1] WARN  TestCluster - Failed to check cache for org.threeten.bp.temporal.TemporalQuery<R> : Type points to itself
[Progress:>                             0%] [Cov:=======>                           22%][Progress:>                             1%] [Cov:========>                          25%][Progress:>                             3%] [Cov:==========>                        29%][Progress:>                             3%] [Cov:===========>                       33%][Progress:>                             3%] [Cov:============>                      35%][Progress:=>                            5%] [Cov:==============>                    41%][MASTER] 11:42:36.643 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.threeten.bp.chrono.ThaiBuddhistChronology canUseFunctionalMocks=false, canBeMocked: true
[Progress:=>                            5%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:=================>                 51%][Progress:=>                            6%] [Cov:=================>                 49%][Progress:=>                            6%] [Cov:=================>                 49%][Progress:=>                            6%] [Cov:=================>                 49%][Progress:==>                           8%] [Cov:=================>                 51%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:===================>               56%][Progress:==>                           8%] [Cov:====================>              58%][Progress:==>                           8%] [Cov:=====================>             60%][Progress:==>                           8%] [Cov:====================>              59%][Progress:===>                          10%] [Cov:=====================>             61%][Progress:===>                          10%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            64%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          11%] [Cov:=======================>           66%][Progress:===>                          13%] [Cov:=======================>           67%][Progress:===>                          13%] [Cov:=======================>           68%][Progress:===>                          13%] [Cov:========================>          71%][Progress:===>                          13%] [Cov:========================>          71%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:========================>          70%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        18%] [Cov:=========================>         73%][Progress:=====>                        18%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:===========================>       78%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    30%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][Progress:=========>                    33%] [Cov:============================>      80%][MASTER] 11:42:54.211 [logback-1] WARN  TestCluster - Failed to check cache for org.threeten.bp.chrono.ChronoZonedDateTimeImpl<D> : Type points to itself
[Progress:==========>                   35%] [Cov:============================>      80%][Progress:============>                 40%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:============================>      80%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%]
* Search finished after 61s and 142 generations, 46823 statements, best individual has fitness: 77.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 64
* Number of covered goals: 60
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 65
* Number of covered goals: 57
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 129
* Number of covered goals: 125
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 62%
* Total number of goals: 60
* Number of covered goals: 37
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 65
* Number of covered goals: 57
* Generated 81 tests with total length 241
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 73%
* Compiling and checking tests
[MASTER] 11:43:55.467 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 11:43:55.468 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Clock clock0 = Clock.systemUTC();
LocalDate localDate0 = LocalDate.now(clock0);
TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
LocalDate localDate1 = (LocalDate)localDate0.query(temporalQuery0);
assertFalse(localDate1.isLeapYear());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'ChronoLocalDate_ESTest' to evosuite-tests
* Done!

* Computation finished
