/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:38:36 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.threeten.bp.Clock;
import org.threeten.bp.Duration;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalTime;
import org.threeten.bp.MonthDay;
import org.threeten.bp.Period;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.chrono.ChronoLocalDate;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.Era;
import org.threeten.bp.chrono.HijrahChronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.IsoChronology;
import org.threeten.bp.chrono.IsoEra;
import org.threeten.bp.chrono.JapaneseChronology;
import org.threeten.bp.chrono.JapaneseDate;
import org.threeten.bp.chrono.JapaneseEra;
import org.threeten.bp.chrono.MinguoChronology;
import org.threeten.bp.chrono.MinguoDate;
import org.threeten.bp.chrono.ThaiBuddhistChronology;
import org.threeten.bp.chrono.ThaiBuddhistDate;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDate_ESTest extends ChronoLocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1346L);
      // Undeclared exception!
      try { 
        ZoneId.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Hijrah-umalqura AH 1393-08-10, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(24L);
      // Undeclared exception!
      try { 
        ZoneId.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Hijrah-umalqura AH 1389-11-17, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.equals(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      JapaneseEra japaneseEra0 = JapaneseEra.TAISHO;
      LocalDate localDate1 = japaneseEra0.startDate();
      boolean boolean0 = minguoDate0.isEqual(localDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = MinguoDate.now();
      boolean boolean0 = localDate0.isAfter(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      Period period0 = (Period)localDate0.until((ChronoLocalDate) minguoDate0);
      assertEquals(0, period0.getYears());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      String string0 = hijrahDate0.toString();
      assertEquals("Hijrah-umalqura AH 1435-04-13", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MAX;
      long long0 = localDate0.toEpochDay();
      assertEquals(365241780471L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      long long0 = localDate0.toEpochDay();
      assertEquals((-35428L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      Object object0 = localDate0.query(temporalQuery0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      ChronoField chronoField0 = ChronoField.NANO_OF_DAY;
      TemporalQuery<ChronoField> temporalQuery0 = (TemporalQuery<ChronoField>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      ChronoField chronoField1 = localDate0.query(temporalQuery0);
      //  // Unstable assertion: assertEquals(ChronoField.NANO_OF_DAY, chronoField1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      Period period0 = Period.of((-1629), 1717986918, 1717986918);
      ChronoLocalDate chronoLocalDate0 = localDate0.plus((TemporalAmount) period0);
      assertTrue(chronoLocalDate0.isLeapYear());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      LocalDate localDate1 = (LocalDate)localDate0.plus((-1L), (TemporalUnit) chronoUnit0);
      assertEquals(1872, localDate1.getYear());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      MinguoDate minguoDate0 = MinguoDate.now((ZoneId) zoneOffset0);
      Duration duration0 = Duration.ZERO;
      ChronoLocalDate chronoLocalDate0 = minguoDate0.minus((TemporalAmount) duration0);
      assertEquals(28, chronoLocalDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      ChronoLocalDate chronoLocalDate0 = minguoDate0.minus(26L, (TemporalUnit) chronoUnit0);
      assertEquals((-130391L), chronoLocalDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      int int0 = localDate0.lengthOfMonth();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      boolean boolean0 = localDate0.isSupported((TemporalUnit) chronoUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      boolean boolean0 = localDate0.isSupported((TemporalField) chronoField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(2940L);
      boolean boolean0 = hijrahDate0.isLeapYear();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateNow();
      boolean boolean0 = thaiBuddhistDate0.isBefore(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      Chronology chronology0 = minguoDate0.getChronology();
      assertEquals("roc", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      String string0 = localDate0.format(dateTimeFormatter0);
      assertEquals("1873-W01-3", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Locale locale0 = Locale.forLanguageTag("");
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      String string0 = hijrahDate0.format(dateTimeFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      int int0 = localDate0.compareTo((ChronoLocalDate) localDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = MinguoDate.now();
      int int0 = minguoDate0.compareTo((ChronoLocalDate) localDate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay((-2199L));
      LocalDate localDate0 = LocalDate.MAX;
      int int0 = hijrahDate0.compareTo((ChronoLocalDate) localDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTime<?> chronoLocalDateTime0 = localDate0.atTime(localTime0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      LocalDate localDate1 = (LocalDate)localDate0.adjustInto(localDate0);
      assertEquals(31, localDate1.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = LocalDate.ofEpochDay(315569520L);
      ThaiBuddhistDate thaiBuddhistDate0 = new ThaiBuddhistDate(localDate0);
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.with((TemporalField) chronoField0, 315569520L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoField chronoField0 = ChronoField.MINUTE_OF_HOUR;
      // Undeclared exception!
      try { 
        hijrahDate0.with((TemporalField) chronoField0, 4491L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for MinuteOfHour (valid values 0 - 59): 4491
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      // Undeclared exception!
      try { 
        minguoDate0.with((TemporalField) null, (long) (-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.MinguoDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      LocalTime localTime0 = LocalTime.ofSecondOfDay(10L);
      // Undeclared exception!
      try { 
        localDate0.with((TemporalAdjuster) localTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: NanoOfDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.dateNow();
      // Undeclared exception!
      try { 
        japaneseDate0.with((TemporalAdjuster) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      JapaneseDate japaneseDate0 = JapaneseDate.from(hijrahDate0);
      // Undeclared exception!
      try { 
        hijrahDate0.until((ChronoLocalDate) japaneseDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported in ThreeTen backport
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Duration duration0 = Duration.ofHours((-365243219162L));
      // Undeclared exception!
      try { 
        localDate0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Seconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MAX;
      ChronoField chronoField0 = ChronoField.NANO_OF_SECOND;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      // Undeclared exception!
      try { 
        localDate0.plus(10L, temporalUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Nanos
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      // Undeclared exception!
      try { 
        hijrahDate0.plus(31556889864403199L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Minutes not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MIN;
      // Undeclared exception!
      try { 
        localDate0.plus((-365243219162L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      Duration duration0 = Duration.ofNanos((-4527L));
      // Undeclared exception!
      try { 
        localDate0.minus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Seconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      Clock clock0 = Clock.systemUTC();
      MinguoDate minguoDate0 = minguoChronology0.dateNow(clock0);
      // Undeclared exception!
      try { 
        minguoDate0.minus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      ChronoField chronoField0 = ChronoField.MILLI_OF_SECOND;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      // Undeclared exception!
      try { 
        localDate0.minus(804L, temporalUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Millis
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      // Undeclared exception!
      try { 
        localDate0.minus(1774L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      JapaneseDate japaneseDate0 = JapaneseDate.from(hijrahDate0);
      // Undeclared exception!
      try { 
        japaneseDate0.lengthOfYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      // Undeclared exception!
      try { 
        minguoDate0.isEqual((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDate.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.RFC_1123_DATE_TIME;
      // Undeclared exception!
      try { 
        hijrahDate0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: HourOfDay
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(24L);
      // Undeclared exception!
      try { 
        hijrahDate0.compareTo((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      // Undeclared exception!
      try { 
        localDate0.atTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // time must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      int int0 = localDate0.compareTo((ChronoLocalDate) minguoDate0);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      String string0 = dateTimeFormatter0.format(localDate0);
      assertEquals("1873-W01-3", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      boolean boolean0 = localDate0.isSupported((TemporalField) chronoField0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      ChronoLocalDate chronoLocalDate0 = localDate0.with((TemporalAdjuster) minguoDate0);
      assertFalse(chronoLocalDate0.isLeapYear());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      boolean boolean0 = minguoDate0.isLeapYear();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      // Undeclared exception!
      try { 
        minguoDate0.minus((-404L), (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Seconds not valid for chronology Minguo
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(2940L);
      // Undeclared exception!
      try { 
        ZoneId.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Hijrah-umalqura AH 1398-02-09, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1L);
      // Undeclared exception!
      try { 
        ZoneId.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Hijrah-umalqura AH 1389-10-23, type org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.equals(hijrahDate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(2940L);
      Object object0 = new Object();
      boolean boolean0 = hijrahDate0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      HijrahDate hijrahDate0 = HijrahDate.of(localDate0);
      boolean boolean0 = hijrahDate0.equals(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      boolean boolean0 = minguoDate0.isEqual(localDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = MinguoDate.now();
      boolean boolean0 = minguoDate0.isEqual(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(11);
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now((ZoneId) zoneOffset0);
      Period period0 = Period.ofMonths(11);
      ThaiBuddhistDate thaiBuddhistDate1 = thaiBuddhistDate0.plus((TemporalAmount) period0);
      boolean boolean0 = localDate0.isBefore(thaiBuddhistDate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      ThaiBuddhistDate thaiBuddhistDate0 = new ThaiBuddhistDate(localDate0);
      boolean boolean0 = localDate0.isBefore(thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MAX;
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      boolean boolean0 = localDate0.isAfter(thaiBuddhistDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      boolean boolean0 = localDate0.isAfter(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.equals(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      JapaneseDate japaneseDate0 = JapaneseDate.now(clock0);
      // Undeclared exception!
      try { 
        ZoneOffset.from(japaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: Japanese Heisei 26-02-14, type org.threeten.bp.chrono.JapaneseDate
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      // Undeclared exception!
      try { 
        localDate0.query((TemporalQuery<ChronoField>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = LocalDate.now();
      JapaneseDate japaneseDate0 = new JapaneseDate(localDate0);
      // Undeclared exception!
      try { 
        isoChronology0.localDateTime(japaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: Japanese Heisei 26-02-14, type org.threeten.bp.chrono.JapaneseDate
         //
         verifyException("org.threeten.bp.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      boolean boolean0 = localDate0.isSupported((TemporalUnit) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      LocalDate localDate0 = LocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      JapaneseDate japaneseDate0 = JapaneseDate.now((ZoneId) zoneOffset0);
      JapaneseChronology japaneseChronology0 = japaneseDate0.getChronology();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(japaneseChronology0);
      // Undeclared exception!
      try { 
        localDate0.format(dateTimeFormatter1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: WeekBasedYear
         //
         verifyException("org.threeten.bp.temporal.IsoFields$Field$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      boolean boolean0 = localDate0.isSupported((TemporalField) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      IsoChronology isoChronology0 = localDate0.getChronology();
      LocalDate localDate1 = isoChronology0.dateEpochDay((-2034L));
      MinguoDate minguoDate0 = new MinguoDate(localDate1);
      int int0 = minguoDate0.lengthOfYear();
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(2940L);
      Era era0 = hijrahDate0.getEra();
      // Undeclared exception!
      try { 
        ChronoLocalDate.from(era0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDate: class org.threeten.bp.chrono.HijrahEra
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      ChronoLocalDate chronoLocalDate0 = ChronoLocalDate.from(localDate0);
      assertSame(localDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        ChronoLocalDate.from(monthDay0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: --02-14, type org.threeten.bp.MonthDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(2940L);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Duration duration0 = Duration.of(86400000000000L, chronoUnit0);
      // Undeclared exception!
      try { 
        hijrahDate0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Seconds not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Comparator<ChronoLocalDate> comparator0 = ChronoLocalDate.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Duration duration0 = Duration.ofHours(1);
      // Undeclared exception!
      try { 
        hijrahDate0.minus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Seconds not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Era era0 = localDate0.getEra();
      assertEquals(IsoEra.CE, era0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.date((TemporalAccessor) localDate0);
      hijrahDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      MinguoDate minguoDate0 = new MinguoDate(localDate0);
      int int0 = minguoDate0.lengthOfYear();
      assertEquals(365, int0);
  }
}
