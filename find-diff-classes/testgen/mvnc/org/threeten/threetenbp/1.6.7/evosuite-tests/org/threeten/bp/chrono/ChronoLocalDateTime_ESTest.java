/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:40:00 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.threeten.bp.Instant;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.LocalTime;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.Period;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.ZonedDateTime;
import org.threeten.bp.chrono.ChronoLocalDate;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.ChronoLocalDateTimeImpl;
import org.threeten.bp.chrono.ChronoPeriod;
import org.threeten.bp.chrono.ChronoZonedDateTime;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.HijrahChronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.MinguoChronology;
import org.threeten.bp.chrono.MinguoDate;
import org.threeten.bp.chrono.ThaiBuddhistDate;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.format.FormatStyle;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.Temporal;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDateTime_ESTest extends ChronoLocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(1913L);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(chronoLocalDateTimeImpl1);
      assertFalse(chronoLocalDateTimeImpl1.equals((Object)chronoLocalDateTimeImpl0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus(566L, (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isEqual(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(13, 13);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(566L);
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoField chronoField0 = ChronoField.HOUR_OF_DAY;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, (long) 5);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(29L);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime0 = minguoChronology0.localDateTime(chronoLocalDateTimeImpl0);
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime1 = chronoLocalDateTime0.with((TemporalField) chronoField0, 0L);
      assertSame(chronoLocalDateTime0, chronoLocalDateTime1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalDateTime localDateTime0 = LocalDateTime.MIN;
      ChronoLocalDateTime<LocalDate> chronoLocalDateTime0 = localDateTime0.with((TemporalAdjuster) localTime0);
      assertSame(localDateTime0, chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      LocalTime localTime1 = chronoLocalDateTimeImpl0.toLocalTime();
      assertEquals(86399, localTime1.toSecondOfDay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      LocalTime localTime1 = chronoLocalDateTimeImpl0.toLocalTime();
      assertEquals(0, localTime1.getNano());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDate chronoLocalDate0 = chronoLocalDateTimeImpl0.toLocalDate();
      assertSame(minguoDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = chronoLocalDateTimeImpl0.toInstant(zoneOffset0);
      assertEquals(1392357599L, instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus((-1543L), (TemporalUnit) chronoUnit0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-379));
      Instant instant0 = chronoLocalDateTimeImpl1.toInstant(zoneOffset0);
      assertEquals((-47300006921L), instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateEpochDay((-435L));
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = hijrahDate0.atTime(localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      long long0 = chronoLocalDateTime0.toEpochSecond(zoneOffset0);
      assertEquals((-37575519L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      ChronoLocalDateTime<ChronoLocalDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.plus(2592L, (TemporalUnit) chronoUnit0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE;
      String string0 = chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      Locale locale0 = new Locale("", "", "}>CzdkzC*&I5f");
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      String string0 = chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(31556952004L);
      int int0 = chronoLocalDateTimeImpl1.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ChronoZonedDateTime<ChronoLocalDate> chronoZonedDateTime0 = chronoLocalDateTimeImpl0.atZone(zoneOffset0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      OffsetDateTime offsetDateTime0 = OffsetDateTime.now((ZoneId) zoneOffset0);
      Temporal temporal0 = chronoLocalDateTimeImpl0.adjustInto(offsetDateTime0);
      assertFalse(temporal0.equals((Object)offsetDateTime0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      MinguoChronology minguoChronology0 = minguoDate0.getChronology();
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl1 = minguoChronology0.ensureChronoLocalDateTime((Temporal) chronoLocalDateTimeImpl0);
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl1.with((TemporalField) chronoField0, (long) (-2147483644));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: InstantSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoField chronoField0 = ChronoField.NANO_OF_SECOND;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 73281320000000L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for NanoOfSecond (valid values 0 - 999999999): 73281320000000
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalField) null, 82726000000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      OffsetDateTime offsetDateTime0 = OffsetDateTime.MAX;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalAdjuster) offsetDateTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(13, 13);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalAdjuster) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoLocalDateTimeImpl<ThaiBuddhistDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(thaiBuddhistDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl1.with((TemporalAdjuster) chronoLocalDateTimeImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Chrono mismatch, required: ThaiBuddhist, supplied: Minguo
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.MAX;
      // Undeclared exception!
      try { 
        localDateTime0.toEpochSecond((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.query((TemporalQuery<ChronoLocalDateTimeImpl<ChronoLocalDate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalDateTime localDateTime0 = LocalDateTime.MIN;
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.from(minguoDate0);
      ChronoPeriod chronoPeriod0 = thaiBuddhistDate0.until((ChronoLocalDate) thaiBuddhistDate0);
      // Undeclared exception!
      try { 
        localDateTime0.plus((TemporalAmount) chronoPeriod0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid chronology, required: ThaiBuddhist, but was: ISO
         //
         verifyException("org.threeten.bp.chrono.ChronoPeriodImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      LocalDateTime localDateTime0 = LocalDateTime.from(chronoLocalDateTimeImpl0);
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      // Undeclared exception!
      try { 
        localDateTime0.plus((-508L), (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for Era (valid values 0 - 1): -507
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus(925L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      Period period0 = Period.ofDays((-202));
      Period period1 = period0.withYears(2146941764);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus((TemporalAmount) period1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid int value for Year: -2146939750
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus(73282320000000L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid int value for Year: -73282319999997986
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus((-1875L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.isBefore((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.isAfter((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.atZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(3002L);
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl1);
      assertFalse(chronoLocalDateTimeImpl1.equals((Object)chronoLocalDateTimeImpl0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(1069L);
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE;
      String string0 = dateTimeFormatter0.format(chronoLocalDateTimeImpl0);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        ZoneOffset.from(chronoLocalDateTimeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: Minguo ROC 103-02-14T23:59:59.999999999, type org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) thaiBuddhistDate0, localTime0);
      Chronology chronology0 = chronoLocalDateTimeImpl0.getChronology();
      assertEquals("buddhist", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus((-3517L), (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isEqual(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds((-2405L));
      boolean boolean0 = chronoLocalDateTimeImpl1.isEqual(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      LocalTime localTime1 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime1);
      boolean boolean0 = chronoLocalDateTimeImpl1.isBefore(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus(1541L, (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isBefore(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds((-76L));
      boolean boolean0 = chronoLocalDateTimeImpl1.isBefore(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(950L);
      boolean boolean0 = chronoLocalDateTimeImpl1.isAfter(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(47569000000000L);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(13);
      boolean boolean0 = chronoLocalDateTimeImpl1.isAfter(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds((-508L));
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(chronoLocalDateTimeImpl1);
      assertFalse(chronoLocalDateTimeImpl1.equals((Object)chronoLocalDateTimeImpl0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      TemporalQuery<ChronoLocalDateTimeImpl<ChronoLocalDate>> temporalQuery0 = (TemporalQuery<ChronoLocalDateTimeImpl<ChronoLocalDate>>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.query(temporalQuery0);
      assertNull(chronoLocalDateTimeImpl1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE;
      ZonedDateTime zonedDateTime0 = ZonedDateTime.now();
      ZoneOffset zoneOffset0 = zonedDateTime0.getOffset();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(zoneOffset0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format(dateTimeFormatter1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(5, 5);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        ZoneId.from(chronoLocalDateTimeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Minguo ROC 103-02-14T05:05, type org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedTime(formatStyle0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to extract value: class org.threeten.bp.format.DateTimePrintContext$1
         //
         verifyException("org.threeten.bp.format.DateTimePrintContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(minguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ChronoLocalDateTime from TemporalAccessor: class org.threeten.bp.chrono.MinguoDate
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTime<?> chronoLocalDateTime0 = ChronoLocalDateTime.from(chronoLocalDateTimeImpl0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(localTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDateTime: class org.threeten.bp.LocalTime
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      Period period0 = Period.ofDays((-202));
      ChronoLocalDateTime<ChronoLocalDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.minus((TemporalAmount) period0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<ChronoLocalDateTime<?>> comparator0 = ChronoLocalDateTime.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.toInstant((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.adjustInto(minguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: NanoOfDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ThaiBuddhistDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(thaiBuddhistDate0, localTime0);
      Period period0 = Period.ofMonths(84);
      ChronoLocalDateTime<ThaiBuddhistDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.plus((TemporalAmount) period0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      String string0 = chronoLocalDateTimeImpl0.toString();
      assertEquals("Minguo ROC 103-02-14T12:00", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      ChronoLocalDateTime<ChronoLocalDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.minus(84L, (TemporalUnit) chronoUnit0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.of(13, 13);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(chronoLocalDateTimeImpl1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(3177, 2803);
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = hijrahDate0.atTime(localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      long long0 = chronoLocalDateTime0.toEpochSecond(zoneOffset0);
      assertEquals(54961035681L, long0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<ChronoLocalDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of((ChronoLocalDate) minguoDate0, localTime0);
      chronoLocalDateTimeImpl0.hashCode();
  }
}
