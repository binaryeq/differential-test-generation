/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:36:06 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.threeten.bp.Clock;
import org.threeten.bp.Duration;
import org.threeten.bp.Instant;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.LocalTime;
import org.threeten.bp.Period;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.chrono.ChronoDateImpl;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.ChronoLocalDateTimeImpl;
import org.threeten.bp.chrono.ChronoZonedDateTime;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.HijrahChronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.JapaneseChronology;
import org.threeten.bp.chrono.JapaneseDate;
import org.threeten.bp.chrono.ThaiBuddhistChronology;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.Temporal;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDateTime_ESTest extends ChronoLocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoDateImpl<HijrahDate> chronoDateImpl0 = hijrahDate0.minusYears(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalAdjuster) chronoDateImpl0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1315L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1315L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(9999);
      boolean boolean0 = chronoLocalDateTimeImpl1.isEqual(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(9999);
      boolean boolean0 = chronoLocalDateTimeImpl1.isBefore(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(9999);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, (long) 1);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(chronoLocalDateTimeImpl1);
      assertFalse(boolean0);
      assertFalse(chronoLocalDateTimeImpl1.equals((Object)chronoLocalDateTimeImpl0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 7L);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.with((TemporalAdjuster) hijrahDate0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      String string0 = chronoLocalDateTimeImpl0.toString();
      assertEquals("Hijrah-umalqura AH 1435-04-13T00:00", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus(367L, (TemporalUnit) chronoUnit0);
      LocalTime localTime1 = chronoLocalDateTimeImpl1.toLocalTime();
      assertEquals(1291367000000L, localTime1.toNanoOfDay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      LocalTime localTime1 = chronoLocalDateTimeImpl0.toLocalTime();
      assertEquals(0, localTime1.getNano());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(9999);
      LocalTime localTime1 = chronoLocalDateTimeImpl1.toLocalTime();
      assertNotSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      HijrahDate hijrahDate1 = chronoLocalDateTimeImpl0.toLocalDate();
      assertEquals(1, HijrahDate.MIN_VALUE_OF_ERA);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Instant instant0 = chronoLocalDateTimeImpl0.toInstant(zoneOffset0);
      assertEquals(1392409281L, instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Instant instant0 = chronoLocalDateTimeImpl0.toInstant(zoneOffset0);
      assertEquals(1392336000L, instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      long long0 = chronoLocalDateTimeImpl0.toEpochSecond(zoneOffset0);
      assertEquals(1392271200L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      TemporalQuery<ThaiBuddhistChronology> temporalQuery0 = (TemporalQuery<ThaiBuddhistChronology>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      ThaiBuddhistChronology thaiBuddhistChronology0 = chronoLocalDateTimeImpl0.query(temporalQuery0);
      assertNull(thaiBuddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      TemporalQuery<ChronoLocalDateTimeImpl<HijrahDate>> temporalQuery0 = (TemporalQuery<ChronoLocalDateTimeImpl<HijrahDate>>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.query(temporalQuery0);
      //  // Unstable assertion: assertSame(chronoLocalDateTimeImpl1, chronoLocalDateTimeImpl0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      Period period0 = Period.ofWeeks(9999);
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.plus((TemporalAmount) period0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.plus((-1038L), (TemporalUnit) chronoUnit0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      String string0 = chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.minus(1291L, (TemporalUnit) chronoUnit0);
      int int0 = chronoLocalDateTimeImpl0.compareTo(chronoLocalDateTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      HijrahDate hijrahDate0 = hijrahChronology0.dateNow((ZoneId) zoneOffset0);
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoZonedDateTime<HijrahDate> chronoZonedDateTime0 = chronoLocalDateTimeImpl0.atZone(zoneOffset0);
      Temporal temporal0 = chronoLocalDateTimeImpl0.adjustInto(chronoZonedDateTime0);
      assertNotNull(temporal0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, (long) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: InstantSeconds
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.MAX;
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      // Undeclared exception!
      try { 
        localDateTime0.with((TemporalField) chronoField0, 86399999999999L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for OffsetSeconds (valid values -64800 - 64800): 86399999999999
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      LocalTime localTime0 = LocalTime.now((ZoneId) zoneOffset0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalAdjuster) zoneOffset0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = japaneseChronology0.localDateTime(chronoLocalDateTimeImpl0);
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.with((TemporalAdjuster) chronoLocalDateTimeImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Chrono mismatch, required: Japanese, supplied: Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.toInstant((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.MIN;
      // Undeclared exception!
      try { 
        localDateTime0.query((TemporalQuery<ChronoLocalDateTimeImpl<LocalDate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      Period period0 = Period.of(2147338899, 63, 63);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus((TemporalAmount) period0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid year of Hijrah Era
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus((-456196L), (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid year of Hijrah Era
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus((-4271L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.plus(9223372036854775807L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775807 * 1000
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1315L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      Period period0 = Period.ofMonths((-1840700268));
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus((TemporalAmount) period0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid year of Hijrah Era
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalDate localDate0 = LocalDate.MIN;
      LocalDateTime localDateTime0 = LocalDateTime.of(localDate0, localTime0);
      // Undeclared exception!
      try { 
        localDateTime0.minus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.minus((long) 9999, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.of(1, 1);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.isEqual((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.isBefore((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.isAfter((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Clock clock0 = Clock.systemUTC();
      HijrahDate hijrahDate0 = HijrahDate.now(clock0);
      LocalTime localTime0 = LocalTime.NOON;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      JapaneseDate japaneseDate0 = JapaneseDate.from(chronoLocalDateTimeImpl0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl2 = chronoLocalDateTimeImpl1.plus(9223372036854775807L, (TemporalUnit) chronoUnit0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(hijrahChronology0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl2.format(dateTimeFormatter1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid year of Hijrah Era
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.atZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 0L);
      int int0 = chronoLocalDateTimeImpl1.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl0);
      assertEquals((-1), int0);
      assertFalse(chronoLocalDateTimeImpl0.equals((Object)chronoLocalDateTimeImpl1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.toEpochSecond((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      Chronology chronology0 = chronoLocalDateTimeImpl0.getChronology();
      assertEquals("islamic-umalqura", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      JapaneseDate japaneseDate0 = JapaneseDate.from(chronoLocalDateTimeImpl0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      Object object0 = new Object();
      boolean boolean0 = chronoLocalDateTimeImpl1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.equals(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 0L);
      boolean boolean0 = chronoLocalDateTimeImpl1.isEqual(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isEqual(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 0L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl2 = chronoLocalDateTimeImpl0.with((TemporalAdjuster) chronoLocalDateTimeImpl0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isEqual(chronoLocalDateTimeImpl2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, (long) 9999);
      boolean boolean0 = chronoLocalDateTimeImpl1.isBefore(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      Clock clock0 = Clock.systemDefaultZone();
      HijrahDate hijrahDate1 = hijrahChronology0.dateNow(clock0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(hijrahDate1, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isBefore(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds(86400L);
      boolean boolean0 = chronoLocalDateTimeImpl0.isBefore(chronoLocalDateTimeImpl1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 0L);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plusSeconds((-1458L));
      boolean boolean0 = chronoLocalDateTimeImpl1.isAfter(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl0.isAfter(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoField chronoField0 = ChronoField.YEAR;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.plus((long) 1, temporalUnit0);
      boolean boolean0 = chronoLocalDateTimeImpl1.isAfter(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 0L);
      boolean boolean0 = chronoLocalDateTimeImpl1.equals(chronoLocalDateTimeImpl0);
      assertFalse(boolean0);
      assertFalse(chronoLocalDateTimeImpl0.equals((Object)chronoLocalDateTimeImpl1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      HijrahChronology hijrahChronology0 = hijrahDate0.getChronology();
      Clock clock0 = Clock.systemUTC();
      HijrahDate hijrahDate1 = hijrahChronology0.dateNow(clock0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(hijrahDate1, localTime0);
      int int0 = chronoLocalDateTimeImpl0.compareTo((ChronoLocalDateTime<?>) chronoLocalDateTimeImpl1);
      assertEquals((-1), int0);
      assertFalse(chronoLocalDateTimeImpl1.equals((Object)chronoLocalDateTimeImpl0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      HijrahChronology hijrahChronology0 = (HijrahChronology)Chronology.from(chronoLocalDateTimeImpl0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = hijrahChronology0.ensureChronoLocalDateTime((Temporal) chronoLocalDateTimeImpl0);
      // Undeclared exception!
      try { 
        ZoneId.from(chronoLocalDateTimeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Hijrah-umalqura AH 1435-04-13T00:00, type org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTime<HijrahDate> chronoZonedDateTime0 = chronoLocalDateTimeImpl0.atZone(zoneId0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(instant0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDateTime: class org.threeten.bp.Instant
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.ofSecondOfDay(9999);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTime<?> chronoLocalDateTime0 = ChronoLocalDateTime.from(chronoLocalDateTimeImpl0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ChronoLocalDateTime from TemporalAccessor: class org.threeten.bp.chrono.HijrahDate
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      Duration duration0 = Duration.ZERO;
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = chronoLocalDateTimeImpl0.minus((TemporalAmount) duration0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Comparator<ChronoLocalDateTime<?>> comparator0 = ChronoLocalDateTime.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      JapaneseDate japaneseDate0 = JapaneseDate.from(chronoLocalDateTimeImpl0);
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE;
      String string0 = chronoLocalDateTimeImpl1.format(dateTimeFormatter0);
      assertEquals("1973-07-15", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.adjustInto(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: NanoOfDay
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      // Undeclared exception!
      try { 
        ZoneOffset.from(chronoLocalDateTimeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: Hijrah-umalqura AH 1393-06-14T00:21:31, type org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateYearDay(0, 0);
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = hijrahDate0.atTime(localTime0);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.minus((long) 9999, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid year of Hijrah Era
         //
         verifyException("org.threeten.bp.chrono.HijrahDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay(1291L);
      LocalTime localTime0 = LocalTime.ofSecondOfDay(1291L);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl1 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      boolean boolean0 = chronoLocalDateTimeImpl1.equals(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.MIN;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = localDateTime0.toInstant(zoneOffset0);
      assertEquals((-31557014135661600L), instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTimeImpl<HijrahDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(hijrahDate0, localTime0);
      chronoLocalDateTimeImpl0.hashCode();
  }
}
