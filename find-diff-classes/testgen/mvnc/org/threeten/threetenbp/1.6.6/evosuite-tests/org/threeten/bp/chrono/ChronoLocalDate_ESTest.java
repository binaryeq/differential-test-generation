/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:34:43 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;
import org.threeten.bp.Clock;
import org.threeten.bp.Duration;
import org.threeten.bp.Instant;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalTime;
import org.threeten.bp.MonthDay;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.OffsetTime;
import org.threeten.bp.Period;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.chrono.ChronoDateImpl;
import org.threeten.bp.chrono.ChronoLocalDate;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.ChronoPeriod;
import org.threeten.bp.chrono.ChronoZonedDateTimeImpl;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.Era;
import org.threeten.bp.chrono.HijrahChronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.IsoChronology;
import org.threeten.bp.chrono.JapaneseDate;
import org.threeten.bp.chrono.JapaneseEra;
import org.threeten.bp.chrono.MinguoChronology;
import org.threeten.bp.chrono.MinguoDate;
import org.threeten.bp.chrono.MinguoEra;
import org.threeten.bp.chrono.ThaiBuddhistChronology;
import org.threeten.bp.chrono.ThaiBuddhistDate;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.Temporal;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDate_ESTest extends ChronoLocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      Period period0 = Period.ofWeeks((-217));
      Period period1 = period0.negated();
      Period period2 = period0.minus(period1);
      MinguoDate minguoDate1 = minguoDate0.minus((TemporalAmount) period2);
      String string0 = minguoDate1.toString();
      assertEquals("Minguo ROC 111-06-10", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay((-1901L));
      String string0 = minguoDate0.toString();
      assertEquals("Minguo ROC 53-10-18", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.dateEpochDay((-3658L));
      hijrahDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      ZoneId zoneId0 = ZoneId.systemDefault();
      MinguoDate minguoDate0 = minguoChronology0.dateNow(zoneId0);
      JapaneseEra japaneseEra0 = JapaneseEra.REIWA;
      LocalDate localDate0 = japaneseEra0.endDate();
      boolean boolean0 = minguoDate0.isEqual(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(15L);
      JapaneseDate japaneseDate0 = JapaneseDate.from(localDate0);
      JapaneseDate japaneseDate1 = japaneseDate0.plusYears(15L);
      boolean boolean0 = japaneseDate1.isBefore(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      MinguoDate minguoDate1 = minguoDate0.plusMonths((-1L));
      boolean boolean0 = minguoDate1.isAfter(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      HijrahDate hijrahDate0 = hijrahChronology0.date((TemporalAccessor) minguoDate0);
      HijrahDate hijrahDate1 = hijrahDate0.plusMonths((-687L));
      boolean boolean0 = hijrahDate1.equals(hijrahDate0);
      assertFalse(hijrahDate0.equals((Object)hijrahDate1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = LocalDate.ofYearDay(1, 365);
      ChronoField chronoField0 = ChronoField.YEAR;
      ChronoLocalDate chronoLocalDate0 = localDate0.with((TemporalField) chronoField0, 11L);
      assertNotSame(localDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      ZoneId zoneId0 = ZoneId.systemDefault();
      MinguoDate minguoDate0 = minguoChronology0.dateNow(zoneId0);
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      ChronoLocalDate chronoLocalDate0 = japaneseDate0.with((TemporalAdjuster) minguoDate0);
      assertEquals(28, chronoLocalDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      ChronoPeriod chronoPeriod0 = minguoDate0.until((ChronoLocalDate) minguoDate0);
      assertNotNull(chronoPeriod0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      long long0 = minguoDate0.toEpochDay();
      assertEquals(16115L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay((-1591L));
      long long0 = minguoDate0.toEpochDay();
      assertEquals((-1591L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MAX;
      TemporalQuery<Long> temporalQuery0 = (TemporalQuery<Long>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      Long long0 = localDate0.query(temporalQuery0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(88L);
      HijrahDate hijrahDate0 = HijrahDate.from(localDate0);
      Period period0 = Period.ofYears(1);
      ChronoLocalDate chronoLocalDate0 = hijrahDate0.plus((TemporalAmount) period0);
      assertEquals(30, chronoLocalDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(88L);
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      ChronoLocalDate chronoLocalDate0 = localDate0.plus(2601L, (TemporalUnit) chronoUnit0);
      assertNotSame(localDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(88L);
      HijrahDate hijrahDate0 = HijrahDate.from(localDate0);
      Period period0 = localDate0.until((ChronoLocalDate) hijrahDate0);
      ChronoLocalDate chronoLocalDate0 = localDate0.minus((TemporalAmount) period0);
      assertEquals(31, chronoLocalDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      ChronoLocalDate chronoLocalDate0 = minguoDate0.minus(0L, (TemporalUnit) chronoUnit0);
      assertEquals(28, chronoLocalDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      JapaneseDate japaneseDate0 = JapaneseDate.from(minguoDate0);
      int int0 = japaneseDate0.lengthOfMonth();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      MinguoDate minguoDate0 = MinguoDate.now((ZoneId) zoneOffset0);
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      boolean boolean0 = minguoDate0.isSupported((TemporalField) chronoField0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(88L);
      HijrahDate hijrahDate0 = HijrahDate.from(localDate0);
      JapaneseDate japaneseDate0 = JapaneseDate.from(hijrahDate0);
      Chronology chronology0 = japaneseDate0.getChronology();
      assertEquals("japanese", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      Locale locale0 = Locale.ITALIAN;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      String string0 = japaneseDate0.format(dateTimeFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      int int0 = minguoDate0.compareTo((ChronoLocalDate) minguoDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OffsetDateTime offsetDateTime0 = OffsetDateTime.now();
      LocalDate localDate0 = LocalDate.from(offsetDateTime0);
      LocalTime localTime0 = LocalTime.now();
      ChronoLocalDateTime<?> chronoLocalDateTime0 = localDate0.atTime(localTime0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      LocalDate localDate0 = LocalDate.now(clock0);
      LocalDate localDate1 = (LocalDate)localDate0.adjustInto(localDate0);
      assertFalse(localDate1.isLeapYear());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      ChronoField chronoField0 = ChronoField.MILLI_OF_DAY;
      // Undeclared exception!
      try { 
        japaneseDate0.with((TemporalField) chronoField0, 24L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: MilliOfDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      // Undeclared exception!
      try { 
        minguoDate0.with((TemporalField) chronoField0, (-217L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for AlignedDayOfWeekInMonth (valid values 1 - 7): -217
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateNow();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.with((TemporalField) null, (-919L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ThaiBuddhistDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.with((TemporalAdjuster) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-2), (-2));
      Clock clock0 = Clock.tickMinutes(zoneOffset0);
      HijrahDate hijrahDate0 = HijrahDate.now(clock0);
      // Undeclared exception!
      try { 
        hijrahDate0.until((ChronoLocalDate) minguoDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported in ThreeTen backport
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.until((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MAX;
      // Undeclared exception!
      try { 
        localDate0.query((TemporalQuery<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(1L);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        localDate0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Seconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      Duration duration0 = Duration.ofSeconds((-1L));
      // Undeclared exception!
      try { 
        japaneseDate0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Seconds not valid for chronology Japanese
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MonthDay monthDay0 = MonthDay.now(clock0);
      LocalDate localDate0 = monthDay0.atYear((-5));
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      // Undeclared exception!
      try { 
        localDate0.plus(10L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Millis
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      // Undeclared exception!
      try { 
        japaneseDate0.plus(86399999999999L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Minutes not valid for chronology Japanese
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.plus(10000L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      Period period0 = Period.ofYears(2004318071);
      // Undeclared exception!
      try { 
        japaneseDate0.minus((TemporalAmount) period0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid int value for Year: -2004316057
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      MinguoDate minguoDate0 = minguoChronology0.dateNow((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        minguoDate0.minus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(88L);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      // Undeclared exception!
      try { 
        localDate0.minus((long) 93, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Hours
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        minguoDate0.minus(1L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Forever not valid for chronology Minguo
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.lengthOfYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.isEqual((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.isBefore((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.isAfter((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDate.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_INSTANT;
      // Undeclared exception!
      try { 
        minguoDate0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: InstantSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        minguoDate0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        minguoDate0.compareTo((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.atTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // time must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      Instant instant0 = Instant.EPOCH;
      // Undeclared exception!
      try { 
        minguoDate0.adjustInto(instant0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: EpochDay
         //
         verifyException("org.threeten.bp.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      JapaneseDate japaneseDate0 = JapaneseDate.from(minguoDate0);
      int int0 = japaneseDate0.compareTo((ChronoLocalDate) minguoDate0);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      LocalDate localDate0 = LocalDate.MIN;
      int int0 = japaneseDate0.compareTo((ChronoLocalDate) localDate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("w`L+W", true);
      dateTimeFormatter0.formatTo(minguoDate0, mockFileWriter0);
      assertEquals(16115L, minguoDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MAX;
      ChronoField chronoField0 = ChronoField.MILLI_OF_SECOND;
      boolean boolean0 = localDate0.isSupported((TemporalField) chronoField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      boolean boolean0 = minguoDate0.isLeapYear();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.minus((-770L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      LocalDate localDate0 = isoChronology0.dateEpochDay(104L);
      MinguoDate minguoDate0 = MinguoDate.from(localDate0);
      Era era0 = minguoDate0.getEra();
      assertEquals(MinguoEra.ROC, era0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      MinguoDate minguoDate0 = MinguoDate.now((ZoneId) zoneOffset0);
      Period period0 = Period.ofWeeks(366);
      MinguoDate minguoDate1 = minguoDate0.minus((TemporalAmount) period0);
      String string0 = minguoDate1.toString();
      assertEquals("Minguo ROC 96-02-09", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay((-1L));
      String string0 = minguoDate0.toString();
      assertEquals("Minguo ROC 58-12-31", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      HijrahDate hijrahDate0 = HijrahDate.from(minguoDate0);
      ChronoField chronoField0 = ChronoField.HOUR_OF_AMPM;
      boolean boolean0 = hijrahDate0.equals(chronoField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      HijrahDate hijrahDate0 = HijrahDate.from(minguoDate0);
      boolean boolean0 = hijrahDate0.equals(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      boolean boolean0 = japaneseDate0.isEqual(japaneseDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      boolean boolean0 = japaneseDate0.isEqual(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      MinguoDate minguoDate1 = minguoDate0.plusMonths((-513L));
      JapaneseDate japaneseDate0 = JapaneseDate.from(minguoDate1);
      boolean boolean0 = japaneseDate0.isBefore(minguoDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Clock clock0 = Clock.systemDefaultZone();
      MinguoDate minguoDate0 = MinguoDate.now(clock0);
      JapaneseDate japaneseDate0 = JapaneseDate.from(minguoDate0);
      boolean boolean0 = japaneseDate0.isBefore(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalDate localDate0 = JapaneseDate.MIN_DATE;
      boolean boolean0 = minguoDate0.isAfter(localDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      MinguoDate minguoDate0 = MinguoDate.now();
      boolean boolean0 = japaneseDate0.isAfter(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      HijrahDate hijrahDate0 = HijrahDate.now((ZoneId) zoneOffset0);
      HijrahChronology hijrahChronology0 = hijrahDate0.getChronology();
      Clock clock0 = Clock.tickMinutes(zoneOffset0);
      HijrahDate hijrahDate1 = hijrahChronology0.dateNow(clock0);
      boolean boolean0 = hijrahDate1.equals(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      ChronoDateImpl<MinguoDate> chronoDateImpl0 = minguoDate0.minusDays((-15L));
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = HijrahDate.from(chronoDateImpl0);
      boolean boolean0 = hijrahDate1.equals(hijrahDate0);
      assertFalse(boolean0);
      assertFalse(hijrahDate0.equals((Object)hijrahDate1));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        ZoneOffset.from(japaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: Japanese Heisei 26-02-14, type org.threeten.bp.chrono.JapaneseDate
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        ZoneId.from(japaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Japanese Heisei 26-02-14, type org.threeten.bp.chrono.JapaneseDate
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        LocalTime.from(japaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalTime from TemporalAccessor: Japanese Heisei 26-02-14, type org.threeten.bp.chrono.JapaneseDate
         //
         verifyException("org.threeten.bp.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      JapaneseDate japaneseDate0 = JapaneseDate.now(zoneId0);
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      boolean boolean0 = japaneseDate0.isSupported((TemporalUnit) chronoUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      boolean boolean0 = japaneseDate0.isSupported((TemporalUnit) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      boolean boolean0 = minguoDate0.isSupported((TemporalField) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      int int0 = minguoDate0.lengthOfYear();
      assertEquals(365, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1220);
      // Undeclared exception!
      try { 
        ChronoLocalDate.from(zoneOffset0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDate: class org.threeten.bp.ZoneOffset
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LocalDate localDate0 = LocalDate.ofEpochDay(1L);
      ChronoLocalDate chronoLocalDate0 = ChronoLocalDate.from(localDate0);
      assertSame(localDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      MinguoDate minguoDate0 = MinguoDate.now((ZoneId) zoneOffset0);
      MinguoChronology minguoChronology0 = minguoDate0.getChronology();
      Instant instant0 = Instant.ofEpochSecond(509L, 88L);
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) minguoChronology0, instant0, (ZoneId) zoneOffset0);
      ChronoLocalDate chronoLocalDate0 = ChronoLocalDate.from(chronoZonedDateTimeImpl0);
      assertEquals(0L, chronoLocalDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Comparator<ChronoLocalDate> comparator0 = ChronoLocalDate.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      OffsetTime offsetTime0 = OffsetTime.MAX;
      LocalDate localDate0 = LocalDate.ofEpochDay((-279L));
      OffsetDateTime offsetDateTime0 = offsetTime0.atDate(localDate0);
      // Undeclared exception!
      try { 
        minguoDate0.with((TemporalAdjuster) offsetDateTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: NanoOfDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      // Undeclared exception!
      try { 
        japaneseDate0.adjustInto((Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      String string0 = minguoDate0.format(dateTimeFormatter0);
      assertEquals("2014-W07-5", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay(903L);
      int int0 = minguoDate0.lengthOfYear();
      assertEquals(366, int0);
  }
}
