/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:31:47 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.threeten.bp.Clock;
import org.threeten.bp.Duration;
import org.threeten.bp.Instant;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalTime;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.Period;
import org.threeten.bp.Year;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.chrono.ChronoLocalDate;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.ChronoPeriod;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.Era;
import org.threeten.bp.chrono.HijrahChronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.HijrahEra;
import org.threeten.bp.chrono.IsoChronology;
import org.threeten.bp.chrono.JapaneseChronology;
import org.threeten.bp.chrono.JapaneseDate;
import org.threeten.bp.chrono.MinguoChronology;
import org.threeten.bp.chrono.MinguoDate;
import org.threeten.bp.chrono.MinguoEra;
import org.threeten.bp.chrono.ThaiBuddhistChronology;
import org.threeten.bp.chrono.ThaiBuddhistDate;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.Temporal;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDate_ESTest extends ChronoLocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay(99L);
      String string0 = minguoDate0.toString();
      assertEquals("Minguo ROC 59-04-10", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      MinguoDate minguoDate1 = minguoDate0.plusMonths(8L);
      String string0 = minguoDate1.toString();
      assertEquals("Minguo ROC 103-10-14", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = hijrahDate0.plusMonths((-3945L));
      hijrahDate1.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = hijrahDate0.plusDays(1244);
      boolean boolean0 = hijrahDate1.equals(hijrahDate0);
      assertFalse(hijrahDate0.equals((Object)hijrahDate1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateYearDay(9999, 1);
      boolean boolean0 = hijrahDate0.isEqual(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateYearDay(9999, 1);
      boolean boolean0 = minguoDate0.isBefore(thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ThaiBuddhistDate thaiBuddhistDate1 = thaiBuddhistDate0.plusYears(381L);
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      Clock clock0 = Clock.systemUTC();
      MinguoDate minguoDate0 = minguoChronology0.dateNow(clock0);
      boolean boolean0 = minguoDate0.isAfter(thaiBuddhistDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      ChronoLocalDate chronoLocalDate0 = thaiBuddhistDate0.with((TemporalField) chronoField0, (-986L));
      assertFalse(chronoLocalDate0.equals((Object)thaiBuddhistDate0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      Clock clock0 = Clock.systemUTC();
      MinguoDate minguoDate0 = minguoChronology0.dateNow(clock0);
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateNow(clock0);
      ChronoLocalDate chronoLocalDate0 = minguoDate0.with((TemporalAdjuster) thaiBuddhistDate0);
      assertEquals(16115L, chronoLocalDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateYearDay(9999, 1);
      ChronoPeriod chronoPeriod0 = minguoDate0.until((ChronoLocalDate) minguoDate0);
      assertNotNull(chronoPeriod0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      long long0 = thaiBuddhistDate0.toEpochDay();
      assertEquals(16115L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      ThaiBuddhistDate thaiBuddhistDate1 = thaiBuddhistDate0.plus((-2286L), (TemporalUnit) chronoUnit0);
      long long0 = thaiBuddhistDate1.toEpochDay();
      assertEquals((-53466L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      TemporalQuery<HijrahDate> temporalQuery0 = (TemporalQuery<HijrahDate>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      HijrahDate hijrahDate0 = thaiBuddhistDate0.query(temporalQuery0);
      assertNull(hijrahDate0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      Object object0 = hijrahDate0.query(temporalQuery0);
      //  // Unstable assertion: assertSame(object0, hijrahDate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      HijrahDate hijrahDate1 = (HijrahDate)hijrahDate0.plus(565L, (TemporalUnit) chronoUnit0);
      assertEquals(1, HijrahDate.MIN_VALUE_OF_ERA);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateNow();
      Period period0 = Period.ofMonths(30);
      ChronoLocalDate chronoLocalDate0 = thaiBuddhistDate0.minus((TemporalAmount) period0);
      assertEquals(15200L, chronoLocalDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      ChronoLocalDate chronoLocalDate0 = thaiBuddhistDate0.minus(1693L, (TemporalUnit) chronoUnit0);
      assertEquals((-602241L), chronoLocalDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateNow();
      int int0 = minguoDate0.lengthOfMonth();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateNow();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      boolean boolean0 = minguoDate0.isSupported((TemporalUnit) chronoUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay((-533L));
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      boolean boolean0 = minguoDate0.isSupported((TemporalUnit) chronoUnit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      boolean boolean0 = thaiBuddhistDate0.isSupported((TemporalField) chronoField0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      boolean boolean0 = thaiBuddhistDate0.isSupported((TemporalField) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      ThaiBuddhistDate thaiBuddhistDate1 = thaiBuddhistDate0.plus(27L, (TemporalUnit) chronoUnit0);
      boolean boolean0 = thaiBuddhistDate1.isLeapYear();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      Era era0 = hijrahDate0.getEra();
      assertEquals(HijrahEra.AH, era0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      Chronology chronology0 = minguoDate0.getChronology();
      assertEquals("roc", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      String string0 = thaiBuddhistDate0.format(dateTimeFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = Clock.tickSeconds(zoneOffset0);
      LocalDate localDate0 = LocalDate.now(clock0);
      int int0 = thaiBuddhistDate0.compareTo((ChronoLocalDate) localDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      LocalTime localTime0 = LocalTime.of(0, 0);
      ChronoLocalDateTime<?> chronoLocalDateTime0 = thaiBuddhistDate0.atTime(localTime0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      Clock clock0 = Clock.systemUTC();
      MinguoDate minguoDate0 = minguoChronology0.dateNow(clock0);
      MinguoDate minguoDate1 = (MinguoDate)minguoDate0.adjustInto(minguoDate0);
      assertEquals(16115L, minguoDate1.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      // Undeclared exception!
      try { 
        minguoDate0.with((TemporalField) chronoField0, (-4861L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: MicroOfDay
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ChronoField chronoField0 = ChronoField.MINUTE_OF_HOUR;
      // Undeclared exception!
      try { 
        hijrahDate0.with((TemporalField) chronoField0, 574L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for MinuteOfHour (valid values 0 - 59): 574
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.with((TemporalField) null, 86400000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ThaiBuddhistDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      Instant instant0 = Instant.ofEpochMilli(11999999999L);
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.with((TemporalAdjuster) instant0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: InstantSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay(10L);
      // Undeclared exception!
      try { 
        minguoDate0.with((TemporalAdjuster) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      // Undeclared exception!
      try { 
        hijrahDate0.until((ChronoLocalDate) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported in ThreeTen backport
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.dateEpochDay(0L);
      // Undeclared exception!
      try { 
        japaneseDate0.until((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.query((TemporalQuery<ChronoField>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IsoChronology isoChronology0 = IsoChronology.INSTANCE;
      Clock clock0 = Clock.systemDefaultZone();
      LocalDate localDate0 = isoChronology0.dateNow(clock0);
      Duration duration0 = Duration.ofSeconds(604800L, 604800L);
      // Undeclared exception!
      try { 
        localDate0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Seconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = Duration.of(16115L, chronoUnit0);
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Nanos not valid for chronology ThaiBuddhist
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        minguoDate0.plus(146097L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Forever not valid for chronology Minguo
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.plus(11L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      Duration duration0 = Duration.ofHours((-1771L));
      // Undeclared exception!
      try { 
        minguoDate0.minus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Seconds not valid for chronology Minguo
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.minus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      // Undeclared exception!
      try { 
        localDate0.minus(365L, temporalUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported unit: Seconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.minus((-1L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      JapaneseDate japaneseDate0 = JapaneseDate.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        japaneseDate0.lengthOfYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.isEqual((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.isBefore((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        minguoDate0.isAfter((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDate.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.BASIC_ISO_DATE;
      ThaiBuddhistDate thaiBuddhistDate1 = thaiBuddhistDate0.plusYears(315569520L);
      // Undeclared exception!
      try { 
        thaiBuddhistDate1.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Field Year cannot be printed as the value 315571534 exceeds the maximum print width of 4
         //
         verifyException("org.threeten.bp.format.DateTimeFormatterBuilder$NumberPrinterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        minguoDate0.compareTo((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        minguoDate0.atTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // time must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      int int0 = thaiBuddhistDate0.compareTo((ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateNow();
      // Undeclared exception!
      try { 
        ZoneId.from(minguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: Minguo ROC 103-02-14, type org.threeten.bp.chrono.MinguoDate
         //
         verifyException("org.threeten.bp.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.BASIC_ISO_DATE;
      String string0 = dateTimeFormatter0.format(minguoDate0);
      assertEquals("20140214", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(104);
      HijrahDate hijrahDate0 = hijrahChronology0.dateNow((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        hijrahDate0.adjustInto((Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay(8L);
      String string0 = minguoDate0.toString();
      assertEquals("Minguo ROC 59-01-09", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay(10L);
      MinguoDate minguoDate1 = minguoDate0.plusMonths(10L);
      String string0 = minguoDate1.toString();
      assertEquals("Minguo ROC 59-11-11", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      boolean boolean0 = hijrahDate0.equals(thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      boolean boolean0 = hijrahDate0.equals(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      JapaneseDate japaneseDate0 = JapaneseDate.from(thaiBuddhistDate0);
      boolean boolean0 = thaiBuddhistDate0.isEqual(japaneseDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      LocalDate localDate0 = LocalDate.MIN;
      boolean boolean0 = thaiBuddhistDate0.isEqual(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      OffsetDateTime offsetDateTime0 = OffsetDateTime.now();
      OffsetDateTime offsetDateTime1 = offsetDateTime0.withYear(1);
      MinguoDate minguoDate0 = MinguoDate.from(offsetDateTime1);
      boolean boolean0 = minguoDate0.isBefore(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      MinguoDate minguoDate0 = MinguoDate.now();
      boolean boolean0 = minguoDate0.isBefore(thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      LocalDate localDate0 = LocalDate.ofEpochDay(5L);
      boolean boolean0 = thaiBuddhistDate0.isAfter(localDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      boolean boolean0 = minguoDate0.isAfter(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahChronology hijrahChronology0 = hijrahDate0.getChronology();
      HijrahDate hijrahDate1 = hijrahChronology0.dateNow();
      boolean boolean0 = hijrahDate1.equals(hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.of(1, 1, 1);
      HijrahChronology hijrahChronology0 = hijrahDate0.getChronology();
      HijrahDate hijrahDate1 = hijrahChronology0.dateYearDay(9999, 1);
      int int0 = hijrahDate1.compareTo((ChronoLocalDate) hijrahDate0);
      assertFalse(hijrahDate0.equals((Object)hijrahDate1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        ZoneOffset.from(thaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: ThaiBuddhist BE 2557-02-14, type org.threeten.bp.chrono.ThaiBuddhistDate
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      // Undeclared exception!
      try { 
        LocalTime.from(minguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalTime from TemporalAccessor: Minguo ROC 103-02-14, type org.threeten.bp.chrono.MinguoDate
         //
         verifyException("org.threeten.bp.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      boolean boolean0 = thaiBuddhistDate0.isSupported((TemporalUnit) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(thaiBuddhistChronology0);
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.format(dateTimeFormatter1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: WeekBasedYear
         //
         verifyException("org.threeten.bp.temporal.IsoFields$Field$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      String string0 = thaiBuddhistDate0.format(dateTimeFormatter0);
      assertEquals("2014-W07-5", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      ThaiBuddhistDate thaiBuddhistDate1 = thaiBuddhistDate0.plus(27L, (TemporalUnit) chronoUnit0);
      int int0 = thaiBuddhistDate1.lengthOfYear();
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      int int0 = thaiBuddhistDate0.lengthOfYear();
      assertEquals(365, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      Year year0 = Year.from(thaiBuddhistDate0);
      // Undeclared exception!
      try { 
        ChronoLocalDate.from(year0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: 2014, type org.threeten.bp.Year
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.now();
      HijrahDate hijrahDate1 = (HijrahDate)ChronoLocalDate.from(hijrahDate0);
      assertEquals(9999, HijrahDate.MAX_VALUE_OF_ERA);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        ChronoLocalDate.from(zoneOffset0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDate: class org.threeten.bp.ZoneOffset
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      Period period0 = Period.ofYears(7442);
      ChronoLocalDate chronoLocalDate0 = thaiBuddhistDate0.plus((TemporalAmount) period0);
      assertEquals(2734249L, chronoLocalDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Comparator<ChronoLocalDate> comparator0 = ChronoLocalDate.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HijrahDate hijrahDate0 = HijrahDate.ofEpochDay((-139L));
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      // Undeclared exception!
      try { 
        hijrahDate0.minus((-492148L), (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Hours not valid for chronology Hijrah-umalqura
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      // Undeclared exception!
      try { 
        thaiBuddhistDate0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      MinguoEra minguoEra0 = minguoDate0.getEra();
      assertEquals(MinguoEra.ROC, minguoEra0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      boolean boolean0 = thaiBuddhistDate0.isLeapYear();
      assertFalse(boolean0);
  }
}
