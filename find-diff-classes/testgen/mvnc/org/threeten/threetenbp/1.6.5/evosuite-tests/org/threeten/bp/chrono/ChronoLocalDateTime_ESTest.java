/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:33:12 GMT 2024
 */

package org.threeten.bp.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.threeten.bp.Duration;
import org.threeten.bp.Instant;
import org.threeten.bp.LocalDate;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.LocalTime;
import org.threeten.bp.Month;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.OffsetTime;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZoneOffset;
import org.threeten.bp.chrono.ChronoLocalDateTime;
import org.threeten.bp.chrono.ChronoLocalDateTimeImpl;
import org.threeten.bp.chrono.ChronoPeriod;
import org.threeten.bp.chrono.ChronoZonedDateTime;
import org.threeten.bp.chrono.ChronoZonedDateTimeImpl;
import org.threeten.bp.chrono.Chronology;
import org.threeten.bp.chrono.HijrahDate;
import org.threeten.bp.chrono.JapaneseChronology;
import org.threeten.bp.chrono.JapaneseDate;
import org.threeten.bp.chrono.MinguoDate;
import org.threeten.bp.chrono.ThaiBuddhistChronology;
import org.threeten.bp.chrono.ThaiBuddhistDate;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.format.FormatStyle;
import org.threeten.bp.temporal.ChronoField;
import org.threeten.bp.temporal.ChronoUnit;
import org.threeten.bp.temporal.Temporal;
import org.threeten.bp.temporal.TemporalAccessor;
import org.threeten.bp.temporal.TemporalAdjuster;
import org.threeten.bp.temporal.TemporalAmount;
import org.threeten.bp.temporal.TemporalField;
import org.threeten.bp.temporal.TemporalQuery;
import org.threeten.bp.temporal.TemporalUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChronoLocalDateTime_ESTest extends ChronoLocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      LocalDateTime localDateTime0 = LocalDateTime.now(zoneId0);
      boolean boolean0 = chronoLocalDateTime0.isEqual(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofSeconds(51L, 51L);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.plus((TemporalAmount) duration0);
      boolean boolean0 = chronoLocalDateTime1.isBefore(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ZoneId zoneId0 = ZoneId.systemDefault();
      Instant instant0 = Instant.now();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.minus(100L, (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTime1.isAfter(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoField chronoField0 = ChronoField.MILLI_OF_DAY;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.with((TemporalField) chronoField0, 669L);
      int int0 = chronoLocalDateTime1.compareTo(chronoLocalDateTime0);
      assertEquals(1, int0);
      assertFalse(chronoLocalDateTime0.equals((Object)chronoLocalDateTime1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofHours(1234L);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.plus((TemporalAmount) duration0);
      boolean boolean0 = chronoLocalDateTime0.equals(chronoLocalDateTime1);
      assertFalse(boolean0);
      assertFalse(chronoLocalDateTime1.equals((Object)chronoLocalDateTime0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.with((TemporalAdjuster) chronoLocalDateTime0);
      assertSame(chronoLocalDateTime0, chronoLocalDateTime1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      String string0 = chronoLocalDateTime0.toString();
      assertEquals("ThaiBuddhist BE 2513-01-01T00:00", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      LocalTime localTime0 = chronoLocalDateTime0.toLocalTime();
      assertEquals(0, localTime0.toSecondOfDay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      LocalTime localTime0 = chronoLocalDateTime0.toLocalTime();
      assertEquals(21, localTime0.getMinute());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.MAX;
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(31, localDate0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ZoneOffset zoneOffset0 = chronoZonedDateTimeImpl0.getOffset();
      Instant instant1 = chronoLocalDateTime0.toInstant(zoneOffset0);
      assertEquals(0L, instant1.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2038);
      LocalDateTime localDateTime0 = LocalDateTime.ofEpochSecond(2038, 2038, zoneOffset0);
      Instant instant0 = localDateTime0.toInstant(zoneOffset0);
      assertEquals(2038L, instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.dateEpochDay((-2729L));
      OffsetDateTime offsetDateTime0 = OffsetDateTime.MIN;
      LocalTime localTime0 = offsetDateTime0.toLocalTime();
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Instant instant0 = chronoLocalDateTimeImpl0.toInstant(zoneOffset0);
      assertEquals((-235850400L), instant0.getEpochSecond());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ZoneOffset zoneOffset0 = chronoZonedDateTimeImpl0.getOffset();
      long long0 = chronoLocalDateTime0.toEpochSecond(zoneOffset0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OffsetDateTime offsetDateTime0 = OffsetDateTime.now();
      LocalDateTime localDateTime0 = offsetDateTime0.toLocalDateTime();
      ZoneOffset zoneOffset0 = ZoneOffset.from(offsetDateTime0);
      long long0 = localDateTime0.toEpochSecond(zoneOffset0);
      assertEquals(1392409281L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.dateEpochDay((-306L));
      LocalTime localTime0 = LocalTime.MAX;
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-95));
      long long0 = chronoLocalDateTimeImpl0.toEpochSecond(zoneOffset0);
      assertEquals((-26351906L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(org.threeten.bp.temporal.TemporalAccessor.class));
      Object object0 = chronoLocalDateTime0.query(temporalQuery0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.plus(86400L, (TemporalUnit) chronoUnit0);
      assertNotSame(chronoLocalDateTime0, chronoLocalDateTime1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("");
      String string0 = chronoLocalDateTime0.format(dateTimeFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoZonedDateTime<JapaneseDate> chronoZonedDateTime0 = chronoLocalDateTime0.atZone(zoneId0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Temporal temporal0 = chronoLocalDateTime0.adjustInto(chronoZonedDateTimeImpl0);
      assertNotNull(temporal0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<LocalDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<LocalDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.with((TemporalField) chronoField0, (long) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: InstantSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinguoDate minguoDate0 = MinguoDate.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<MinguoDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(minguoDate0, localTime0);
      ChronoField chronoField0 = ChronoField.NANO_OF_SECOND;
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, (-31556952L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for NanoOfSecond (valid values 0 - 999999999): -31556952
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.with((TemporalField) null, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.with((TemporalAdjuster) instant0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: InstantSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, (ZoneId) zoneOffset0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      TemporalQuery<LocalDate> temporalQuery0 = LocalDate.FROM;
      LocalDate localDate0 = chronoLocalDateTime0.query(temporalQuery0);
      ChronoZonedDateTimeImpl<MinguoDate> chronoZonedDateTimeImpl1 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, (ZoneId) zoneOffset0);
      ChronoLocalDateTime<MinguoDate> chronoLocalDateTime1 = chronoZonedDateTimeImpl1.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime1.with((TemporalAdjuster) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Chrono mismatch, expected: ThaiBuddhist, actual: ISO
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.dateEpochDay((-2729L));
      OffsetDateTime offsetDateTime0 = OffsetDateTime.MIN;
      LocalTime localTime0 = offsetDateTime0.toLocalTime();
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.toEpochSecond((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.query((TemporalQuery<LocalDate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofHours(73281320000000L);
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.plus((TemporalAmount) duration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value for EpochDay (valid values -365243219162 - 365241780471): 3053388349449
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = LocalDateTime.ofInstant(instant0, zoneId0);
      // Undeclared exception!
      try { 
        localDateTime0.plus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.plus(7200000000000L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Forever not valid for chronology ThaiBuddhist
         //
         verifyException("org.threeten.bp.chrono.ChronoDateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.plus(2413L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.minus((TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.jdk8.DefaultInterfaceTemporal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      TemporalUnit temporalUnit0 = chronoField0.getRangeUnit();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.minus((-2147483648L), temporalUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid int value for Year: 2147485662
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.minus((-237L), (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.isEqual((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.isBefore((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.isAfter((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.RFC_1123_DATE_TIME;
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: OffsetSeconds
         //
         verifyException("org.threeten.bp.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle0);
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.format(dateTimeFormatter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to extract value: class org.threeten.bp.format.DateTimePrintContext$1
         //
         verifyException("org.threeten.bp.format.DateTimePrintContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.format((DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // formatter must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.compareTo((ChronoLocalDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now();
      OffsetTime offsetTime0 = OffsetTime.MIN;
      LocalTime localTime0 = offsetTime0.toLocalTime();
      ChronoLocalDateTimeImpl<ThaiBuddhistDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(thaiBuddhistDate0, localTime0);
      // Undeclared exception!
      try { 
        chronoLocalDateTimeImpl0.atZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.adjustInto(instant0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported field: EpochDay
         //
         verifyException("org.threeten.bp.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      boolean boolean0 = chronoLocalDateTime0.isAfter(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      LocalDateTime localDateTime0 = LocalDateTime.ofInstant(instant0, zoneId0);
      int int0 = chronoLocalDateTime0.compareTo((ChronoLocalDateTime<?>) localDateTime0);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JapaneseChronology japaneseChronology0 = JapaneseChronology.INSTANCE;
      JapaneseDate japaneseDate0 = japaneseChronology0.dateNow();
      LocalTime localTime0 = LocalTime.MIN;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = japaneseDate0.atTime(localTime0);
      Chronology chronology0 = chronoLocalDateTime0.getChronology();
      assertEquals("japanese", chronology0.getCalendarType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl1 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoZonedDateTimeImpl1.toLocalDateTime();
      boolean boolean0 = chronoLocalDateTime0.equals(chronoLocalDateTime1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      boolean boolean0 = chronoLocalDateTime0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      boolean boolean0 = chronoLocalDateTime0.equals(chronoLocalDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofHours(86400L);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.plus((TemporalAmount) duration0);
      boolean boolean0 = chronoLocalDateTime1.isEqual(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      boolean boolean0 = chronoLocalDateTime0.isEqual(chronoLocalDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofHours(2L);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.plus((TemporalAmount) duration0);
      boolean boolean0 = chronoLocalDateTime1.isEqual(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofMinutes(143L);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.plus((TemporalAmount) duration0);
      boolean boolean0 = chronoLocalDateTime0.isBefore(chronoLocalDateTime1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.minus((-93L), (TemporalUnit) chronoUnit0);
      boolean boolean0 = chronoLocalDateTime1.isBefore(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      boolean boolean0 = chronoLocalDateTime0.isBefore(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      LocalDateTime localDateTime0 = LocalDateTime.now(zoneId0);
      boolean boolean0 = chronoLocalDateTime0.isBefore(localDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      JapaneseDate japaneseDate0 = JapaneseDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl0 = ChronoLocalDateTimeImpl.of(japaneseDate0, localTime0);
      ChronoField chronoField0 = ChronoField.NANO_OF_SECOND;
      ChronoLocalDateTimeImpl<JapaneseDate> chronoLocalDateTimeImpl1 = chronoLocalDateTimeImpl0.with((TemporalField) chronoField0, 451L);
      boolean boolean0 = chronoLocalDateTimeImpl1.isAfter(chronoLocalDateTimeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      LocalDateTime localDateTime0 = LocalDateTime.MAX;
      boolean boolean0 = chronoLocalDateTime0.isAfter(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<?> chronoLocalDateTime0 = ChronoLocalDateTime.from(chronoZonedDateTimeImpl0);
      LocalDateTime localDateTime0 = LocalDateTime.now(zoneId0);
      boolean boolean0 = localDateTime0.isAfter(chronoLocalDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      ChronoField chronoField0 = ChronoField.NANO_OF_SECOND;
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.with((TemporalField) chronoField0, 1L);
      int int0 = chronoLocalDateTime1.compareTo(chronoLocalDateTime0);
      assertFalse(chronoLocalDateTime0.equals((Object)chronoLocalDateTime1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.BASIC_ISO_DATE;
      String string0 = chronoLocalDateTime0.format(dateTimeFormatter0);
      assertEquals("19700101", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ZoneId zoneId0 = ZoneId.systemDefault();
      Instant instant0 = Instant.now();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        ChronoZonedDateTime.from(chronoLocalDateTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ChronoZonedDateTime from TemporalAccessor: class org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ChronoPeriod chronoPeriod0 = thaiBuddhistChronology0.period(2106185885, 4264, 2106185885);
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.minus((TemporalAmount) chronoPeriod0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid int value for Year: -2106183915
         //
         verifyException("org.threeten.bp.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Month month0 = Month.MAY;
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(month0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: MAY, type org.threeten.bp.Month
         //
         verifyException("org.threeten.bp.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalDate localDate0 = LocalDate.ofEpochDay((-855L));
      LocalDateTime localDateTime0 = localDate0.atStartOfDay();
      ChronoLocalDateTime<?> chronoLocalDateTime0 = ChronoLocalDateTime.from(localDateTime0);
      assertSame(localDateTime0, chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        ChronoLocalDateTime.from(localTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Chronology found to create ChronoLocalDateTime: class org.threeten.bp.LocalTime
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<ChronoLocalDateTime<?>> comparator0 = ChronoLocalDateTime.timeLineOrder();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<HijrahDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<HijrahDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.toInstant((ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset must not be null
         //
         verifyException("org.threeten.bp.jdk8.Jdk8Methods", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        chronoLocalDateTime0.adjustInto((Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.bp.chrono.ChronoLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofHours(86400L);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.plus((TemporalAmount) duration0);
      boolean boolean0 = chronoLocalDateTime1.equals(chronoLocalDateTime0);
      assertFalse(boolean0);
      assertFalse(chronoLocalDateTime0.equals((Object)chronoLocalDateTime1));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      // Undeclared exception!
      try { 
        ZoneOffset.from(chronoLocalDateTime0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: ThaiBuddhist BE 2513-01-01T00:00, type org.threeten.bp.chrono.ChronoLocalDateTimeImpl
         //
         verifyException("org.threeten.bp.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      Duration duration0 = Duration.ofHours(86400L);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime1 = chronoLocalDateTime0.minus((TemporalAmount) duration0);
      boolean boolean0 = chronoLocalDateTime1.isEqual(chronoLocalDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      int int0 = chronoLocalDateTime0.compareTo(chronoLocalDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      Instant instant0 = Instant.now();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ChronoZonedDateTimeImpl<JapaneseDate> chronoZonedDateTimeImpl0 = ChronoZonedDateTimeImpl.ofInstant((Chronology) thaiBuddhistChronology0, instant0, zoneId0);
      ChronoLocalDateTime<JapaneseDate> chronoLocalDateTime0 = chronoZonedDateTimeImpl0.toLocalDateTime();
      chronoLocalDateTime0.hashCode();
  }
}
