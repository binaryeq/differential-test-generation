/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 11 00:08:20 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.Enumeration;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.SynchronousQueue;
import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos;
import org.apache.hadoop.hdfs.server.namenode.FsImageProto;
import org.apache.hadoop.thirdparty.protobuf.ByteString;
import org.apache.hadoop.thirdparty.protobuf.CodedInputStream;
import org.apache.hadoop.thirdparty.protobuf.DescriptorProtos;
import org.apache.hadoop.thirdparty.protobuf.Descriptors;
import org.apache.hadoop.thirdparty.protobuf.ExtensionRegistry;
import org.apache.hadoop.thirdparty.protobuf.ExtensionRegistryLite;
import org.apache.hadoop.thirdparty.protobuf.Field;
import org.apache.hadoop.thirdparty.protobuf.Message;
import org.apache.hadoop.thirdparty.protobuf.Method;
import org.apache.hadoop.thirdparty.protobuf.Parser;
import org.apache.hadoop.thirdparty.protobuf.StringValue;
import org.apache.hadoop.thirdparty.protobuf.UnknownFieldSet;
import org.eclipse.jetty.io.ByteBufferPool;
import org.eclipse.jetty.io.LogarithmicArrayByteBufferPool;
import org.eclipse.jetty.io.MappedByteBufferPool;
import org.eclipse.jetty.io.NullByteBufferPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FsImageProto_ESTest extends FsImageProto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0);
      try { 
        FsImageProto.ErasureCodingSection.parseFrom(codedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.getEmptyRegistry();
      try { 
        FsImageProto.CacheManagerSection.parseFrom(byteArray0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FsImageProto.CacheManagerSection fsImageProto_CacheManagerSection0 = FsImageProto.CacheManagerSection.getDefaultInstance();
      boolean boolean0 = fsImageProto_CacheManagerSection0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-44));
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.newInstance();
      try { 
        FsImageProto.CacheManagerSection.parseFrom((InputStream) byteArrayInputStream0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Message missing required fields: nextDirectiveId, numPools, numDirectives
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.UninitializedMessageException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      String string0 = fsImageProto_SecretManagerSection_PersistToken_Builder0.getRenewer();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      try { 
        FsImageProto.SecretManagerSection.PersistToken.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LogarithmicArrayByteBufferPool logarithmicArrayByteBufferPool0 = new LogarithmicArrayByteBufferPool(988, 988);
      ByteBuffer byteBuffer0 = logarithmicArrayByteBufferPool0.acquire(988, false);
      FsImageProto.SecretManagerSection.PersistToken fsImageProto_SecretManagerSection_PersistToken0 = FsImageProto.SecretManagerSection.PersistToken.parseFrom(byteBuffer0);
      boolean boolean0 = fsImageProto_SecretManagerSection_PersistToken0.isInitialized();
      assertEquals(0L, fsImageProto_SecretManagerSection_PersistToken0.getExpiryDate());
      assertEquals(0L, fsImageProto_SecretManagerSection_PersistToken0.getIssueDate());
      assertTrue(boolean0);
      assertEquals(0, fsImageProto_SecretManagerSection_PersistToken0.getVersion());
      assertEquals(0, fsImageProto_SecretManagerSection_PersistToken0.getMasterKeyId());
      assertEquals(0, fsImageProto_SecretManagerSection_PersistToken0.getSequenceNumber());
      assertEquals(0L, fsImageProto_SecretManagerSection_PersistToken0.getMaxDate());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      try { 
        FsImageProto.SecretManagerSection.DelegationKey.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FsImageProto.SnapshotDiffSection.FileDiff.Builder fsImageProto_SnapshotDiffSection_FileDiff_Builder0 = FsImageProto.SnapshotDiffSection.FileDiff.newBuilder();
      FsImageProto.SnapshotDiffSection.FileDiff.Builder fsImageProto_SnapshotDiffSection_FileDiff_Builder1 = fsImageProto_SnapshotDiffSection_FileDiff_Builder0.clearSnapshotCopy();
      assertFalse(fsImageProto_SnapshotDiffSection_FileDiff_Builder1.hasSnapshotId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      try { 
        FsImageProto.SnapshotDiffSection.FileDiff.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.getEmptyRegistry();
      try { 
        FsImageProto.INodeDirectorySection.parseFrom(byteArray0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      try { 
        FsImageProto.FilesUnderConstructionSection.FileUnderConstructionEntry.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      try { 
        FsImageProto.INodeSection.INode.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool();
      ByteBuffer byteBuffer0 = mappedByteBufferPool0.acquire(0, false);
      FsImageProto.INodeSection.INodeDirectory fsImageProto_INodeSection_INodeDirectory0 = FsImageProto.INodeSection.INodeDirectory.parseFrom(byteBuffer0);
      boolean boolean0 = fsImageProto_INodeSection_INodeDirectory0.isInitialized();
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getPermission());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasXAttrs());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getDsQuota());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getNsQuota());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasTypeQuotas());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NullByteBufferPool nullByteBufferPool0 = new NullByteBufferPool();
      ByteBuffer byteBuffer0 = nullByteBufferPool0.newByteBuffer(595, true);
      FsImageProto.INodeSection.INodeDirectory fsImageProto_INodeSection_INodeDirectory0 = FsImageProto.INodeSection.INodeDirectory.parseFrom(byteBuffer0);
      FsImageProto.INodeSection.XAttrFeatureProto fsImageProto_INodeSection_XAttrFeatureProto0 = fsImageProto_INodeSection_INodeDirectory0.getXAttrs();
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getDsQuota());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getNsQuota());
      assertNotNull(fsImageProto_INodeSection_XAttrFeatureProto0);
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getPermission());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasXAttrs());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasTypeQuotas());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getModificationTime());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      try { 
        FsImageProto.INodeSection.QuotaByStorageTypeFeatureProto.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        FsImageProto.INodeSection.INodeFile.newBuilder((FsImageProto.INodeSection.INodeFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.FsImageProto$INodeSection$INodeFile$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FsImageProto.INodeSection.XAttrFeatureProto.Builder fsImageProto_INodeSection_XAttrFeatureProto_Builder0 = FsImageProto.INodeSection.XAttrFeatureProto.newBuilder();
      SynchronousQueue<FsImageProto.INodeSection.XAttrCompactProto> synchronousQueue0 = new SynchronousQueue<FsImageProto.INodeSection.XAttrCompactProto>();
      LinkedTransferQueue<FsImageProto.INodeSection.XAttrCompactProto> linkedTransferQueue0 = new LinkedTransferQueue<FsImageProto.INodeSection.XAttrCompactProto>(synchronousQueue0);
      FsImageProto.INodeSection.XAttrFeatureProto.Builder fsImageProto_INodeSection_XAttrFeatureProto_Builder1 = fsImageProto_INodeSection_XAttrFeatureProto_Builder0.addAllXAttrs(linkedTransferQueue0);
      FsImageProto.INodeSection.XAttrCompactProto.Builder fsImageProto_INodeSection_XAttrCompactProto_Builder0 = FsImageProto.INodeSection.XAttrCompactProto.newBuilder();
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_XAttrFeatureProto_Builder1.addXAttrs(fsImageProto_INodeSection_XAttrCompactProto_Builder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Message missing required fields: name
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      try { 
        FsImageProto.INodeSection.XAttrCompactProto.parseFrom(byteArray0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message tag had invalid wire type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[6] = (byte) (-68);
      try { 
        FsImageProto.INodeSection.AclFeatureProto.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      try { 
        FsImageProto.INodeSection.AclFeatureProto.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      try { 
        fsImageProto_NameSystemSection_Builder0.mergeFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      try { 
        FsImageProto.FileSummary.Section.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FsImageProto.StringTableSection fsImageProto_StringTableSection0 = FsImageProto.StringTableSection.getDefaultInstance();
      FsImageProto.StringTableSection.Builder fsImageProto_StringTableSection_Builder0 = FsImageProto.StringTableSection.newBuilder(fsImageProto_StringTableSection0);
      assertEquals(0, fsImageProto_StringTableSection_Builder0.getNumEntry());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FsImageProto.INodeSection.INodeFile fsImageProto_INodeSection_INodeFile0 = FsImageProto.INodeSection.INodeFile.getDefaultInstance();
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder0 = FsImageProto.INodeSection.INodeFile.newBuilder(fsImageProto_INodeSection_INodeFile0);
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder1 = fsImageProto_INodeSection_INodeFile_Builder0.clearModificationTime();
      assertEquals(0L, fsImageProto_INodeSection_INodeFile_Builder1.getModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeFile_Builder1.hasReplication());
      assertEquals(HdfsProtos.BlockTypeProto.CONTIGUOUS, fsImageProto_INodeSection_INodeFile_Builder1.getBlockType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FsImageProto.INodeSection.INodeFile fsImageProto_INodeSection_INodeFile0 = FsImageProto.INodeSection.INodeFile.getDefaultInstance();
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder0 = FsImageProto.INodeSection.INodeFile.newBuilder(fsImageProto_INodeSection_INodeFile0);
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder1 = fsImageProto_INodeSection_INodeFile_Builder0.clearBlockType();
      assertFalse(fsImageProto_INodeSection_INodeFile_Builder1.hasReplication());
      assertEquals(HdfsProtos.BlockTypeProto.CONTIGUOUS, fsImageProto_INodeSection_INodeFile_Builder0.getBlockType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder0 = FsImageProto.INodeSection.INodeFile.newBuilder();
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.getDefaultInstance();
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder1 = fsImageProto_INodeSection_INodeFile_Builder0.setUnknownFields(unknownFieldSet0);
      assertEquals(HdfsProtos.BlockTypeProto.CONTIGUOUS, fsImageProto_INodeSection_INodeFile_Builder1.getBlockType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FsImageProto.INodeSection.INodeFile fsImageProto_INodeSection_INodeFile0 = FsImageProto.INodeSection.INodeFile.getDefaultInstance();
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder0 = FsImageProto.INodeSection.INodeFile.newBuilder(fsImageProto_INodeSection_INodeFile0);
      fsImageProto_INodeSection_INodeFile_Builder0.setReplication(0);
      assertTrue(fsImageProto_INodeSection_INodeFile_Builder0.hasReplication());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Function<Object, ByteBufferPool.Bucket> function0 = (Function<Object, ByteBufferPool.Bucket>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<ByteBufferPool.Bucket, Integer> function1 = (Function<ByteBufferPool.Bucket, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Integer, ByteBufferPool.Bucket> converter0 = Converter.from((Function<? super Integer, ? extends ByteBufferPool.Bucket>) function0, (Function<? super ByteBufferPool.Bucket, ? extends Integer>) function1);
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool((-763), (-763), converter0, (-763), (-763));
      ByteBuffer byteBuffer0 = mappedByteBufferPool0.acquire((-763), false);
      FsImageProto.FileSummary.Section fsImageProto_FileSummary_Section0 = FsImageProto.FileSummary.Section.parseFrom(byteBuffer0);
      assertEquals(0L, fsImageProto_FileSummary_Section0.getLength());
      assertEquals(0L, fsImageProto_FileSummary_Section0.getOffset());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      FsImageProto.INodeSection.INodeFile fsImageProto_INodeSection_INodeFile0 = FsImageProto.INodeSection.INodeFile.parseFrom(byteArray0);
      assertFalse(fsImageProto_INodeSection_INodeFile0.hasPermission());
      assertFalse(fsImageProto_INodeSection_INodeFile0.hasPreferredBlockSize());
      assertEquals(0L, fsImageProto_INodeSection_INodeFile0.getPreferredBlockSize());
      assertTrue(fsImageProto_INodeSection_INodeFile0.hasFileUC());
      assertFalse(fsImageProto_INodeSection_INodeFile0.hasXAttrs());
      assertEquals(0L, fsImageProto_INodeSection_INodeFile0.getModificationTime());
      assertEquals(0, fsImageProto_INodeSection_INodeFile0.getStoragePolicyID());
      assertEquals(HdfsProtos.BlockTypeProto.CONTIGUOUS, fsImageProto_INodeSection_INodeFile0.getBlockType());
      assertEquals(0L, fsImageProto_INodeSection_INodeFile0.getAccessTime());
      assertFalse(fsImageProto_INodeSection_INodeFile0.hasModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeFile0.hasAccessTime());
      assertFalse(fsImageProto_INodeSection_INodeFile0.hasReplication());
      assertEquals(0L, fsImageProto_INodeSection_INodeFile0.getPermission());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FsImageProto.INodeSection.XAttrCompactProto.Builder fsImageProto_INodeSection_XAttrCompactProto_Builder0 = FsImageProto.INodeSection.XAttrCompactProto.newBuilder();
      ByteString byteString0 = ByteString.empty();
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.parseFrom(byteString0);
      FsImageProto.INodeSection.XAttrCompactProto.Builder fsImageProto_INodeSection_XAttrCompactProto_Builder1 = fsImageProto_INodeSection_XAttrCompactProto_Builder0.setUnknownFields(unknownFieldSet0);
      assertSame(fsImageProto_INodeSection_XAttrCompactProto_Builder0, fsImageProto_INodeSection_XAttrCompactProto_Builder1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FsImageProto.INodeSection.XAttrCompactProto.Builder fsImageProto_INodeSection_XAttrCompactProto_Builder0 = FsImageProto.INodeSection.XAttrCompactProto.newBuilder();
      String string0 = fsImageProto_INodeSection_XAttrCompactProto_Builder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FsImageProto.INodeSection.XAttrCompactProto.Builder fsImageProto_INodeSection_XAttrCompactProto_Builder0 = FsImageProto.INodeSection.XAttrCompactProto.newBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_XAttrCompactProto_Builder0.addRepeatedField((Descriptors.FieldDescriptor) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool();
      ByteBuffer byteBuffer0 = mappedByteBufferPool0.acquire(0, false);
      FsImageProto.INodeSection.XAttrCompactProto.Builder fsImageProto_INodeSection_XAttrCompactProto_Builder0 = FsImageProto.INodeSection.XAttrCompactProto.newBuilder();
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_XAttrCompactProto_Builder0.setField((Descriptors.FieldDescriptor) null, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FsImageProto.SnapshotDiffSection.DiffEntry.Builder fsImageProto_SnapshotDiffSection_DiffEntry_Builder0 = FsImageProto.SnapshotDiffSection.DiffEntry.newBuilder();
      FsImageProto.SnapshotDiffSection.DiffEntry.Builder fsImageProto_SnapshotDiffSection_DiffEntry_Builder1 = fsImageProto_SnapshotDiffSection_DiffEntry_Builder0.clearInodeId();
      assertEquals(0L, fsImageProto_SnapshotDiffSection_DiffEntry_Builder1.getInodeId());
      assertFalse(fsImageProto_SnapshotDiffSection_DiffEntry_Builder1.isInitialized());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FsImageProto.SnapshotDiffSection.DiffEntry.Builder fsImageProto_SnapshotDiffSection_DiffEntry_Builder0 = FsImageProto.SnapshotDiffSection.DiffEntry.newBuilder();
      // Undeclared exception!
      try { 
        fsImageProto_SnapshotDiffSection_DiffEntry_Builder0.clearField((Descriptors.FieldDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      fsImageProto_NameSystemSection_Builder0.setGenstampV2(0L);
      assertTrue(fsImageProto_NameSystemSection_Builder0.hasGenstampV2());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      long long0 = fsImageProto_NameSystemSection_Builder0.getGenstampV2();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder1 = fsImageProto_NameSystemSection_Builder0.clearNamespaceId();
      assertEquals(0, fsImageProto_NameSystemSection_Builder1.getNamespaceId());
      assertFalse(fsImageProto_NameSystemSection_Builder1.hasGenstampV1Limit());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder1 = fsImageProto_NameSystemSection_Builder0.clearGenstampV1Limit();
      assertFalse(fsImageProto_NameSystemSection_Builder1.hasNamespaceId());
      assertEquals(0L, fsImageProto_NameSystemSection_Builder1.getGenstampV1Limit());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((InputStream) sequenceInputStream0);
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.parseFrom(codedInputStream0);
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder1 = fsImageProto_NameSystemSection_Builder0.setUnknownFields(unknownFieldSet0);
      assertFalse(fsImageProto_NameSystemSection_Builder1.hasLastAllocatedStripedBlockId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder1 = fsImageProto_NameSystemSection_Builder0.clearGenstampV1();
      assertEquals(0L, fsImageProto_NameSystemSection_Builder1.getGenstampV1());
      assertFalse(fsImageProto_NameSystemSection_Builder1.hasNamespaceId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Function<Object, ByteBufferPool.Bucket> function0 = (Function<Object, ByteBufferPool.Bucket>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<ByteBufferPool.Bucket, Integer> function1 = (Function<ByteBufferPool.Bucket, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Integer, ByteBufferPool.Bucket> converter0 = Converter.from((Function<? super Integer, ? extends ByteBufferPool.Bucket>) function0, (Function<? super ByteBufferPool.Bucket, ? extends Integer>) function1);
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool((-763), (-763), converter0, (-763), (-763));
      ByteBuffer byteBuffer0 = mappedByteBufferPool0.acquire((-763), false);
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.getEmptyRegistry();
      FsImageProto.INodeSection.AclFeatureProto fsImageProto_INodeSection_AclFeatureProto0 = FsImageProto.INodeSection.AclFeatureProto.parseFrom(byteBuffer0, extensionRegistryLite0);
      assertEquals(2, FsImageProto.INodeSection.AclFeatureProto.ENTRIES_FIELD_NUMBER);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      FsImageProto.INodeDirectorySection.DirEntry fsImageProto_INodeDirectorySection_DirEntry0 = FsImageProto.INodeDirectorySection.DirEntry.parseFrom(byteArray0, (ExtensionRegistryLite) extensionRegistry0);
      assertEquals(0L, fsImageProto_INodeDirectorySection_DirEntry0.getParent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NullByteBufferPool nullByteBufferPool0 = new NullByteBufferPool();
      ByteBuffer byteBuffer0 = nullByteBufferPool0.acquire(3, true);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      FsImageProto.INodeDirectorySection.DirEntry fsImageProto_INodeDirectorySection_DirEntry0 = FsImageProto.INodeDirectorySection.DirEntry.parseFrom(byteBuffer0, (ExtensionRegistryLite) extensionRegistry0);
      assertEquals(0L, fsImageProto_INodeDirectorySection_DirEntry0.getParent());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FsImageProto.INodeDirectorySection.DirEntry fsImageProto_INodeDirectorySection_DirEntry0 = FsImageProto.INodeDirectorySection.DirEntry.getDefaultInstance();
      long long0 = fsImageProto_INodeDirectorySection_DirEntry0.getParent();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FsImageProto.INodeDirectorySection.DirEntry fsImageProto_INodeDirectorySection_DirEntry0 = FsImageProto.INodeDirectorySection.DirEntry.getDefaultInstance();
      ByteString byteString0 = fsImageProto_INodeDirectorySection_DirEntry0.toByteString();
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FsImageProto.SnapshotDiffSection.DirectoryDiff fsImageProto_SnapshotDiffSection_DirectoryDiff0 = FsImageProto.SnapshotDiffSection.DirectoryDiff.getDefaultInstance();
      UnknownFieldSet unknownFieldSet0 = fsImageProto_SnapshotDiffSection_DirectoryDiff0.getUnknownFields();
      assertTrue(unknownFieldSet0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((InputStream) byteArrayInputStream0);
      try { 
        FsImageProto.SnapshotDiffSection.DirectoryDiff.parseFrom(codedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      charBuffer0.read(charBuffer1);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      FsImageProto.FilesUnderConstructionSection.FileUnderConstructionEntry fsImageProto_FilesUnderConstructionSection_FileUnderConstructionEntry0 = FsImageProto.FilesUnderConstructionSection.FileUnderConstructionEntry.parseFrom(byteBuffer0);
      FsImageProto.SnapshotSection.Snapshot.Builder fsImageProto_SnapshotSection_Snapshot_Builder0 = FsImageProto.SnapshotSection.Snapshot.newBuilder();
      Descriptors.Descriptor descriptors_Descriptor0 = DescriptorProtos.OneofDescriptorProto.getDescriptor();
      Descriptors.FieldDescriptor descriptors_FieldDescriptor0 = descriptors_Descriptor0.findFieldByNumber(1);
      // Undeclared exception!
      try { 
        fsImageProto_SnapshotSection_Snapshot_Builder0.addRepeatedField(descriptors_FieldDescriptor0, fsImageProto_FilesUnderConstructionSection_FileUnderConstructionEntry0.INODEID_FIELD_NUMBER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FieldDescriptor does not match message type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.GeneratedMessageV3$FieldAccessorTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(53);
      try { 
        FsImageProto.CacheManagerSection.parseFrom(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(7);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      try { 
        FsImageProto.CacheManagerSection.parseFrom((InputStream) bufferedInputStream0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FsImageProto.SecretManagerSection fsImageProto_SecretManagerSection0 = FsImageProto.SecretManagerSection.getDefaultInstance();
      UnknownFieldSet unknownFieldSet0 = fsImageProto_SecretManagerSection0.getUnknownFields();
      assertTrue(unknownFieldSet0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayBlockingQueue<ByteBuffer> arrayBlockingQueue0 = new ArrayBlockingQueue<ByteBuffer>(2048, false);
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((Iterable<ByteBuffer>) arrayBlockingQueue0);
      // Undeclared exception!
      try { 
        FsImageProto.SecretManagerSection.PersistToken.parseFrom(codedInputStream0, (ExtensionRegistryLite) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.FsImageProto$SecretManagerSection$PersistToken$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.SecretManagerSection.PersistToken.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder1 = fsImageProto_SecretManagerSection_PersistToken_Builder0.setMaxDate((-1L));
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder2 = fsImageProto_SecretManagerSection_PersistToken_Builder1.clone();
      assertEquals((-1L), fsImageProto_SecretManagerSection_PersistToken_Builder0.getMaxDate());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder2.hasRealUser());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FsImageProto.INodeSection.FileUnderConstructionFeature.Builder fsImageProto_INodeSection_FileUnderConstructionFeature_Builder0 = FsImageProto.INodeSection.FileUnderConstructionFeature.newBuilder();
      StringValue stringValue0 = StringValue.of("org.apache.hadoop.hdfs.server.namenode.FsImageProto$INodeSection$INodeSymlink$Builder");
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_FileUnderConstructionFeature_Builder0.mergeFrom((Message) stringValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mergeFrom(Message) can only merge messages of the same type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FsImageProto.INodeSection.AclFeatureProto.Builder fsImageProto_INodeSection_AclFeatureProto_Builder0 = FsImageProto.INodeSection.AclFeatureProto.newBuilder();
      FsImageProto.INodeSection.AclFeatureProto.Builder fsImageProto_INodeSection_AclFeatureProto_Builder1 = fsImageProto_INodeSection_AclFeatureProto_Builder0.setUnknownFields((UnknownFieldSet) null);
      assertSame(fsImageProto_INodeSection_AclFeatureProto_Builder0, fsImageProto_INodeSection_AclFeatureProto_Builder1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser<FsImageProto.INodeSection.QuotaByStorageTypeFeatureProto> parser0 = FsImageProto.INodeSection.QuotaByStorageTypeFeatureProto.parser();
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      try { 
        FsImageProto.INodeSection.QuotaByStorageTypeFeatureProto.parseFrom((InputStream) pipedInputStream0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool();
      ByteBuffer byteBuffer0 = mappedByteBufferPool0.acquire(0, false);
      FsImageProto.INodeSection.INodeDirectory fsImageProto_INodeSection_INodeDirectory0 = FsImageProto.INodeSection.INodeDirectory.parseFrom(byteBuffer0);
      FsImageProto.INodeSection.QuotaByStorageTypeFeatureProto fsImageProto_INodeSection_QuotaByStorageTypeFeatureProto0 = fsImageProto_INodeSection_INodeDirectory0.getTypeQuotas();
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getPermission());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasTypeQuotas());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getNsQuota());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasXAttrs());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getDsQuota());
      assertNotNull(fsImageProto_INodeSection_QuotaByStorageTypeFeatureProto0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.INodeReferenceSection.Builder.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.INodeSection.QuotaByStorageTypeEntryProto.Builder.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        FsImageProto.StringTableSection.Entry.parseDelimitedFrom((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FsImageProto.INodeSection.INodeFile fsImageProto_INodeSection_INodeFile0 = FsImageProto.INodeSection.INodeFile.getDefaultInstance();
      Descriptors.OneofDescriptor descriptors_OneofDescriptor0 = mock(Descriptors.OneofDescriptor.class, new ViolatedAssumptionAnswer());
      doReturn((Descriptors.Descriptor) null).when(descriptors_OneofDescriptor0).getContainingType();
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_INodeFile0.getOneofFieldDescriptor(descriptors_OneofDescriptor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OneofDescriptor does not match message type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.GeneratedMessageV3$FieldAccessorTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      try { 
        FsImageProto.INodeSection.INodeFile.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser<FsImageProto.INodeSection.INodeFile> parser0 = FsImageProto.INodeSection.INodeFile.parser();
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FsImageProto.INodeSection.INodeFile fsImageProto_INodeSection_INodeFile0 = FsImageProto.INodeSection.INodeFile.getDefaultInstance();
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder0 = FsImageProto.INodeSection.INodeFile.newBuilder(fsImageProto_INodeSection_INodeFile0);
      FsImageProto.INodeSection.INodeFile.Builder fsImageProto_INodeSection_INodeFile_Builder1 = fsImageProto_INodeSection_INodeFile_Builder0.clearStoragePolicyID();
      assertEquals(HdfsProtos.BlockTypeProto.CONTIGUOUS, fsImageProto_INodeSection_INodeFile_Builder1.getBlockType());
      assertFalse(fsImageProto_INodeSection_INodeFile_Builder1.hasReplication());
      assertEquals(0, fsImageProto_INodeSection_INodeFile_Builder1.getStoragePolicyID());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        FsImageProto.INodeSection.XAttrCompactProto.parseFrom((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Message missing required fields: name
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.UninitializedMessageException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        FsImageProto.INodeSection.XAttrCompactProto.parseFrom((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FsImageProto.INodeSection.XAttrFeatureProto.Builder fsImageProto_INodeSection_XAttrFeatureProto_Builder0 = FsImageProto.INodeSection.XAttrFeatureProto.newBuilder();
      FsImageProto.INodeSection.XAttrCompactProto.Builder fsImageProto_INodeSection_XAttrCompactProto_Builder0 = FsImageProto.INodeSection.XAttrCompactProto.newBuilder();
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_XAttrFeatureProto_Builder0.addXAttrs(fsImageProto_INodeSection_XAttrCompactProto_Builder0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Message missing required fields: name
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      try { 
        FsImageProto.INodeSection.XAttrCompactProto.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.INodeDirectorySection.DirEntry.Builder.getDescriptor();
      assertEquals(0, descriptors_Descriptor0.getIndex());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FsImageProto.INodeDirectorySection.DirEntry fsImageProto_INodeDirectorySection_DirEntry0 = FsImageProto.INodeDirectorySection.DirEntry.getDefaultInstance();
      FsImageProto.INodeDirectorySection.DirEntry.Builder fsImageProto_INodeDirectorySection_DirEntry_Builder0 = FsImageProto.INodeDirectorySection.DirEntry.newBuilder(fsImageProto_INodeDirectorySection_DirEntry0);
      FsImageProto.INodeDirectorySection.DirEntry.Builder fsImageProto_INodeDirectorySection_DirEntry_Builder1 = fsImageProto_INodeDirectorySection_DirEntry_Builder0.addChildren(1026L);
      assertFalse(fsImageProto_INodeDirectorySection_DirEntry_Builder1.hasParent());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.INodeReferenceSection.INodeReference.Builder.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        FsImageProto.SnapshotDiffSection.CreatedListEntry.parseFrom((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FsImageProto.SecretManagerSection.DelegationKey fsImageProto_SecretManagerSection_DelegationKey0 = FsImageProto.SecretManagerSection.DelegationKey.getDefaultInstance();
      assertFalse(fsImageProto_SecretManagerSection_DelegationKey0.hasId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LogarithmicArrayByteBufferPool logarithmicArrayByteBufferPool0 = new LogarithmicArrayByteBufferPool((-136), (-136), (-1034), (-1034), (-90L));
      ByteBuffer byteBuffer0 = logarithmicArrayByteBufferPool0.newByteBuffer(144, true);
      // Undeclared exception!
      try { 
        FsImageProto.SecretManagerSection.DelegationKey.parseFrom(byteBuffer0, (ExtensionRegistryLite) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.FsImageProto$SecretManagerSection$DelegationKey$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-56), 133);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      // Undeclared exception!
      try { 
        FsImageProto.SecretManagerSection.DelegationKey.parseDelimitedFrom((InputStream) byteArrayInputStream0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LogarithmicArrayByteBufferPool logarithmicArrayByteBufferPool0 = new LogarithmicArrayByteBufferPool((-136), (-136), (-1034), (-1034), (-90L));
      ByteBuffer byteBuffer0 = logarithmicArrayByteBufferPool0.newByteBuffer(144, true);
      FsImageProto.SecretManagerSection.DelegationKey fsImageProto_SecretManagerSection_DelegationKey0 = FsImageProto.SecretManagerSection.DelegationKey.parseFrom(byteBuffer0);
      fsImageProto_SecretManagerSection_DelegationKey0.getDefaultInstanceForType();
      assertEquals(0L, fsImageProto_SecretManagerSection_DelegationKey0.getExpiryDate());
      assertEquals(0, fsImageProto_SecretManagerSection_DelegationKey0.getId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.getEmptyRegistry();
      // Undeclared exception!
      try { 
        FsImageProto.SecretManagerSection.DelegationKey.parseFrom((byte[]) null, extensionRegistryLite0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Method method0 = Method.getDefaultInstance();
      ByteString byteString0 = method0.getRequestTypeUrlBytes();
      FsImageProto.SecretManagerSection.DelegationKey fsImageProto_SecretManagerSection_DelegationKey0 = FsImageProto.SecretManagerSection.DelegationKey.parseFrom(byteString0);
      long long0 = fsImageProto_SecretManagerSection_DelegationKey0.getExpiryDate();
      assertEquals(0L, long0);
      assertEquals(0, fsImageProto_SecretManagerSection_DelegationKey0.getId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SynchronousQueue<ByteBuffer> synchronousQueue0 = new SynchronousQueue<ByteBuffer>();
      ArrayDeque<ByteBuffer> arrayDeque0 = new ArrayDeque<ByteBuffer>(synchronousQueue0);
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((Iterable<ByteBuffer>) arrayDeque0);
      FsImageProto.ErasureCodingSection fsImageProto_ErasureCodingSection0 = FsImageProto.ErasureCodingSection.parseFrom(codedInputStream0);
      Descriptors.OneofDescriptor descriptors_OneofDescriptor0 = mock(Descriptors.OneofDescriptor.class, new ViolatedAssumptionAnswer());
      doReturn((Descriptors.Descriptor) null).when(descriptors_OneofDescriptor0).getContainingType();
      // Undeclared exception!
      try { 
        fsImageProto_ErasureCodingSection0.getOneofFieldDescriptor(descriptors_OneofDescriptor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OneofDescriptor does not match message type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.GeneratedMessageV3$FieldAccessorTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      try { 
        FsImageProto.ErasureCodingSection.parseFrom(codedInputStream0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FsImageProto.ErasureCodingSection fsImageProto_ErasureCodingSection0 = FsImageProto.ErasureCodingSection.getDefaultInstance();
      assertEquals(0, fsImageProto_ErasureCodingSection0.getPoliciesCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.ErasureCodingSection.getDescriptor();
      assertEquals(11, descriptors_Descriptor0.getIndex());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FsImageProto.INodeSection.INodeSymlink fsImageProto_INodeSection_INodeSymlink0 = FsImageProto.INodeSection.INodeSymlink.parseDelimitedFrom((InputStream) byteArrayInputStream0);
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder(fsImageProto_INodeSection_INodeSymlink0);
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasTarget());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasAccessTime());
      
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder1 = fsImageProto_INodeSection_INodeSymlink_Builder0.clear();
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getAccessTime());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasPermission());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink_Builder1.getAccessTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink_Builder1.getModificationTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getModificationTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getPermission());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder();
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder1 = fsImageProto_INodeSection_INodeSymlink_Builder0.clearPermission();
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink_Builder1.getPermission());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder1.hasModificationTime());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder();
      fsImageProto_INodeSection_INodeSymlink_Builder0.setPermission((-962L));
      fsImageProto_INodeSection_INodeSymlink_Builder0.getInitializationErrorString();
      assertEquals((-962L), fsImageProto_INodeSection_INodeSymlink_Builder0.getPermission());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FsImageProto.INodeSection.INodeSymlink fsImageProto_INodeSection_INodeSymlink0 = FsImageProto.INodeSection.INodeSymlink.parseDelimitedFrom((InputStream) byteArrayInputStream0);
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder(fsImageProto_INodeSection_INodeSymlink0);
      Descriptors.OneofDescriptor descriptors_OneofDescriptor0 = mock(Descriptors.OneofDescriptor.class, new ViolatedAssumptionAnswer());
      doReturn((Descriptors.Descriptor) null).when(descriptors_OneofDescriptor0).getContainingType();
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_INodeSymlink_Builder0.clearOneof(descriptors_OneofDescriptor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OneofDescriptor does not match message type.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.GeneratedMessageV3$FieldAccessorTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FsImageProto.INodeSection.INodeSymlink fsImageProto_INodeSection_INodeSymlink0 = FsImageProto.INodeSection.INodeSymlink.parseDelimitedFrom((InputStream) byteArrayInputStream0);
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder(fsImageProto_INodeSection_INodeSymlink0);
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasAccessTime());
      
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder1 = fsImageProto_INodeSection_INodeSymlink_Builder0.clearAccessTime();
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder1.hasTarget());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder1.hasPermission());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getPermission());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder1.hasModificationTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink_Builder1.getAccessTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getAccessTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getModificationTime());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder();
      String string0 = fsImageProto_INodeSection_INodeSymlink_Builder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FsImageProto.NameSystemSection.Builder fsImageProto_NameSystemSection_Builder0 = FsImageProto.NameSystemSection.newBuilder();
      fsImageProto_NameSystemSection_Builder0.setTransactionId(0L);
      assertTrue(fsImageProto_NameSystemSection_Builder0.hasTransactionId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.NameSystemSection.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      // Undeclared exception!
      try { 
        FsImageProto.INodeReferenceSection.parseDelimitedFrom((InputStream) null, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FsImageProto.INodeReferenceSection fsImageProto_INodeReferenceSection0 = FsImageProto.INodeReferenceSection.getDefaultInstance();
      FsImageProto.INodeReferenceSection.Builder fsImageProto_INodeReferenceSection_Builder0 = FsImageProto.INodeReferenceSection.newBuilder(fsImageProto_INodeReferenceSection0);
      byte[] byteArray0 = new byte[7];
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0);
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.newInstance();
      try { 
        fsImageProto_INodeReferenceSection_Builder0.mergeFrom(codedInputStream0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FsImageProto.INodeReferenceSection.Builder fsImageProto_INodeReferenceSection_Builder0 = FsImageProto.INodeReferenceSection.newBuilder();
      assertTrue(fsImageProto_INodeReferenceSection_Builder0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FsImageProto.INodeReferenceSection fsImageProto_INodeReferenceSection0 = FsImageProto.INodeReferenceSection.getDefaultInstance();
      byte[] byteArray0 = fsImageProto_INodeReferenceSection0.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.newInstance();
      try { 
        FsImageProto.SnapshotSection.Snapshot.parseFrom(byteArray0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.FileSummary.Section.Builder.getDescriptor();
      assertEquals(0, descriptors_Descriptor0.getIndex());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FsImageProto.SnapshotSection.parseFrom((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FsImageProto.SnapshotSection fsImageProto_SnapshotSection0 = FsImageProto.SnapshotSection.getDefaultInstance();
      assertFalse(fsImageProto_SnapshotSection0.hasNumSnapshots());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FsImageProto.SnapshotDiffSection.FileDiff fsImageProto_SnapshotDiffSection_FileDiff0 = FsImageProto.SnapshotDiffSection.FileDiff.getDefaultInstance();
      FsImageProto.SnapshotDiffSection.FileDiff.Builder fsImageProto_SnapshotDiffSection_FileDiff_Builder0 = FsImageProto.SnapshotDiffSection.FileDiff.newBuilder(fsImageProto_SnapshotDiffSection_FileDiff0);
      byte[] byteArray0 = new byte[0];
      DescriptorProtos.SourceCodeInfo.Location descriptorProtos_SourceCodeInfo_Location0 = DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray0);
      // Undeclared exception!
      try { 
        fsImageProto_SnapshotDiffSection_FileDiff_Builder0.addRepeatedField((Descriptors.FieldDescriptor) null, descriptorProtos_SourceCodeInfo_Location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        FsImageProto.INodeSection.INode.parseFrom((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0, (int) (byte) (-70), (int) (byte)0);
      Field field0 = Field.parseFrom(codedInputStream0);
      ByteString byteString0 = field0.getTypeUrlBytes();
      // Undeclared exception!
      try { 
        FsImageProto.INodeSection.INode.parseFrom(byteString0, (ExtensionRegistryLite) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.FsImageProto$INodeSection$INode$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        FsImageProto.INodeSection.INode.parseDelimitedFrom((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Message missing required fields: type, id
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.UninitializedMessageException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      FsImageProto.SnapshotSection.Snapshot fsImageProto_SnapshotSection_Snapshot0 = FsImageProto.SnapshotSection.Snapshot.parseFrom(codedInputStream0, (ExtensionRegistryLite) extensionRegistry0);
      FsImageProto.INodeSection.INode fsImageProto_INodeSection_INode0 = fsImageProto_SnapshotSection_Snapshot0.getRoot();
      FsImageProto.INodeSection.INode.Builder fsImageProto_INodeSection_INode_Builder0 = fsImageProto_INodeSection_INode0.toBuilder();
      // Undeclared exception!
      try { 
        fsImageProto_INodeSection_INode_Builder0.addRepeatedField((Descriptors.FieldDescriptor) null, extensionRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NullByteBufferPool nullByteBufferPool0 = new NullByteBufferPool();
      ByteBuffer byteBuffer0 = nullByteBufferPool0.acquire(595, true);
      FsImageProto.INodeSection.INodeDirectory fsImageProto_INodeSection_INodeDirectory0 = FsImageProto.INodeSection.INodeDirectory.parseFrom(byteBuffer0);
      FsImageProto.INodeSection.XAttrFeatureProtoOrBuilder fsImageProto_INodeSection_XAttrFeatureProtoOrBuilder0 = fsImageProto_INodeSection_INodeDirectory0.getXAttrsOrBuilder();
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasTypeQuotas());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getDsQuota());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getNsQuota());
      assertFalse(fsImageProto_INodeSection_INodeDirectory0.hasXAttrs());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getPermission());
      assertNotNull(fsImageProto_INodeSection_XAttrFeatureProtoOrBuilder0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      try { 
        FsImageProto.INodeSection.XAttrFeatureProto.parseFrom(byteArray0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FsImageProto.INodeDirectorySection.Builder fsImageProto_INodeDirectorySection_Builder0 = FsImageProto.INodeDirectorySection.newBuilder();
      Descriptors.Descriptor descriptors_Descriptor0 = fsImageProto_INodeDirectorySection_Builder0.getDescriptorForType();
      assertEquals("hadoop.hdfs.fsimage.INodeDirectorySection", descriptors_Descriptor0.getFullName());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.INodeDirectorySection.Builder.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FsImageProto.INodeSection.INodeSymlink fsImageProto_INodeSection_INodeSymlink0 = FsImageProto.INodeSection.INodeSymlink.parseDelimitedFrom((InputStream) byteArrayInputStream0);
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder(fsImageProto_INodeSection_INodeSymlink0);
      fsImageProto_INodeSection_INodeSymlink_Builder0.clone();
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasModificationTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasPermission());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getAccessTime());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasTarget());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getPermission());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder0.hasAccessTime());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FsImageProto.INodeSection.INodeSymlink fsImageProto_INodeSection_INodeSymlink0 = FsImageProto.INodeSection.INodeSymlink.parseDelimitedFrom((InputStream) byteArrayInputStream0);
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder0 = FsImageProto.INodeSection.INodeSymlink.newBuilder(fsImageProto_INodeSection_INodeSymlink0);
      FsImageProto.INodeSection.INodeSymlink.Builder fsImageProto_INodeSection_INodeSymlink_Builder1 = fsImageProto_INodeSection_INodeSymlink_Builder0.clearTarget();
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getPermission());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder1.hasAccessTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getAccessTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeSymlink0.getModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder1.hasModificationTime());
      assertFalse(fsImageProto_INodeSection_INodeSymlink0.hasTarget());
      assertFalse(fsImageProto_INodeSection_INodeSymlink_Builder1.hasPermission());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.SnapshotDiffSection.CreatedListEntry.Builder.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      try { 
        FsImageProto.INodeSection.parseDelimitedFrom((InputStream) bufferedInputStream0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        FsImageProto.INodeSection.parseFrom((CodedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.FsImageProto$INodeSection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = FsImageProto.INodeSection.getDescriptor();
      assertEquals("hadoop.hdfs.fsimage.INodeSection", descriptors_Descriptor0.getFullName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        FsImageProto.SnapshotDiffSection.DiffEntry.parseFrom((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.newInstance();
      try { 
        FsImageProto.SnapshotDiffSection.DiffEntry.parseFrom(byteArray0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FsImageProto.INodeSection.INodeDirectory.parseFrom(byteArray0, (ExtensionRegistryLite) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.FsImageProto$INodeSection$INodeDirectory$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NullByteBufferPool nullByteBufferPool0 = new NullByteBufferPool();
      ByteBuffer byteBuffer0 = nullByteBufferPool0.acquire(595, true);
      FsImageProto.INodeSection.INodeDirectory fsImageProto_INodeSection_INodeDirectory0 = FsImageProto.INodeSection.INodeDirectory.parseFrom(byteBuffer0);
      Map<Descriptors.FieldDescriptor, Object> map0 = fsImageProto_INodeSection_INodeDirectory0.getAllFields();
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getModificationTime());
      assertEquals(0L, fsImageProto_INodeSection_INodeDirectory0.getPermission());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      // Undeclared exception!
      try { 
        FsImageProto.FilesUnderConstructionSection.parseFrom((CodedInputStream) null, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.FsImageProto$FilesUnderConstructionSection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FsImageProto.FilesUnderConstructionSection fsImageProto_FilesUnderConstructionSection0 = FsImageProto.FilesUnderConstructionSection.getDefaultInstance();
      int int0 = fsImageProto_FilesUnderConstructionSection0.getSerializedSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FsImageProto.FilesUnderConstructionSection fsImageProto_FilesUnderConstructionSection0 = FsImageProto.FilesUnderConstructionSection.parseFrom((InputStream) null);
      assertNotNull(fsImageProto_FilesUnderConstructionSection0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LogarithmicArrayByteBufferPool logarithmicArrayByteBufferPool0 = new LogarithmicArrayByteBufferPool(988, 988);
      ByteBuffer byteBuffer0 = logarithmicArrayByteBufferPool0.acquire(988, false);
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      // Undeclared exception!
      try { 
        fsImageProto_SecretManagerSection_PersistToken_Builder0.setRepeatedField((Descriptors.FieldDescriptor) null, 7, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder1 = fsImageProto_SecretManagerSection_PersistToken_Builder0.clearMaxDate();
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasVersion());
      assertEquals(0L, fsImageProto_SecretManagerSection_PersistToken_Builder1.getMaxDate());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder1 = fsImageProto_SecretManagerSection_PersistToken_Builder0.clearRealUser();
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasVersion());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder1 = fsImageProto_SecretManagerSection_PersistToken_Builder0.clearMasterKeyId();
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasVersion());
      assertEquals(0, fsImageProto_SecretManagerSection_PersistToken_Builder1.getMasterKeyId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      fsImageProto_SecretManagerSection_PersistToken_Builder0.setMaxDate((-1L));
      fsImageProto_SecretManagerSection_PersistToken_Builder0.toString();
      assertEquals((-1L), fsImageProto_SecretManagerSection_PersistToken_Builder0.getMaxDate());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder1 = fsImageProto_SecretManagerSection_PersistToken_Builder0.clearIssueDate();
      assertEquals(0L, fsImageProto_SecretManagerSection_PersistToken_Builder1.getIssueDate());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasVersion());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      fsImageProto_SecretManagerSection_PersistToken_Builder0.setSequenceNumber(0);
      assertTrue(fsImageProto_SecretManagerSection_PersistToken_Builder0.hasSequenceNumber());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder1 = fsImageProto_SecretManagerSection_PersistToken_Builder0.clearExpiryDate();
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasVersion());
      assertEquals(0L, fsImageProto_SecretManagerSection_PersistToken_Builder1.getExpiryDate());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      fsImageProto_SecretManagerSection_PersistToken_Builder0.setIssueDate((-1L));
      assertEquals((-1L), fsImageProto_SecretManagerSection_PersistToken_Builder0.getIssueDate());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      String string0 = fsImageProto_SecretManagerSection_PersistToken_Builder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder0 = FsImageProto.SecretManagerSection.PersistToken.newBuilder();
      FsImageProto.SecretManagerSection.PersistToken.Builder fsImageProto_SecretManagerSection_PersistToken_Builder1 = fsImageProto_SecretManagerSection_PersistToken_Builder0.clone();
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasVersion());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasOwner());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasIssueDate());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasExpiryDate());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasMaxDate());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasMasterKeyId());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasRenewer());
      assertFalse(fsImageProto_SecretManagerSection_PersistToken_Builder1.hasSequenceNumber());
  }
}
