/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 11 00:10:23 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.ha.proto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;
import org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos;
import org.apache.hadoop.thirdparty.protobuf.ByteString;
import org.apache.hadoop.thirdparty.protobuf.CodedInputStream;
import org.apache.hadoop.thirdparty.protobuf.DescriptorProtos;
import org.apache.hadoop.thirdparty.protobuf.Descriptors;
import org.apache.hadoop.thirdparty.protobuf.ExtensionRegistry;
import org.apache.hadoop.thirdparty.protobuf.ExtensionRegistryLite;
import org.apache.hadoop.thirdparty.protobuf.Message;
import org.apache.hadoop.thirdparty.protobuf.MessageLite;
import org.apache.hadoop.thirdparty.protobuf.Parser;
import org.apache.hadoop.thirdparty.protobuf.UnknownFieldSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HAZKInfoProtos_ESTest extends HAZKInfoProtos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setPort((byte)21);
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setPort(32);
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostname("");
      LinkedBlockingQueue<ByteString> linkedBlockingQueue0 = new LinkedBlockingQueue<ByteString>();
      ByteString byteString0 = ByteString.copyFrom((Iterable<ByteString>) linkedBlockingQueue0);
      hAZKInfoProtos_ActiveNodeInfo_Builder1.setHostnameBytes(byteString0);
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasHostname());
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      UnknownFieldSet.Field unknownFieldSet_Field0 = UnknownFieldSet.Field.getDefaultInstance();
      ByteString byteString0 = unknownFieldSet_Field0.toByteString(2);
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostnameBytes(byteString0);
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostname(")Sryx](uT$*:'");
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasHostname());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = hAZKInfoProtos_ActiveNodeInfo0.newBuilderForType();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeId("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(41);
      ByteString byteString0 = ByteString.copyFrom(byteBuffer0, 2);
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeIdBytes(byteString0);
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNamenodeId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeId("");
      hAZKInfoProtos_ActiveNodeInfo_Builder1.setNamenodeId("N/aivQ3y,1g0Q");
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNamenodeId());
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceId("");
      hAZKInfoProtos_ActiveNodeInfo_Builder1.setNameserviceId("%o_2NKE_AWOxJ\t|\"=-");
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeId("");
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder2 = hAZKInfoProtos_ActiveNodeInfo_Builder1.clone();
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNamenodeId());
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder2.hasHostname());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceId("`c}! <DM-");
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder2 = hAZKInfoProtos_ActiveNodeInfo_Builder1.clone();
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder2.hasPort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo0.hasZkfcPort();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo0.hasPort();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      int int0 = hAZKInfoProtos_ActiveNodeInfo0.getZkfcPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      String string0 = hAZKInfoProtos_ActiveNodeInfo0.getNameserviceId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      String string0 = hAZKInfoProtos_ActiveNodeInfo0.getNamenodeId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      String string0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getHostname();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HAZKInfoProtos.getDescriptor();
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      ExtensionRegistryLite.newInstance();
      ExtensionRegistry.newInstance();
      HAZKInfoProtos.getDescriptor();
      HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      ExtensionRegistry.newInstance();
      HAZKInfoProtos.getDescriptor();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo0.getNamenodeIdBytes();
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setPort(64);
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.hasPort();
      assertEquals(64, hAZKInfoProtos_ActiveNodeInfo_Builder0.getPort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostnameBytes((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostname((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getHostnameBytes();
      ByteString byteString1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getHostnameBytes();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.getHostnameBytes();
      String string0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getHostname();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasHostname());
      
      UnknownFieldSet.Field unknownFieldSet_Field0 = UnknownFieldSet.Field.getDefaultInstance();
      ByteString byteString0 = unknownFieldSet_Field0.toByteString(2);
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostnameBytes(byteString0);
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo_Builder1.hasHostname();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeIdBytes((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = hAZKInfoProtos_ActiveNodeInfo0.newBuilderForType();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      String string0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getNamenodeId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceIdBytes((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = hAZKInfoProtos_ActiveNodeInfo0.newBuilderForType();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getNameserviceIdBytes();
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(byteBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message end-group tag did not match expected tag.
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(byteBuffer0, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.getEmptyRegistry();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(byteArray0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol message contained an invalid tag (zero).
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.InvalidProtocolBufferException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom((InputStream) pipedInputStream0, (ExtensionRegistryLite) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.ha.proto.HAZKInfoProtos$ActiveNodeInfo$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = hAZKInfoProtos_ActiveNodeInfo0.newBuilderForType();
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.isInitialized();
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
      
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceId("");
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.isInitialized();
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setPort((byte) (-42));
      hAZKInfoProtos_ActiveNodeInfo_Builder0.clone();
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasPort());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostname("");
      hAZKInfoProtos_ActiveNodeInfo_Builder0.clone();
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasHostname());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeId("50-7E");
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = hAZKInfoProtos_ActiveNodeInfo_Builder1.buildPartial();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.mergeFrom((Message) hAZKInfoProtos_ActiveNodeInfo0);
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNamenodeId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder(hAZKInfoProtos_ActiveNodeInfo0);
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.mergeFrom((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      int int0 = hAZKInfoProtos_ActiveNodeInfo0.getSerializedSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo0.toByteString();
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo0.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostname("");
      LinkedBlockingQueue<ByteString> linkedBlockingQueue0 = new LinkedBlockingQueue<ByteString>();
      ByteString byteString0 = ByteString.copyFrom((Iterable<ByteString>) linkedBlockingQueue0);
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder2 = hAZKInfoProtos_ActiveNodeInfo_Builder1.setNameserviceId("sBUq8Z#4w9u-7>");
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeIdBytes(byteString0);
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder2.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Message missing required fields: port, zkfcPort
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      boolean boolean0 = hAZKInfoProtos_ActiveNodeInfo0.isInitialized();
      assertFalse(hAZKInfoProtos_ActiveNodeInfo0.hasNameserviceId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HAZKInfoProtos.getDescriptor();
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo0.getHostnameBytes();
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo0.getHostnameBytes();
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      String string0 = hAZKInfoProtos_ActiveNodeInfo0.getHostname();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setHostname("");
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder1.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Message missing required fields: nameserviceId, namenodeId, port, zkfcPort
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo0.getNamenodeIdBytes();
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.clearNamenodeId();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder2 = hAZKInfoProtos_ActiveNodeInfo_Builder1.clear();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder3 = hAZKInfoProtos_ActiveNodeInfo_Builder2.setZkfcPort((-1));
      hAZKInfoProtos_ActiveNodeInfo_Builder3.hasPort();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder3.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Message missing required fields: nameserviceId, namenodeId, hostname, port
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HAZKInfoProtos.getDescriptor();
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      hAZKInfoProtos_ActiveNodeInfo0.getHostname();
      hAZKInfoProtos_ActiveNodeInfo0.getSerializedSize();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo0.getNameserviceIdBytes();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = hAZKInfoProtos_ActiveNodeInfo0.toBuilder();
      Map<Descriptors.FieldDescriptor, Object> map0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getAllFields();
      assertEquals(0, map0.size());
      
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceIdBytes(byteString0);
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo0.getNameserviceIdBytes();
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceId("");
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = hAZKInfoProtos_ActiveNodeInfo_Builder1.buildPartial();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.mergeFrom((MessageLite) hAZKInfoProtos_ActiveNodeInfo0);
      assertTrue(hAZKInfoProtos_ActiveNodeInfo_Builder0.hasNameserviceId());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      HAZKInfoProtos.registerAllExtensions(extensionRegistry0);
      assertFalse(extensionRegistry0.isEagerlyParseMessageSets());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      HAZKInfoProtos.registerAllExtensions((ExtensionRegistryLite) extensionRegistry0);
      assertFalse(extensionRegistry0.isEagerlyParseMessageSets());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      int int0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Descriptors.FileDescriptor descriptors_FileDescriptor0 = HAZKInfoProtos.getDescriptor();
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder(hAZKInfoProtos_ActiveNodeInfo0);
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.addRepeatedField((Descriptors.FieldDescriptor) null, descriptors_FileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = HAZKInfoProtos.ActiveNodeInfo.Builder.getDescriptor();
      assertFalse(descriptors_Descriptor0.isExtendable());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.setZkfcPort((byte) (-12));
      hAZKInfoProtos_ActiveNodeInfo_Builder0.getInitializationErrorString();
      assertEquals((-12), hAZKInfoProtos_ActiveNodeInfo_Builder0.getZkfcPort());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setField((Descriptors.FieldDescriptor) null, hAZKInfoProtos_ActiveNodeInfo_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Descriptors.FileDescriptor descriptors_FileDescriptor0 = HAZKInfoProtos.getDescriptor();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.setRepeatedField((Descriptors.FieldDescriptor) null, 2, descriptors_FileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = hAZKInfoProtos_ActiveNodeInfo0.toBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.clearHostname();
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder1.hasNameserviceId());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      hAZKInfoProtos_ActiveNodeInfo_Builder0.clearNameserviceId();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNameserviceId("50-7E");
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder2 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setNamenodeId("50-7E");
      ExtensionRegistryLite.setEagerlyParseMessageSets(false);
      HAZKInfoProtos.getDescriptor();
      hAZKInfoProtos_ActiveNodeInfo_Builder2.getNameserviceId();
      hAZKInfoProtos_ActiveNodeInfo_Builder1.hasNameserviceId();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      ByteBuffer.wrap(byteArray0);
      ExtensionRegistry.getEmptyRegistry();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder1.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Message missing required fields: hostname, port, zkfcPort
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractMessage$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.clearZkfcPort();
      assertEquals(0, hAZKInfoProtos_ActiveNodeInfo_Builder1.getZkfcPort());
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder1.hasNameserviceId());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      DescriptorProtos.SourceCodeInfo.Location descriptorProtos_SourceCodeInfo_Location0 = DescriptorProtos.SourceCodeInfo.Location.getDefaultInstance();
      UnknownFieldSet unknownFieldSet0 = descriptorProtos_SourceCodeInfo_Location0.getUnknownFields();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.setUnknownFields(unknownFieldSet0);
      assertEquals(0, hAZKInfoProtos_ActiveNodeInfo_Builder1.getPort());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.clearField((Descriptors.FieldDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = hAZKInfoProtos_ActiveNodeInfo0.newBuilderForType();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder1 = hAZKInfoProtos_ActiveNodeInfo_Builder0.clearPort();
      assertEquals(0, hAZKInfoProtos_ActiveNodeInfo_Builder1.getPort());
      assertFalse(hAZKInfoProtos_ActiveNodeInfo_Builder1.hasNameserviceId());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder(hAZKInfoProtos_ActiveNodeInfo0);
      // Undeclared exception!
      try { 
        hAZKInfoProtos_ActiveNodeInfo_Builder0.clearOneof((Descriptors.OneofDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.GeneratedMessageV3$FieldAccessorTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      Parser<HAZKInfoProtos.ActiveNodeInfo> parser0 = hAZKInfoProtos_ActiveNodeInfo0.getParserForType();
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      // Undeclared exception!
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom((ByteString) null, (ExtensionRegistryLite) extensionRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Parser<HAZKInfoProtos.ActiveNodeInfo> parser0 = HAZKInfoProtos.ActiveNodeInfo.parser();
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseDelimitedFrom((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.AbstractParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((InputStream) null, 1621);
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.newInstance();
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(codedInputStream0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Message missing required fields: nameserviceId, namenodeId, hostname, port, zkfcPort
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.UninitializedMessageException", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Message missing required fields: nameserviceId, namenodeId, hostname, port, zkfcPort
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.UninitializedMessageException", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = HAZKInfoProtos.ActiveNodeInfo.getDescriptor();
      assertEquals(0, descriptors_Descriptor0.getIndex());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo.Builder hAZKInfoProtos_ActiveNodeInfo_Builder0 = HAZKInfoProtos.ActiveNodeInfo.newBuilder();
      ByteString byteString0 = hAZKInfoProtos_ActiveNodeInfo_Builder0.getNamenodeIdBytes();
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(byteString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Message missing required fields: nameserviceId, namenodeId, hostname, port, zkfcPort
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.UninitializedMessageException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((InputStream) pipedInputStream0, 1);
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(codedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.getDefaultInstance();
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo1 = hAZKInfoProtos_ActiveNodeInfo0.getDefaultInstanceForType();
      assertEquals(1, HAZKInfoProtos.ActiveNodeInfo.NAMESERVICEID_FIELD_NUMBER);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)29, 2992);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      HAZKInfoProtos.ActiveNodeInfo hAZKInfoProtos_ActiveNodeInfo0 = HAZKInfoProtos.ActiveNodeInfo.parseDelimitedFrom((InputStream) dataInputStream0, (ExtensionRegistryLite) extensionRegistry0);
      assertNull(hAZKInfoProtos_ActiveNodeInfo0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ExtensionRegistryLite extensionRegistryLite0 = ExtensionRegistryLite.getEmptyRegistry();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[2] = (byte)109;
      try { 
        HAZKInfoProtos.ActiveNodeInfo.parseFrom(byteArray0, extensionRegistryLite0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Message missing required fields: nameserviceId, namenodeId, hostname, zkfcPort
         //
         verifyException("org.apache.hadoop.thirdparty.protobuf.UninitializedMessageException", e);
      }
  }
}
