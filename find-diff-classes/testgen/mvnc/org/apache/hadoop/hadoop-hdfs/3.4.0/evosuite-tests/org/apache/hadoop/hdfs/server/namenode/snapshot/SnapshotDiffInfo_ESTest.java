/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 11 00:14:16 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.snapshot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.fs.permission.PermissionStatus;
import org.apache.hadoop.hdfs.server.namenode.INodeDirectory;
import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SnapshotDiffInfo_ESTest extends SnapshotDiffInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getUMask((Configuration) null);
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable(";#upC'q-1C_%", "O*t}kOt$C/w3", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(0L, byteArray0, permissionStatus0, 0L);
      SnapshotDiffInfo snapshotDiffInfo0 = null;
      try {
        snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, (INodeDirectory) null, (Snapshot) null, (Snapshot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.util.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SnapshotDiffInfo snapshotDiffInfo0 = null;
      try {
        snapshotDiffInfo0 = new SnapshotDiffInfo((INodeDirectory) null, (INodeDirectory) null, (Snapshot) null, (Snapshot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = snapshotDiffInfo_RenameEntry0.getSourcePath();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo$RenameEntry", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 0L);
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[7][8];
      snapshotDiffInfo_RenameEntry0.setTarget(byteArray0);
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo$RenameEntry", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 0L);
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[7][8];
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo$RenameEntry", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 0L);
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[7][3];
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      // Undeclared exception!
      try { 
        snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.util.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[] byteArray0 = new byte[7];
      FsPermission fsPermission0 = FsPermission.getUMask((Configuration) null);
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("#^h.0>n`^T3\"w<{U8", "#^h.0>n`^T3\"w<{U8", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1043L, byteArray0, permissionStatus0, 1283L);
      byte[][] byteArray1 = new byte[9][0];
      snapshotDiffInfo_RenameEntry0.setTarget(iNodeDirectory0, byteArray1);
      assertEquals(1043L, iNodeDirectory0.getId());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = snapshotDiffInfo_RenameEntry0.getTargetPath();
      assertNull(byteArray0);
  }
}
