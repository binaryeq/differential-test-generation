/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 11 00:12:44 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.snapshot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.permission.FsAction;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.fs.permission.PermissionStatus;
import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
import org.apache.hadoop.hdfs.server.blockmanagement.BlockStoragePolicySuite;
import org.apache.hadoop.hdfs.server.namenode.ContentCounts;
import org.apache.hadoop.hdfs.server.namenode.ContentSummaryComputationContext;
import org.apache.hadoop.hdfs.server.namenode.FSDirectory;
import org.apache.hadoop.hdfs.server.namenode.FSNamesystem;
import org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker;
import org.apache.hadoop.hdfs.server.namenode.INode;
import org.apache.hadoop.hdfs.server.namenode.INodeDirectory;
import org.apache.hadoop.hdfs.server.namenode.INodeReference;
import org.apache.hadoop.hdfs.server.namenode.LeaseManager;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectoryWithSnapshotFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectorySnapshottableFeature_ESTest extends DirectorySnapshottableFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-16), byteArray0, permissionStatus0, (byte) (-16));
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      INodeReference.WithCount iNodeReference_WithCount0 = new INodeReference.WithCount((INodeReference) null, iNodeDirectory0);
      INodeReference.WithName iNodeReference_WithName0 = new INodeReference.WithName(iNodeDirectory0, iNodeReference_WithCount0, fSDirectory0.DOT_RESERVED, 2);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      byte[][] byteArray1 = directorySnapshottableFeature0.findRenameTargetPath(iNodeDirectory0, iNodeReference_WithName0, (-1));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)1, byteArray0, permissionStatus0, (-1L));
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "", leaseManager0, (byte)1);
      LeaseManager leaseManager1 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".inodes", leaseManager1, (-1));
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshotByName(iNodeDirectory0, ".inodes");
      assertNotNull(snapshot0);
      assertEquals(0, snapshot0.getId());
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)1, byteArray0, permissionStatus0, (-1L));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      INodeDirectory iNodeDirectory1 = new INodeDirectory((-1L), byteArray0, permissionStatus0, (byte)1);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory1, iNodeDirectory0, "Wpj~`mZ`Q$>f$#oz5", "dfs.datanode.fsdatasetasyncdisk.max.threads.per.volume", byteArray0, (-4008), (-3295));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.util.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.createImmutable((short)2439);
      PermissionStatus permissionStatus0 = new PermissionStatus("XS", "XS", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(945L, (byte[]) null, permissionStatus0, (-2592L));
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff((INodeDirectory) null, iNodeDirectory0, "ng6{pj7\rV=", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.INodeDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("A>~4~'64p?\"", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 10);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".reserved", leaseManager0, 5565L);
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "D", (LeaseManager) null, (-1L));
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "D", (LeaseManager) null, 2147483646);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there is already a snapshot with the same name \"D\".
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("A>~4~'64p?\"", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1040L, (byte[]) null, permissionStatus0, 855L);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.setSnapshotQuota(272);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "{<=MDV*", leaseManager0, 10);
      assertEquals(272, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus((String) null, (String) null, fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-1), byteArray0, permissionStatus0, (-1L));
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "fs.permissions.umask-mode", leaseManager0, (byte) (-1));
      LeaseManager leaseManager1 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "O9M%1~%-W]!-FF", leaseManager1, (-1L));
      assertEquals(0, snapshot0.getId());
      
      directorySnapshottableFeature0.renameSnapshot(".reserved", "fs.permissions.umask-mode", "D", (byte) (-1));
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "A>~4~'64p?\"", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 10);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".reserved", leaseManager0, 884L);
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "=ko#C=KI^dW$FH^OWU", (LeaseManager) null, 4);
      assertEquals(0, snapshot0.getId());
      
      directorySnapshottableFeature0.renameSnapshot("i,z/gnm>EZt", "=ko#C=KI^dW$FH^OWU", "2b#:y1>:Z%=]IOd7", 2580L);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1L), byteArray0, permissionStatus0, 10);
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, (FSDirectory) null);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "", (LeaseManager) null, 10);
      assertEquals(0, snapshot0.getId());
      
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById((-1));
      assertNull(snapshot1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("A>~4~'64p?\"", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 10);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".reserved", leaseManager0, 884L);
      Snapshot snapshot1 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "&hOIQ3_Q9,iH", (LeaseManager) null, 0L);
      assertEquals(0, snapshot1.getId());
      
      Snapshot snapshot2 = directorySnapshottableFeature0.getSnapshot(fSDirectory0.DOT_RESERVED);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNotNull(snapshot2);
      assertSame(snapshot2, snapshot0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectoryWithSnapshotFeature directoryWithSnapshotFeature0 = new DirectoryWithSnapshotFeature((DirectoryWithSnapshotFeature.DirectoryDiffList) null);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature(directoryWithSnapshotFeature0);
      directorySnapshottableFeature0.setSnapshotQuota(0);
      int int0 = directorySnapshottableFeature0.getSnapshotQuota();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("A>~4~'64p?\"", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 10);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".reserved", leaseManager0, 884L);
      assertEquals(0, snapshot0.getId());
      
      directorySnapshottableFeature0.getNumSnapshots();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("A>~4~'6>p?\"", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1073741824L, (byte[]) null, permissionStatus0, 468L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      snapshotManager0.setSnapshotCounter(18);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".inodes", leaseManager0, (-1L));
      assertEquals(18, snapshot0.getId());
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.renameSnapshot((String) null, (String) null, "", 1501L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.DFSUtilClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-8), byteArray0, permissionStatus0, (-1L));
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fSDirectory0).isImageLoaded();
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.removeSnapshot((INode.ReclaimContext) null, iNodeDirectory0, ".inodes", (-1L), snapshotManager0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot delete snapshot .inodes from path /: the snapshot does not exist.
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.getSnapshotByName((INodeDirectory) null, ";0MmsUY/y~m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirectoryWithSnapshotFeature directoryWithSnapshotFeature0 = new DirectoryWithSnapshotFeature((DirectoryWithSnapshotFeature.DirectoryDiffList) null);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature(directoryWithSnapshotFeature0);
      directorySnapshottableFeature0.addSnapshot((Snapshot) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.getSnapshotById(67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.findRenameTargetPath((INodeDirectory) null, (INodeReference.WithName) null, 2358);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      MockFile mockFile0 = new MockFile(".reserved", "fs.permissions.umask-mode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.dumpTreeRecursively((INodeDirectory) null, mockPrintWriter0, stringBuilder0, 2147483646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff((INodeDirectory) null, (INodeDirectory) null, "5#", "5#", byteArray0, 20000, 20000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)9, byteArray0, permissionStatus0, (byte)9);
      iNodeDirectory0.addSnapshottableFeature();
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory0, iNodeDirectory0, "fs.permissions.umask-mode", ")");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find the snapshot of directory / with name fs.permissions.umask-mode
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1L), byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory0, iNodeDirectory0, "}*xYaDBN", "fs.permissions.umask-mode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.util.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      BlockStoragePolicySuite blockStoragePolicySuite0 = BlockStoragePolicySuite.createDefaultSuite();
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeContentSummary4Snapshot(blockStoragePolicySuite0, (ContentCounts) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.addSnapshot((INodeDirectory) null, (SnapshotManager) null, "S", (LeaseManager) null, 5751L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      int int0 = directorySnapshottableFeature0.getSnapshotQuota();
      assertEquals(65536, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getNumSnapshots();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)1, byteArray0, permissionStatus0, 0L);
      StringBuilder stringBuilder0 = new StringBuilder("H");
      MockFile mockFile0 = new MockFile("fs.permissions.umask-mode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.addSnapshot((Snapshot) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.dumpTreeRecursively(iNodeDirectory0, mockPrintWriter0, stringBuilder0, 2147483646);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // #n=0, snapshotsByNames.size()=1
         //
         verifyException("org.apache.hadoop.util.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)1, byteArray0, permissionStatus0, (-1L));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      StringBuilder stringBuilder0 = new StringBuilder("");
      directorySnapshottableFeature0.dumpTreeRecursively(iNodeDirectory0, mockPrintWriter0, stringBuilder0, 2198);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus(" < 0", (String) null, fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)1, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      INodeReference.WithCount iNodeReference_WithCount0 = new INodeReference.WithCount((INodeReference) null, iNodeDirectory0);
      INodeReference.WithName iNodeReference_WithName0 = new INodeReference.WithName(iNodeDirectory0, iNodeReference_WithCount0, byteArray0, 2147483646);
      byte[][] byteArray1 = directorySnapshottableFeature0.findRenameTargetPath(iNodeDirectory0, iNodeReference_WithName0, 10000);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)1, byteArray0, permissionStatus0, (byte)1);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      INodeReference.WithCount iNodeReference_WithCount0 = new INodeReference.WithCount((INodeReference) null, iNodeDirectory0);
      INodeReference.WithName iNodeReference_WithName0 = new INodeReference.WithName(iNodeDirectory0, iNodeReference_WithCount0, fSDirectory0.DOT_RESERVED, 3983);
      byte[][] byteArray1 = directorySnapshottableFeature0.findRenameTargetPath(iNodeDirectory0, iNodeReference_WithName0, (-947));
      assertNotNull(byteArray1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus((String) null, (String) null, fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-1), byteArray0, permissionStatus0, (-1L));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      INodeReference.WithCount iNodeReference_WithCount0 = new INodeReference.WithCount((INodeReference) null, iNodeDirectory0);
      INodeReference.WithName iNodeReference_WithName0 = new INodeReference.WithName((INodeDirectory) null, iNodeReference_WithCount0, byteArray0, 1);
      byte[][] byteArray1 = directorySnapshottableFeature0.findRenameTargetPath((INodeDirectory) null, iNodeReference_WithName0, 2279);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshotByName((INodeDirectory) null, "");
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-16), byteArray0, permissionStatus0, (byte) (-16));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.getSnapshotByName(iNodeDirectory0, "3@&e*d");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find the snapshot of directory / with name 3@&e*d
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("A>~4~'6>p?\"", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1073741824L, (byte[]) null, permissionStatus0, 468L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshotByName(iNodeDirectory0, (String) null);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      BlockStoragePolicySuite blockStoragePolicySuite0 = BlockStoragePolicySuite.createDefaultSuite();
      INode.BlocksMapUpdateInfo iNode_BlocksMapUpdateInfo0 = new INode.BlocksMapUpdateInfo();
      LinkedList<INode> linkedList0 = new LinkedList<INode>();
      INode.ReclaimContext iNode_ReclaimContext0 = new INode.ReclaimContext(blockStoragePolicySuite0, iNode_BlocksMapUpdateInfo0, linkedList0, (List<Long>) null);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fSDirectory0).isImageLoaded();
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      directorySnapshottableFeature0.removeSnapshot(iNode_ReclaimContext0, (INodeDirectory) null, "hsm.block.storage.policy.id", 4, snapshotManager0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      BlockStoragePolicySuite blockStoragePolicySuite0 = BlockStoragePolicySuite.createDefaultSuite(configuration0);
      INode.BlocksMapUpdateInfo iNode_BlocksMapUpdateInfo0 = new INode.BlocksMapUpdateInfo();
      LinkedList<INode> linkedList0 = new LinkedList<INode>();
      INode.ReclaimContext iNode_ReclaimContext0 = new INode.ReclaimContext(blockStoragePolicySuite0, iNode_BlocksMapUpdateInfo0, linkedList0, (List<Long>) null);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fSDirectory0).isImageLoaded();
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.removeSnapshot(iNode_ReclaimContext0, (INodeDirectory) null, "hsm.block.storage.policy.id", 4, snapshotManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      INode.BlocksMapUpdateInfo iNode_BlocksMapUpdateInfo0 = new INode.BlocksMapUpdateInfo();
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus((String) null, (String) null, fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)14, byteArray0, permissionStatus0, (-1L));
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "fs.permissions.umask-mode", leaseManager0, (byte)14);
      BlockStoragePolicySuite blockStoragePolicySuite0 = BlockStoragePolicySuite.createDefaultSuite(configuration0);
      Stack<INode> stack0 = new Stack<INode>();
      INode.ReclaimContext iNode_ReclaimContext0 = new INode.ReclaimContext(blockStoragePolicySuite0, iNode_BlocksMapUpdateInfo0, stack0, (List<Long>) null);
      directorySnapshottableFeature0.removeSnapshot(iNode_ReclaimContext0, iNodeDirectory0, "fs.permissions.umask-mode", 18, snapshotManager0);
      assertEquals(0, iNode_ReclaimContext0.getSnapshotIdToBeDeleted());
      assertEquals(0, directorySnapshottableFeature0.getNumSnapshots());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, byteArray0, permissionStatus0, 0L);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".inodes", leaseManager0, 2);
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, ".inodes", (LeaseManager) null, 18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there is already a snapshot with the same name \".inodes\".
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.setSnapshotQuota((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set snapshot quota to -1 < 0
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-16), byteArray0, permissionStatus0, (byte) (-16));
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "%g_CcV", leaseManager0, 2);
      directorySnapshottableFeature0.renameSnapshot(".inodes", "%g_CcV", "3@&e*d", 18);
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshotByName(iNodeDirectory0, "3@&e*d");
      assertEquals(0, snapshot0.getId());
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNotNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus((String) null, (String) null, fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-1), byteArray0, permissionStatus0, 8L);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "fs.permissions.umask-mode", leaseManager0, (byte) (-1));
      assertEquals(0, snapshot0.getId());
      
      directorySnapshottableFeature0.renameSnapshot(".reserved", "fs.permissions.umask-mode", "fs.permissions.umask-mode", (byte) (-1));
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.renameSnapshot("'", "@&*d", "fs.permissions.umask-mode", 0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The snapshot @&*d does not exist for directory '
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[5];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-16), byteArray0, permissionStatus0, (byte)126);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "fs.permissions.umask-mode", leaseManager0, 1L);
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshotById(0);
      assertNotNull(snapshot0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Configuration configuration0 = new Configuration(false);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-16), byteArray0, permissionStatus0, (byte) (-16));
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "%g_CcV", leaseManager0, 2);
      assertEquals(0, snapshot0.getId());
      
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById(18);
      assertNull(snapshot1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshot(byteArray0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Configuration configuration0 = new Configuration(false);
      byte[] byteArray0 = new byte[2];
      FsAction fsAction0 = FsAction.READ_WRITE;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0, false);
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("", ">)7y#", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1137L), byteArray0, permissionStatus0, 1206L);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      SnapshotManager snapshotManager0 = new SnapshotManager(configuration0, fSDirectory0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, snapshotManager0, "", leaseManager0, 1037L);
      byte[] byteArray1 = new byte[0];
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshot(byteArray1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertEquals(0, snapshot0.getId());
      assertNotNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      BlockStoragePolicySuite blockStoragePolicySuite0 = new BlockStoragePolicySuite((byte)1, (BlockStoragePolicy[]) null);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      FSNamesystem fSNamesystem0 = mock(FSNamesystem.class, new ViolatedAssumptionAnswer());
      FSPermissionChecker fSPermissionChecker0 = mock(FSPermissionChecker.class, new ViolatedAssumptionAnswer());
      ContentSummaryComputationContext contentSummaryComputationContext0 = new ContentSummaryComputationContext(fSDirectory0, fSNamesystem0, 2147483646, (-981L), fSPermissionChecker0);
      ContentCounts contentCounts0 = contentSummaryComputationContext0.getCounts();
      directorySnapshottableFeature0.computeContentSummary4Snapshot(blockStoragePolicySuite0, contentCounts0);
      assertEquals(1L, contentCounts0.getSnapshotableDirectoryCount());
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshotList();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      String string0 = directorySnapshottableFeature0.toString();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertEquals("snapshotsByNames=[]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)1, byteArray0, permissionStatus0, 18);
      StringBuilder stringBuilder0 = new StringBuilder((byte)1);
      MockFile mockFile0 = new MockFile("fs.permissions.umask-mode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.dumpTreeRecursively(iNodeDirectory0, mockPrintWriter0, stringBuilder0, 2147483646);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }
}
