/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 23:27:15 GMT 2024
 */

package org.apache.hadoop.hdfs.server.balancer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.codahale.metrics.MetricRegistry;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.StorageType;
import org.apache.hadoop.hdfs.protocol.Block;
import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
import org.apache.hadoop.hdfs.server.balancer.Dispatcher;
import org.apache.hadoop.hdfs.server.balancer.NameNodeConnector;
import org.eclipse.jetty.util.InetAddressSet;
import org.eclipse.jetty.util.component.AttributeContainerMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Dispatcher_ESTest extends Dispatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      SortedSet<String> sortedSet0 = metricRegistry0.getNames();
      Configuration configuration0 = new Configuration(false);
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, sortedSet0, sortedSet0, 0L, 121, 123, 16777216, 1, (-3211L), (-1389901447), 121, 0L, configuration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Configuration configuration0 = new Configuration(false);
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, treeSet0, treeSet0, 2930, 2930, 1932752118, 1932752118, 1932752118, configuration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Block block0 = new Block();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      Dispatcher.DBlockStriped dispatcher_DBlockStriped0 = new Dispatcher.DBlockStriped(block0, byteArray0, (byte) (-103), (byte) (-94));
      dispatcher_DBlockStriped0.addLocation((Dispatcher.DDatanode.StorageGroup) null);
      // Undeclared exception!
      try { 
        dispatcher_DBlockStriped0.getNumBytes((Dispatcher.DDatanode.StorageGroup) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Block block0 = new Block(1L, 555L, 555L);
      Dispatcher.DBlockStriped dispatcher_DBlockStriped0 = new Dispatcher.DBlockStriped(block0, (byte[]) null, (short) (-27680), 0);
      Dispatcher.DBlock dispatcher_DBlock0 = dispatcher_DBlockStriped0.getInternalBlock((Dispatcher.DDatanode.StorageGroup) null);
      assertNull(dispatcher_DBlock0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Dispatcher.StorageGroupMap<Dispatcher.Source> dispatcher_StorageGroupMap0 = new Dispatcher.StorageGroupMap<Dispatcher.Source>();
      // Undeclared exception!
      try { 
        dispatcher_StorageGroupMap0.put((Dispatcher.Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher$StorageGroupMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>(3, 3);
      Configuration configuration0 = new Configuration(true);
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, hashSet0, hashSet0, 0L, 0, 3, 0, 1000L, (-1460L), 0, 3, 3, configuration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.apache.hadoop.conf.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, set0, linkedHashSet0, (-544L), 2588, (-2811), 3, (-544L), 2588, 60000, 60000, 0L, (Configuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.net.NetworkTopology", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddressSet inetAddressSet0 = new InetAddressSet();
      Configuration configuration0 = new Configuration(false);
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, inetAddressSet0, inetAddressSet0, 100L, 60000, (-246), 60000, 100L, 60000, 60000, 60000, (-246), configuration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Dispatcher.Allocator dispatcher_Allocator0 = new Dispatcher.Allocator((-1493));
      int int0 = dispatcher_Allocator0.allocate(128);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeContainerMap attributeContainerMap0 = new AttributeContainerMap();
      Set<String> set0 = attributeContainerMap0.getAttributeNameSet();
      boolean boolean0 = Dispatcher.Util.isIncluded(set0, (DatanodeInfo) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashSet<Dispatcher.DDatanode.StorageGroup> hashSet0 = new HashSet<Dispatcher.DDatanode.StorageGroup>();
      hashSet0.add((Dispatcher.DDatanode.StorageGroup) null);
      // Undeclared exception!
      try { 
        Dispatcher.checkForSuccess(hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher$DDatanode$StorageGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSet<Dispatcher.DDatanode.StorageGroup> hashSet0 = new HashSet<Dispatcher.DDatanode.StorageGroup>();
      boolean boolean0 = Dispatcher.checkForSuccess(hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashSet<Dispatcher.DDatanode.StorageGroup> hashSet0 = new HashSet<Dispatcher.DDatanode.StorageGroup>();
      hashSet0.add((Dispatcher.DDatanode.StorageGroup) null);
      HashMap<Long, Set<DatanodeInfo>> hashMap0 = new HashMap<Long, Set<DatanodeInfo>>();
      // Undeclared exception!
      try { 
        Dispatcher.checkForBlockPinningFailures(hashMap0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher$DDatanode$StorageGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashSet<Dispatcher.DDatanode.StorageGroup> hashSet0 = new HashSet<Dispatcher.DDatanode.StorageGroup>();
      HashMap<Long, Set<DatanodeInfo>> hashMap0 = new HashMap<Long, Set<DatanodeInfo>>();
      Dispatcher.checkForBlockPinningFailures(hashMap0, hashSet0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashSet<Dispatcher.DDatanode.StorageGroup> hashSet0 = new HashSet<Dispatcher.DDatanode.StorageGroup>();
      hashSet0.add((Dispatcher.DDatanode.StorageGroup) null);
      // Undeclared exception!
      try { 
        Dispatcher.waitForMoveCompletion(hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher$DDatanode$StorageGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashSet<Dispatcher.DDatanode.StorageGroup> hashSet0 = new HashSet<Dispatcher.DDatanode.StorageGroup>();
      boolean boolean0 = Dispatcher.waitForMoveCompletion(hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Configuration configuration0 = new Configuration(false);
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, linkedHashSet0, linkedHashSet0, (-3037000499L), 0, 0, (-1952257860), 0, configuration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Configuration configuration0 = new Configuration(false);
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, treeSet0, treeSet0, 0L, 2930, (-1), (-1), 0, configuration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Block block0 = new Block(0L);
      byte[] byteArray0 = new byte[2];
      Dispatcher.DBlockStriped dispatcher_DBlockStriped0 = new Dispatcher.DBlockStriped(block0, byteArray0, (short) (-5536), (byte)0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      dispatcher_DBlockStriped0.adjustIndices(linkedList0);
      assertEquals(0L, dispatcher_DBlockStriped0.getNumBytes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Block block0 = new Block((-890L));
      byte[] byteArray0 = new byte[16];
      Dispatcher.DBlockStriped dispatcher_DBlockStriped0 = new Dispatcher.DBlockStriped(block0, byteArray0, (short)3, (short)3);
      Integer integer0 = new Integer((short)3);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      dispatcher_DBlockStriped0.adjustIndices(stack0);
      assertEquals("[3]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Block block0 = new Block((-890L), (-890L), (-890L));
      byte[] byteArray0 = new byte[1];
      Dispatcher.DBlockStriped dispatcher_DBlockStriped0 = new Dispatcher.DBlockStriped(block0, byteArray0, (byte)87, (byte)87);
      long long0 = dispatcher_DBlockStriped0.getNumBytes((Dispatcher.DDatanode.StorageGroup) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Block block0 = new Block((-890L));
      byte[] byteArray0 = new byte[1];
      Dispatcher.DBlockStriped dispatcher_DBlockStriped0 = new Dispatcher.DBlockStriped(block0, byteArray0, (short)3, (short)3);
      dispatcher_DBlockStriped0.addLocation((Dispatcher.DDatanode.StorageGroup) null);
      long long0 = dispatcher_DBlockStriped0.getNumBytes((Dispatcher.DDatanode.StorageGroup) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Dispatcher.Allocator dispatcher_Allocator0 = new Dispatcher.Allocator(123);
      int int0 = dispatcher_Allocator0.allocate(123);
      assertEquals(123, int0);
      
      int int1 = dispatcher_Allocator0.allocate();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Dispatcher.Task dispatcher_Task0 = new Dispatcher.Task((Dispatcher.DDatanode.StorageGroup) null, (-1));
      long long0 = dispatcher_Task0.getSize();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Block block0 = new Block(0L);
      Dispatcher.DBlock dispatcher_DBlock0 = new Dispatcher.DBlock(block0);
      long long0 = dispatcher_DBlock0.getNumBytes((Dispatcher.DDatanode.StorageGroup) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Dispatcher.setDelayAfterErrors(0L);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Dispatcher dispatcher0 = null;
      try {
        dispatcher0 = new Dispatcher((NameNodeConnector) null, treeSet0, treeSet0, 2930, 2930, 2930, 2930, 2930, configuration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.apache.hadoop.conf.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Dispatcher.Allocator dispatcher_Allocator0 = new Dispatcher.Allocator(123);
      dispatcher_Allocator0.setLotSize(123);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Dispatcher.Allocator dispatcher_Allocator0 = new Dispatcher.Allocator(123);
      int int0 = dispatcher_Allocator0.allocate();
      assertEquals(1, int0);
      
      int int1 = dispatcher_Allocator0.allocate(123);
      assertEquals(122, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Dispatcher.Allocator dispatcher_Allocator0 = new Dispatcher.Allocator(123);
      dispatcher_Allocator0.reset();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Dispatcher.StorageGroupMap<Dispatcher.DDatanode.StorageGroup> dispatcher_StorageGroupMap0 = new Dispatcher.StorageGroupMap<Dispatcher.DDatanode.StorageGroup>();
      int int0 = dispatcher_StorageGroupMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Dispatcher.StorageGroupMap<Dispatcher.Source> dispatcher_StorageGroupMap0 = new Dispatcher.StorageGroupMap<Dispatcher.Source>();
      StorageType storageType0 = StorageType.DISK;
      Dispatcher.Source dispatcher_Source0 = dispatcher_StorageGroupMap0.get("Failed to reset renewer", storageType0);
      assertNull(dispatcher_Source0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Dispatcher.StorageGroupMap<Dispatcher.Source> dispatcher_StorageGroupMap0 = new Dispatcher.StorageGroupMap<Dispatcher.Source>();
      dispatcher_StorageGroupMap0.clear();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Dispatcher.StorageGroupMap<Dispatcher.Source> dispatcher_StorageGroupMap0 = new Dispatcher.StorageGroupMap<Dispatcher.Source>();
      Collection<Dispatcher.Source> collection0 = dispatcher_StorageGroupMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AttributeContainerMap attributeContainerMap0 = new AttributeContainerMap();
      Set<String> set0 = attributeContainerMap0.getAttributeNameSet();
      // Undeclared exception!
      try { 
        Dispatcher.Util.isExcluded(set0, (DatanodeInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.balancer.Dispatcher$Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Dispatcher.Util dispatcher_Util0 = new Dispatcher.Util();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Block block0 = new Block();
      byte[] byteArray0 = new byte[0];
      Dispatcher.DBlockStriped dispatcher_DBlockStriped0 = new Dispatcher.DBlockStriped(block0, byteArray0, (short) (-2700), (-1));
      dispatcher_DBlockStriped0.setIndices(byteArray0);
      assertEquals(0, byteArray0.length);
  }
}
