/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 23:33:20 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.snapshot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.fs.permission.PermissionStatus;
import org.apache.hadoop.hdfs.protocol.SnapshotDiffReportListing;
import org.apache.hadoop.hdfs.server.namenode.INodeDirectory;
import org.apache.hadoop.hdfs.server.namenode.INodeFile;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectoryWithSnapshotFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffListingInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SnapshotDiffListingInfo_ESTest extends SnapshotDiffListingInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "66XGoQ(G", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 10);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      byte[][] byteArray0 = new byte[1][7];
      directoryWithSnapshotFeature_ChildrenDiff0.delete(iNodeDirectory0);
      snapshotDiffListingInfo0.addDirDiff(1073741824L, byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      boolean boolean0 = snapshotDiffListingInfo0.addDirDiff(2147483646, byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, (-13));
      byte[][] byteArray0 = new byte[0][5];
      boolean boolean0 = snapshotDiffListingInfo0.addFileDiff((INodeFile) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, (-1L));
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 0);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      byte[][] byteArray0 = new byte[9][4];
      boolean boolean0 = snapshotDiffListingInfo0.addDirDiff(0L, byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 18);
      snapshotDiffListingInfo0.setLastIndex((-37));
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      // Undeclared exception!
      try { 
        snapshotDiffListingInfo0.addDirDiff(18, (byte[][]) null, directoryWithSnapshotFeature_ChildrenDiff0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -37, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 243L);
      iNodeDirectory0.addSnapshottableFeature();
      byte[][] byteArray0 = new byte[9][3];
      INodeDirectory iNodeDirectory1 = new INodeDirectory(18, byteArray0[0], permissionStatus0, (-1));
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory1, (Snapshot) null, (Snapshot) null, (-1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("p7uRZ#Wvl&\"", "", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(0L, (byte[]) null, permissionStatus0, (-1786L));
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot((-1399), iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, snapshot0, 2);
      boolean boolean0 = snapshotDiffListingInfo0.isFromEarlier();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 243L);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      boolean boolean0 = snapshotDiffListingInfo0.isFromEarlier();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      Snapshot snapshot0 = snapshotDiffListingInfo0.getLater();
      assertNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(600000L, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(802, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0, (-325));
      Snapshot snapshot1 = snapshotDiffListingInfo0.getLater();
      assertEquals((-1), Snapshot.NO_SNAPSHOT_ID);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot((-1246), iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, snapshot0, 10);
      Snapshot snapshot1 = snapshotDiffListingInfo0.getLater();
      assertEquals(2147483646, Snapshot.CURRENT_STATE_ID);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 243L);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(1, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, snapshot0, 10);
      Snapshot snapshot1 = snapshotDiffListingInfo0.getEarlier();
      assertEquals((-1), Snapshot.NO_SNAPSHOT_ID);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot((-1), iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, snapshot0, 10);
      Snapshot snapshot1 = snapshotDiffListingInfo0.getEarlier();
      assertSame(snapshot1, snapshot0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, (-1L));
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 1639);
      snapshotDiffListingInfo0.setLastIndex(0);
      SnapshotDiffReportListing snapshotDiffReportListing0 = snapshotDiffListingInfo0.generateReport();
      assertEquals(0, snapshotDiffReportListing0.getLastIndex());
      assertFalse(snapshotDiffReportListing0.getIsFromEarlier());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 18);
      snapshotDiffListingInfo0.setLastIndex(18);
      SnapshotDiffReportListing snapshotDiffReportListing0 = snapshotDiffListingInfo0.generateReport();
      assertEquals(18, snapshotDiffReportListing0.getLastIndex());
      assertFalse(snapshotDiffReportListing0.getIsFromEarlier());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, (-14L));
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(10, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, (Snapshot) null, 3553);
      SnapshotDiffReportListing snapshotDiffReportListing0 = snapshotDiffListingInfo0.generateReport();
      assertEquals((-1), snapshotDiffReportListing0.getLastIndex());
      assertTrue(snapshotDiffReportListing0.getIsFromEarlier());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      // Undeclared exception!
      try { 
        snapshotDiffListingInfo0.setLastPath((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.DFSUtilClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, (-1085));
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      // Undeclared exception!
      try { 
        snapshotDiffListingInfo0.addDirDiff(18, (byte[][]) null, directoryWithSnapshotFeature_ChildrenDiff0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.DFSUtilClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      // Undeclared exception!
      try { 
        snapshotDiffListingInfo0.addDirDiff(2, (byte[][]) null, directoryWithSnapshotFeature_ChildrenDiff0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 243L);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      snapshotDiffListingInfo0.setLastIndex(2);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      // Undeclared exception!
      try { 
        snapshotDiffListingInfo0.addDirDiff((-928L), (byte[][]) null, directoryWithSnapshotFeature_ChildrenDiff0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = null;
      try {
        snapshotDiffListingInfo0 = new SnapshotDiffListingInfo((INodeDirectory) null, (INodeDirectory) null, (Snapshot) null, (Snapshot) null, 83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffListingInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 243L);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      byte[][] byteArray0 = new byte[6][1];
      snapshotDiffListingInfo0.setLastPath(byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      byte[][] byteArray0 = new byte[6][1];
      // Undeclared exception!
      try { 
        snapshotDiffListingInfo0.addFileDiff((INodeFile) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffListingInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, (byte[]) null, permissionStatus0, 243L);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot((-1737), "", iNodeDirectory0);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, snapshot0, 56320);
      Snapshot snapshot1 = snapshotDiffListingInfo0.getEarlier();
      assertNull(snapshot1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 1);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      byte[][] byteArray0 = new byte[5][3];
      directoryWithSnapshotFeature_ChildrenDiff0.delete(iNodeDirectory0);
      boolean boolean0 = snapshotDiffListingInfo0.addDirDiff((-1), byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 1);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      directoryWithSnapshotFeature_ChildrenDiff0.create(iNodeDirectory0);
      byte[][] byteArray0 = new byte[5][3];
      snapshotDiffListingInfo0.addDirDiff(10, byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff1 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      boolean boolean0 = snapshotDiffListingInfo0.addDirDiff((-1), byteArray0, directoryWithSnapshotFeature_ChildrenDiff1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      INodeDirectory iNodeDirectory1 = new INodeDirectory(2, (byte[]) null, permissionStatus0, (-2912L));
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = null;
      try {
        snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory1, (Snapshot) null, (Snapshot) null, 649);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 18);
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = null;
      try {
        snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 1);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      directoryWithSnapshotFeature_ChildrenDiff0.create(iNodeDirectory0);
      byte[][] byteArray0 = new byte[5][3];
      boolean boolean0 = snapshotDiffListingInfo0.addDirDiff(10, byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      boolean boolean1 = snapshotDiffListingInfo0.addDirDiff((-1), byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffListingInfo snapshotDiffListingInfo0 = new SnapshotDiffListingInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null, 2);
      byte[][] byteArray0 = new byte[6][1];
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      directoryWithSnapshotFeature_ChildrenDiff0.create(iNodeDirectory0);
      boolean boolean0 = snapshotDiffListingInfo0.addDirDiff(2, byteArray0, directoryWithSnapshotFeature_ChildrenDiff0);
      assertTrue(boolean0);
      
      boolean boolean1 = snapshotDiffListingInfo0.addFileDiff((INodeFile) null, byteArray0);
      assertFalse(boolean1);
  }
}
