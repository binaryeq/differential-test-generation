/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 23:29:36 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.snapshot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.security.Principal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import javax.security.auth.Subject;
import org.apache.hadoop.fs.permission.FsAction;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.fs.permission.PermissionStatus;
import org.apache.hadoop.hdfs.server.blockmanagement.BlockStoragePolicySuite;
import org.apache.hadoop.hdfs.server.namenode.ContentCounts;
import org.apache.hadoop.hdfs.server.namenode.ContentSummaryComputationContext;
import org.apache.hadoop.hdfs.server.namenode.FSDirectory;
import org.apache.hadoop.hdfs.server.namenode.FSNamesystem;
import org.apache.hadoop.hdfs.server.namenode.INode;
import org.apache.hadoop.hdfs.server.namenode.INodeDirectory;
import org.apache.hadoop.hdfs.server.namenode.INodeReference;
import org.apache.hadoop.hdfs.server.namenode.INodesInPath;
import org.apache.hadoop.hdfs.server.namenode.LeaseManager;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectoryWithSnapshotFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectorySnapshottableFeature_ESTest extends DirectorySnapshottableFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = new FsPermission((short) (-2389));
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("53+rlU(", "53+rlU(", fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1000000L, byteArray0, permissionStatus0, (byte) (-2));
      INodeDirectory iNodeDirectory1 = new INodeDirectory((byte) (-2), byteArray0, permissionStatus0, 1876L);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory1, iNodeDirectory0, "X]dhTuP]^3PS?", " does not exist for directory ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.setSnapshotQuota(0);
      assertEquals(0, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.setSnapshotQuota(7);
      int int0 = directorySnapshottableFeature0.getSnapshotQuota();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("", "EQUALS_FULLY_IGNORE_CASE", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 478L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 2, "EQUALS_FULLY_IGNORE_CASE", leaseManager0, false, 2, 18);
      assertEquals(2, snapshot0.getId());
      
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById(18);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNull(snapshot1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 478L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (-1314368100), "fs.permissions.umask-mode", (LeaseManager) null, true, 511, 478L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: Unable to capture all open files under the snapshot dir \u0000\u0000 for snapshot 'fs.permissions.umask-mode'
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.getDefault();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 0L);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 18, "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;", leaseManager0, true, 65536, 597L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: Unable to capture all open files under the snapshot dir ~ for snapshot '(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;'
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-2);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-2);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1682L), byteArray0, permissionStatus0, (byte) (-2));
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (byte) (-2), "fs.permissions.umask-mode", leaseManager0, true, (byte)18, 0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: Unable to capture all open files under the snapshot dir \u0012\uFFFD\u0000\uFFFD\uFFFD for snapshot 'fs.permissions.umask-mode'
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 478L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Subject subject0 = new Subject();
      Class<INodesInPath> class0 = INodesInPath.class;
      Set<INodesInPath> set0 = subject0.getPublicCredentials(class0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (-104), "I e8I<BYi8b`", leaseManager0, true, 530, 2278L);
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshotById((-104));
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNotNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (-2147483631), "", leaseManager0, false, 2, 18);
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshot((byte[]) null);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertEquals((-2147483631), snapshot0.getId());
      assertNotNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.addSnapshot((Snapshot) null);
      directorySnapshottableFeature0.getNumSnapshots();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("-MH6vad2E\u0007?bbD", "[xp]l\".&}6[N#aA", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)2, byteArray0, permissionStatus0, 1857L);
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (byte)0, "org.bouncycastle.asn1.DERPrintableString", (LeaseManager) null, false, (byte)2, (-1278L));
      assertEquals(0, snapshot0.getId());
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.renameSnapshot((String) null, (String) null, (String) null, (byte)123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.DFSUtilClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.getDefault();
      byte[] byteArray0 = new byte[1];
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 0L);
      try { 
        directorySnapshottableFeature0.removeSnapshot((INode.ReclaimContext) null, iNodeDirectory0, "fs.permissions.umask-mode", (byte)126);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot delete snapshot fs.permissions.umask-mode from path \u0000: the snapshot does not exist.
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      byte[] byteArray0 = new byte[5];
      directorySnapshottableFeature0.addSnapshot((Snapshot) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.getSnapshot(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.findRenameTargetPath((INodeDirectory) null, (INodeReference.WithName) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 478L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory0, iNodeDirectory0, "fs.permissions.umask-mode", "fs.permissions.umask-mode", byteArray0, 10, (-129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      byte[] byteArray0 = new byte[6];
      FsAction fsAction0 = FsAction.NONE;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0);
      PermissionStatus permissionStatus0 = new PermissionStatus("TlGs9'rpE]SpTS8QP", "ktx", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-594L), byteArray0, permissionStatus0, (byte)0);
      INode.Feature[] iNode_FeatureArray0 = new INode.Feature[1];
      iNode_FeatureArray0[0] = (INode.Feature) directorySnapshottableFeature0;
      INodeDirectory iNodeDirectory1 = new INodeDirectory(iNodeDirectory0, true, iNode_FeatureArray0);
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory1, iNodeDirectory1, "TlGs9'rpE]SpTS8QP", "TlGs9'rpE]SpTS8QP");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find the snapshot of directory \u0000\u0000\u0000\u0000\u0000\u0000 with name TlGs9'rpE]SpTS8QP
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff((INodeDirectory) null, (INodeDirectory) null, "j}dc.lF", "j}dc.lF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      BlockStoragePolicySuite blockStoragePolicySuite0 = BlockStoragePolicySuite.createDefaultSuite();
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeContentSummary4Snapshot(blockStoragePolicySuite0, (ContentCounts) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.addSnapshot((INodeDirectory) null, (-1224), "9*DNk3c!", leaseManager0, false, 1, (-1224));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot$Root", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 18, "", leaseManager0, false, 2, 18);
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshotById(18);
      assertNotNull(snapshot0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getNumSnapshots();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      byte[] byteArray0 = new byte[1];
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "Ag1!", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, byteArray0, permissionStatus0, (-6493L));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fs.permissions.umask-mode");
      directorySnapshottableFeature0.dumpTreeRecursively(iNodeDirectory0, mockPrintWriter0, (StringBuilder) null, (-1));
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.getDefault();
      byte[] byteArray0 = new byte[3];
      PermissionStatus permissionStatus0 = new PermissionStatus("$PBEWithSHA1AESCBC256", "$PBEWithSHA1AESCBC256", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(0L, byteArray0, permissionStatus0, 10);
      INode.Feature[] iNode_FeatureArray0 = new INode.Feature[4];
      iNode_FeatureArray0[0] = (INode.Feature) directorySnapshottableFeature0;
      iNode_FeatureArray0[1] = (INode.Feature) directorySnapshottableFeature0;
      iNode_FeatureArray0[2] = (INode.Feature) directorySnapshottableFeature0;
      iNode_FeatureArray0[3] = (INode.Feature) directorySnapshottableFeature0;
      INodeDirectory iNodeDirectory1 = new INodeDirectory(iNodeDirectory0, true, iNode_FeatureArray0);
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory1, iNodeDirectory0, "fs.permissions.umask-mode", "2/N-zT`!5u;", (byte[]) null, 13, (-2437));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find the snapshot of directory \u0000\u0000\u0000 with name fs.permissions.umask-mode
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.getDefault();
      byte[] byteArray0 = new byte[3];
      PermissionStatus permissionStatus0 = new PermissionStatus("$PBEWithSHA1AESCBC256", "$PBEWithSHA1AESCBC256", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(0L, byteArray0, permissionStatus0, 10);
      INode.Feature[] iNode_FeatureArray0 = new INode.Feature[4];
      iNode_FeatureArray0[0] = (INode.Feature) directorySnapshottableFeature0;
      iNode_FeatureArray0[1] = (INode.Feature) directorySnapshottableFeature0;
      iNode_FeatureArray0[2] = (INode.Feature) directorySnapshottableFeature0;
      iNode_FeatureArray0[3] = (INode.Feature) directorySnapshottableFeature0;
      INodeDirectory iNodeDirectory1 = new INodeDirectory(iNodeDirectory0, false, iNode_FeatureArray0);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory1, iNodeDirectory1, (String) null, (String) null, (byte[]) null, 212, (byte)24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.DFSUtilClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)32;
      byteArray0[3] = (byte) (-119);
      byteArray0[5] = (byte) (-17);
      FsAction fsAction0 = FsAction.NONE;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0);
      PermissionStatus permissionStatus0 = new PermissionStatus("TlGs9'rpE]SpTS8QP", "ktx", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-594L), byteArray0, permissionStatus0, (byte)0);
      FsPermission.createImmutable((short)3095);
      FsPermission.getDefault();
      INode.Feature[] iNode_FeatureArray0 = new INode.Feature[1];
      iNode_FeatureArray0[0] = (INode.Feature) directorySnapshottableFeature0;
      INodeDirectory iNodeDirectory1 = new INodeDirectory(iNodeDirectory0, true, iNode_FeatureArray0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory1, (-2751), "TlGs9'rpE]SpTS8QP", leaseManager0, true, 3600000, (-16L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: Unable to capture all open files under the snapshot dir \u0000\u0000\u0000\uFFFD \uFFFD for snapshot 'TlGs9'rpE]SpTS8QP'
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      BlockStoragePolicySuite blockStoragePolicySuite0 = BlockStoragePolicySuite.createDefaultSuite();
      INode.BlocksMapUpdateInfo iNode_BlocksMapUpdateInfo0 = new INode.BlocksMapUpdateInfo();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      ArrayList<INode> arrayList0 = new ArrayList<INode>();
      INode.ReclaimContext iNode_ReclaimContext0 = new INode.ReclaimContext(blockStoragePolicySuite0, iNode_BlocksMapUpdateInfo0, arrayList0, linkedList0);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.removeSnapshot(iNode_ReclaimContext0, (INodeDirectory) null, "", 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 478L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (byte)126, "fs.permissions.umask-mode", leaseManager0, false, 2, 1915L);
      LeaseManager leaseManager1 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 2, "fs.permissions.umask-mode", leaseManager1, false, (byte)126, 18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there is already a snapshot with the same name \"fs.permissions.umask-mode\".
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = new FsPermission((short) (-2389));
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("53+rlU(", "53+rlU(", fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1000000L, byteArray0, permissionStatus0, (byte) (-2));
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (-3338), " does not exist for directory ", (LeaseManager) null, false, (-1), (byte)65);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there are already 0 snapshot(s) and the max snapshot limit is -1
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.setSnapshotQuota((-2766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set snapshot quota to -2766 < 0
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.setSnapshotQuota(1);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.addSnapshot((INodeDirectory) null, 1, "The snapshot ", (LeaseManager) null, false, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot$Root", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 18, "", leaseManager0, false, 2, 18);
      assertEquals(18, snapshot0.getId());
      
      directorySnapshottableFeature0.renameSnapshot("`U0;Q5 nWcscW) %-4[", "", "IPij& VKUGxD4\"", 10);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 478L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 2, "", leaseManager0, false, 2, 18);
      assertEquals(2, snapshot0.getId());
      
      directorySnapshottableFeature0.renameSnapshot("T%PsGoXw1T.cL>ud2p", "", "", 372L);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.renameSnapshot("v", "^qq#I:}i*(oTIV.5]", "Z(~>DhlX\"b2t~^z(", (-160));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The snapshot ^qq#I:}i*(oTIV.5] does not exist for directory v
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(0L, byteArray0, permissionStatus0, 10);
      HashSet<Principal> hashSet0 = new HashSet<Principal>();
      Subject subject0 = new Subject(true, hashSet0, hashSet0, hashSet0);
      Class<INodesInPath> class0 = INodesInPath.class;
      Set<INodesInPath> set0 = subject0.getPublicCredentials(class0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (-160), "fs.permissions.umask-mode", leaseManager0, true, 1968, 2278L);
      assertEquals((-160), snapshot0.getId());
      
      directorySnapshottableFeature0.renameSnapshot("fs.permissions.umask-mode", "fs.permissions.umask-mode", "", (-1));
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LinkedHashSet<INodesInPath> linkedHashSet0 = new LinkedHashSet<INodesInPath>();
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (byte)126, "fs.permissions.umask-mode", leaseManager0, true, 2147483646, 2147483646);
      assertEquals(126, snapshot0.getId());
      
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById((-1867));
      assertNull(snapshot1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshot(byteArray0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 18, "", leaseManager0, false, 2, 18);
      Snapshot snapshot0 = directorySnapshottableFeature0.getSnapshot((byte[]) null);
      assertEquals(18, snapshot0.getId());
      assertNotNull(snapshot0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      DirectorySnapshottableFeature directorySnapshottableFeature1 = new DirectorySnapshottableFeature(directorySnapshottableFeature0);
      assertEquals(65536, directorySnapshottableFeature1.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.addSnapshot((Snapshot) null);
      directorySnapshottableFeature0.setSnapshotQuota(1);
      try { 
        directorySnapshottableFeature0.addSnapshot((INodeDirectory) null, 81, "The snapshot ", (LeaseManager) null, false, (-31), (-1225L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there are already 1 snapshot(s) and the snapshot quota is 1
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      BlockStoragePolicySuite blockStoragePolicySuite0 = BlockStoragePolicySuite.createDefaultSuite();
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      FSNamesystem fSNamesystem0 = mock(FSNamesystem.class, new ViolatedAssumptionAnswer());
      ContentSummaryComputationContext contentSummaryComputationContext0 = new ContentSummaryComputationContext(fSDirectory0, fSNamesystem0, (byte) (-112), 1976L);
      ContentCounts contentCounts0 = contentSummaryComputationContext0.getSnapshotCounts();
      directorySnapshottableFeature0.computeContentSummary4Snapshot(blockStoragePolicySuite0, contentCounts0);
      assertEquals(1L, contentCounts0.getSnapshotableDirectoryCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshotList();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      String string0 = directorySnapshottableFeature0.toString();
      assertEquals("snapshotsByNames=[]", string0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LinkedHashSet<INodesInPath> linkedHashSet0 = new LinkedHashSet<INodesInPath>();
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (byte)126, "fs.permissions.umask-mode", leaseManager0, true, 2147483646, 2147483646);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fs.permissions.umask-mode");
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.dumpTreeRecursively(iNodeDirectory0, mockPrintWriter0, (StringBuilder) null, 2147483646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.INodeDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)126, byteArray0, permissionStatus0, 18);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fs.permissions.umask-mode");
      directorySnapshottableFeature0.dumpTreeRecursively(iNodeDirectory0, mockPrintWriter0, (StringBuilder) null, 2147483646);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }
}
