/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 23:31:25 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.snapshot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import javax.security.auth.Subject;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.fs.permission.PermissionStatus;
import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
import org.apache.hadoop.hdfs.server.namenode.INodeDirectory;
import org.apache.hadoop.hdfs.server.namenode.INodesInPath;
import org.apache.hadoop.hdfs.server.namenode.LeaseManager;
import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SnapshotDiffInfo_ESTest extends SnapshotDiffInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("~Ys", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[4];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, byteArray0, permissionStatus0, (-1763L));
      Snapshot snapshot0 = new Snapshot(10, "~Ys", iNodeDirectory0);
      Snapshot.Root snapshot_Root0 = snapshot0.getRoot();
      SnapshotDiffInfo snapshotDiffInfo0 = null;
      try {
        snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, snapshot_Root0, snapshot0, snapshot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[4][8];
      byte[] byteArray1 = new byte[7];
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "/pod1/r1", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, byteArray1, permissionStatus0, 18);
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      assertFalse(iNodeDirectory0.isReference());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1735L), byteArray0, permissionStatus0, (byte) (-1));
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      snapshotDiffInfo0.incrementDirsProcessed();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[6];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      Snapshot snapshot0 = snapshotDiffInfo0.getFrom();
      assertNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SnapshotDiffInfo snapshotDiffInfo0 = null;
      try {
        snapshotDiffInfo0 = new SnapshotDiffInfo((INodeDirectory) null, (INodeDirectory) null, (Snapshot) null, (Snapshot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[6];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = iNodeDirectory0.addSnapshot(0, "fs.permissions.umask-mode", leaseManager0, false, 8232, 8232);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      SnapshotDiffReport snapshotDiffReport0 = snapshotDiffInfo0.generateReport();
      assertEquals("fs.permissions.umask-mode", snapshotDiffReport0.getFromSnapshot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1735L), byteArray0, permissionStatus0, (byte) (-1));
      iNodeDirectory0.addSnapshottableFeature();
      Subject subject0 = new Subject();
      Class<INodesInPath> class0 = INodesInPath.class;
      Set<INodesInPath> set0 = subject0.getPrivateCredentials(class0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      Snapshot snapshot0 = iNodeDirectory0.addSnapshot((byte) (-1), "* \th#DkXi_p", leaseManager0, true, 2448, (-2620L));
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      boolean boolean0 = snapshotDiffInfo0.isFromEarlier();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 0L);
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[0][5];
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      snapshotDiffInfo_RenameEntry0.setTarget(byteArray0);
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, (byte[]) null, permissionStatus0, 0L);
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[0][5];
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(128L, byteArray0, permissionStatus0, (byte)0);
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray1 = new byte[0][2];
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray1);
      byte[][] byteArray2 = new byte[0][1];
      // Undeclared exception!
      try { 
        snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1000010L, (byte[]) null, permissionStatus0, 10);
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[8][0];
      snapshotDiffInfo_RenameEntry0.setTarget(iNodeDirectory0, byteArray0);
      assertEquals(2, INodeDirectory.DEFAULT_FILES_PER_DIRECTORY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = snapshotDiffInfo_RenameEntry0.getTargetPath();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = snapshotDiffInfo_RenameEntry0.getSourcePath();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[6];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      snapshotDiffInfo0.setRenameTarget(2965L, (byte[][]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[6];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      snapshotDiffInfo0.addChildrenListingTime(2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[6];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      Snapshot snapshot0 = snapshotDiffInfo0.getTo();
      assertNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1735L), byteArray0, permissionStatus0, (byte) (-1));
      iNodeDirectory0.addSnapshottableFeature();
      Subject subject0 = new Subject();
      Class<INodesInPath> class0 = INodesInPath.class;
      Set<INodesInPath> set0 = subject0.getPrivateCredentials(class0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      Snapshot snapshot0 = iNodeDirectory0.addSnapshot((byte) (-1), "* \th#DkXi_p", leaseManager0, true, 2448, (-2620L));
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      Snapshot snapshot1 = snapshotDiffInfo0.getFrom();
      assertEquals((-1), snapshot1.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[6];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = iNodeDirectory0.addSnapshot(0, "fs.permissions.umask-mode", leaseManager0, false, 8232, 8232);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      snapshotDiffInfo0.incrementFilesCompared();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1735L), byteArray0, permissionStatus0, (byte) (-1));
      iNodeDirectory0.addSnapshottableFeature();
      Subject subject0 = new Subject();
      Class<INodesInPath> class0 = INodesInPath.class;
      Set<INodesInPath> set0 = subject0.getPrivateCredentials(class0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      Snapshot snapshot0 = iNodeDirectory0.addSnapshot((byte) (-1), "* \th#DkXi_p", leaseManager0, true, 2448, (-2620L));
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      snapshotDiffInfo0.incrementDirsCompared();
  }
}
