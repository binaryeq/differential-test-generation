/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 23:15:13 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.snapshot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.security.auth.Subject;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.permission.FsAction;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.fs.permission.PermissionStatus;
import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
import org.apache.hadoop.hdfs.server.blockmanagement.BlockStoragePolicySuite;
import org.apache.hadoop.hdfs.server.namenode.ContentCounts;
import org.apache.hadoop.hdfs.server.namenode.ContentSummaryComputationContext;
import org.apache.hadoop.hdfs.server.namenode.FSDirectory;
import org.apache.hadoop.hdfs.server.namenode.FSNamesystem;
import org.apache.hadoop.hdfs.server.namenode.FSPermissionChecker;
import org.apache.hadoop.hdfs.server.namenode.INode;
import org.apache.hadoop.hdfs.server.namenode.INodeDirectory;
import org.apache.hadoop.hdfs.server.namenode.INodeReference;
import org.apache.hadoop.hdfs.server.namenode.INodesInPath;
import org.apache.hadoop.hdfs.server.namenode.LeaseManager;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectoryWithSnapshotFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectorySnapshottableFeature_ESTest extends DirectorySnapshottableFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.createImmutable((short)9870);
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      byte[] byteArray0 = new byte[5];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, byteArray0, permissionStatus0, (byte) (-29));
      DirectoryWithSnapshotFeature directoryWithSnapshotFeature0 = iNodeDirectory0.getDirectoryWithSnapshotFeature();
      INodeDirectory iNodeDirectory1 = new INodeDirectory(0L, byteArray0, permissionStatus0, (-4049L));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature(directoryWithSnapshotFeature0);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory1, iNodeDirectory0, "fs.permissions.umask-mode", "WnC^~hf=':", byteArray0, 18, (byte) (-89));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      Snapshot snapshot0 = new Snapshot((-1), "org.apache.hadoop.hdfs.server.protocol.DatanodeStorage$State", iNodeDirectory0);
      Snapshot.Root snapshot_Root0 = snapshot0.getRoot();
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff(iNodeDirectory0, snapshot_Root0, "fs.permissions.umask-mode", ", #snapshot=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1L, byteArray0, permissionStatus0, 1L);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot((-544), "fs.permissions.umask-mode", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.removeSnapshot((INode.ReclaimContext) null, iNodeDirectory0, "fs.permissions.umask-mode", 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.INodeDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot(18, "io.netty.util.NetUtil$SoMaxConnAction", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 2147483646, "io.netty.util.NetUtil$SoMaxConnAction", (LeaseManager) null, false, 2, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there is already a snapshot with the same name \"io.netty.util.NetUtil$SoMaxConnAction\".
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", fsPermission0);
      byte[] byteArray0 = new byte[2];
      DirectoryWithSnapshotFeature.DirectoryDiffList directoryWithSnapshotFeature_DirectoryDiffList0 = new DirectoryWithSnapshotFeature.DirectoryDiffList();
      INodeDirectory iNodeDirectory0 = new INodeDirectory(21600L, byteArray0, permissionStatus0, 894L);
      DirectoryWithSnapshotFeature directoryWithSnapshotFeature0 = iNodeDirectory0.addSnapshotFeature(directoryWithSnapshotFeature_DirectoryDiffList0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature(directoryWithSnapshotFeature0);
      directorySnapshottableFeature0.setSnapshotQuota(2);
      Snapshot snapshot0 = new Snapshot(293, "org.apache.hadoop.hdfs.client.HdfsClientConfigKeys", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 293, "fs.permissions.umask-mode", leaseManager0, false, (-1), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there are already 1 snapshot(s) and the max snapshot limit is -1
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-22L), byteArray0, permissionStatus0, (-22L));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot((-544), "fs.permissions.umask-mode", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.renameSnapshot("", "fs.permissions.umask-mode", "[l2", 2147483646);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot((-2), "io.netty.util.NetUtil$SoMaxConnAction", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById(10);
      assertNull(snapshot1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus(", snapshotsByNames.size()=", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte)0, byteArray0, permissionStatus0, (byte)0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot(2, iNodeDirectory0, iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      Subject subject0 = new Subject();
      Class<INodesInPath> class0 = INodesInPath.class;
      Set<INodesInPath> set0 = subject0.getPrivateCredentials(class0);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      Snapshot snapshot1 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 10, "", leaseManager0, true, 65536, 18);
      assertEquals(10, snapshot1.getId());
      
      Snapshot snapshot2 = directorySnapshottableFeature0.getSnapshot(byteArray0);
      assertEquals(2, snapshot2.getId());
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNotNull(snapshot2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FSDirectory fSDirectory0 = mock(FSDirectory.class, new ViolatedAssumptionAnswer());
      FSNamesystem fSNamesystem0 = mock(FSNamesystem.class, new ViolatedAssumptionAnswer());
      FSPermissionChecker fSPermissionChecker0 = mock(FSPermissionChecker.class, new ViolatedAssumptionAnswer());
      ContentSummaryComputationContext contentSummaryComputationContext0 = new ContentSummaryComputationContext(fSDirectory0, fSNamesystem0, 2147483646, (-1), fSPermissionChecker0);
      ContentCounts contentCounts0 = contentSummaryComputationContext0.getSnapshotCounts();
      directorySnapshottableFeature0.computeContentSummary4Snapshot((BlockStoragePolicySuite) null, contentCounts0);
      assertEquals(1L, contentCounts0.getSnapshotableDirectoryCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.createImmutable((short)423);
      PermissionStatus permissionStatus0 = new PermissionStatus((String) null, ", #snapshot=", fsPermission0);
      byte[] byteArray0 = new byte[5];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, (byte)66);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot((-1953), "$zBFl", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      BlockStoragePolicy[] blockStoragePolicyArray0 = new BlockStoragePolicy[0];
      BlockStoragePolicySuite blockStoragePolicySuite0 = new BlockStoragePolicySuite((byte) (-44), blockStoragePolicyArray0);
      INode.BlocksMapUpdateInfo iNode_BlocksMapUpdateInfo0 = new INode.BlocksMapUpdateInfo();
      Configuration configuration0 = new Configuration(false);
      Class<INode> class0 = INode.class;
      List<INode> list0 = configuration0.getInstances(", #snapshot=", class0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      INode.ReclaimContext iNode_ReclaimContext0 = new INode.ReclaimContext(blockStoragePolicySuite0, iNode_BlocksMapUpdateInfo0, list0, linkedList0);
      directorySnapshottableFeature0.removeSnapshot(iNode_ReclaimContext0, iNodeDirectory0, "$zBFl", 2);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.setSnapshotQuota(0);
      int int0 = directorySnapshottableFeature0.getSnapshotQuota();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot((-2), "io.netty.util.NetUtil$SoMaxConnAction", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById((-2));
      assertNotNull(snapshot1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus(", snaps;otsByNames.size()=", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-107), byteArray0, permissionStatus0, (byte) (-107));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot(2, "}l7#_'z\"3[W^bZuKZ^", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.getNumSnapshots();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottab!eFeature", fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 0, ", #snapshot=", leaseManager0, false, 2, 152L);
      assertEquals(0, snapshot0.getId());
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.renameSnapshot((String) null, (String) null, "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature$1", 1002L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.DFSUtilClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.addSnapshot((Snapshot) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.getSnapshotById(5445);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      byte[] byteArray0 = new byte[0];
      directorySnapshottableFeature0.addSnapshot((Snapshot) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.getSnapshot(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.findRenameTargetPath((INodeDirectory) null, (INodeReference.WithName) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff((INodeDirectory) null, (INodeDirectory) null, (String) null, (String) null, byteArray0, 2147483646, 2147483646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeDiff((INodeDirectory) null, (INodeDirectory) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getNumSnapshots();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      MockFile mockFile0 = new MockFile("zY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.dumpTreeRecursively((INodeDirectory) null, mockPrintWriter0, stringBuilder0, 2147483646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      directorySnapshottableFeature0.dumpTreeRecursively((INodeDirectory) null, (PrintWriter) null, stringBuilder0, (-1943));
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.removeSnapshot((INode.ReclaimContext) null, iNodeDirectory0, "io.netty.util.NetUtil$SoMaxConnAction", 18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot delete snapshot io.netty.util.NetUtil$SoMaxConnAction from path \u0000: the snapshot does not exist.
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-3263L), (byte[]) null, permissionStatus0, 1818L);
      LinkedHashSet<INodesInPath> linkedHashSet0 = new LinkedHashSet<INodesInPath>();
      linkedHashSet0.add((INodesInPath) null);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(leaseManager0).getINodeWithLeases(any(org.apache.hadoop.hdfs.server.namenode.INodeDirectory.class));
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, 18, "fs.permissions.umask-mode", leaseManager0, true, 18, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.INode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      FsAction fsAction0 = FsAction.WRITE;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0, false);
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("Unexpected character ", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, byteArray0, permissionStatus0, 10);
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (-2003), "Unexpected character ", leaseManager0, false, 1025, 2166L);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertEquals((-2003), snapshot0.getId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable(")g", "com.ctc.wstx.maxElementDepth", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(3119L, byteArray0, permissionStatus0, 0L);
      DirectoryWithSnapshotFeature directoryWithSnapshotFeature0 = new DirectoryWithSnapshotFeature((DirectoryWithSnapshotFeature.DirectoryDiffList) null);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature(directoryWithSnapshotFeature0);
      directorySnapshottableFeature0.setSnapshotQuota(0);
      try { 
        directorySnapshottableFeature0.addSnapshot(iNodeDirectory0, (-160), "!q5U_R`", (LeaseManager) null, false, 2, 16385L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to add snapshot: there are already 0 snapshot(s) and the snapshot quota is 0
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.setSnapshotQuota((-186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set snapshot quota to -186 < 0
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot((-2), "io.netty.util.NetUtil$SoMaxConnAction", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.renameSnapshot("fs.permissions.umask-mode", "io.netty.util.NetUtil$SoMaxConnAction", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", 18);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.createImmutable((short)9870);
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      byte[] byteArray0 = new byte[18];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(18, byteArray0, permissionStatus0, (byte) (-29));
      DirectoryWithSnapshotFeature directoryWithSnapshotFeature0 = iNodeDirectory0.getDirectoryWithSnapshotFeature();
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature(directoryWithSnapshotFeature0);
      Snapshot snapshot0 = new Snapshot((byte)1, "", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.renameSnapshot("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "", "", (byte)0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      try { 
        directorySnapshottableFeature0.renameSnapshot("}l7#_'z\"3[W^bZuKZ^", "fs.permissions.umask-mode", "io.netty.buffer.AbstractByteBuf", 389L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The snapshot fs.permissions.umask-mode does not exist for directory }l7#_'z\"3[W^bZuKZ^
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-22L), byteArray0, permissionStatus0, (-22L));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot((-544), "fs.permissions.umask-mode", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      directorySnapshottableFeature0.renameSnapshot("", "fs.permissions.umask-mode", "[l2", 2147483646);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 10);
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot(12, "io.netty.util.NetUtil$SoMaxConnAction", iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById(12);
      assertNotNull(snapshot1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus(", snapshotsByNames.size()=", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-107), byteArray0, permissionStatus0, (byte) (-107));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot(2, iNodeDirectory0, iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshotById((-1));
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertNull(snapshot1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshot(byteArray0);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus(", snapshotsByNames.size()=", "org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((byte) (-107), byteArray0, permissionStatus0, (byte) (-107));
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      Snapshot snapshot0 = new Snapshot(2, iNodeDirectory0, iNodeDirectory0);
      directorySnapshottableFeature0.addSnapshot(snapshot0);
      Snapshot snapshot1 = directorySnapshottableFeature0.getSnapshot(byteArray0);
      assertNotNull(snapshot1);
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      // Undeclared exception!
      try { 
        directorySnapshottableFeature0.computeContentSummary4Snapshot((BlockStoragePolicySuite) null, (ContentCounts) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.DirectorySnapshottableFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      directorySnapshottableFeature0.getSnapshotList();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      String string0 = directorySnapshottableFeature0.toString();
      assertEquals(65536, directorySnapshottableFeature0.getSnapshotQuota());
      assertEquals("snapshotsByNames=[]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DirectorySnapshottableFeature directorySnapshottableFeature0 = new DirectorySnapshottableFeature((DirectoryWithSnapshotFeature) null);
      int int0 = directorySnapshottableFeature0.getSnapshotQuota();
      assertEquals(65536, int0);
  }
}
