/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 23:17:16 GMT 2024
 */

package org.apache.hadoop.hdfs.server.namenode.snapshot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.hadoop.fs.permission.FsAction;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.fs.permission.PermissionStatus;
import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
import org.apache.hadoop.hdfs.server.namenode.INode;
import org.apache.hadoop.hdfs.server.namenode.INodeDirectory;
import org.apache.hadoop.hdfs.server.namenode.INodeFile;
import org.apache.hadoop.hdfs.server.namenode.LeaseManager;
import org.apache.hadoop.hdfs.server.namenode.snapshot.DirectoryWithSnapshotFeature;
import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SnapshotDiffInfo_ESTest extends SnapshotDiffInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(609L, byteArray0, permissionStatus0, 86400000L);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(1, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, snapshot0);
      boolean boolean0 = snapshotDiffInfo0.isFromEarlier();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[15];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      byte[][] byteArray1 = new byte[0][5];
      snapshotDiffInfo0.addDirDiff(iNodeDirectory0, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      INodeDirectory iNodeDirectory1 = new INodeDirectory((-1), byteArray0, permissionStatus0, 10);
      snapshotDiffInfo0.addDirDiff(iNodeDirectory1, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      assertFalse(iNodeDirectory1.isSymlink());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[4];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-8L), byteArray0, permissionStatus0, (-1L));
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      snapshotDiffInfo0.incrementFilesProcessed();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(18, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, (Snapshot) null);
      snapshotDiffInfo0.incrementDirsProcessed();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "", fsPermission0);
      byte[] byteArray0 = new byte[7];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, (byte)0);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(1886, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, (Snapshot) null);
      boolean boolean0 = snapshotDiffInfo0.isFromEarlier();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[15];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 0L);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(18, "org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo$1", iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      Snapshot snapshot1 = snapshotDiffInfo0.getTo();
      assertSame(snapshot1, snapshot0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot((-2147481760), "sync thread is not alive", iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      Snapshot snapshot1 = snapshotDiffInfo0.getTo();
      assertEquals((-2147481760), snapshot1.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(18, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      Snapshot snapshot1 = snapshotDiffInfo0.getFrom();
      assertSame(snapshot1, snapshot0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("", "", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1729L), byteArray0, permissionStatus0, 10);
      iNodeDirectory0.addSnapshottableFeature();
      LeaseManager leaseManager0 = mock(LeaseManager.class, new ViolatedAssumptionAnswer());
      Snapshot snapshot0 = iNodeDirectory0.addSnapshot((-570), "6Fg", leaseManager0, false, 114, 0L);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
      Snapshot snapshot1 = snapshotDiffInfo0.getFrom();
      assertEquals((-1), Snapshot.NO_SNAPSHOT_ID);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[15];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.setParent(iNodeDirectory0);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      // Undeclared exception!
      snapshotDiffInfo0.generateReport();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      snapshotDiffInfo0.addDirDiff(iNodeDirectory0, (byte[][]) null, directoryWithSnapshotFeature_ChildrenDiff0);
      // Undeclared exception!
      try { 
        snapshotDiffInfo0.generateReport();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.DFSUtilClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SnapshotDiffInfo snapshotDiffInfo0 = null;
      try {
        snapshotDiffInfo0 = new SnapshotDiffInfo((INodeDirectory) null, (INodeDirectory) null, (Snapshot) null, (Snapshot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[15];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      directoryWithSnapshotFeature_ChildrenDiff0.delete(iNodeDirectory0);
      byte[][] byteArray1 = new byte[1][5];
      snapshotDiffInfo0.addDirDiff(iNodeDirectory0, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      SnapshotDiffReport snapshotDiffReport0 = snapshotDiffInfo0.generateReport();
      assertEquals("", snapshotDiffReport0.getLaterSnapshotName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1, byteArray0, permissionStatus0, (-1077L));
      Snapshot snapshot0 = new Snapshot(1, "", iNodeDirectory0);
      Snapshot.Root snapshot_Root0 = snapshot0.getRoot();
      snapshot_Root0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(snapshot_Root0, iNodeDirectory0, snapshot0, (Snapshot) null);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      directoryWithSnapshotFeature_ChildrenDiff0.create(iNodeDirectory0);
      byte[][] byteArray1 = new byte[6][9];
      snapshotDiffInfo0.addDirDiff(iNodeDirectory0, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      SnapshotDiffReport snapshotDiffReport0 = snapshotDiffInfo0.generateReport();
      assertEquals("\u0000/.snapshot/", snapshotDiffReport0.getSnapshotRoot());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[15];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      directoryWithSnapshotFeature_ChildrenDiff0.create(iNodeDirectory0);
      byte[][] byteArray1 = new byte[13][0];
      snapshotDiffInfo0.addDirDiff(iNodeDirectory0, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      snapshotDiffInfo0.setRenameTarget(10, byteArray1);
      SnapshotDiffReport snapshotDiffReport0 = snapshotDiffInfo0.generateReport();
      assertEquals("", snapshotDiffReport0.getFromSnapshot());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      INodeDirectory iNodeDirectory1 = new INodeDirectory(0L, byteArray0, permissionStatus0, 0L);
      iNodeDirectory1.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = null;
      try {
        snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory1, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FsAction fsAction0 = FsAction.EXECUTE;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0, false);
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", "org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1829L, byteArray0, permissionStatus0, (-4469L));
      Snapshot snapshot0 = new Snapshot((byte) (-122), "fs.permissions.umask-mode", iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = null;
      try {
        snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, snapshot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[3][0];
      snapshotDiffInfo_RenameEntry0.setTarget(byteArray0);
      FsAction fsAction0 = FsAction.EXECUTE;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0, false);
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", "org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1829L, byteArray0[0], permissionStatus0, (-4469L));
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = new byte[3][0];
      byte[] byteArray1 = new byte[5];
      FsAction fsAction0 = FsAction.EXECUTE;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0, false);
      PermissionStatus permissionStatus0 = new PermissionStatus("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", "org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory(1829L, byteArray1, permissionStatus0, (-4469L));
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray0);
      boolean boolean0 = snapshotDiffInfo_RenameEntry0.isRename();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[] byteArray0 = new byte[5];
      FsPermission fsPermission0 = FsPermission.getDirDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus((String) null, "", fsPermission0);
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-3622L), byteArray0, permissionStatus0, 0L);
      byte[][] byteArray1 = new byte[1][8];
      snapshotDiffInfo_RenameEntry0.setSource(iNodeDirectory0, byteArray1);
      // Undeclared exception!
      try { 
        snapshotDiffInfo_RenameEntry0.setSource((INode) null, byteArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.thirdparty.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[2];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      Snapshot snapshot0 = new Snapshot(18, iNodeDirectory0, iNodeDirectory0);
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, snapshot0, (Snapshot) null);
      byte[][] byteArray1 = new byte[1][5];
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      snapshotDiffInfo0.addDirDiff((INodeDirectory) null, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      Snapshot.Root snapshot_Root0 = snapshot0.getRoot();
      snapshotDiffInfo0.addDirDiff(snapshot_Root0, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      assertTrue(snapshot_Root0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[15];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      DirectoryWithSnapshotFeature.ChildrenDiff directoryWithSnapshotFeature_ChildrenDiff0 = new DirectoryWithSnapshotFeature.ChildrenDiff();
      byte[][] byteArray1 = new byte[0][5];
      snapshotDiffInfo0.addDirDiff(iNodeDirectory0, byteArray1, directoryWithSnapshotFeature_ChildrenDiff0);
      snapshotDiffInfo0.addFileDiff((INodeFile) null, byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      // Undeclared exception!
      try { 
        snapshotDiffInfo0.addDirDiff(iNodeDirectory0, (byte[][]) null, (DirectoryWithSnapshotFeature.ChildrenDiff) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotDiffInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      FsAction fsAction0 = FsAction.READ;
      FsPermission fsPermission0 = new FsPermission(fsAction0, fsAction0, fsAction0, false);
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[0];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-1977L), byteArray0, permissionStatus0, 10);
      byte[][] byteArray1 = new byte[2][2];
      snapshotDiffInfo_RenameEntry0.setTarget(iNodeDirectory0, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = snapshotDiffInfo_RenameEntry0.getTargetPath();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SnapshotDiffInfo.RenameEntry snapshotDiffInfo_RenameEntry0 = new SnapshotDiffInfo.RenameEntry();
      byte[][] byteArray0 = snapshotDiffInfo_RenameEntry0.getSourcePath();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getCachePoolDefault();
      PermissionStatus permissionStatus0 = new PermissionStatus("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[3];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      snapshotDiffInfo0.addChildrenListingTime(18);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[15];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      Snapshot snapshot0 = snapshotDiffInfo0.getTo();
      assertNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      Snapshot snapshot0 = snapshotDiffInfo0.getFrom();
      assertNull(snapshot0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[1];
      INodeDirectory iNodeDirectory0 = new INodeDirectory(10, byteArray0, permissionStatus0, 18);
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      snapshotDiffInfo0.incrementFilesCompared();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FsPermission fsPermission0 = FsPermission.getFileDefault();
      PermissionStatus permissionStatus0 = PermissionStatus.createImmutable("fs.permissions.umask-mode", "fs.permissions.umask-mode", fsPermission0);
      byte[] byteArray0 = new byte[4];
      INodeDirectory iNodeDirectory0 = new INodeDirectory((-8L), byteArray0, permissionStatus0, (-1L));
      iNodeDirectory0.addSnapshottableFeature();
      SnapshotDiffInfo snapshotDiffInfo0 = new SnapshotDiffInfo(iNodeDirectory0, iNodeDirectory0, (Snapshot) null, (Snapshot) null);
      snapshotDiffInfo0.incrementDirsCompared();
  }
}
