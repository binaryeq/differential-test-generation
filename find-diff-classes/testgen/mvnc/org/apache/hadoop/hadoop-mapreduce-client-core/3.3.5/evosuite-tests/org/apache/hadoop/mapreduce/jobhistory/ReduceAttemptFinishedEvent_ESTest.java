/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:13:31 GMT 2024
 */

package org.apache.hadoop.mapreduce.jobhistory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.hadoop.mapreduce.Counters;
import org.apache.hadoop.mapreduce.JobID;
import org.apache.hadoop.mapreduce.TaskAttemptID;
import org.apache.hadoop.mapreduce.TaskID;
import org.apache.hadoop.mapreduce.TaskType;
import org.apache.hadoop.mapreduce.jobhistory.EventType;
import org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinished;
import org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReduceAttemptFinishedEvent_ESTest extends ReduceAttemptFinishedEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent1 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 1779L, (-1491L), 0L, "", "", (Counters) null);
      Object object0 = reduceAttemptFinishedEvent1.getDatum();
      reduceAttemptFinishedEvent0.setDatum(object0);
      assertEquals((-1491L), reduceAttemptFinishedEvent0.getSortFinishTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int[] intArray0 = new int[6];
      reduceAttemptFinishedEvent0.vMemKbytes = intArray0;
      int[] intArray1 = reduceAttemptFinishedEvent0.getVMemKbytes();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int[] intArray0 = new int[0];
      reduceAttemptFinishedEvent0.vMemKbytes = intArray0;
      int[] intArray1 = reduceAttemptFinishedEvent0.getVMemKbytes();
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("YAP$HOw49}4Wk", 0, taskType0, (-624), 5515);
      Counters counters0 = new Counters();
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, " (need to add/enable type information?)", 1802L, 1802L, 0L, " (need to add/enable type information?)", 0, "YAP$HOw49}4Wk", "YAP$HOw49}4Wk", counters0, (int[][]) null, 0L);
      reduceAttemptFinishedEvent0.getTimelineMetrics();
      assertEquals(1802L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(1802L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(" (need to add/enable type information?)", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(" (need to add/enable type information?)", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(0L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("YAP$HOw49}4Wk", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("YAP$HOw49}4Wk", reduceAttemptFinishedEvent0.getState());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskID taskID0 = new TaskID();
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, 1);
      TaskType taskType0 = TaskType.JOB_CLEANUP;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[4][8];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 1, 134217728L, 134217728L, "", 1, " aW?_I #7zX", "", counters0, intArray0, (-2369L));
      reduceAttemptFinishedEvent0.getTaskType();
      assertEquals((-2369L), reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(1L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(134217728L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1, reduceAttemptFinishedEvent0.getPort());
      assertEquals(134217728L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(" aW?_I #7zX", reduceAttemptFinishedEvent0.getRackName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskID taskID0 = new TaskID();
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, (-787));
      TaskType taskType0 = TaskType.MAP;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[7][7];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "x~/b\"#mf", (-2984L), (-2984L), (-2984L), "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", 0, "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", "[]", counters0, intArray0, 0L);
      String string0 = reduceAttemptFinishedEvent0.getTaskStatus();
      assertEquals(0L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-2984L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals((-2984L), reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("[]", reduceAttemptFinishedEvent0.getState());
      assertEquals((-2984L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("x~/b\"#mf", string0);
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getHostname());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.MAP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", (-472L), 0L, 1L, "C", "jL5[Kq0r$]wRb", (Counters) null);
      String string0 = reduceAttemptFinishedEvent0.getTaskStatus();
      assertEquals("jL5[Kq0r$]wRb", reduceAttemptFinishedEvent0.getState());
      assertEquals((-472L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("", string0);
      assertEquals(1L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("C", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      Counters counters0 = new Counters();
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "N(ZzWQP", 1L, 0L, 64L, "X.:^#l(", 56319, "X.:^#l(", "-=K", counters0, (int[][]) null, 56319);
      reduceAttemptFinishedEvent0.getTaskId();
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(56319L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(1L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("N(ZzWQP", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals("-=K", reduceAttemptFinishedEvent0.getState());
      assertEquals(56319, reduceAttemptFinishedEvent0.getPort());
      assertEquals("X.:^#l(", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("X.:^#l(", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(64L, reduceAttemptFinishedEvent0.getFinishTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskType taskType0 = TaskType.MAP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("", 0, taskType0, (-1324), (-1324));
      Counters counters0 = new Counters();
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", (-1324), 0, 0, "", "", counters0);
      reduceAttemptFinishedEvent0.getTaskId();
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals((-1324L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskType taskType0 = TaskType.REDUCE;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[6][2];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent((TaskAttemptID) null, taskType0, "(i$,A_,Zwv", (-9223372036854775808L), 4885L, 0L, "PORT", 0, "STATUS", "STATUS", counters0, intArray0, 0);
      String string0 = reduceAttemptFinishedEvent0.getState();
      assertEquals(4885L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("STATUS", reduceAttemptFinishedEvent0.getRackName());
      assertEquals((-9223372036854775808L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("STATUS", string0);
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals("PORT", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("(i$,A_,Zwv", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(0L, reduceAttemptFinishedEvent0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 4068L, 4068L, 4068L, "", "", (Counters) null);
      reduceAttemptFinishedEvent0.getState();
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals(4068L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(4068L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(4068L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      long long0 = reduceAttemptFinishedEvent0.getStartTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskType taskType0 = TaskType.JOB_SETUP;
      TaskID taskID0 = new TaskID("'A[,Z", (-364), taskType0, (-5163));
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, 179);
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[19][7];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", (-1956L), 177L, 30000L, "'A[,Z", (-364), "i&gjj\"rI", "", counters0, intArray0);
      long long0 = reduceAttemptFinishedEvent0.getStartTime();
      assertEquals("'A[,Z", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(30000L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1392409281320L, long0);
      assertEquals((-1956L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals("", reduceAttemptFinishedEvent0.getState());
      assertEquals((-364), reduceAttemptFinishedEvent0.getPort());
      assertEquals("i&gjj\"rI", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(177L, reduceAttemptFinishedEvent0.getSortFinishTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("YAP$HOw49}4Wk", 0, taskType0, (-624), 5515);
      Counters counters0 = new Counters();
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, " (need to add/enable type information?)", 1802L, 1802L, 0L, " (need to add/enable type information?)", 0, "YAP$HOw49}4Wk", "YAP$HOw49}4Wk", counters0, (int[][]) null, 0L);
      long long0 = reduceAttemptFinishedEvent0.getSortFinishTime();
      assertEquals(1802L, long0);
      assertEquals(0L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals("YAP$HOw49}4Wk", reduceAttemptFinishedEvent0.getState());
      assertEquals(1802L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("YAP$HOw49}4Wk", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(" (need to add/enable type information?)", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals(" (need to add/enable type information?)", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskType taskType0 = TaskType.JOB_SETUP;
      Counters counters0 = new Counters();
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent((TaskAttemptID) null, taskType0, " doesn't support removeAclEntries", (-1529L), (-1529L), (-682L), "", " doesn't support removeAclEntries", counters0);
      long long0 = reduceAttemptFinishedEvent0.getSortFinishTime();
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals(" doesn't support removeAclEntries", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals((-682L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(" doesn't support removeAclEntries", reduceAttemptFinishedEvent0.getState());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-1529L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals((-1529L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      long long0 = reduceAttemptFinishedEvent0.getShuffleFinishTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "_xQ", 1000000000L, 1000000000L, (-43L), "", "_xQ", (Counters) null);
      long long0 = reduceAttemptFinishedEvent0.getShuffleFinishTime();
      assertEquals(1000000000L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals("_xQ", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals("_xQ", reduceAttemptFinishedEvent0.getState());
      assertEquals(1000000000L, long0);
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-43L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.MAP;
      int[][] intArray0 = new int[9][6];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "~o", 40L, 300000L, 2603L, "~o", 3000, "Kf-yT-e4e,k`|59", "", (Counters) null, intArray0);
      String string0 = reduceAttemptFinishedEvent0.getRackName();
      assertEquals(40L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(300000L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(2603L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals("Kf-yT-e4e,k`|59", string0);
      assertEquals("~o", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("", reduceAttemptFinishedEvent0.getState());
      assertEquals(3000, reduceAttemptFinishedEvent0.getPort());
      assertEquals("~o", reduceAttemptFinishedEvent0.getTaskStatus());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[7][9];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent((TaskAttemptID) null, taskType0, "gH].", (-1L), 4587L, (-1129L), "gH].", 167, "gH].", "gH].", counters0, intArray0, (-343));
      int int0 = reduceAttemptFinishedEvent0.getPort();
      assertEquals((-1129L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(167, int0);
      assertEquals((-343L), reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-1L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(4587L, reduceAttemptFinishedEvent0.getSortFinishTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskType taskType0 = TaskType.MAP;
      TaskID taskID0 = new TaskID("`0R`H##d[dEG5", 0, taskType0, 0);
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, 0);
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[4][5];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "oC", 0L, 0, 0L, "", (-2602), "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", "oC", counters0, intArray0, 1460L);
      int int0 = reduceAttemptFinishedEvent0.getPort();
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("oC", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(1460L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-2602), int0);
      assertEquals("oC", reduceAttemptFinishedEvent0.getState());
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int[] intArray0 = new int[6];
      reduceAttemptFinishedEvent0.physMemKbytes = intArray0;
      int[] intArray1 = reduceAttemptFinishedEvent0.getPhysMemKbytes();
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskType taskType0 = TaskType.MAP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("DTd!9aj-N[", (-2819), taskType0, 0, (-2588));
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 0, 0, (-2588), "", "FINISH_TIME", (Counters) null);
      reduceAttemptFinishedEvent0.getPhysMemKbytes();
      assertEquals("", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals((-2588L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("FINISH_TIME", reduceAttemptFinishedEvent0.getState());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaskType taskType0 = TaskType.REDUCE;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[5][0];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent((TaskAttemptID) null, taskType0, "", (-2405L), (-1286L), (-2405L), "", (-2788), (String) null, "", counters0, intArray0, (-2788));
      reduceAttemptFinishedEvent0.getHostname();
      assertEquals((-2788), reduceAttemptFinishedEvent0.getPort());
      assertEquals((-2788L), reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-2405L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals((-2405L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals((-1286L), reduceAttemptFinishedEvent0.getSortFinishTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.MAP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 4071L, 4071L, 4071L, "", "", (Counters) null);
      long long0 = reduceAttemptFinishedEvent0.getFinishTime();
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(4071L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(4071L, long0);
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals(4071L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TaskType taskType0 = TaskType.REDUCE;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("DTd!9aj-N[", (-2819), taskType0, 0, (-2588));
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 0L, (-177L), (-2588), "", 0, "DTd!9aj-N[", "", (Counters) null, (int[][]) null);
      long long0 = reduceAttemptFinishedEvent0.getFinishTime();
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-177L), reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals((-2588L), long0);
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("DTd!9aj-N[", reduceAttemptFinishedEvent0.getRackName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.REDUCE;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[4][2];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "STATUS", 1010L, (-1173L), (-1173L), "STATUS", 0, "STATUS", "STATUS", counters0, intArray0);
      reduceAttemptFinishedEvent0.getCpuUsages();
      assertEquals((-1173L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1010L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals((-1173L), reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "/36^EL@-}", 0L, 0L, 1779L, "", "", (Counters) null);
      reduceAttemptFinishedEvent0.getCpuUsages();
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("/36^EL@-}", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getState());
      assertEquals(1779L, reduceAttemptFinishedEvent0.getFinishTime());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      Counters counters0 = reduceAttemptFinishedEvent0.getCounters();
      assertNull(counters0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TaskID taskID0 = new TaskID();
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, 0);
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[7][8];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 2795L, 0, 0, "", 0, "i7yi@5m~c*LM)50", "", counters0, intArray0);
      reduceAttemptFinishedEvent0.getCounters();
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals(2795L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int[] intArray0 = reduceAttemptFinishedEvent0.getClockSplits();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TaskType taskType0 = TaskType.MAP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("RACK_NAME", 0, taskType0, 0, 0);
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[8];
      intArray0[0] = intArray1;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "RACK_NAME", 0, 0, 547L, "RACK_NAME", 0, "RACK_NAME", "RACK_NAME", counters0, intArray0, 0);
      int[] intArray2 = reduceAttemptFinishedEvent0.getClockSplits();
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals(547L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(8, intArray2.length);
      assertEquals(0L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      TaskAttemptID taskAttemptID0 = reduceAttemptFinishedEvent0.getAttemptId();
      assertNull(taskAttemptID0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.JOB_CLEANUP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "Failed to reset renewer", 0L, 1139L, 0L, "", "org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", (Counters) null);
      reduceAttemptFinishedEvent0.getAttemptId();
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", reduceAttemptFinishedEvent0.getState());
      assertEquals("Failed to reset renewer", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(1139L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JobID jobID0 = new JobID();
      TaskType taskType0 = TaskType.MAP;
      TaskID taskID0 = new TaskID(jobID0, taskType0, (-1196));
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, 2222);
      int[][] intArray0 = new int[7][8];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "HOSTNAME", (-1196), 2081L, (-1196), "job", (-1196), "job_[0-9]+_[0-9]+", "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", (Counters) null, intArray0);
      reduceAttemptFinishedEvent0.getAttemptId();
      assertEquals("job_[0-9]+_[0-9]+", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("job", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("HOSTNAME", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(2081L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-1196L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getState());
      assertEquals((-1196), reduceAttemptFinishedEvent0.getPort());
      assertEquals((-1196L), reduceAttemptFinishedEvent0.getShuffleFinishTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.toTimelineEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.setDatum((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.getTaskId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.getHostname();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.getDatum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.MAP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "/36\n^EL@-}", 341L, 341L, 341L, "/36\n^EL@-}", "/36\n^EL@-}", (Counters) null);
      int[][] intArray0 = new int[0][0];
      reduceAttemptFinishedEvent0.allSplits = intArray0;
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.getDatum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.MAP;
      int[][] intArray0 = new int[0][6];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = null;
      try {
        reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "+U/bIMtkM,% 5N!y", 64L, 64L, 64L, "+U/bIMtkM,% 5N!y", 0, "+U/bIMtkM,% 5N!y", "", (Counters) null, intArray0, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.JOB_CLEANUP;
      int[][] intArray0 = new int[0][5];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = null;
      try {
        reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", (-1L), 4081L, (-1L), "", 596, "", "", (Counters) null, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TaskType taskType0 = TaskType.MAP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("DTd!9aj-N[", (-2819), taskType0, 0, (-2588));
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", 0, 0, (-2588), "", "FINISH_TIME", (Counters) null);
      String string0 = reduceAttemptFinishedEvent0.getRackName();
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals((-2588L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals("", string0);
      assertEquals("FINISH_TIME", reduceAttemptFinishedEvent0.getState());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int int0 = reduceAttemptFinishedEvent0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      long long0 = reduceAttemptFinishedEvent0.getSortFinishTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      long long0 = reduceAttemptFinishedEvent0.getFinishTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      EventType eventType0 = reduceAttemptFinishedEvent0.getEventType();
      assertEquals(EventType.REDUCE_ATTEMPT_FINISHED, eventType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.getTaskStatus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      reduceAttemptFinishedEvent0.getTaskType();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TaskID taskID0 = new TaskID();
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, (-3741));
      TaskType taskType0 = TaskType.JOB_CLEANUP;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[4][7];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", 1663L, (-3741), 1663L, "yarn.app.mapreduce.am.resource.cpu-vcores", (-3741), "xzn", "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", counters0, intArray0);
      String string0 = reduceAttemptFinishedEvent0.getHostname();
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getState());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(1663L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals((-3741L), reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals("xzn", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(1663L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("yarn.app.mapreduce.am.resource.cpu-vcores", string0);
      assertEquals((-3741), reduceAttemptFinishedEvent0.getPort());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.getState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Counters counters0 = new Counters();
      TaskType taskType0 = TaskType.JOB_CLEANUP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent((TaskAttemptID) null, taskType0, "", 1L, 1736L, 1L, "io.netty.handler.ssl.ReferenceCountedOpenSslEngine$HandshakeState", "", counters0);
      reduceAttemptFinishedEvent0.toTimelineEvent();
      assertEquals(1L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1736L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(1L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals("", reduceAttemptFinishedEvent0.getState());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("io.netty.handler.ssl.ReferenceCountedOpenSslEngine$HandshakeState", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      String string0 = reduceAttemptFinishedEvent0.getRackName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.JOB_SETUP;
      int[][] intArray0 = new int[4][7];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "ISvwvl,r", 5000L, 0L, 1341L, "NVUiQzh-wHq:V~", (-1198), (String) null, "3*>JK>5}", (Counters) null, intArray0);
      ReduceAttemptFinished reduceAttemptFinished0 = (ReduceAttemptFinished)reduceAttemptFinishedEvent0.getDatum();
      assertEquals(5000L, reduceAttemptFinished0.shuffleFinishTime);
      assertEquals((-1198), reduceAttemptFinished0.port);
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(1341L, reduceAttemptFinished0.finishTime);
      assertEquals("3*>JK>5}", reduceAttemptFinishedEvent0.getState());
      assertNotNull(reduceAttemptFinished0);
      assertEquals(0L, reduceAttemptFinished0.sortFinishTime);
      assertEquals("NVUiQzh-wHq:V~", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("ISvwvl,r", reduceAttemptFinishedEvent0.getTaskStatus());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.REDUCE;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "/36^EL@-}", 341L, 341L, 341L, "/36^EL@-}", "/36^EL@-}", (Counters) null);
      reduceAttemptFinishedEvent0.getDatum();
      ReduceAttemptFinished reduceAttemptFinished0 = (ReduceAttemptFinished)reduceAttemptFinishedEvent0.getDatum();
      assertEquals(341L, reduceAttemptFinished0.finishTime);
      assertEquals(341L, reduceAttemptFinished0.sortFinishTime);
      assertEquals("/36^EL@-}", reduceAttemptFinishedEvent0.getTaskStatus());
      assertNotNull(reduceAttemptFinished0);
      assertEquals("/36^EL@-}", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("/36^EL@-}", reduceAttemptFinishedEvent0.getState());
      assertEquals((-1), reduceAttemptFinished0.port);
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(341L, reduceAttemptFinished0.shuffleFinishTime);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int[] intArray0 = reduceAttemptFinishedEvent0.getCpuUsages();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int[] intArray0 = reduceAttemptFinishedEvent0.getPhysMemKbytes();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TaskType taskType0 = TaskType.JOB_CLEANUP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("c$yga)rA)bHJFK}]", 259, taskType0, 259, 564);
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[4][4];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "STATE", 564, 0L, (-4354L), "PORT", 564, "", "PORT", counters0, intArray0);
      reduceAttemptFinishedEvent0.getTaskId();
      assertEquals(564, reduceAttemptFinishedEvent0.getPort());
      assertEquals(564L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("PORT", reduceAttemptFinishedEvent0.getState());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals("PORT", reduceAttemptFinishedEvent0.getHostname());
      assertEquals((-4354L), reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("STATE", reduceAttemptFinishedEvent0.getTaskStatus());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TaskType taskType0 = TaskType.MAP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("RACK_NAME", 0, taskType0, 0, 0);
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[6][0];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "RACK_NAME", 0, 0, 547L, "RACK_NAME", 0, "RACK_NAME", "RACK_NAME", counters0, intArray0, 0);
      reduceAttemptFinishedEvent0.getClockSplits();
      assertEquals(547L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals(0L, reduceAttemptFinishedEvent0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TaskType taskType0 = TaskType.JOB_SETUP;
      TaskAttemptID taskAttemptID0 = new TaskAttemptID("mapred.job.reuse.jvm.num.tasks", (-997), taskType0, 0, (byte)0);
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[7][8];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "mapred.job.reuse.jvm.num.tasks", (byte)0, 0L, 0L, "", 0, "=y*|cCvmTZ{x c", "Ow)`0{>>'~I:}", counters0, intArray0, (-527));
      long long0 = reduceAttemptFinishedEvent0.getStartTime();
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("=y*|cCvmTZ{x c", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("mapred.job.reuse.jvm.num.tasks", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals(0, reduceAttemptFinishedEvent0.getPort());
      assertEquals((-527L), long0);
      assertEquals("Ow)`0{>>'~I:}", reduceAttemptFinishedEvent0.getState());
      assertEquals(0L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.setDatum(reduceAttemptFinishedEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent cannot be cast to org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinished
         //
         verifyException("org.apache.hadoop.mapreduce.jobhistory.ReduceAttemptFinishedEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.TASK_CLEANUP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "/36^EL@-}", 0L, 0L, 1779L, "", "", (Counters) null);
      reduceAttemptFinishedEvent0.toTimelineEvent();
      assertEquals("/36^EL@-}", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals("", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(1779L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(0L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getState());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      int[] intArray0 = reduceAttemptFinishedEvent0.getVMemKbytes();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent();
      // Undeclared exception!
      try { 
        reduceAttemptFinishedEvent0.getTimelineMetrics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.hadoop.mapreduce.util.JobHistoryEventUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TaskID taskID0 = new TaskID();
      TaskAttemptID taskAttemptID0 = new TaskAttemptID(taskID0, (-3741));
      TaskType taskType0 = TaskType.JOB_CLEANUP;
      Counters counters0 = new Counters();
      int[][] intArray0 = new int[4][7];
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", 1663L, (-3741), 1663L, "yarn.app.mapreduce.am.resource.cpu-vcores", (-3741), "xzn", "task_(d+)_(d+)_(m|r|s|c|t)_(d+)", counters0, intArray0);
      reduceAttemptFinishedEvent0.getAttemptId();
      assertEquals("yarn.app.mapreduce.am.resource.cpu-vcores", reduceAttemptFinishedEvent0.getHostname());
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals((-3741L), reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals("task_(d+)_(d+)_(m|r|s|c|t)_(d+)", reduceAttemptFinishedEvent0.getState());
      assertEquals(1663L, reduceAttemptFinishedEvent0.getShuffleFinishTime());
      assertEquals((-3741), reduceAttemptFinishedEvent0.getPort());
      assertEquals(1663L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals("xzn", reduceAttemptFinishedEvent0.getRackName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TaskAttemptID taskAttemptID0 = new TaskAttemptID();
      TaskType taskType0 = TaskType.MAP;
      ReduceAttemptFinishedEvent reduceAttemptFinishedEvent0 = new ReduceAttemptFinishedEvent(taskAttemptID0, taskType0, "", (-472L), 0L, 1L, "C", "jL5[Kq0r$]wRb", (Counters) null);
      long long0 = reduceAttemptFinishedEvent0.getShuffleFinishTime();
      assertEquals(0L, reduceAttemptFinishedEvent0.getSortFinishTime());
      assertEquals("C", reduceAttemptFinishedEvent0.getHostname());
      assertEquals(1392409281320L, reduceAttemptFinishedEvent0.getStartTime());
      assertEquals((-1), reduceAttemptFinishedEvent0.getPort());
      assertEquals(1L, reduceAttemptFinishedEvent0.getFinishTime());
      assertEquals("", reduceAttemptFinishedEvent0.getTaskStatus());
      assertEquals((-472L), long0);
      assertEquals("", reduceAttemptFinishedEvent0.getRackName());
      assertEquals("jL5[Kq0r$]wRb", reduceAttemptFinishedEvent0.getState());
  }
}
