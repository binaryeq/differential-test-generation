/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:26:48 GMT 2024
 */

package org.apache.logging.log4j.spi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.logging.log4j.ThreadContext;
import org.apache.logging.log4j.spi.DefaultThreadContextStack;
import org.apache.logging.log4j.spi.ThreadContextStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultThreadContextStack_ESTest extends DefaultThreadContextStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      LinkedList<DefaultThreadContextStack> linkedList0 = new LinkedList<DefaultThreadContextStack>();
      DefaultThreadContextStack defaultThreadContextStack1 = new DefaultThreadContextStack(true);
      linkedList0.add(defaultThreadContextStack1);
      boolean boolean0 = defaultThreadContextStack0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      List<String> list0 = defaultThreadContextStack0.asList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      // Undeclared exception!
      try { 
        defaultThreadContextStack0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      // Undeclared exception!
      try { 
        defaultThreadContextStack0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.push(defaultThreadContextStack0);
      // Undeclared exception!
      try { 
        defaultThreadContextStack0.containsAll(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      // Undeclared exception!
      try { 
        defaultThreadContextStack0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      defaultThreadContextStack0.trim(145);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultThreadContextStack0.formatTo(stringBuilder0);
      assertEquals("[]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      String string0 = defaultThreadContextStack0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      DefaultThreadContextStack[] defaultThreadContextStackArray0 = new DefaultThreadContextStack[1];
      DefaultThreadContextStack[] defaultThreadContextStackArray1 = defaultThreadContextStack0.toArray(defaultThreadContextStackArray0);
      assertEquals(1, defaultThreadContextStackArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      LinkedList<DefaultThreadContextStack> linkedList0 = new LinkedList<DefaultThreadContextStack>();
      linkedList0.add(defaultThreadContextStack0);
      boolean boolean0 = defaultThreadContextStack0.retainAll(linkedList0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<DefaultThreadContextStack> linkedList0 = new LinkedList<DefaultThreadContextStack>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Object object0 = linkedList1.pollFirst();
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = linkedList1.add(object0);
      boolean boolean1 = defaultThreadContextStack0.removeAll(linkedList1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.remove(defaultThreadContextStack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      String string0 = defaultThreadContextStack0.peek();
      //  // Unstable assertion: assertEquals("j&YYKu>{4{9oIVj", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      defaultThreadContextStack0.parallelStream();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clear();
      boolean boolean0 = defaultThreadContextStack0.addAll(linkedList0);
      assertFalse(boolean0);
      
      defaultThreadContextStack0.contains((Object) null);
      Object object0 = new Object();
      defaultThreadContextStack0.equals(object0);
      defaultThreadContextStack0.add("j&YYKu>{4{9oIVj");
      defaultThreadContextStack0.isEmpty();
      defaultThreadContextStack0.asList();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = defaultThreadContextStack0.toArray(objectArray0);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      DefaultThreadContextStack defaultThreadContextStack1 = new DefaultThreadContextStack(false);
      boolean boolean0 = defaultThreadContextStack0.equals(defaultThreadContextStack1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      LinkedList<DefaultThreadContextStack> linkedList0 = new LinkedList<DefaultThreadContextStack>();
      linkedList0.add(defaultThreadContextStack0);
      boolean boolean0 = defaultThreadContextStack0.containsAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      defaultThreadContextStack0.iterator();
      boolean boolean0 = defaultThreadContextStack0.add("vn'Fn");
      defaultThreadContextStack0.pop();
      ThreadContextStack threadContextStack0 = defaultThreadContextStack0.copy();
      defaultThreadContextStack0.getDepth();
      defaultThreadContextStack0.remove("vn'Fn");
      boolean boolean1 = defaultThreadContextStack0.contains(threadContextStack0);
      defaultThreadContextStack0.size();
      defaultThreadContextStack0.addAll(threadContextStack0);
      boolean boolean2 = defaultThreadContextStack0.addAll(threadContextStack0);
      assertFalse(boolean2 == boolean0);
      
      defaultThreadContextStack0.trim(0);
      boolean boolean3 = defaultThreadContextStack0.remove("vn'Fn");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      // Undeclared exception!
      try { 
        defaultThreadContextStack0.trim((-2337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum stack depth cannot be negative
         //
         verifyException("org.apache.logging.log4j.spi.DefaultThreadContextStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      // Undeclared exception!
      try { 
        defaultThreadContextStack0.formatTo((StringBuilder) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.logging.log4j.spi.MutableThreadContextStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      DefaultThreadContextStack[] defaultThreadContextStackArray0 = new DefaultThreadContextStack[0];
      defaultThreadContextStack0.toArray(defaultThreadContextStackArray0);
      defaultThreadContextStack0.peek();
      defaultThreadContextStack0.hashCode();
      List<String> list0 = defaultThreadContextStack0.asList();
      defaultThreadContextStack0.clear();
      boolean boolean0 = defaultThreadContextStack0.addAll(list0);
      assertFalse(boolean0);
      
      int int0 = defaultThreadContextStack0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      // Undeclared exception!
      try { 
        defaultThreadContextStack0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.logging.log4j.spi.DefaultThreadContextStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      Object[] objectArray0 = defaultThreadContextStack0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      int int0 = defaultThreadContextStack0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = defaultThreadContextStack0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.retainAll(defaultThreadContextStack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = defaultThreadContextStack0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = linkedList0.add((Object) defaultThreadContextStack0);
      DefaultThreadContextStack defaultThreadContextStack1 = new DefaultThreadContextStack(true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      boolean boolean1 = defaultThreadContextStack1.removeAll(linkedList1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = defaultThreadContextStack0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = defaultThreadContextStack0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      Object object0 = new Object();
      boolean boolean0 = defaultThreadContextStack0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      defaultThreadContextStack0.push("&XI)I7)");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      defaultThreadContextStack0.iterator();
      String string0 = defaultThreadContextStack0.pop();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      String string0 = defaultThreadContextStack0.pop();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      String string0 = defaultThreadContextStack0.pop();
      //  // Unstable assertion: assertEquals("&XI)I7)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      boolean boolean0 = defaultThreadContextStack0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      int int0 = defaultThreadContextStack0.getDepth();
      //  // Unstable assertion: assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      DefaultThreadContextStack defaultThreadContextStack1 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.equals(defaultThreadContextStack1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      LinkedList<DefaultThreadContextStack> linkedList0 = new LinkedList<DefaultThreadContextStack>();
      linkedList0.add(defaultThreadContextStack0);
      boolean boolean0 = defaultThreadContextStack0.containsAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.equals(defaultThreadContextStack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      ThreadContextStack threadContextStack0 = defaultThreadContextStack0.copy();
      //  // Unstable assertion: assertEquals(2, threadContextStack0.getDepth());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      ThreadContextStack threadContextStack0 = defaultThreadContextStack0.copy();
      assertEquals(0, threadContextStack0.getDepth());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.containsAll(defaultThreadContextStack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(false);
      Object object0 = new Object();
      boolean boolean0 = defaultThreadContextStack0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      boolean boolean0 = defaultThreadContextStack0.contains("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      defaultThreadContextStack0.push("&XI)I7)");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = defaultThreadContextStack0.addAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultThreadContextStack defaultThreadContextStack0 = new DefaultThreadContextStack(true);
      ThreadContext.ContextStack threadContext_ContextStack0 = defaultThreadContextStack0.getImmutableStackOrNull();
      assertNull(threadContext_ContextStack0);
  }
}
