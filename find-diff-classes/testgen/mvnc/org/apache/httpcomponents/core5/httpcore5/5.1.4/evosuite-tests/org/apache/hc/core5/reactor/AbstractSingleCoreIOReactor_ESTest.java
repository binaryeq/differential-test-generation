/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:23:01 GMT 2024
 */

package org.apache.hc.core5.reactor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.hc.core5.concurrent.FutureCallback;
import org.apache.hc.core5.function.Callback;
import org.apache.hc.core5.function.Decorator;
import org.apache.hc.core5.http.nio.command.ShutdownCommand;
import org.apache.hc.core5.io.CloseMode;
import org.apache.hc.core5.net.URIAuthority;
import org.apache.hc.core5.reactor.ChannelEntry;
import org.apache.hc.core5.reactor.IOEventHandlerFactory;
import org.apache.hc.core5.reactor.IOReactorConfig;
import org.apache.hc.core5.reactor.IOReactorStatus;
import org.apache.hc.core5.reactor.IOSession;
import org.apache.hc.core5.reactor.IOSessionListener;
import org.apache.hc.core5.reactor.ListenerEndpoint;
import org.apache.hc.core5.reactor.SingleCoreIOReactor;
import org.apache.hc.core5.reactor.SingleCoreListeningIOReactor;
import org.apache.hc.core5.reactor.SocksProxyProtocolHandlerFactory;
import org.apache.hc.core5.util.TimeValue;
import org.apache.hc.core5.util.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSingleCoreIOReactor_ESTest extends AbstractSingleCoreIOReactor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeValue timeValue0 = TimeValue.ofMinutes(0L);
      Timeout timeout0 = Timeout.ofDays(0L);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1928);
      IOReactorConfig iOReactorConfig0 = new IOReactorConfig(timeValue0, 1928, timeout0, false, timeValue0, false, false, 1928, 5453, 204, (-392), mockInetSocketAddress0, (String) null, (String) null);
      Callback<ChannelEntry> callback0 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor((Callback<Exception>) null, iOReactorConfig0, callback0);
      MockException mockException0 = new MockException("y,4 [[ltq$F");
      singleCoreListeningIOReactor0.logException(mockException0);
      assertEquals(IOReactorStatus.INACTIVE, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
          TimeValue timeValue0 = TimeValue.ofNanoseconds(1402L);
          Timeout timeout0 = timeValue0.toTimeout();
          String string0 = "";
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1);
          mockInetSocketAddress0.getHostName();
          IOReactorConfig iOReactorConfig0 = new IOReactorConfig(timeValue0, 1, timeout0, false, timeValue0, false, true, 1, 1, 1, 1, mockInetSocketAddress0, "", "");
          Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
          SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
          FutureCallback<ListenerEndpoint> futureCallback0 = (FutureCallback<ListenerEndpoint>) mock(FutureCallback.class, new ViolatedAssumptionAnswer());
          singleCoreListeningIOReactor0.listen((SocketAddress) mockInetSocketAddress0, futureCallback0);
          singleCoreListeningIOReactor0.close();
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          iOReactorConfig0.toString();
          singleCoreListeningIOReactor0.awaitShutdown(timeout0);
          singleCoreListeningIOReactor0.initiateShutdown();
          Callback<Exception> callback2 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
          IOEventHandlerFactory iOEventHandlerFactory0 = mock(IOEventHandlerFactory.class, new ViolatedAssumptionAnswer());
          SocksProxyProtocolHandlerFactory socksProxyProtocolHandlerFactory0 = new SocksProxyProtocolHandlerFactory(mockInetSocketAddress0, "127.0.0.1", "", iOEventHandlerFactory0);
          IOReactorConfig iOReactorConfig1 = new IOReactorConfig(timeValue0, 0, timeout0, false, timeout0, true, true, 2088, (-3957), 1349, 2088, mockInetSocketAddress0, " [status=", "127.0.0.1");
          Decorator<IOSession> decorator0 = (Decorator<IOSession>) mock(Decorator.class, new ViolatedAssumptionAnswer());
          IOSessionListener iOSessionListener0 = mock(IOSessionListener.class, new ViolatedAssumptionAnswer());
          Callback<IOSession> callback3 = ShutdownCommand.GRACEFUL_IMMEDIATE_CALLBACK;
          SingleCoreIOReactor singleCoreIOReactor0 = new SingleCoreIOReactor(callback2, socksProxyProtocolHandlerFactory0, iOReactorConfig1, decorator0, iOSessionListener0, callback3);
          URIAuthority uRIAuthority0 = null;
          try {
            uRIAuthority0 = new URIAuthority(" [status=", "$v&Eay", (-3957));
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Port number(Use -1 to specify the scheme default port): -3957 is out of range [-1, 65535]
             //
             verifyException("org.apache.hc.core5.util.Args", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      singleCoreListeningIOReactor0.doTerminate();
      singleCoreListeningIOReactor0.close();
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
      
      singleCoreListeningIOReactor0.resume();
      CloseMode closeMode0 = CloseMode.GRACEFUL;
      singleCoreListeningIOReactor0.close(closeMode0);
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, (IOReactorConfig) null, callback1);
      CloseMode closeMode0 = CloseMode.IMMEDIATE;
      singleCoreListeningIOReactor0.close(closeMode0);
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
      
      singleCoreListeningIOReactor0.doExecute();
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, (Callback<ChannelEntry>) null);
      IOReactorConfig.Builder iOReactorConfig_Builder0 = IOReactorConfig.custom();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 0);
      FutureCallback<ListenerEndpoint> futureCallback0 = (FutureCallback<ListenerEndpoint>) mock(FutureCallback.class, new ViolatedAssumptionAnswer());
      singleCoreListeningIOReactor0.listen((SocketAddress) mockInetSocketAddress0, (Object) iOReactorConfig_Builder0, futureCallback0);
      singleCoreListeningIOReactor0.toString();
      Set<ListenerEndpoint> set0 = singleCoreListeningIOReactor0.getEndpoints();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
          Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
          SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, (IOReactorConfig) null, callback1);
          singleCoreListeningIOReactor0.doExecute();
          singleCoreListeningIOReactor0.doTerminate();
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2605);
          Object object0 = new Object();
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          FutureCallback<ListenerEndpoint> futureCallback0 = (FutureCallback<ListenerEndpoint>) mock(FutureCallback.class, new ViolatedAssumptionAnswer());
          singleCoreListeningIOReactor0.getEndpoints();
          singleCoreListeningIOReactor0.listen((SocketAddress) mockInetSocketAddress0, object0, futureCallback0);
          singleCoreListeningIOReactor0.execute();
          singleCoreListeningIOReactor0.getEndpoints();
          singleCoreListeningIOReactor0.getStatus();
          singleCoreListeningIOReactor0.toString();
          singleCoreListeningIOReactor0.doTerminate();
          Set<ListenerEndpoint> set0 = new TreeSet<ListenerEndpoint>();
          singleCoreListeningIOReactor0.doExecute();
          Callback<Exception> callback2 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
          IOEventHandlerFactory iOEventHandlerFactory0 = mock(IOEventHandlerFactory.class, new ViolatedAssumptionAnswer());
          SocksProxyProtocolHandlerFactory socksProxyProtocolHandlerFactory0 = new SocksProxyProtocolHandlerFactory(mockInetSocketAddress0, "]", "", iOEventHandlerFactory0);
          Decorator<IOSession> decorator0 = (Decorator<IOSession>) mock(Decorator.class, new ViolatedAssumptionAnswer());
          IOSessionListener iOSessionListener0 = mock(IOSessionListener.class, new ViolatedAssumptionAnswer());
          Callback<IOSession> callback3 = ShutdownCommand.GRACEFUL_IMMEDIATE_CALLBACK;
          SingleCoreIOReactor singleCoreIOReactor0 = null;
          try {
            singleCoreIOReactor0 = new SingleCoreIOReactor(callback2, socksProxyProtocolHandlerFactory0, (IOReactorConfig) null, decorator0, iOSessionListener0, callback3);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // I/O reactor config
             //
             verifyException("java.util.Objects", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
          Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
          SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, (IOReactorConfig) null, callback1);
          singleCoreListeningIOReactor0.doExecute();
          singleCoreListeningIOReactor0.doTerminate();
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2605);
          Object object0 = new Object();
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          FutureCallback<ListenerEndpoint> futureCallback0 = (FutureCallback<ListenerEndpoint>) mock(FutureCallback.class, new ViolatedAssumptionAnswer());
          singleCoreListeningIOReactor0.getEndpoints();
          singleCoreListeningIOReactor0.listen((SocketAddress) mockInetSocketAddress0, object0, futureCallback0);
          singleCoreListeningIOReactor0.execute();
          singleCoreListeningIOReactor0.getEndpoints();
          TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
          TimeValue timeValue0 = TimeValue.of(2605, timeUnit0);
          timeValue0.convert(timeUnit0);
          timeValue0.toHours();
          timeValue0.toMilliseconds();
          singleCoreListeningIOReactor0.awaitShutdown(timeValue0);
          singleCoreListeningIOReactor0.getStatus();
          singleCoreListeningIOReactor0.toString();
          singleCoreListeningIOReactor0.doTerminate();
          singleCoreListeningIOReactor0.getEndpoints();
          singleCoreListeningIOReactor0.doExecute();
          Callback<Exception> callback2 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
          IOEventHandlerFactory iOEventHandlerFactory0 = mock(IOEventHandlerFactory.class, new ViolatedAssumptionAnswer());
          SocksProxyProtocolHandlerFactory socksProxyProtocolHandlerFactory0 = new SocksProxyProtocolHandlerFactory(mockInetSocketAddress0, "]", "", iOEventHandlerFactory0);
          Decorator<IOSession> decorator0 = (Decorator<IOSession>) mock(Decorator.class, new ViolatedAssumptionAnswer());
          IOSessionListener iOSessionListener0 = mock(IOSessionListener.class, new ViolatedAssumptionAnswer());
          Callback<IOSession> callback3 = ShutdownCommand.GRACEFUL_IMMEDIATE_CALLBACK;
          SingleCoreIOReactor singleCoreIOReactor0 = null;
          try {
            singleCoreIOReactor0 = new SingleCoreIOReactor(callback2, socksProxyProtocolHandlerFactory0, (IOReactorConfig) null, decorator0, iOSessionListener0, callback3);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // I/O reactor config
             //
             verifyException("java.util.Objects", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback0 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor((Callback<Exception>) null, iOReactorConfig0, callback0);
      assertEquals(IOReactorStatus.INACTIVE, singleCoreListeningIOReactor0.getStatus());
      
      singleCoreListeningIOReactor0.initiateShutdown();
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((InetAddress) null, 2885);
      FutureCallback<ListenerEndpoint> futureCallback0 = (FutureCallback<ListenerEndpoint>) mock(FutureCallback.class, new ViolatedAssumptionAnswer());
      Future<ListenerEndpoint> future0 = singleCoreListeningIOReactor0.listen((SocketAddress) mockInetSocketAddress0, (Object) iOReactorConfig0, futureCallback0);
      assertNotNull(future0);
  }
}
