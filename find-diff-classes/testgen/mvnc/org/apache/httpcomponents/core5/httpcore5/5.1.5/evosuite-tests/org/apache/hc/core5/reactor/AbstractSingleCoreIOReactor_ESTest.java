/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:25:29 GMT 2024
 */

package org.apache.hc.core5.reactor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.hc.core5.function.Callback;
import org.apache.hc.core5.function.Decorator;
import org.apache.hc.core5.http.nio.command.ShutdownCommand;
import org.apache.hc.core5.io.CloseMode;
import org.apache.hc.core5.reactor.ChannelEntry;
import org.apache.hc.core5.reactor.IOEventHandlerFactory;
import org.apache.hc.core5.reactor.IOReactorConfig;
import org.apache.hc.core5.reactor.IOReactorStatus;
import org.apache.hc.core5.reactor.IOSession;
import org.apache.hc.core5.reactor.IOSessionListener;
import org.apache.hc.core5.reactor.ListenerEndpoint;
import org.apache.hc.core5.reactor.SingleCoreIOReactor;
import org.apache.hc.core5.reactor.SingleCoreListeningIOReactor;
import org.apache.hc.core5.util.TimeValue;
import org.apache.hc.core5.util.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSingleCoreIOReactor_ESTest extends AbstractSingleCoreIOReactor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      singleCoreListeningIOReactor0.pause();
      singleCoreListeningIOReactor0.resume();
      singleCoreListeningIOReactor0.pause();
      singleCoreListeningIOReactor0.doTerminate();
      CloseMode closeMode0 = CloseMode.IMMEDIATE;
      singleCoreListeningIOReactor0.close(closeMode0);
      singleCoreListeningIOReactor0.execute();
      iOReactorConfig0.toString();
      singleCoreListeningIOReactor0.doExecute();
      singleCoreListeningIOReactor0.doExecute();
      singleCoreListeningIOReactor0.close();
      singleCoreListeningIOReactor0.initiateShutdown();
      singleCoreListeningIOReactor0.getEndpoints();
      singleCoreListeningIOReactor0.resume();
      Callback<Exception> callback2 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      Decorator<IOSession> decorator0 = (Decorator<IOSession>) mock(Decorator.class, new ViolatedAssumptionAnswer());
      IOSessionListener iOSessionListener0 = mock(IOSessionListener.class, new ViolatedAssumptionAnswer());
      Callback<IOSession> callback3 = ShutdownCommand.GRACEFUL_IMMEDIATE_CALLBACK;
      SingleCoreIOReactor singleCoreIOReactor0 = null;
      try {
        singleCoreIOReactor0 = new SingleCoreIOReactor(callback2, (IOEventHandlerFactory) null, iOReactorConfig0, decorator0, iOSessionListener0, callback3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Event handler factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      singleCoreListeningIOReactor0.pause();
      singleCoreListeningIOReactor0.resume();
      singleCoreListeningIOReactor0.pause();
      CloseMode closeMode0 = CloseMode.GRACEFUL;
      singleCoreListeningIOReactor0.doTerminate();
      singleCoreListeningIOReactor0.close(closeMode0);
      singleCoreListeningIOReactor0.execute();
      iOReactorConfig0.toString();
      singleCoreListeningIOReactor0.doExecute();
      singleCoreListeningIOReactor0.doExecute();
      singleCoreListeningIOReactor0.close();
      singleCoreListeningIOReactor0.initiateShutdown();
      Set<ListenerEndpoint> set0 = singleCoreListeningIOReactor0.getEndpoints();
      assertEquals(0, set0.size());
      
      singleCoreListeningIOReactor0.doTerminate();
      // Undeclared exception!
      try { 
        singleCoreListeningIOReactor0.awaitShutdown((TimeValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Wait time
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, (Callback<ChannelEntry>) null);
      MockException mockException0 = new MockException("]");
      singleCoreListeningIOReactor0.logException(mockException0);
      CloseMode closeMode0 = CloseMode.GRACEFUL;
      singleCoreListeningIOReactor0.close(closeMode0);
      IOReactorConfig.custom();
      singleCoreListeningIOReactor0.resume();
      singleCoreListeningIOReactor0.close();
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      IOReactorConfig.custom();
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig.copy(iOReactorConfig0);
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      singleCoreListeningIOReactor0.resume();
      singleCoreListeningIOReactor0.initiateShutdown();
      singleCoreListeningIOReactor0.resume();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Timeout timeout0 = Timeout.of(1414L, timeUnit0);
      timeout0.toDays();
      Timeout.ofHours(1414L);
      singleCoreListeningIOReactor0.awaitShutdown(timeout0);
      singleCoreListeningIOReactor0.toString();
      singleCoreListeningIOReactor0.awaitShutdown(timeout0);
      String string0 = "]dA3 1&%X";
      SocketChannel socketChannel0 = SocketChannel.open();
      Selector selector0 = Selector.open();
      int int0 = 2275;
      // Undeclared exception!
      try { 
        socketChannel0.register(selector0, 2275);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.spi.AbstractSelectableChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig.custom();
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      singleCoreListeningIOReactor0.close();
      singleCoreListeningIOReactor0.toString();
      singleCoreListeningIOReactor0.getStatus();
      singleCoreListeningIOReactor0.pause();
      Callback<Exception> callback2 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SocketChannel socketChannel0 = SocketChannel.open();
      Selector selector0 = Selector.open();
      int int0 = (-3803);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        socketChannel0.register(selector0, (-3803), object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.spi.AbstractSelectableChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, (Callback<ChannelEntry>) null);
      MockException mockException0 = new MockException("]");
      singleCoreListeningIOReactor0.logException(mockException0);
      singleCoreListeningIOReactor0.resume();
      singleCoreListeningIOReactor0.close();
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      IOReactorConfig.copy(iOReactorConfig0);
      singleCoreListeningIOReactor0.resume();
      singleCoreListeningIOReactor0.close();
      singleCoreListeningIOReactor0.toString();
      TimeValue.ofNanoseconds((-3160L));
      // Undeclared exception!
      try { 
        Timeout.parse(" [status=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected format for <Long><SPACE><java.util.concurrent.TimeUnit>:  [status=
         //
         verifyException("org.apache.hc.core5.util.TimeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, (Callback<ChannelEntry>) null);
      String string0 = singleCoreListeningIOReactor0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      singleCoreListeningIOReactor0.close();
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Callback<ChannelEntry> callback1 = (Callback<ChannelEntry>) mock(Callback.class, new ViolatedAssumptionAnswer());
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor(callback0, iOReactorConfig0, callback1);
      CloseMode closeMode0 = CloseMode.GRACEFUL;
      singleCoreListeningIOReactor0.close(closeMode0);
      assertEquals(IOReactorStatus.SHUT_DOWN, singleCoreListeningIOReactor0.getStatus());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Callback<Exception> callback0 = (Callback<Exception>) mock(Callback.class, new ViolatedAssumptionAnswer());
      IOEventHandlerFactory iOEventHandlerFactory0 = null;
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      Decorator<IOSession> decorator0 = (Decorator<IOSession>) mock(Decorator.class, new ViolatedAssumptionAnswer());
      IOReactorConfig.custom();
      IOReactorConfig.custom();
      IOSessionListener iOSessionListener0 = mock(IOSessionListener.class, new ViolatedAssumptionAnswer());
      Callback<IOSession> callback1 = ShutdownCommand.GRACEFUL_IMMEDIATE_CALLBACK;
      SingleCoreIOReactor singleCoreIOReactor0 = null;
      try {
        singleCoreIOReactor0 = new SingleCoreIOReactor(callback0, (IOEventHandlerFactory) null, iOReactorConfig0, decorator0, iOSessionListener0, callback1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Event handler factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOReactorConfig iOReactorConfig0 = IOReactorConfig.DEFAULT;
      SingleCoreListeningIOReactor singleCoreListeningIOReactor0 = new SingleCoreListeningIOReactor((Callback<Exception>) null, iOReactorConfig0, (Callback<ChannelEntry>) null);
      singleCoreListeningIOReactor0.doExecute();
      singleCoreListeningIOReactor0.doExecute();
      singleCoreListeningIOReactor0.pause();
      assertEquals(IOReactorStatus.INACTIVE, singleCoreListeningIOReactor0.getStatus());
  }
}
