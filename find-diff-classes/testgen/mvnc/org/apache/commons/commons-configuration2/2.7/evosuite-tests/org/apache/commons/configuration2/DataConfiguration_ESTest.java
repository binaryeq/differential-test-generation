/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:00:50 GMT 2024
 */

package org.apache.commons.configuration2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import javax.naming.Context;
import org.apache.commons.configuration2.AbstractYAMLBasedConfiguration;
import org.apache.commons.configuration2.BaseConfiguration;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.CompositeConfiguration;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.DataConfiguration;
import org.apache.commons.configuration2.DatabaseConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.EnvironmentConfiguration;
import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.apache.commons.configuration2.INIConfiguration;
import org.apache.commons.configuration2.JNDIConfiguration;
import org.apache.commons.configuration2.JSONConfiguration;
import org.apache.commons.configuration2.MapConfiguration;
import org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.SubsetConfiguration;
import org.apache.commons.configuration2.SystemConfiguration;
import org.apache.commons.configuration2.XMLConfiguration;
import org.apache.commons.configuration2.YAMLConfiguration;
import org.apache.commons.configuration2.convert.ConversionHandler;
import org.apache.commons.configuration2.interpol.ConstantLookup;
import org.apache.commons.configuration2.io.VFSFileSystem;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.InMemoryNodeModel;
import org.apache.commons.configuration2.tree.MergeCombiner;
import org.apache.commons.configuration2.tree.NodeCombiner;
import org.apache.commons.configuration2.tree.NodeModel;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.OverrideCombiner;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.apache.commons.configuration2.tree.UnionCombiner;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.provider.DefaultURLStreamHandler;
import org.apache.commons.vfs2.provider.VfsComponentContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.hsqldb.types.NumberType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataConfiguration_ESTest extends DataConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseConfiguration0);
      dataConfiguration0.clearPropertyDirect("");
      assertFalse(dataConfiguration0.isThrowExceptionOnMissing());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(abstractYAMLBasedConfiguration0);
      List<Byte> list0 = dataConfiguration0.getByteList("END");
      dataConfiguration0.addPropertyInternal("ClientInfo property not supported.", list0);
      assertFalse(dataConfiguration0.isThrowExceptionOnMissing());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean boolean0 = dataConfiguration0.isEmptyInternal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(abstractYAMLBasedConfiguration0);
      List<URL> list0 = dataConfiguration0.getURLList("th-TH", (List<URL>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<URL> arrayList0 = new ArrayList<URL>();
      URL uRL0 = MockURL.getFileExample();
      arrayList0.add(uRL0);
      List<URL> list0 = dataConfiguration0.getURLList("a[K*", (List<URL>) arrayList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(jSONConfiguration0);
      URL[] uRLArray0 = dataConfiguration0.getURLArray("", (URL[]) null);
      assertNull(uRLArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URL[] uRLArray0 = new URL[1];
      URL[] uRLArray1 = dataConfiguration0.getURLArray("yyyy-MM-dd HH:mm:ss", uRLArray0);
      assertSame(uRLArray0, uRLArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("yyyy-MM-dd HH:mm:ss", "", 1, "ISO-8859-1", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = dataConfiguration0.getURL("ISO-8859-1", uRL0);
      assertEquals("ISO-8859-1", uRL1.getFile());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("HYbJ~BoU", "Mf90]XY~");
      URL uRL1 = dataConfiguration0.getURL("x", uRL0);
      assertNull(uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("org.apache.commons.configuration.format.date", "<~,<e[hSd~E<n$Dp", 0, "org.apache.commons.configuration.format.date", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = dataConfiguration0.getURL((String) null, uRL0);
      assertNull(uRL1.getQuery());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URL uRL0 = dataConfiguration0.getURL("ISO-8859-1");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      List<URI> list0 = dataConfiguration0.getURIList("N[:&x!@<]f_]eqq>", (List<URI>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<URI> arrayList0 = new ArrayList<URI>();
      List<URI> list0 = dataConfiguration0.getURIList("ISO-8859-1", (List<URI>) arrayList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<URI> list0 = dataConfiguration0.getURIList("ISO-8859-1");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(systemConfiguration0);
      URI[] uRIArray0 = dataConfiguration0.getURIArray(dataConfiguration0.DEFAULT_DATE_FORMAT, (URI[]) null);
      assertNull(uRIArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI[] uRIArray0 = new URI[2];
      URI[] uRIArray1 = dataConfiguration0.getURIArray("ISO-8859-1", uRIArray0);
      assertSame(uRIArray1, uRIArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI[] uRIArray0 = new URI[0];
      URI[] uRIArray1 = dataConfiguration0.getURIArray("", uRIArray0);
      assertSame(uRIArray1, uRIArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI[] uRIArray0 = dataConfiguration0.getURIArray("ISO-8859-1");
      assertEquals(1, uRIArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI[] uRIArray0 = dataConfiguration0.getURIArray("ISO-8859-1");
      assertEquals(0, uRIArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(jSONConfiguration0);
      URI uRI0 = dataConfiguration0.getURI("(hR`i~bEh@05", (URI) null);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI uRI0 = MockURI.URI("");
      URI uRI1 = dataConfiguration0.getURI("org.apache.commons.configuration2.DataConfiguration$1", uRI0);
      assertNull(uRI1.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI uRI0 = dataConfiguration0.getURI("ISO-8859-1");
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setPropertyInternal("(?n6_", "(?n6_");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI uRI0 = dataConfiguration0.getURI("(?n6_");
      assertEquals("(", uRI0.getRawPath());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "");
      DataConfiguration dataConfiguration0 = new DataConfiguration(patternSubtreeConfigurationWrapper0);
      List<Short> list0 = dataConfiguration0.getShortList("Cannot load class ");
      List<Short> list1 = dataConfiguration0.getShortList("", list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short0 = new Short((short) (-1413));
      arrayList0.add(short0);
      List<Short> list0 = dataConfiguration0.getShortList("ISO-8859-1", (List<Short>) arrayList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(combinedConfiguration0);
      short[] shortArray0 = dataConfiguration0.getShortArray("", (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(xMLConfiguration0);
      short[] shortArray0 = new short[6];
      short[] shortArray1 = dataConfiguration0.getShortArray("~[C\"I", shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      short[] shortArray0 = dataConfiguration0.getShortArray("ISO-8859-1");
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(iNIConfiguration0);
      Object object0 = dataConfiguration0.getPropertyInternal("G2Ssq}:k'3K");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Object object0 = dataConfiguration0.getPropertyInternal("ISO-8859-1");
      assertEquals("ISO-8859-1", object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(combinedConfiguration0);
      List<Long> list0 = dataConfiguration0.getLongList("' doesn't map to an existing object", (List<Long>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(xMLConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("");
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      Vector<Long> vector0 = new Vector<Long>();
      List<Long> list0 = dataConfiguration0.getLongList("J}`S", (List<Long>) vector0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      arrayList0.add((Long) null);
      List<Long> list0 = dataConfiguration0.getLongList("ISO-8859-1", (List<Long>) arrayList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(yAMLConfiguration0);
      long[] longArray0 = dataConfiguration0.getLongArray("com.fasterxml.jackson.databind.ser.std.BooleanSerializer", (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(combinedConfiguration0);
      long[] longArray0 = new long[2];
      long[] longArray1 = dataConfiguration0.getLongArray((String) null, longArray0);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      long[] longArray0 = dataConfiguration0.getLongArray("ISO-8859-1");
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Locale> list0 = dataConfiguration0.getLocaleList("ISO-8859-1", (List<Locale>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Vector<Locale> vector0 = new Vector<Locale>();
      Locale locale0 = Locale.KOREAN;
      vector0.add(locale0);
      List<Locale> list0 = dataConfiguration0.getLocaleList("ISO-8859-1", (List<Locale>) vector0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Locale> list0 = dataConfiguration0.getLocaleList("ISO-8859-1");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(systemConfiguration0);
      Locale[] localeArray0 = dataConfiguration0.getLocaleArray("bQ| =t1lB", (Locale[]) null);
      assertNull(localeArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      Locale[] localeArray0 = new Locale[0];
      Locale[] localeArray1 = dataConfiguration0.getLocaleArray("\u4E2D\u6587", localeArray0);
      assertSame(localeArray0, localeArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Locale[] localeArray0 = dataConfiguration0.getLocaleArray("ISO-8859-1");
      assertEquals(0, localeArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(abstractYAMLBasedConfiguration0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = dataConfiguration0.getLocale("org.apache.commons.configuration.format.date", locale0);
      assertEquals("zh", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Iterator<String> iterator0 = dataConfiguration0.getKeysInternal();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(baseHierarchicalConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(yAMLConfiguration0, "-D]q=p4a");
      DataConfiguration dataConfiguration0 = new DataConfiguration(patternSubtreeConfigurationWrapper0);
      List<Integer> list0 = dataConfiguration0.getIntegerList("or-IN", (List<Integer>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(dynamicCombinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(xMLConfiguration0);
      List<Integer> list0 = dataConfiguration0.getIntegerList("0.caHj");
      List<Integer> list1 = dataConfiguration0.getIntegerList("0.caHj", list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(907);
      linkedList0.add(integer0);
      List<Integer> list0 = dataConfiguration0.getIntegerList("tYDuqvd", (List<Integer>) linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      int[] intArray0 = new int[5];
      int[] intArray1 = dataConfiguration0.getIntArray((String) null, intArray0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(combinedConfiguration0);
      int[] intArray0 = new int[0];
      int[] intArray1 = dataConfiguration0.getIntArray("", intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Float> list0 = dataConfiguration0.getFloatList("ISO-8859-1", (List<Float>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(environmentConfiguration0);
      Vector<Float> vector0 = new Vector<Float>(2474);
      vector0.add((Float) null);
      List<Float> list0 = dataConfiguration0.getFloatList("", (List<Float>) vector0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      float[] floatArray0 = dataConfiguration0.getFloatArray("yyyy-MM-dd HH:mm:ss", (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = dataConfiguration0.getFloatArray("", floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(environmentConfiguration0);
      List<Double> list0 = dataConfiguration0.getDoubleList("", (List<Double>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Stack<Double> stack0 = new Stack<Double>();
      List<Double> list0 = dataConfiguration0.getDoubleList("Mz[{Byo8YJK&*1E#M", (List<Double>) stack0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(jSONConfiguration0);
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      Double double0 = new Double(0.0);
      arrayList0.add(double0);
      List<Double> list0 = dataConfiguration0.getDoubleList((String) null, (List<Double>) arrayList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Double> list0 = dataConfiguration0.getDoubleList("ISO-8859-1");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = dataConfiguration0.getDoubleArray("", doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = dataConfiguration0.getDoubleArray((String) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(xMLConfiguration0);
      List<Date> list0 = dataConfiguration0.getDateList("(bYauz4_$R 2(sw9", (List<Date>) null, " X?Bd=e)6E%4GKG^");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      Vector<Date> vector0 = new Vector<Date>();
      List<Date> list0 = dataConfiguration0.getDateList("~M|guk#8Ay47+", (List<Date>) vector0, "x85fq0r(N/NTGZ:Km");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<Date> arrayList0 = new ArrayList<Date>();
      arrayList0.add((Date) null);
      List<Date> list0 = dataConfiguration0.getDateList("ISO-8859-1", (List<Date>) arrayList0, "ISO-8859-1");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Date> list0 = dataConfiguration0.getDateList("", (List<Date>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Vector<Date> vector0 = new Vector<Date>();
      List<Date> list0 = dataConfiguration0.getDateList("mB9XvSzUy&hGto", (List<Date>) vector0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      MockDate mockDate0 = new MockDate(0, 1, 0, 1, 57);
      dataConfiguration0.addPropertyDirect("DXOQ([jw$xY)+=$E/|E", mockDate0);
      List<Date> list0 = dataConfiguration0.getDateList("DXOQ([jw$xY)+=$E/|E", (List<Date>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date[] dateArray0 = new Date[1];
      Date[] dateArray1 = dataConfiguration0.getDateArray((String) null, dateArray0, "2'SQl");
      assertSame(dateArray0, dateArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date[] dateArray0 = dataConfiguration0.getDateArray("", "yyyy-MM-dd HH:mm:ss");
      Date[] dateArray1 = dataConfiguration0.getDateArray("org.apache.commons.configuration.format.date", dateArray0, "");
      assertSame(dateArray1, dateArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date[] dateArray0 = new Date[1];
      Date[] dateArray1 = dataConfiguration0.getDateArray("", dateArray0);
      assertEquals(1, dateArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date[] dateArray0 = dataConfiguration0.getDateArray(" ~|7y^PK[QJ@%");
      Date[] dateArray1 = dataConfiguration0.getDateArray(";lZ{jQ*Rpt2k(HF", dateArray0);
      assertSame(dateArray0, dateArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(iNIConfiguration0);
      Date date0 = dataConfiguration0.getDate("dknoporkN1", (Date) null, "E+");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(xMLConfiguration0);
      Date date0 = dataConfiguration0.getDate("", (Date) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Configuration configuration0 = dataConfiguration0.getConfiguration();
      assertSame(configuration0, propertiesConfiguration0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Color> list0 = dataConfiguration0.getColorList("data file cannot be enlarged - disk space: ", (List<Color>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      Vector<Color> vector0 = new Vector<Color>();
      List<Color> list0 = dataConfiguration0.getColorList("N[:&x!@<]f_]eqq>", (List<Color>) vector0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Properties properties0 = new Properties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(mapConfiguration0);
      Color[] colorArray0 = dataConfiguration0.getColorArray("", (Color[]) null);
      assertNull(colorArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(dynamicCombinedConfiguration0);
      Color[] colorArray0 = new Color[3];
      Color[] colorArray1 = dataConfiguration0.getColorArray((String) null, colorArray0);
      assertSame(colorArray1, colorArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Color[] colorArray0 = new Color[0];
      Color[] colorArray1 = dataConfiguration0.getColorArray("ISO-8859-1", colorArray0);
      assertSame(colorArray0, colorArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Color[] colorArray0 = dataConfiguration0.getColorArray("org.apache.commons.configuration.format.date");
      assertEquals(0, colorArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Color color0 = dataConfiguration0.getColor("ISO-8859-1", (Color) null);
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseConfiguration0);
      Color color0 = Color.blue;
      Color color1 = dataConfiguration0.getColor("IE~4dgj[k", color0);
      assertSame(color0, color1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(dynamicCombinedConfiguration0);
      Color color0 = Color.GREEN;
      Color color1 = dataConfiguration0.getColor("o''EsGR79~H=&o9G", color0);
      assertEquals(255, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      Color color0 = Color.white;
      Color color1 = dataConfiguration0.getColor("N[:&x!@<]f_]eqq>", color0);
      assertSame(color0, color1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Calendar> list0 = dataConfiguration0.getCalendarList("6k;|xaD>mlevGB8u", (List<Calendar>) null, "");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Calendar> list0 = dataConfiguration0.getCalendarList("");
      List<Calendar> list1 = dataConfiguration0.getCalendarList(":7)safUh", list0, "f?&Y#6");
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(xMLConfiguration0);
      Vector<Calendar> vector0 = new Vector<Calendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-507), (-507), (-507), (-1691), (-1691), (-1691));
      vector0.add((Calendar) mockGregorianCalendar0);
      List<Calendar> list0 = dataConfiguration0.getCalendarList((String) null, (List<Calendar>) vector0, "org.apache.commons.configuration2.DataConfiguration$DataConversionHandler");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Calendar> list0 = dataConfiguration0.getCalendarList((String) null, (List<Calendar>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hashtable<String, Date> hashtable0 = new Hashtable<String, Date>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(mapConfiguration0);
      Stack<Calendar> stack0 = new Stack<Calendar>();
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      stack0.add(0, calendar0);
      List<Calendar> list0 = dataConfiguration0.getCalendarList("", (List<Calendar>) stack0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      MockDate mockDate0 = new MockDate(258L);
      propertiesConfiguration0.setProperty("n'43{x", mockDate0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Calendar> list0 = dataConfiguration0.getCalendarList("n'43{x");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar[] calendarArray0 = dataConfiguration0.getCalendarArray("", (Calendar[]) null, "$u~Bn@]fOT%");
      assertNull(calendarArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(dynamicCombinedConfiguration0);
      Calendar[] calendarArray0 = new Calendar[0];
      Calendar[] calendarArray1 = dataConfiguration0.getCalendarArray("user.home", calendarArray0, "user.home");
      assertEquals(0, calendarArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(combinedConfiguration0);
      Calendar[] calendarArray0 = dataConfiguration0.getCalendarArray((String) null, (Calendar[]) null);
      assertNull(calendarArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar[] calendarArray0 = new Calendar[4];
      Calendar[] calendarArray1 = dataConfiguration0.getCalendarArray("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler", calendarArray0);
      assertSame(calendarArray0, calendarArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(baseHierarchicalConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(yAMLConfiguration0, "or-IN");
      DataConfiguration dataConfiguration0 = new DataConfiguration(patternSubtreeConfigurationWrapper0);
      Calendar calendar0 = dataConfiguration0.getCalendar("or-IN", (Calendar) null, "An error occured on closing the statement");
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar calendar0 = dataConfiguration0.getCalendar("ISO-8859-1", (Calendar) null);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      MockDate mockDate0 = new MockDate((-3648), (-3648), (-3648), (-3648), (-3648));
      propertiesConfiguration0.setProperty("vKco!`L%s^z.M,d", mockDate0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar calendar0 = dataConfiguration0.getCalendar("vKco!`L%s^z.M,d");
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(abstractYAMLBasedConfiguration0);
      List<Byte> list0 = dataConfiguration0.getByteList("END");
      List<Byte> list1 = dataConfiguration0.getByteList("", list0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(combinedConfiguration0);
      Vector<Byte> vector0 = new Vector<Byte>();
      Byte byte0 = new Byte((byte) (-39));
      vector0.add(byte0);
      List<Byte> list0 = dataConfiguration0.getByteList((String) null, (List<Byte>) vector0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(mapConfiguration0);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = dataConfiguration0.getByteArray("$% ;{&w", byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      byte[] byteArray0 = dataConfiguration0.getByteArray("Can''t use query methods that take a query string on a PreparedStatement.");
      byte[] byteArray1 = dataConfiguration0.getByteArray("t'!bt@^V", byteArray0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Boolean> list0 = dataConfiguration0.getBooleanList("", (List<Boolean>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(dynamicCombinedConfiguration0);
      Vector<Boolean> vector0 = new Vector<Boolean>();
      List<Boolean> list0 = dataConfiguration0.getBooleanList("ISO-8859-1", (List<Boolean>) vector0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(dynamicCombinedConfiguration0);
      Stack<Boolean> stack0 = new Stack<Boolean>();
      Boolean boolean0 = Boolean.valueOf("");
      stack0.add(boolean0);
      List<Boolean> list0 = dataConfiguration0.getBooleanList("org.hsqldb.lib.OrderedIntKeyHashMap$Values", (List<Boolean>) stack0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean[] booleanArray0 = dataConfiguration0.getBooleanArray("}D#eX", (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = dataConfiguration0.getBooleanArray("sql.longvar_is_lob", booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean[] booleanArray0 = dataConfiguration0.getBooleanArray("ISO-8859-1");
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(dynamicCombinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      List<BigInteger> list0 = dataConfiguration0.getBigIntegerList((String) null, (List<BigInteger>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      List<BigInteger> list0 = dataConfiguration0.getBigIntegerList("])-@@}");
      List<BigInteger> list1 = dataConfiguration0.getBigIntegerList("", list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(xMLConfiguration0, (String) null, "");
      DataConfiguration dataConfiguration0 = new DataConfiguration(subsetConfiguration0);
      Stack<BigInteger> stack0 = new Stack<BigInteger>();
      BigInteger bigInteger0 = NumberType.MIN_LONG_BI;
      stack0.add(bigInteger0);
      List<BigInteger> list0 = dataConfiguration0.getBigIntegerList("#1_rs)", (List<BigInteger>) stack0);
      assertTrue(list0.contains(bigInteger0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(abstractYAMLBasedConfiguration0);
      BigInteger[] bigIntegerArray0 = new BigInteger[1];
      BigInteger[] bigIntegerArray1 = dataConfiguration0.getBigIntegerArray("org.apache.commons.configuration2.DataConfiguration$1", bigIntegerArray0);
      assertSame(bigIntegerArray0, bigIntegerArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      BigInteger[] bigIntegerArray0 = new BigInteger[0];
      BigInteger[] bigIntegerArray1 = dataConfiguration0.getBigIntegerArray("t'!bt@^V", bigIntegerArray0);
      assertSame(bigIntegerArray0, bigIntegerArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      BigInteger[] bigIntegerArray0 = dataConfiguration0.getBigIntegerArray("ISO-8859-1");
      assertEquals(0, bigIntegerArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(baseHierarchicalConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(yAMLConfiguration0, "or-IN");
      DataConfiguration dataConfiguration0 = new DataConfiguration(patternSubtreeConfigurationWrapper0);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      List<BigDecimal> list0 = dataConfiguration0.getBigDecimalList("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler", (List<BigDecimal>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      Stack<BigDecimal> stack0 = new Stack<BigDecimal>();
      stack0.add((BigDecimal) null);
      List<BigDecimal> list0 = dataConfiguration0.getBigDecimalList("org.apache.commons.configuration2.DataConfiguration$1", (List<BigDecimal>) stack0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigDecimal[] bigDecimalArray1 = dataConfiguration0.getBigDecimalArray("N[:&x!@<]f_]eqq>", bigDecimalArray0);
      assertEquals(6, bigDecimalArray1.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigDecimal[] bigDecimalArray1 = dataConfiguration0.getBigDecimalArray("1zP!P< xT) P", bigDecimalArray0);
      assertSame(bigDecimalArray1, bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean boolean0 = dataConfiguration0.containsKeyInternal("ISO-8859-1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean boolean0 = dataConfiguration0.containsKeyInternal("ISO-8859-1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(yAMLConfiguration0, ";Ps/1&%+v?<2SKT,1bV");
      DataConfiguration dataConfiguration0 = new DataConfiguration(patternSubtreeConfigurationWrapper0);
      // Undeclared exception!
      try { 
        dataConfiguration0.isEmptyInternal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): ;Ps/1&%+v?<2SKT,1bV
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.isEmptyInternal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LinkedList<URL> linkedList0 = new LinkedList<URL>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLList("ISO-8859-1", (List<URL>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Vector<URL> vector0 = new Vector<URL>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLList("ISO-8859-1", (List<URL>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLList("org.apache.commons.configuration2.DataConfiguration$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.AbstractHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      URI uRI0 = MockURI.URI("");
      propertiesConfiguration0.setProperty("", uRI0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URL[] uRLArray0 = new URL[1];
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLArray("", uRLArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      URL[] uRLArray0 = new URL[4];
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLArray("ZLtC", uRLArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector("");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@25[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("Cp949", propertiesConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLArray("Cp949");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value org.apache.commons.configuration2.PropertiesConfiguration@2 can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURLArray("1Qu?405P|,n+r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector("");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURL("", (URL) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@26[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      dataConfiguration0.addPropertyDirect("Xy+&(u-BCa~V3,p", "Xy+&(u-BCa~V3,p");
      // Undeclared exception!
      try { 
        dataConfiguration0.getURL("Xy+&(u-BCa~V3,p", (URL) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'Xy+&(u-BCa~V3,p' cannot be converted to class java.net.URL. Value is: 'Xy+&(u-BCa~V3,p'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURL((String) null, (URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(yAMLConfiguration0, trackedNodeModel0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURL("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@12[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURL("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.net.URL. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("w-e4BQm^{8J", "w-e4BQm^{8J");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<URI> arrayList0 = new ArrayList<URI>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getURIList("w-e4BQm^{8J", (List<URI>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value w-e4BQm^{8J can't be converted to an URI
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURIList(")>FFvkEsXbn|p39", (List<URI>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURIList("91z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      BigInteger bigInteger0 = NumberType.MAX_LONG_BI;
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(propertiesConfiguration0, "", "");
      DataConfiguration dataConfiguration0 = new DataConfiguration(subsetConfiguration0);
      dataConfiguration0.addPropertyDirect("TOS", bigInteger0);
      URI uRI0 = MockURI.URI("ISO-8859-1");
      // Undeclared exception!
      try { 
        dataConfiguration0.getURI("TOS", uRI0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'TOS' cannot be converted to class java.net.URI. Value is: '9223372036854775807'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURI(")?3;WyN{jc$T]8|{#ik");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortList("ISO-8859-1", (List<Short>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Short
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Hashtable<String, Date> hashtable0 = new Hashtable<String, Date>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(mapConfiguration0);
      Stack<Short> stack0 = new Stack<Short>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortList((String) null, (List<Short>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector("");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortList("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@26[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Short
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortArray("ISO-8859-1", shortArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Short
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      short[] shortArray0 = new short[8];
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortArray("org.apache.commons.configuration.format.date", shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Short
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      NodeSelector nodeSelector0 = new NodeSelector("updateBlob(String,Blob)");
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(subnodeConfiguration0, "updateBlob(String,Blob)");
      DataConfiguration dataConfiguration0 = new DataConfiguration(patternSubtreeConfigurationWrapper0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getPropertyInternal("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[updateBlob(String,Blob)]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getPropertyInternal("entry");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Vector<Long> vector0 = new Vector<Long>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongList("ISO-8859-1", (List<Long>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongList("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongArray("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler", longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      LinkedList<SubnodeConfiguration> linkedList0 = new LinkedList<SubnodeConfiguration>();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(dynamicCombinedConfiguration0);
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector("Y7%W|vzq*!ni c](()2");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, dynamicCombinedConfiguration0);
      linkedList0.add(subnodeConfiguration0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, linkedList0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongArray("Y7%W|vzq*!ni c](()2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@40[keys=[Y7%W|vzq*!ni c](()2]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, xMLConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleList("|U@Dq:[Ys`/.", (List<Locale>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[org.apache.commons.configuration2.DataConfiguration$DataConversionHandler]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleList("ISO-8859-1", (List<Locale>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Vector<Locale> vector0 = new Vector<Locale>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleList("org.apache.commons.configuration.format.date", (List<Locale>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Locale[] localeArray0 = new Locale[5];
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleArray("ISO-8859-1", localeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocale("ISO-8859-1", (Locale) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.util.Locale. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocale("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.util.Locale. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration((Context) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(jNDIConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getKeysInternal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getIntegerList("ISO-8859-1", (List<Integer>) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getIntegerList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        dataConfiguration0.getIntArray("ISO-8859-1", intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getIntArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getIntArray("e-C_BC6m`_V$y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Stack<Float> stack0 = new Stack<Float>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatList("ISO-8859-1", (List<Float>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Vector<Float> vector0 = new Vector<Float>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatList("pWqb'jroy", (List<Float>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("ISO-8859-1");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, xMLConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@46[keys=[org.apache.commons.configuration2.DataConfiguration$DataConversionHandler]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatList("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatArray("ISO-8859-1", floatArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatArray("COMBINED_INVALIDATE", floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("org.apache.commons.configuration2.DataConfiguration$1");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, xMLConfiguration0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatArray("org.apache.commons.configuration2.DataConfiguration$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[org.apache.commons.configuration2.DataConfiguration$1]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getFloatArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleList("ISO-8859-1", (List<Double>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(xMLConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("org.apache.commons.configuration2.DataConfiguration");
      NodeSelector nodeSelector0 = new NodeSelector("org.apache.commons.configuration2.DataConfiguration");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleList("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@44[keys=[org.apache.commons.configuration2.DataConfiguration]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(jSONConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("og.apache.commons.onfiguration2.DataConfiguration$1");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector((String) null);
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, jSONConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@6a[keys=[null]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration((Context) null, "");
      DataConfiguration dataConfiguration0 = new DataConfiguration(jNDIConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleArray("_5K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("k{/^F>],", "k{/^F>],");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("k{/^F>],", (List<Date>) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value k{/^F>], can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Vector<Date> vector0 = new Vector<Date>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("ISO-8859-1", (List<Date>) vector0, "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration((Context) null, "@D$sv>gTTv0eXm*tI)");
      DataConfiguration dataConfiguration0 = new DataConfiguration(jNDIConfiguration0);
      ArrayList<Date> arrayList0 = new ArrayList<Date>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("org.apache.commons.configuration2.DataConfiguration", (List<Date>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      dataConfiguration0.addPropertyDirect("org.apache.commons.configuration.format.date", "TOS");
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("org.apache.commons.configuration.format.date", (List<Date>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'T'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("l,w1;ggVHTC");
      InMemoryNodeModel inMemoryNodeModel0 = new InMemoryNodeModel();
      NodeSelector nodeSelector0 = inMemoryNodeModel0.trackChildNodeWithCreation("", "HE)T", iNIConfiguration0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@4a[keys=[HE)T(0)]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList((String) null, "wPZaO[Li0 {GQ.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateArray("ISO-8859-1", (Date[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateArray("4vnV.IXW(ozZcZ7(", "SRq1E_<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateArray("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateArray("org.apache.commons.configuration.format.date");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Time time0 = new Time(459L);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("ISO-8859-1", (Date) time0, "d'r{D2xW\"o';>cVB5i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector("org.apache.commons.configuration.format.date");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@26[keys=[org.apache.commons.configuration.format.date]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("ISO-8859-1", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.util.Date. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      dataConfiguration0.addPropertyDirect("org.apache.commons.configuration.format.date", "org.apache.commons.configuration.format.date");
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("org.apache.commons.configuration.format.date", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration((NodeCombiner) null);
      NodeSelector nodeSelector0 = new NodeSelector("iV(=");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("iV(=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@11[keys=[iV(=]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.util.Date. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(databaseConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("Mwd|N>?*tk5tKY8", "Mwd|N>?*tk5tKY8");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Color> list0 = dataConfiguration0.getColorList("ISO-8859-1");
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorList("Mwd|N>?*tk5tKY8", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value Mwd|N>?*tk5tKY8 can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(iNIConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector(")0");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorList(".m[(4jrsD&r!?RT(`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@21[keys=[)0]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Color color0 = Color.pink;
      // Undeclared exception!
      try { 
        dataConfiguration0.getColor("Ntwl+zF9,!", color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("fx_cX|Lu8/hXU-}");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColor("fx_cX|Lu8/hXU-}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[fx_cX|Lu8/hXU-}]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColor("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.awt.Color. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColor("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(xMLConfiguration0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration(jSONConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("org.apache.commons.configuration.format.date");
      NodeSelector nodeSelector0 = new NodeSelector("org.apache.commons.configuration.format.date");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(subnodeConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration1 = new SubnodeConfiguration(subnodeConfiguration0, trackedNodeModel0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      Vector<Calendar> vector0 = new Vector<Calendar>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("", (List<Calendar>) vector0, ")68wK(y-E2v}|Nw5u`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@6a[keys=[org.apache.commons.configuration.format.date]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("ISO-8859-1", (List<Calendar>) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LinkedList<Calendar> linkedList0 = new LinkedList<Calendar>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("ISO-8859-1", (List<Calendar>) linkedList0, "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("ISO-8859-1");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      DataConfiguration dataConfiguration1 = new DataConfiguration(subnodeConfiguration0);
      List<Calendar> list0 = dataConfiguration0.getCalendarList("yyyy-MM-dd HH:mm:ss", "<null>");
      // Undeclared exception!
      try { 
        dataConfiguration1.getCalendarList("", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@26[keys=[ISO-8859-1]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LinkedList<Calendar> linkedList0 = new LinkedList<Calendar>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("ISO-8859-1", (List<Calendar>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Stack<Calendar> stack0 = new Stack<Calendar>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("r~h[3uSlY~Al", (List<Calendar>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("ISO-8859-1", "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("H=Z8sxkb9f<EF!N", "H=Z8sxkb9f<EF!N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("ISO-8859-1");
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("|NI}{o>VLXiS:+@)ps{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[ISO-8859-1]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(databaseConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("`:OGJBxIWV:cjP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("<M?P");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(iNIConfiguration0);
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector("<M?P");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarArray("/}CHT7(oF^oSG+kPp", "r_Z!Qz=myF;fv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@44[keys=[<M?P]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      Object object0 = new Object();
      propertiesConfiguration0.setProperty("|5=", object0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarArray("|5=", "ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value java.lang.Object@d78db20 can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarArray("QrB(8qz:@", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarArray("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("");
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, yAMLConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarArray("ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1", calendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.util.Calendar. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 422, 422, 422, (-1018));
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("!vhi&", (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("ISO-8859-1");
      NodeSelector nodeSelector0 = new NodeSelector("ISO-8859-1");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@34[keys=[ISO-8859-1]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1", "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.util.Calendar. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("ISO-8859-1");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[ISO-8859-1]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Key 'ISO-8859-1' cannot be converted to class java.util.Calendar. Value is: 'ISO-8859-1'.
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("org.apache.commons.configuration.format.date", "org.apache.commons.configuration.format.date");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar("org.apache.commons.configuration.format.date");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getByteList("ISO-8859-1", (List<Byte>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Byte
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Vector<Byte> vector0 = new Vector<Byte>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getByteList("WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED", (List<Byte>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getByteList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.lang.Byte
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getByteList("~ft|E<ZQI:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getByteArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000031 to java.lang.Byte
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanList("ISO-8859-1", (List<Boolean>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      InMemoryNodeModel inMemoryNodeModel0 = new InMemoryNodeModel();
      NodeSelector nodeSelector0 = inMemoryNodeModel0.trackChildNodeWithCreation("", "", xMLConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, xMLConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanList("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@29[keys=[(0)]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(databaseConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanList("$%q5PO+Q ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanArray("ISO-8859-1", booleanArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanArray("dzjoa+Tou", booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(baseHierarchicalConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector("org.apache.commons.configuration2.DataConfiguration");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(baseHierarchicalConfiguration0, trackedNodeModel0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanArray("org.apache.commons.configuration2.DataConfiguration");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@20[keys=[org.apache.commons.configuration2.DataConfiguration]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector("");
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      Stack<BigInteger> stack0 = new Stack<BigInteger>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerList("8m!", (List<BigInteger>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ArrayList<BigInteger> arrayList0 = new ArrayList<BigInteger>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerList("ISO-8859-1", (List<BigInteger>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerList("gDVpvQZ4K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration(xMLConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(abstractYAMLBasedConfiguration0);
      dataConfiguration0.addPropertyDirect("org.apache.commons.configuration2.DataConfiguration$1", xMLConfiguration0);
      BigInteger[] bigIntegerArray0 = new BigInteger[0];
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerArray("org.apache.commons.configuration2.DataConfiguration$1", bigIntegerArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.apache.commons.configuration2.XMLConfiguration@0000000009 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration("+{uF6wrk.X1i8'|K8S");
      DataConfiguration dataConfiguration0 = new DataConfiguration(jNDIConfiguration0);
      BigInteger[] bigIntegerArray0 = new BigInteger[0];
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerArray((String) null, bigIntegerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("O(e", propertiesConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerArray("O(e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.apache.commons.configuration2.PropertiesConfiguration@0000000002 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("I6");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = xMLConfiguration0.getSubConfigurationNodeSelector("I6");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration1);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalList("No encoding has been set on this connection", (List<BigDecimal>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@46[keys=[I6]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<BigDecimal> list0 = dataConfiguration0.getBigDecimalList("org.apache.commons.configuration.format.date");
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalList("ISO-8859-1", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.math.BigDecimal
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Stack<BigDecimal> stack0 = new Stack<BigDecimal>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalList("_jA_28nsgXvog+ZZKJs", (List<BigDecimal>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalList("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.math.BigDecimal
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalList("ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("");
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalArray("ISO-8859-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.String@0000000032 to java.math.BigDecimal
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(databaseConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigDecimalArray("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.containsKeyInternal("ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.clearPropertyDirect(":hz,~O2^Z'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.addPropertyInternal(",hw,@3=^'tI\"", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(environmentConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.addPropertyDirect("org.apache.commons.configuration.format.date", environmentConfiguration0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException("org.apache.commons.configuration2.EnvironmentConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(databaseConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.addPropertyDirect((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(jSONConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.addPropertyDirect((String) null, jSONConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key for add operation must be defined!
         //
         verifyException("org.apache.commons.configuration2.tree.DefaultExpressionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      LinkedList<Date> linkedList0 = new LinkedList<Date>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("", (List<Date>) linkedList0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler");
      DataConfiguration dataConfiguration0 = new DataConfiguration(jNDIConfiguration0);
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Calendar calendar0 = dataConfiguration0.getCalendar("D)f~ILL]FS6tl_VI#M", (Calendar) mockGregorianCalendar0, (String) null);
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Stack<BigInteger> stack0 = new Stack<BigInteger>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerList("org.hsqldb.persist.RowStoreAVLDisk", (List<BigInteger>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      int[] intArray0 = dataConfiguration0.getIntArray("ISO-8859-1", (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseHierarchicalConfiguration0);
      Calendar[] calendarArray0 = dataConfiguration0.getCalendarArray("dataFileCache file closed");
      Calendar[] calendarArray1 = dataConfiguration0.getCalendarArray("dataFileCache file closed", calendarArray0);
      assertSame(calendarArray0, calendarArray1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Vector<Boolean> vector0 = new Vector<Boolean>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanList("=", (List<Boolean>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date[] dateArray0 = dataConfiguration0.getDateArray("/S'PX1M|", (Date[]) null, "ISO-8859-1");
      assertNull(dateArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      byte[] byteArray0 = dataConfiguration0.getByteArray("ISO-8859-1", (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Locale[] localeArray0 = new Locale[5];
      Locale[] localeArray1 = dataConfiguration0.getLocaleArray("ISO-8859-1", localeArray0);
      assertEquals(5, localeArray1.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URL[] uRLArray0 = new URL[0];
      URL[] uRLArray1 = dataConfiguration0.getURLArray("u>PL", uRLArray0);
      assertEquals(0, uRLArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Byte> list0 = dataConfiguration0.getByteList("ISO-8859-1", (List<Byte>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      ArrayList<Color> arrayList0 = new ArrayList<Color>(0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorList("M-CsM5~0#qUP]HP{", (List<Color>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      long[] longArray0 = new long[0];
      long[] longArray1 = dataConfiguration0.getLongArray("org.apache.commons.configuration2.DataConfiguration$1", longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration(xMLConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(abstractYAMLBasedConfiguration0);
      Timestamp timestamp0 = new Timestamp(0L);
      Date date0 = dataConfiguration0.getDate("Input end (%d) may not be before start (%d)", (Date) timestamp0, " /J9kbrRX,MQe_|T2n");
      assertSame(timestamp0, date0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Short> list0 = dataConfiguration0.getShortList("ISO-8859-1", (List<Short>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Stack<Long> stack0 = new Stack<Long>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongList("", (List<Long>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Vector<Double> vector0 = new Vector<Double>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleList("ISO-8859-1", (List<Double>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar[] calendarArray0 = new Calendar[2];
      Calendar[] calendarArray1 = dataConfiguration0.getCalendarArray((String) null, calendarArray0, "ISO-8859-1");
      assertSame(calendarArray1, calendarArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(jNDIConfiguration0);
      URI[] uRIArray0 = new URI[0];
      // Undeclared exception!
      try { 
        dataConfiguration0.getURIArray((String) null, uRIArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LinkedList<URL> linkedList0 = new LinkedList<URL>();
      List<URL> list0 = dataConfiguration0.getURLList("ISO-8859-1", (List<URL>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorArray((String) null, (Color[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      double[] doubleArray0 = dataConfiguration0.getDoubleArray("ISO-8859-1", (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        dataConfiguration0.getIntegerList("org.apache.commons.configuration2.DataConfiguration$1", (List<Integer>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(xMLConfiguration0);
      ConversionHandler conversionHandler0 = dataConfiguration0.getConversionHandler();
      dataConfiguration0.setPropertyInternal("5,SWDEp$ss", conversionHandler0);
      assertFalse(dataConfiguration0.isThrowExceptionOnMissing());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date[] dateArray0 = dataConfiguration0.getDateArray("ISO-8859-1", (Date[]) null);
      assertNull(dateArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LinkedList<Calendar> linkedList0 = new LinkedList<Calendar>();
      List<Calendar> list0 = dataConfiguration0.getCalendarList("ISO-8859-1", (List<Calendar>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      BigDecimal[] bigDecimalArray0 = dataConfiguration0.getBigDecimalArray("ISO-8859-1", (BigDecimal[]) null);
      assertNull(bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseConfiguration0);
      BigInteger[] bigIntegerArray0 = dataConfiguration0.getBigIntegerArray("", (BigInteger[]) null);
      assertNull(bigIntegerArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("ka-GE", (List<Calendar>) null, "`OI{\"4>WL^)0^c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      float[] floatArray0 = new float[2];
      float[] floatArray1 = dataConfiguration0.getFloatArray("ISO-8859-1", floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      dataConfiguration0.setThrowExceptionOnMissing(true);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendar(":,VWhm}+4=n?bcXd", "-z#M2ZPKc^KDg");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // ':,VWhm}+4=n?bcXd' doesn't map to an existing object
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      MockDate mockDate0 = new MockDate((-3648), (-3648), (-3648), (-3648), (-3648));
      propertiesConfiguration0.setProperty("vKco!`L%s^z.M,d", mockDate0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar calendar0 = dataConfiguration0.getCalendar("vKco!`L%s^z.M,d", "ISO-8859-1");
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      dataConfiguration0.setThrowExceptionOnMissing(true);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDate("('3+_", "ISO-8859-1");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // '('3+_' doesn't map to an existing object
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      LocalTime localTime0 = MockLocalTime.of(0, (int) (byte)50, (int) (byte)50, (int) (byte)50);
      Time time0 = Time.valueOf(localTime0);
      dataConfiguration0.addPropertyDirect((String) null, time0);
      Date date0 = dataConfiguration0.getDate((String) null, "t`Bs");
      assertSame(date0, time0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date date0 = dataConfiguration0.getDate("ISO-8859-1", "ISO-8859-1");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      ConstantLookup constantLookup0 = new ConstantLookup();
      dataConfiguration0.addPropertyDirect("HD4/{2-r/C ", constantLookup0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("HD4/{2-r/C ", "HD4/{2-r/C ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value org.apache.commons.configuration2.interpol.ConstantLookup@16 can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.addPropertyDirect("$*lx=)mNx;s wb,>=z", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Date date0 = dataConfiguration0.getDate("ISO-8859-1");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Date> list0 = dataConfiguration0.getDateList("ISO-8859-1");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortArray("<=:?1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Boolean> list0 = dataConfiguration0.getBooleanList("ISO-8859-1");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URL[] uRLArray0 = dataConfiguration0.getURLArray("");
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(dynamicCombinedConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector("");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, dynamicCombinedConfiguration0);
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(subnodeConfiguration0, "r");
      DataConfiguration dataConfiguration0 = new DataConfiguration(subsetConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURI("<O0  <<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@40[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar[] calendarArray0 = dataConfiguration0.getCalendarArray("ISO-8859-1", "ISO-8859-1");
      assertEquals(0, calendarArray0.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("org.apache.commons.configuration.format.date", "org.apache.commons.configuration.format.date");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getCalendarList("org.apache.commons.configuration.format.date");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURL("*u(pO@p6M:jHp-.M8-?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Color color0 = new Color(3008, true);
      Color color1 = dataConfiguration0.getColor((String) null, color0);
      assertEquals(0, color1.getAlpha());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("I6");
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      List<BigDecimal> list0 = dataConfiguration0.getBigDecimalList("I6", (List<BigDecimal>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar calendar0 = MockCalendar.getInstance();
      Calendar calendar1 = dataConfiguration0.getCalendar("ISO-8859-1", calendar0);
      assertTrue(calendar1.isLenient());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<URI> list0 = dataConfiguration0.getURIList("ISO-8859-1");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = dataConfiguration0.getBooleanArray("ISO-8859-1", booleanArray0);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBooleanArray("DUl ~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Stack<URI> stack0 = new Stack<URI>();
      List<URI> list0 = dataConfiguration0.getURIList("NLD|[8F>=G|`6-", (List<URI>) stack0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      BigDecimal[] bigDecimalArray0 = dataConfiguration0.getBigDecimalArray("ISO-8859-1");
      assertEquals(0, bigDecimalArray0.length);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Color color0 = dataConfiguration0.getColor("ISO-8859-1");
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Locale locale0 = dataConfiguration0.getLocale("ISO-8859-1", (Locale) null);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getURIArray("Yf:Hj*D: 3E#HSl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      int[] intArray0 = dataConfiguration0.getIntArray("ISO-8859-1");
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar calendar0 = dataConfiguration0.getCalendar("vKco!`L%s^z.M,d", "ISO-8859-1");
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URL uRL0 = dataConfiguration0.getURL("!R{XCV3,Yip:Hi1bb", (URL) null);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      List<Float> list0 = dataConfiguration0.getFloatList("ISO-8859-1");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      URI uRI0 = MockURI.URI("TOS", "org.apache.commons.configuration2.DataConfiguration$1", "org.apache.commons.configuration.format.date");
      URI uRI1 = dataConfiguration0.getURI("ISO-8859-1", uRI0);
      assertNull(uRI1.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Long> list0 = dataConfiguration0.getLongList("ISO-8859-1");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getIntegerList("org.apache.commons.configuration2.DataConfiguration$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(environmentConfiguration0);
      List<URL> list0 = dataConfiguration0.getURLList("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      LinkedList<SubnodeConfiguration> linkedList0 = new LinkedList<SubnodeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, linkedList0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLongArray("Y7%W|vzq*!ni c](()2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      float[] floatArray0 = dataConfiguration0.getFloatArray("ISO-8859-1");
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Stack<Float> stack0 = new Stack<Float>();
      List<Float> list0 = dataConfiguration0.getFloatList("ISO-8859-1", (List<Float>) stack0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorArray("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getColorList("org.apache.commons.configuration2.DataConfiguration$DataConversionHandler");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = dataConfiguration0.getShortArray("ISO-8859-1", shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(jSONConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("og.apache.commons.onfiguration2.DataConfiguration$1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(subnodeConfiguration0);
      double[] doubleArray0 = dataConfiguration0.getDoubleArray((String) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Locale locale0 = dataConfiguration0.getLocale("ISO-8859-1");
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      Configuration configuration0 = dataConfiguration0.getConfiguration();
      assertNull(configuration0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getDoubleList("Hi$'0:44");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleList("' doesn't map to an existing object");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getBigIntegerArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getByteArray("org.hsqldb.QuerySpecification");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getLocaleArray("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      boolean boolean0 = dataConfiguration0.isEmptyInternal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      DataConfiguration dataConfiguration0 = new DataConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        dataConfiguration0.getShortList("+|9tm*^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DataConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Time time0 = new Time(459L);
      Date date0 = dataConfiguration0.getDate("IDENTIFY_SYSTEM", (Date) time0);
      assertSame(date0, time0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      Calendar calendar0 = dataConfiguration0.getCalendar("vKco!`L%s^z.M,d");
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setProperty("ISO-8859-1", "ISO-8859-1");
      DataConfiguration dataConfiguration0 = new DataConfiguration(propertiesConfiguration0);
      List<Date> list0 = dataConfiguration0.getDateList("LobManager", "LobManager");
      // Undeclared exception!
      try { 
        dataConfiguration0.getDateList("ISO-8859-1", list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ISO-8859-1 can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      DataConfiguration dataConfiguration0 = new DataConfiguration(jSONConfiguration0);
      Vector<Locale> vector0 = new Vector<Locale>();
      List<Locale> list0 = dataConfiguration0.getLocaleList((String) null, (List<Locale>) vector0);
      assertTrue(list0.isEmpty());
  }
}
