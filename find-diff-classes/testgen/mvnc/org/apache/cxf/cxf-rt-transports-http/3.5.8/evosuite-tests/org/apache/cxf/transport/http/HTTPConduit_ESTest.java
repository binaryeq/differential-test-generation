/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:07:02 GMT 2024
 */

package org.apache.cxf.transport.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeEvent;
import java.io.IOException;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.SQLTimeoutException;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import org.apache.cxf.Bus;
import org.apache.cxf.bus.blueprint.BlueprintBus;
import org.apache.cxf.bus.spring.SpringBus;
import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.configuration.security.AuthorizationPolicy;
import org.apache.cxf.configuration.security.FiltersType;
import org.apache.cxf.configuration.security.ProxyAuthorizationPolicy;
import org.apache.cxf.message.Message;
import org.apache.cxf.message.MessageImpl;
import org.apache.cxf.service.model.EndpointInfo;
import org.apache.cxf.service.model.ServiceInfo;
import org.apache.cxf.transport.http.Address;
import org.apache.cxf.transport.http.Cookie;
import org.apache.cxf.transport.http.DestinationRegistryImpl;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transport.http.MessageTrustDecider;
import org.apache.cxf.transport.http.URLConnectionHTTPConduit;
import org.apache.cxf.transport.http.auth.HttpAuthSupplier;
import org.apache.cxf.transport.http.auth.SpnegoAuthSupplier;
import org.apache.cxf.transport.http.policy.impl.ClientPolicyCalculator;
import org.apache.cxf.transport.http.policy.impl.ServerPolicyCalculator;
import org.apache.cxf.transport.servlet.ServletDestination;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import org.apache.cxf.ws.addressing.EndpointReferenceType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HTTPConduit_ESTest extends HTTPConduit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      TLSClientParameters tLSClientParameters0 = new TLSClientParameters();
      uRLConnectionHTTPConduit0.setTlsClientParameters(tLSClientParameters0);
      TLSClientParameters tLSClientParameters1 = uRLConnectionHTTPConduit0.getTlsClientParameters();
      assertSame(tLSClientParameters1, tLSClientParameters0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.finalizeConfig();
      ProxyAuthorizationPolicy proxyAuthorizationPolicy0 = uRLConnectionHTTPConduit0.getProxyAuthorization();
      assertFalse(proxyAuthorizationPolicy0.isSetUserName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      ServiceInfo serviceInfo0 = new ServiceInfo();
      EndpointInfo endpointInfo0 = new EndpointInfo(serviceInfo0, "bus");
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0, endpointReferenceType0);
      HTTPClientPolicy hTTPClientPolicy0 = uRLConnectionHTTPConduit0.getClient();
      assertNull(hTTPClientPolicy0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.finalizeConfig();
      HTTPClientPolicy hTTPClientPolicy0 = uRLConnectionHTTPConduit0.getClient();
      assertNull(hTTPClientPolicy0.getHost());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.finalizeConfig();
      AuthorizationPolicy authorizationPolicy0 = uRLConnectionHTTPConduit0.getAuthorization();
      assertFalse(authorizationPolicy0.isSetUserName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, (EndpointInfo) null, endpointReferenceType0);
      ClientPolicyCalculator clientPolicyCalculator0 = new ClientPolicyCalculator();
      QName qName0 = clientPolicyCalculator0.getDataClassName();
      boolean boolean0 = uRLConnectionHTTPConduit0.canAssert(qName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, endpointInfo0, (EndpointReferenceType) null);
      QName qName0 = QName.valueOf("null.http-conduit");
      boolean boolean0 = uRLConnectionHTTPConduit0.canAssert(qName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.setClient((HTTPClientPolicy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.propertyChange((PropertyChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.isChunkingSupported((Message) null, "bus");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.message.MessageContentsList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, (EndpointInfo) null, endpointReferenceType0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.getURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.getEffectiveAuthPolicy((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      BlueprintBus blueprintBus0 = new BlueprintBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(blueprintBus0, (EndpointInfo) null, endpointReferenceType0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.getConduitName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, endpointInfo0);
      MessageImpl messageImpl0 = new MessageImpl();
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.getClient((Message) messageImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, (EndpointInfo) null, endpointReferenceType0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.getBeanName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.finalizeConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.extractLocation((Map<String, List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HTTPClientPolicy hTTPClientPolicy0 = new HTTPClientPolicy();
      // Undeclared exception!
      try { 
        HTTPConduit.determineReceiveTimeout((Message) null, hTTPClientPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HTTPClientPolicy hTTPClientPolicy0 = new HTTPClientPolicy();
      // Undeclared exception!
      try { 
        HTTPConduit.determineConnectionTimeout((Message) null, hTTPClientPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.close((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.assertMessage((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.ws.policy.PolicyDataEngineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.setTlsClientParameters((TLSClientParameters) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      AuthorizationPolicy authorizationPolicy0 = uRLConnectionHTTPConduit0.getEffectiveAuthPolicy(messageImpl0);
      uRLConnectionHTTPConduit0.authorizationPolicy = authorizationPolicy0;
      AuthorizationPolicy authorizationPolicy1 = uRLConnectionHTTPConduit0.getEffectiveAuthPolicy(messageImpl0);
      assertSame(authorizationPolicy1, authorizationPolicy0);
      assertNotNull(authorizationPolicy1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.getClient((Message) messageImpl0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.prepare(messageImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.URLConnectionHTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpringBus springBus0 = new SpringBus(true);
      ServiceInfo serviceInfo0 = new ServiceInfo();
      EndpointInfo endpointInfo0 = new EndpointInfo(serviceInfo0, "2wF/;e");
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0, endpointReferenceType0);
      uRLConnectionHTTPConduit0.setTrustDecider((MessageTrustDecider) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      ProxyAuthorizationPolicy proxyAuthorizationPolicy0 = uRLConnectionHTTPConduit0.getProxyAuthorization();
      assertNull(proxyAuthorizationPolicy0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      TLSClientParameters tLSClientParameters0 = uRLConnectionHTTPConduit0.getTlsClientParameters();
      assertNull(tLSClientParameters0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      MessageTrustDecider messageTrustDecider0 = uRLConnectionHTTPConduit0.getTrustDecider();
      assertNull(messageTrustDecider0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.getClient();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0, (EndpointReferenceType) null);
      HttpAuthSupplier httpAuthSupplier0 = uRLConnectionHTTPConduit0.getAuthSupplier();
      assertNull(httpAuthSupplier0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.setAuthSupplier((HttpAuthSupplier) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      AuthorizationPolicy authorizationPolicy0 = uRLConnectionHTTPConduit0.getAuthorization();
      assertNull(authorizationPolicy0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, endpointInfo0, endpointReferenceType0);
      uRLConnectionHTTPConduit0.setAuthorization((AuthorizationPolicy) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0, (EndpointReferenceType) null);
      uRLConnectionHTTPConduit0.setProxyAuthorization((ProxyAuthorizationPolicy) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(endpointInfo0, "org.apache.cxf.transport.no_io_exceptions", endpointInfo0, uRLConnectionHTTPConduit0);
      uRLConnectionHTTPConduit0.propertyChange(propertyChangeEvent0);
      assertEquals("org.apache.cxf.transport.no_io_exceptions", propertyChangeEvent0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      HTTPConduit.InterposedMessageObserver hTTPConduit_InterposedMessageObserver0 = uRLConnectionHTTPConduit0.new InterposedMessageObserver();
      // Undeclared exception!
      try { 
        hTTPConduit_InterposedMessageObserver0.onMessage(messageImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit$InterposedMessageObserver", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      FiltersType filtersType0 = new FiltersType();
      List<String> list0 = filtersType0.getInclude();
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      hashtable0.put("location", list0);
      String string0 = uRLConnectionHTTPConduit0.extractLocation(hashtable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      hashtable0.put("http.connection", list0);
      String string0 = uRLConnectionHTTPConduit0.extractLocation(hashtable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      hashtable0.put("location", list0);
      String string0 = uRLConnectionHTTPConduit0.extractLocation(hashtable0);
      assertNotNull(string0);
      assertEquals("java.class", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      HTTPClientPolicy hTTPClientPolicy0 = new HTTPClientPolicy();
      uRLConnectionHTTPConduit0.setClient(hTTPClientPolicy0);
      uRLConnectionHTTPConduit0.setClient(hTTPClientPolicy0);
      assertFalse(hTTPClientPolicy0.isAsyncExecuteTimeoutRejection());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.finalizeConfig();
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.setHeadersByAuthorizationPolicy(messageImpl0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      ServerPolicyCalculator serverPolicyCalculator0 = new ServerPolicyCalculator();
      QName qName0 = serverPolicyCalculator0.getDataClassName();
      endpointInfo0.setName(qName0);
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      String string0 = uRLConnectionHTTPConduit0.getBeanName();
      assertEquals("{http://cxf.apache.org/transports/http/configuration}server.http-conduit", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      String string0 = uRLConnectionHTTPConduit0.getBeanName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      DestinationRegistryImpl destinationRegistryImpl0 = new DestinationRegistryImpl();
      ServletDestination servletDestination0 = new ServletDestination(springBus0, destinationRegistryImpl0, endpointInfo0, ";c NNfUw", true);
      URI uRI0 = uRLConnectionHTTPConduit0.getURI();
      assertEquals("http", uRI0.getScheme());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit((Bus) null, (EndpointInfo) null, endpointReferenceType0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.prepare(messageImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SpringBus springBus0 = new SpringBus(false);
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, (EndpointInfo) null, endpointReferenceType0);
      String string0 = uRLConnectionHTTPConduit0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      Address address0 = new Address("org.apache.cxf.transport.http.set.response.message", (URI) null);
      uRLConnectionHTTPConduit0.defaultAddress = address0;
      String string0 = uRLConnectionHTTPConduit0.getAddress();
      assertEquals("org.apache.cxf.transport.http.set.response.message", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      String string0 = uRLConnectionHTTPConduit0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.close();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      BlueprintBus blueprintBus0 = new BlueprintBus();
      DestinationRegistryImpl destinationRegistryImpl0 = new DestinationRegistryImpl();
      ServletDestination servletDestination0 = new ServletDestination(blueprintBus0, destinationRegistryImpl0, endpointInfo0, "bus", true);
      EndpointReferenceType endpointReferenceType0 = servletDestination0.getAddress();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(blueprintBus0, endpointInfo0, endpointReferenceType0);
      try { 
        uRLConnectionHTTPConduit0.prepare(messageImpl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.close((Message) messageImpl0);
      assertNull(messageImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HTTPClientPolicy hTTPClientPolicy0 = new HTTPClientPolicy();
      MessageImpl messageImpl0 = new MessageImpl();
      int int0 = HTTPConduit.determineConnectionTimeout(messageImpl0, hTTPClientPolicy0);
      assertEquals(30000, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MessageImpl messageImpl0 = new MessageImpl();
      HTTPClientPolicy hTTPClientPolicy0 = new HTTPClientPolicy();
      int int0 = HTTPConduit.determineReceiveTimeout(messageImpl0, hTTPClientPolicy0);
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      MessageImpl messageImpl0 = new MessageImpl();
      boolean boolean0 = uRLConnectionHTTPConduit0.isChunkingSupported(messageImpl0, "GET");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      boolean boolean0 = uRLConnectionHTTPConduit0.isChunkingSupported((Message) null, "POST");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      boolean boolean0 = uRLConnectionHTTPConduit0.isChunkingSupported(messageImpl0, ":gKC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      TLSClientParameters tLSClientParameters0 = new TLSClientParameters();
      uRLConnectionHTTPConduit0.setTlsClientParameters(tLSClientParameters0);
      uRLConnectionHTTPConduit0.finalizeConfig();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      HTTPClientPolicy hTTPClientPolicy0 = new HTTPClientPolicy();
      uRLConnectionHTTPConduit0.setClient(hTTPClientPolicy0);
      uRLConnectionHTTPConduit0.finalizeConfig();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      ServiceInfo serviceInfo0 = new ServiceInfo();
      EndpointInfo endpointInfo0 = new EndpointInfo(serviceInfo0, "bus");
      EndpointReferenceType endpointReferenceType0 = new EndpointReferenceType();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0, endpointReferenceType0);
      uRLConnectionHTTPConduit0.finalizeConfig();
      uRLConnectionHTTPConduit0.close();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.finalizeConfig();
      HTTPClientPolicy hTTPClientPolicy0 = uRLConnectionHTTPConduit0.getClient((Message) messageImpl0);
      assertFalse(hTTPClientPolicy0.isSetAccept());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      SpnegoAuthSupplier spnegoAuthSupplier0 = new SpnegoAuthSupplier();
      uRLConnectionHTTPConduit0.setProxyAuthSupplier(spnegoAuthSupplier0);
      assertFalse(spnegoAuthSupplier0.isUseCanonicalHostname());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      String string0 = uRLConnectionHTTPConduit0.getConduitName();
      assertEquals("null.http-conduit", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.canAssert((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      Map<String, Cookie> map0 = uRLConnectionHTTPConduit0.getCookies();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      MessageImpl messageImpl0 = new MessageImpl();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.assertMessage(messageImpl0);
      assertTrue(messageImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.cxf.transport.no_io_exceptions", (String) null, 746);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "^#}WsFQ_Ub*9u^+6WE_", (int[]) null, sQLTimeoutException0);
      uRLConnectionHTTPConduit0.logStackTrace(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SpringBus springBus0 = new SpringBus();
      EndpointInfo endpointInfo0 = new EndpointInfo();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      HttpAuthSupplier httpAuthSupplier0 = uRLConnectionHTTPConduit0.getProxyAuthSupplier();
      assertNull(httpAuthSupplier0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      Logger logger0 = uRLConnectionHTTPConduit0.getLogger();
      assertEquals("org.apache.cxf.transport.http.HTTPConduit", logger0.getName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      uRLConnectionHTTPConduit0.finalizeConfig();
      uRLConnectionHTTPConduit0.finalizeConfig();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EndpointInfo endpointInfo0 = new EndpointInfo();
      SpringBus springBus0 = new SpringBus();
      URLConnectionHTTPConduit uRLConnectionHTTPConduit0 = new URLConnectionHTTPConduit(springBus0, endpointInfo0);
      // Undeclared exception!
      try { 
        uRLConnectionHTTPConduit0.getURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.cxf.transport.http.HTTPConduit", e);
      }
  }
}
