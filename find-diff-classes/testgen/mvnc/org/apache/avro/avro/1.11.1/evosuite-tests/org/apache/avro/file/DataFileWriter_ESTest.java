/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:57:04 GMT 2024
 */

package org.apache.avro.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.apache.avro.Protocol;
import org.apache.avro.Schema;
import org.apache.avro.data.Json;
import org.apache.avro.file.CodecFactory;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.DataFileStream;
import org.apache.avro.file.DataFileWriter;
import org.apache.avro.file.SeekableByteArrayInput;
import org.apache.avro.file.SeekableFileInput;
import org.apache.avro.file.SeekableInput;
import org.apache.avro.file.SyncableFileOutputStream;
import org.apache.avro.file.XZCodec;
import org.apache.avro.file.ZstandardCodec;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.reflect.ReflectData;
import org.apache.avro.reflect.ReflectDatumWriter;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.specific.SpecificDatumWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataFileWriter_ESTest extends DataFileWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("No argument left as delegating for Creator %s: exactly one required", false);
      byte[] byteArray0 = new byte[17];
      try { 
        dataFileWriter0.create(schema0, (OutputStream) syncableFileOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // sync must be exactly 16 bytes
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>((DatumWriter<Object>) null);
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.setSyncInterval((byte)32);
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      dataFileWriter1.flush();
      assertEquals(45L, mockFile0.length());
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      dataFileWriter0.create(schema0, (File) mockFile0);
      long long0 = dataFileWriter0.sync();
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
      assertEquals(45L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>((DatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
      
      dataFileWriter0.setFlushOnEveryBlock(false);
      dataFileWriter0.setMeta("sync must be exactly 16 bytes", byteArray0);
      assertFalse(dataFileWriter0.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.setMeta("org.apache.avro.file.DataFileWriter$BufferedFileOutputStream$PositionFilter", "org.apache.avro.file.DataFileWriter$BufferedFileOutputStream$PositionFilter");
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(class0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
      
      dataFileWriter0.setFlushOnEveryBlock(false);
      dataFileWriter0.setMeta("%qO4NY+UIg)n:iQ", ": ");
      assertFalse(dataFileWriter0.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>((DatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
      
      ZstandardCodec.Option zstandardCodec_Option0 = new ZstandardCodec.Option((-1007), false, false);
      dataFileWriter0.setFlushOnEveryBlock(false);
      dataFileWriter0.setCodec(zstandardCodec_Option0);
      assertFalse(dataFileWriter0.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = DataFileWriter.isReservedMeta("avro.%qO4NY+UIg)n:iQ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
      
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      dataFileWriter0.setFlushOnEveryBlock(false);
      dataFileWriter0.create(schema0, (File) mockFile0);
      assertFalse(dataFileWriter0.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(class0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        dataFileWriter0.setMeta((String) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setMeta("L8Mg", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setMeta("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ", 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set reserved meta key: avro.Non-generic Collection class %s did not resolve to something with element type %s but %s 
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setMeta((String) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      dataFileWriter0.create(schema0, (File) mockFile0);
      XZCodec.Option xZCodec_Option0 = new XZCodec.Option((-2471));
      // Undeclared exception!
      try { 
        dataFileWriter0.setCodec(xZCodec_Option0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // already open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setCodec((CodecFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataFileWriter.isReservedMeta((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      mockFile0.setReadOnly();
      dataFileWriter0.append("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      try { 
        dataFileWriter1.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      dataFileWriter0.create(schema0, (File) mockFile0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (OutputStream) byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // already open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("No argument left as delegating for Creator %s: exactly one required", true);
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (OutputStream) syncableFileOutputStream0, (byte[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not the Json schema: \"string\"
         //
         verifyException("org.apache.avro.data.Json$ObjectWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      // Undeclared exception!
      try { 
        dataFileWriter0.create((Schema) null, (OutputStream) byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        dataFileWriter1.create(schema0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // already open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("n#D?*7).");
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (OutputStream) syncableFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not the Json schema: [\"string\"]
         //
         verifyException("org.apache.avro.data.Json$ObjectWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      Schema schema0 = Schema.createMap((Schema) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.Schema$MapSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      byte[] byteArray0 = new byte[3];
      ByteArrayBuilder byteArrayBuilder0 = ByteArrayBuilder.fromInitial(byteArray0, (-3035));
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Schema> vector0 = new Vector<Schema>();
      Schema schema0 = Schema.createUnion((List<Schema>) vector0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SpecificData specificData0 = new SpecificData(classLoader0);
      GenericDatumWriter<Object> genericDatumWriter0 = new GenericDatumWriter<Object>(schema0, specificData0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(genericDatumWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        dataFileWriter0.create(schema0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      MockFile mockFile0 = new MockFile("not a valid representation, problem: (%s) %s");
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not the Json schema: [\"string\"]
         //
         verifyException("org.apache.avro.data.Json$ObjectWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      MockFile mockFile0 = new MockFile("'2WnDAkOwqDFpf", "'2WnDAkOwqDFpf");
      // Undeclared exception!
      try { 
        dataFileWriter0.create((Schema) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      try { 
        dataFileWriter0.create(schema0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("");
      try { 
        dataFileWriter0.create(schema0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("String to read from cannot be null");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        dataFileWriter1.appendTo((SeekableInput) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // already open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<Schema> vector0 = new Vector<Schema>();
      Schema schema0 = Schema.createUnion((List<Schema>) vector0);
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("No argument left as delegating for Creator %s: exactly one required");
      byte[] byteArray0 = new byte[9];
      SeekableByteArrayInput seekableByteArrayInput0 = new SeekableByteArrayInput(byteArray0);
      DataFileReader.SeekableInputStream dataFileReader_SeekableInputStream0 = new DataFileReader.SeekableInputStream(seekableByteArrayInput0);
      try { 
        dataFileWriter0.appendTo((SeekableInput) dataFileReader_SeekableInputStream0, (OutputStream) syncableFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not an Avro data file.
         //
         verifyException("org.apache.avro.file.DataFileStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9", "fG9");
      dataFileWriter0.create(schema0, (File) mockFile0);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter1 = new DataFileWriter<Object>(json_ObjectWriter0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("nC\r[NxI2!r", true);
      // Undeclared exception!
      try { 
        dataFileWriter1.appendTo((SeekableInput) seekableFileInput0, (OutputStream) syncableFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not the Json schema: [\"string\"]
         //
         verifyException("org.apache.avro.data.Json$ObjectWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      dataFileWriter0.create(schema0, (File) mockFile0);
      DataFileWriter<SyncableFileOutputStream> dataFileWriter1 = new DataFileWriter<SyncableFileOutputStream>((DatumWriter<SyncableFileOutputStream>) null);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      // Undeclared exception!
      try { 
        dataFileWriter1.appendTo((SeekableInput) seekableFileInput0, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      // Undeclared exception!
      try { 
        dataFileWriter0.appendTo((SeekableInput) null, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileReader$SeekableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GenericDatumWriter<ArrayList<Object>> genericDatumWriter0 = new GenericDatumWriter<ArrayList<Object>>();
      DataFileWriter<ArrayList<Object>> dataFileWriter0 = new DataFileWriter<ArrayList<Object>>(genericDatumWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(fileDescriptor0);
      DataFileReader.SeekableInputStream dataFileReader_SeekableInputStream0 = new DataFileReader.SeekableInputStream(seekableFileInput0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("avro.avro.qo1Y !}Q\"\"Y");
      try { 
        dataFileWriter0.appendTo((SeekableInput) dataFileReader_SeekableInputStream0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not an Avro data file.
         //
         verifyException("org.apache.avro.file.DataFileStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Simapl0Simapl");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = MockFile.createTempFile("Simapl", "Simapl");
      try { 
        dataFileWriter0.appendTo(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not an Avro data file.
         //
         verifyException("org.apache.avro.file.DataFileStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Stack<Schema.Field> stack0 = new Stack<Schema.Field>();
      Schema schema0 = Schema.createRecord((String) null, "Simpl", "avro.f", false, (List<Schema.Field>) stack0);
      ReflectData reflectData0 = new ReflectData();
      ReflectDatumWriter<String> reflectDatumWriter0 = new ReflectDatumWriter<String>(schema0, reflectData0);
      DataFileWriter<String> dataFileWriter0 = new DataFileWriter<String>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile(" ~R[QOA#j0:/ZR~", "java-key-class");
      dataFileWriter0.create(schema0, (File) mockFile0);
      DataFileWriter<Object> dataFileWriter1 = new DataFileWriter<Object>((DatumWriter<Object>) null);
      // Undeclared exception!
      try { 
        dataFileWriter1.appendTo((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No name in schema: {\"type\":\"record\",\"doc\":\"Simpl\",\"fields\":[]}
         //
         verifyException("org.apache.avro.Schema", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9", "fG9");
      dataFileWriter0.create(schema0, (File) mockFile0);
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter1 = new DataFileWriter<Object>(json_ObjectWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter1.appendTo((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not the Json schema: \"string\"
         //
         verifyException("org.apache.avro.data.Json$ObjectWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.appendTo((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile((String) null, "LkUMpSv}1 xtv35-ke]");
      dataFileWriter0.create(schema0, (File) mockFile0);
      DataFileWriter<Object> dataFileWriter1 = new DataFileWriter<Object>((DatumWriter<Object>) null);
      // Undeclared exception!
      try { 
        dataFileWriter1.appendTo((File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":\";R!\"yqoQ,yz?N");
      GenericDatumWriter<Object> genericDatumWriter0 = new GenericDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(genericDatumWriter0);
      try { 
        dataFileWriter0.appendTo((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      SpecificDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> specificDatumWriter0 = new SpecificDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(schema0);
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9");
      dataFileWriter0.create(schema0, (File) mockFile0);
      // Undeclared exception!
      try { 
        dataFileWriter0.appendEncoded((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.io.Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      DataFileStream<Object> dataFileStream0 = new DataFileStream<Object>((DatumReader<Object>) null);
      // Undeclared exception!
      try { 
        dataFileWriter0.appendAllFrom(dataFileStream0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      // Undeclared exception!
      try { 
        dataFileWriter1.appendAllFrom((DataFileStream<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("S`)~x!c3aO.");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      mockFile0.setReadOnly();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(160);
      dataFileWriter1.appendEncoded(byteBuffer0);
      dataFileWriter1.setSyncInterval(160);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dataFileWriter0.append(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Not in union [\"string\"]: java.lang.Object@6deca264
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("S`)~x!c3aO.");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      dataFileWriter0.setSyncInterval(131);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3812);
      dataFileWriter1.appendEncoded(byteBuffer0);
      assertEquals(3876L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(class0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setMeta("avro.schema", (byte[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set reserved meta key: avro.schema
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      byte[] byteArray0 = new byte[1];
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.setMeta("A>8*d\"LA6fDaj=", byteArray0);
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> specificDatumWriter0 = new SpecificDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(schema0);
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("Q9", "Q9");
      dataFileWriter0.create(schema0, (File) mockFile0);
      Class<Object> class0 = Object.class;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(class0);
      DataFileWriter<Object> dataFileWriter1 = new DataFileWriter<Object>(reflectDatumWriter0);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("java-class");
      ZstandardCodec.Option zstandardCodec_Option0 = new ZstandardCodec.Option((-3353), true, true);
      DataFileWriter<Object> dataFileWriter2 = dataFileWriter1.setCodec(zstandardCodec_Option0);
      DataFileWriter<Object> dataFileWriter3 = dataFileWriter2.appendTo((SeekableInput) seekableFileInput0, (OutputStream) syncableFileOutputStream0);
      assertEquals(45L, mockFile0.length());
      assertTrue(dataFileWriter3.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("NS~&GX%", "\u0006");
      dataFileWriter0.create(schema0, (File) mockFile0);
      Class<Object> class0 = Object.class;
      ReflectDatumWriter<Object> reflectDatumWriter1 = new ReflectDatumWriter<Object>(class0);
      DataFileWriter<Object> dataFileWriter1 = new DataFileWriter<Object>(reflectDatumWriter1);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("java-key-class");
      DataFileWriter<Object> dataFileWriter2 = dataFileWriter1.appendTo((SeekableInput) seekableFileInput0, (OutputStream) syncableFileOutputStream0);
      long long0 = dataFileWriter2.sync();
      assertEquals(0L, long0);
      assertEquals(45L, mockFile0.length());
      assertTrue(dataFileWriter2.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector<Schema> vector0 = new Vector<Schema>();
      Schema schema0 = Schema.createUnion((List<Schema>) vector0);
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      SyncableFileOutputStream syncableFileOutputStream0 = new SyncableFileOutputStream("com.fasterxml.jackson.databind.cfg.MapperConfig");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (OutputStream) syncableFileOutputStream0, (byte[]) null);
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      dataFileWriter0.create(schema0, (File) mockFile0);
      // Undeclared exception!
      try { 
        dataFileWriter0.appendTo((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // already open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("?t>{^G ", sQLTransientConnectionException0);
      DataFileWriter.AppendWriteException dataFileWriter_AppendWriteException0 = new DataFileWriter.AppendWriteException(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.sync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("w/`S");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      dataFileWriter1.close();
      assertEquals(43L, mockFile0.length());
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      dataFileWriter0.close();
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Stack<Schema> stack0 = new Stack<Schema>();
      Schema schema0 = Schema.createUnion((List<Schema>) stack0);
      GenericDatumWriter<Object> genericDatumWriter0 = new GenericDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(genericDatumWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1673);
      dataFileWriter0.create(schema0, (OutputStream) byteArrayOutputStream0);
      assertEquals("Obj\u0001\u0002\u0016avro.schema\u0004[]\u0000\uFFFDl\uFFFD\u0007\u0391\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDE\uFFFD\u000F[\uFFFD", byteArrayOutputStream0.toString());
      
      dataFileWriter0.fSync();
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9", "fG9");
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("fG9/fG9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "]zt%");
      DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>> datumReader0 = (DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>>) mock(DatumReader.class, new ViolatedAssumptionAnswer());
      DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileStream0 = new DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>>(seekableFileInput0, datumReader0);
      try { 
        dataFileWriter1.appendAllFrom(dataFileStream0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.io.BinaryDecoder$InputStreamByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9", "fG9");
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>> datumReader0 = (DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>>) mock(DatumReader.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("fG9/fG9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.avro.file.DataFileWriter$BufferedFileOutputStream$PositionFilter");
      DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileStream0 = new DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>>(seekableFileInput0, datumReader0);
      try { 
        dataFileWriter1.appendAllFrom(dataFileStream0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid sync!
         //
         verifyException("org.apache.avro.file.DataFileStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(schema0);
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9", "fG9");
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>> datumReader0 = (DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>>) mock(DatumReader.class, new ViolatedAssumptionAnswer());
      DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileStream0 = new DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>>(seekableFileInput0, datumReader0);
      dataFileWriter1.appendAllFrom(dataFileStream0, true);
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
      assertEquals((-2), seekableFileInput0.available());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(schema0);
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9", "fG9");
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>> datumReader0 = (DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>>) mock(DatumReader.class, new ViolatedAssumptionAnswer());
      schema0.addProp("CAz%<u @LtD9Nng", "CAz%<u @LtD9Nng");
      DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileStream0 = new DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>>(seekableFileInput0, datumReader0);
      try { 
        dataFileWriter1.appendAllFrom(dataFileStream0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Schema from file org.apache.avro.file.DataFileStream@22 does not match
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> reflectDatumWriter0 = new ReflectDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(schema0);
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("fG9", "fG9");
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      SeekableFileInput seekableFileInput0 = new SeekableFileInput(mockFile0);
      DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>> datumReader0 = (DatumReader<AbstractMap.SimpleImmutableEntry<Object, Object>>) mock(DatumReader.class, new ViolatedAssumptionAnswer());
      DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileStream0 = new DataFileStream<AbstractMap.SimpleImmutableEntry<Object, Object>>(seekableFileInput0, datumReader0);
      dataFileWriter1.appendAllFrom(dataFileStream0, false);
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
      assertEquals((-2), seekableFileInput0.available());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> specificDatumWriter0 = new SpecificDatumWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(schema0);
      DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>> dataFileWriter0 = new DataFileWriter<AbstractMap.SimpleImmutableEntry<Object, Object>>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("?P5I0wTIDUHb", "Q9");
      dataFileWriter0.create(schema0, (File) mockFile0);
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter1 = new DataFileWriter<Object>(reflectDatumWriter0);
      CodecFactory codecFactory0 = CodecFactory.snappyCodec();
      DataFileWriter<Object> dataFileWriter2 = dataFileWriter1.setCodec(codecFactory0);
      DataFileWriter<Object> dataFileWriter3 = dataFileWriter2.appendTo((File) mockFile0);
      assertEquals(45L, mockFile0.length());
      assertTrue(dataFileWriter3.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      File file0 = MockFile.createTempFile("'2WnDAkOwqDFpf", "'2WnDAkOwqDFpf");
      try { 
        dataFileWriter0.appendTo(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not an Avro data file.
         //
         verifyException("org.apache.avro.file.DataFileStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      try { 
        dataFileWriter0.create(schema0, (OutputStream) byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // sync must be exactly 16 bytes
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setSyncInterval(1859660671);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid syncInterval value: 1859660671
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.setSyncInterval(1073741824);
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setSyncInterval((-295));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid syncInterval value: -295
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-Jeneric Collection class %s did not resolve to domething with element type %s but %s ");
      dataFileWriter0.create(schema0, (File) mockFile0);
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // already open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERROR;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      MockFile mockFile0 = new MockFile("avro.Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.create(schema0, (File) mockFile0);
      dataFileWriter1.fSync();
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
      assertEquals(43L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>(schema0);
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      MockFile mockFile0 = new MockFile("/F'");
      dataFileWriter0.create(schema0, (File) mockFile0);
      // Undeclared exception!
      try { 
        dataFileWriter0.append(schema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unknown datum type org.apache.avro.Schema$UnionSchema: [\"string\"]
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      DataFileWriter<Object> dataFileWriter1 = dataFileWriter0.setMeta("<A<-dPu?0*=_", (-900L));
      assertTrue(dataFileWriter1.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.setMeta("avro.schema", "avro.`a|B-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set reserved meta key: avro.schema
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = DataFileWriter.isReservedMeta("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GenericDatumWriter<ObjectIdGenerator<Object>> genericDatumWriter0 = new GenericDatumWriter<ObjectIdGenerator<Object>>();
      DataFileWriter<ObjectIdGenerator<Object>> dataFileWriter0 = new DataFileWriter<ObjectIdGenerator<Object>>(genericDatumWriter0);
      boolean boolean0 = dataFileWriter0.isFlushOnEveryBlock();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Json.ObjectWriter json_ObjectWriter0 = new Json.ObjectWriter();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(json_ObjectWriter0);
      assertTrue(dataFileWriter0.isFlushOnEveryBlock());
      
      dataFileWriter0.setFlushOnEveryBlock(false);
      dataFileWriter0.setSyncInterval(1073741824);
      assertFalse(dataFileWriter0.isFlushOnEveryBlock());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SpecificDatumWriter<Object> specificDatumWriter0 = new SpecificDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(specificDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.fSync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Schema schema0 = Protocol.SYSTEM_ERRORS;
      ReflectDatumWriter<Object> reflectDatumWriter0 = new ReflectDatumWriter<Object>();
      DataFileWriter<Object> dataFileWriter0 = new DataFileWriter<Object>(reflectDatumWriter0);
      // Undeclared exception!
      try { 
        dataFileWriter0.create(schema0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.avro.file.DataFileWriter$BufferedFileOutputStream$PositionFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DataFileWriter<ArrayList<Object>> dataFileWriter0 = new DataFileWriter<ArrayList<Object>>((DatumWriter<ArrayList<Object>>) null);
      // Undeclared exception!
      try { 
        dataFileWriter0.appendEncoded((ByteBuffer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not open
         //
         verifyException("org.apache.avro.file.DataFileWriter", e);
      }
  }
}
