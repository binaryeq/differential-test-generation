/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 23 20:58:25 GMT 2024
 */

package org.apache.avro.file;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class XZCodec_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.avro.file.XZCodec"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/org/apache/avro/avro/1.11.1"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(XZCodec_ESTest_scaffolding.class.getClassLoader() ,
      "org.tukaani.xz.ArrayCache",
      "org.tukaani.xz.lz.HC4",
      "org.tukaani.xz.LZMA2Options",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder",
      "org.tukaani.xz.MemoryLimitException",
      "org.tukaani.xz.lz.Hash234",
      "org.apache.avro.file.Codec",
      "org.xerial.snappy.SnappyLoader",
      "org.tukaani.xz.lz.LZEncoder",
      "org.tukaani.xz.SingleXZInputStream",
      "org.tukaani.xz.XZInputStream",
      "org.xerial.snappy.SnappyErrorCode",
      "org.tukaani.xz.CountingOutputStream",
      "org.tukaani.xz.check.CRC64",
      "org.apache.commons.compress.utils.CountingInputStream",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder",
      "org.tukaani.xz.LZMA2Encoder",
      "org.tukaani.xz.common.EncoderUtil",
      "org.apache.avro.file.SnappyCodec",
      "org.apache.avro.util.NonCopyingByteArrayOutputStream",
      "org.tukaani.xz.rangecoder.RangeEncoder",
      "org.apache.avro.file.XZCodec$Option",
      "org.tukaani.xz.lzma.LZMACoder$LengthCoder",
      "org.apache.avro.file.BZip2Codec$Option",
      "org.tukaani.xz.rangecoder.RangeEncoderToBuffer",
      "org.tukaani.xz.FilterCoder",
      "org.apache.avro.file.ZstandardCodec$Option",
      "org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder",
      "org.xerial.snappy.SnappyApi",
      "org.apache.avro.file.NullCodec$Option",
      "org.tukaani.xz.CountingInputStream",
      "org.xerial.snappy.OSInfo",
      "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream",
      "org.apache.avro.file.NullCodec",
      "org.tukaani.xz.index.IndexRecord",
      "org.tukaani.xz.RawCoder",
      "org.tukaani.xz.LZMA2OutputStream",
      "org.apache.commons.compress.compressors.CompressorOutputStream",
      "org.apache.avro.file.DeflateCodec",
      "org.tukaani.xz.rangecoder.RangeDecoderFromBuffer",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder",
      "org.tukaani.xz.LZMA2InputStream",
      "org.tukaani.xz.CorruptedInputException",
      "org.tukaani.xz.CloseIgnoringInputStream",
      "org.apache.avro.AvroRuntimeException",
      "org.tukaani.xz.LZMA2Coder",
      "org.tukaani.xz.rangecoder.RangeDecoder",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.tukaani.xz.rangecoder.RangeCoder",
      "org.tukaani.xz.lz.BT4",
      "org.xerial.snappy.BitShuffleNative",
      "org.tukaani.xz.index.IndexHash",
      "org.tukaani.xz.check.CRC32",
      "org.xerial.snappy.Snappy",
      "org.tukaani.xz.lz.Matches",
      "org.tukaani.xz.common.Util",
      "org.tukaani.xz.FilterOptions",
      "org.apache.commons.compress.compressors.xz.XZCompressorInputStream",
      "org.xerial.snappy.SnappyError",
      "org.apache.avro.file.CodecFactory",
      "org.apache.commons.compress.MemoryLimitException",
      "org.tukaani.xz.lzma.LZMAEncoderFast",
      "org.tukaani.xz.common.StreamFlags",
      "org.tukaani.xz.common.DecoderUtil",
      "org.tukaani.xz.XZFormatException",
      "org.tukaani.xz.XZIOException",
      "org.tukaani.xz.UnsupportedOptionsException",
      "org.tukaani.xz.lz.CRC32Hash",
      "org.tukaani.xz.check.SHA256",
      "org.tukaani.xz.lz.LZDecoder",
      "org.tukaani.xz.XZ",
      "org.apache.avro.file.BZip2Codec",
      "org.apache.avro.file.SnappyCodec$Option",
      "org.tukaani.xz.check.Check",
      "org.tukaani.xz.index.IndexBase",
      "org.apache.avro.file.DeflateCodec$Option",
      "org.tukaani.xz.FilterEncoder",
      "org.tukaani.xz.lzma.State",
      "org.tukaani.xz.index.IndexEncoder",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder",
      "org.tukaani.xz.lzma.Optimum",
      "org.tukaani.xz.LZMA2Decoder",
      "org.tukaani.xz.check.None",
      "org.tukaani.xz.BlockInputStream",
      "org.tukaani.xz.UncompressedLZMA2OutputStream",
      "org.apache.avro.file.XZCodec",
      "org.xerial.snappy.pure.PureJavaSnappy",
      "org.tukaani.xz.lzma.LZMACoder",
      "org.tukaani.xz.IndexIndicatorException",
      "org.apache.commons.compress.utils.IOUtils",
      "org.tukaani.xz.lzma.LZMAEncoderNormal",
      "org.tukaani.xz.BlockOutputStream",
      "org.tukaani.xz.FilterDecoder",
      "org.tukaani.xz.lzma.LZMAEncoder",
      "org.apache.commons.compress.utils.InputStreamStatistics",
      "org.tukaani.xz.FinishableOutputStream",
      "org.apache.avro.file.ZstandardCodec",
      "org.tukaani.xz.XZOutputStream"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(XZCodec_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.avro.file.Codec",
      "org.apache.avro.file.XZCodec",
      "org.apache.avro.file.NullCodec$Option",
      "org.apache.avro.file.NullCodec",
      "org.apache.avro.file.DeflateCodec$Option",
      "org.apache.avro.file.BZip2Codec$Option",
      "org.apache.avro.file.ZstandardCodec$Option",
      "org.xerial.snappy.SnappyLoader",
      "org.xerial.snappy.OSInfo",
      "org.xerial.snappy.SnappyError",
      "org.xerial.snappy.SnappyErrorCode",
      "org.xerial.snappy.pure.PureJavaSnappy",
      "org.xerial.snappy.Snappy",
      "org.apache.avro.file.SnappyCodec$Option",
      "org.apache.avro.file.CodecFactory",
      "org.apache.avro.file.XZCodec$Option",
      "org.apache.avro.util.NonCopyingByteArrayOutputStream",
      "org.apache.avro.AvroRuntimeException",
      "org.apache.commons.compress.compressors.CompressorOutputStream",
      "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream",
      "org.tukaani.xz.FinishableOutputStream",
      "org.tukaani.xz.XZOutputStream",
      "org.tukaani.xz.FilterOptions",
      "org.tukaani.xz.LZMA2Options",
      "org.tukaani.xz.ArrayCache",
      "org.tukaani.xz.common.StreamFlags",
      "org.tukaani.xz.index.IndexBase",
      "org.tukaani.xz.index.IndexEncoder",
      "org.tukaani.xz.XZIOException",
      "org.tukaani.xz.LZMA2Coder",
      "org.tukaani.xz.LZMA2Encoder",
      "org.tukaani.xz.lzma.LZMACoder",
      "org.tukaani.xz.lzma.LZMAEncoder",
      "org.tukaani.xz.RawCoder",
      "org.tukaani.xz.check.Check",
      "org.tukaani.xz.check.CRC64",
      "org.tukaani.xz.XZ",
      "org.tukaani.xz.common.Util",
      "org.tukaani.xz.common.EncoderUtil",
      "org.tukaani.xz.BlockOutputStream",
      "org.tukaani.xz.CountingOutputStream",
      "org.tukaani.xz.LZMA2OutputStream",
      "org.tukaani.xz.rangecoder.RangeCoder",
      "org.tukaani.xz.rangecoder.RangeEncoder",
      "org.tukaani.xz.rangecoder.RangeEncoderToBuffer",
      "org.tukaani.xz.lzma.LZMAEncoderFast",
      "org.tukaani.xz.lz.LZEncoder",
      "org.tukaani.xz.lz.HC4",
      "org.tukaani.xz.lz.CRC32Hash",
      "org.tukaani.xz.lz.Hash234",
      "org.tukaani.xz.lz.Matches",
      "org.tukaani.xz.lzma.State",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder",
      "org.tukaani.xz.lzma.LZMACoder$LengthCoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder",
      "org.tukaani.xz.index.IndexRecord",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.apache.commons.compress.compressors.xz.XZCompressorInputStream",
      "org.apache.commons.compress.utils.CountingInputStream",
      "org.tukaani.xz.SingleXZInputStream",
      "org.tukaani.xz.index.IndexHash",
      "org.tukaani.xz.CorruptedInputException",
      "org.tukaani.xz.check.SHA256",
      "org.tukaani.xz.common.DecoderUtil",
      "org.apache.commons.compress.utils.IOUtils",
      "org.tukaani.xz.BlockInputStream",
      "org.tukaani.xz.LZMA2Decoder",
      "org.tukaani.xz.CloseIgnoringInputStream",
      "org.tukaani.xz.CountingInputStream",
      "org.tukaani.xz.LZMA2InputStream",
      "org.tukaani.xz.rangecoder.RangeDecoder",
      "org.tukaani.xz.rangecoder.RangeDecoderFromBuffer",
      "org.tukaani.xz.lz.LZDecoder",
      "org.tukaani.xz.IndexIndicatorException",
      "org.tukaani.xz.XZFormatException",
      "org.tukaani.xz.UnsupportedOptionsException",
      "org.tukaani.xz.lzma.LZMAEncoderNormal",
      "org.tukaani.xz.lz.BT4",
      "org.tukaani.xz.lzma.Optimum",
      "org.tukaani.xz.lzma.LZMADecoder",
      "org.tukaani.xz.lzma.LZMADecoder$LengthDecoder",
      "org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder",
      "org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder"
    );
  }
}
