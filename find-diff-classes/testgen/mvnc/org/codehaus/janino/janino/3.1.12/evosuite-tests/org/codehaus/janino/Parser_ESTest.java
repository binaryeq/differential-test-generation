/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:31:23 GMT 2024
 */

package org.codehaus.janino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Stack;
import org.codehaus.commons.compiler.Location;
import org.codehaus.commons.compiler.WarningHandler;
import org.codehaus.commons.compiler.util.StringPattern;
import org.codehaus.commons.compiler.util.resource.StringResource;
import org.codehaus.janino.FilterWarningHandler;
import org.codehaus.janino.IType;
import org.codehaus.janino.Java;
import org.codehaus.janino.Parser;
import org.codehaus.janino.Scanner;
import org.codehaus.janino.Token;
import org.codehaus.janino.TokenStream;
import org.codehaus.janino.TokenStreamImpl;
import org.codehaus.janino.TokenType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(zero length array)");
      Scanner scanner0 = new Scanner("(zero length array)", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '(zero length array)', Line 1, Column 14: ')' expected instead of 'array'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@=NPIs<b7?D:");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$NullLiteral", stringReader0);
      Parser parser0 = new Parser(scanner0);
      TokenStream tokenStream0 = null;
      Parser parser1 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser1.parseVariableDeclarators();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"defaut\" not allowed on member annotation type declaration");
      Scanner scanner0 = new Scanner("Modifier \"defaut\" not allowed on member annotation type declaration", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseAdditiveExpression();
      stringReader0.close();
      try { 
        parser0.parseInclusiveOrExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      Parser.MethodDeclarationContext.values();
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      Scanner scanner0 = new Scanner("]J0%-A@ O^%nFF", pipedInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cons-ant name>\"");
      Scanner scanner0 = new Scanner("Cons-ant name>\"", stringReader0);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      Location location0 = parser0.location();
      Java.TypeParameter[] java_TypeParameterArray0 = new Java.TypeParameter[1];
      Java.ReferenceType[] java_ReferenceTypeArray0 = new Java.ReferenceType[0];
      Java.TypeParameter java_TypeParameter0 = new Java.TypeParameter("Cons-ant name>\"", java_ReferenceTypeArray0);
      java_TypeParameterArray0[0] = java_TypeParameter0;
      Java.LocalClassDeclaration java_LocalClassDeclaration0 = new Java.LocalClassDeclaration(location0, "Cons-ant name>\"", java_ModifierArray0, "FD", java_TypeParameterArray0, (Java.Type) null, java_ReferenceTypeArray0);
      try { 
        parser0.parseClassBodyDeclaration(java_LocalClassDeclaration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Cons-ant name>\"', Line 1, Column 5: IDENTIFIER expected instead of '-'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cons-ant name>\"");
      Scanner scanner0 = new Scanner("Cons-ant name>\"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Location location0 = parser0.location();
      Java.TypeParameter[] java_TypeParameterArray0 = new Java.TypeParameter[1];
      Java.ReferenceType[] java_ReferenceTypeArray0 = new Java.ReferenceType[0];
      Java.TypeParameter java_TypeParameter0 = new Java.TypeParameter("Cons-ant name>\"", java_ReferenceTypeArray0);
      java_TypeParameterArray0[0] = java_TypeParameter0;
      Java.LocalClassDeclaration java_LocalClassDeclaration0 = new Java.LocalClassDeclaration(location0, "Cons-ant name>\"", java_ModifierArray0, "FD", java_TypeParameterArray0, (Java.Type) null, java_ReferenceTypeArray0);
      try { 
        parser0.parseClassBodyDeclaration(java_LocalClassDeclaration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Cons-ant name>\"', Line 1, Column 5: IDENTIFIER expected instead of '-'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("Single quote must be backslash-escaped in character literal", stringReader0, 1636, 11);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.keep", stringReader0);
      Parser parser0 = new Parser(scanner1);
      scanner1.location();
      parser0.parseBracketsOpt();
      parser0.read();
      boolean boolean0 = false;
      scanner1.setIgnoreWhiteSpace(false);
      Scanner scanner2 = new Scanner("import", stringReader0);
      Parser parser1 = new Parser(scanner2);
      try { 
        parser1.parseModifiers();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'import', Line 1, Column 1: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      scanner0.produce();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser1.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 20: IDENTIFIER expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      scanner0.produce();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser1.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 11, Column 20: IDENTIFIER expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner("Nj7,!", pipedInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("static ");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      Parser parser1 = new Parser(scanner0);
      parser1.parseOptionalModifier();
      try { 
        parser1.parseCatchParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "C< _/Y%H:su\"5ZZ";
      StringReader stringReader0 = new StringReader("C< _/Y%H:su\"5ZZ");
      Scanner scanner0 = new Scanner("onVstant", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Location location0 = tokenStreamImpl0.location();
      String string1 = "BDFIJSC";
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[9];
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("org.codehaus.janino.source_debugging.keep", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      parser0.parseOptionalModifier();
      java_ModifierArray0[1] = null;
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'onVstant', Line 1, Column 5: One of '> ,' expected instead of '/'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C< _/Y%H:su\"5ZZ");
      Scanner scanner0 = new Scanner("onVstant", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Location location0 = tokenStreamImpl0.location();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[9];
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("org.codehaus.janino.source_debugging.keep", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      parser0.parseOptionalModifier();
      java_ModifierArray0[1] = null;
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'onVstant', Line 1, Column 5: One of '> ,' expected instead of '/'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("interface");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Scanner scanner0 = new Scanner("interface", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parsePackageDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("b8b", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      parser0.parseVariableDeclarators();
      parser1.parseOptionalModifier();
      parser1.parseOptionalModifier();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[6];
      java_ModifierArray0[2] = null;
      boolean[] booleanArray0 = new boolean[1];
      try { 
        parser0.parseFormalParameterRest(java_ModifierArray0, (Java.Type) null, booleanArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'b8b', Line 1, Column 14: '.' expected instead of 'janino'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = 'Y';
      charArray0[2] = '^';
      charArray0[3] = 'A';
      charArray0[4] = 'g';
      charArray0[5] = 'm';
      charArray0[6] = '2';
      charArray0[7] = ',';
      charArray0[8] = 'X';
      stringReader0.read(charArray0);
      Scanner scanner0 = new Scanner("jg/3p<F", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBlockStatements();
      try { 
        parser0.parseAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'jg/3p<F', Line 11, Column 12: Unexpected token \"}\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[8];
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[5];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[1] = ":tvZ#7";
      stringArray0[2] = "KQc$k)=2/";
      stringArray0[3] = "Constant name \"";
      Java.AmbiguousName java_AmbiguousName0 = new Java.AmbiguousName((Location) null, stringArray0);
      Java.Type java_Type0 = java_AmbiguousName0.toType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_Type0);
      java_AnnotationArray0[0] = (Java.Annotation) java_MarkerAnnotation0;
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType0, java_AmbiguousName0);
      java_AnnotationArray0[1] = (Java.Annotation) java_SingleElementAnnotation0;
      Java.SingleElementAnnotation java_SingleElementAnnotation1 = new Java.SingleElementAnnotation(java_ReferenceType0, java_AnnotationArray0[1]);
      java_AnnotationArray0[2] = (Java.Annotation) java_SingleElementAnnotation1;
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation(java_Type0);
      java_AnnotationArray0[3] = (Java.Annotation) java_MarkerAnnotation1;
      Java.MarkerAnnotation java_MarkerAnnotation2 = new Java.MarkerAnnotation(java_MarkerAnnotation0.type);
      java_AnnotationArray0[4] = (Java.Annotation) java_MarkerAnnotation2;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "Constant name \"";
      stringArray1[1] = "org.codehaus.janino.source_debugging.dir";
      stringArray1[2] = ":tvZ#7";
      Java.ReferenceType java_ReferenceType1 = new Java.ReferenceType((Location) null, java_AnnotationArray0, stringArray1, (Java.TypeArgument[]) null);
      Java.ElementValuePair[] java_ElementValuePairArray0 = new Java.ElementValuePair[9];
      Java.Instanceof java_Instanceof0 = new Java.Instanceof((Location) null, java_AmbiguousName0, java_MarkerAnnotation0.type);
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("r.=k1", java_Instanceof0);
      java_ElementValuePairArray0[0] = java_ElementValuePair0;
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair("org.codehaus.janino.source_debugging.dir", java_ElementValuePair0.elementValue);
      java_ElementValuePairArray0[1] = java_ElementValuePair1;
      Java.ElementValuePair java_ElementValuePair2 = new Java.ElementValuePair("?C#M'3Ui>~ m", java_AnnotationArray0[3]);
      java_ElementValuePairArray0[2] = java_ElementValuePair2;
      Java.ElementValuePair java_ElementValuePair3 = new Java.ElementValuePair("g6s!xV", java_AnnotationArray0[2]);
      java_ElementValuePairArray0[3] = java_ElementValuePair3;
      Java.ElementValuePair java_ElementValuePair4 = new Java.ElementValuePair("org.codehaus.janino.source_debugging.enable", java_MarkerAnnotation0);
      java_ElementValuePairArray0[4] = java_ElementValuePair4;
      Java.ElementValuePair java_ElementValuePair5 = new Java.ElementValuePair("Constant name \"", java_MarkerAnnotation0);
      java_ElementValuePairArray0[5] = java_ElementValuePair5;
      Java.ElementValuePair java_ElementValuePair6 = new Java.ElementValuePair((String) null, java_Instanceof0);
      java_ElementValuePairArray0[6] = java_ElementValuePair6;
      Java.BinaryOperation java_BinaryOperation0 = new Java.BinaryOperation((Location) null, java_Instanceof0, "Shift distance of type \"", java_AmbiguousName0);
      Java.ElementValuePair java_ElementValuePair7 = new Java.ElementValuePair("Cannot use \"super\" on \"", java_BinaryOperation0);
      java_ElementValuePairArray0[7] = java_ElementValuePair7;
      Java.ElementValuePair java_ElementValuePair8 = new Java.ElementValuePair("Shift distance of type \"", java_ElementValuePair1.elementValue);
      java_ElementValuePairArray0[8] = java_ElementValuePair8;
      Java.NormalAnnotation java_NormalAnnotation0 = new Java.NormalAnnotation(java_ReferenceType1, java_ElementValuePairArray0);
      java_ModifierArray0[0] = (Java.Modifier) java_NormalAnnotation0;
      Java.NormalAnnotation java_NormalAnnotation1 = new Java.NormalAnnotation(java_ReferenceType1, java_NormalAnnotation0.elementValuePairs);
      java_ModifierArray0[1] = (Java.Modifier) java_NormalAnnotation1;
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("INA9i_=PuJMjZ", (Location) null);
      java_ModifierArray0[2] = (Java.Modifier) java_AccessModifier0;
      Java.AccessModifier java_AccessModifier1 = new Java.AccessModifier("interface", (Location) null);
      java_ModifierArray0[3] = (Java.Modifier) java_AccessModifier1;
      Java.MarkerAnnotation java_MarkerAnnotation3 = new Java.MarkerAnnotation(java_MarkerAnnotation2.type);
      java_ModifierArray0[4] = (Java.Modifier) java_MarkerAnnotation3;
      Java.AccessModifier java_AccessModifier2 = new Java.AccessModifier("enum", (Location) null);
      java_ModifierArray0[5] = (Java.Modifier) java_AccessModifier2;
      Java.MarkerAnnotation java_MarkerAnnotation4 = new Java.MarkerAnnotation(java_SingleElementAnnotation0.type);
      java_ModifierArray0[6] = (Java.Modifier) java_MarkerAnnotation4;
      Java.AccessModifier java_AccessModifier3 = new Java.AccessModifier(":tvZ#7", (Location) null);
      java_ModifierArray0[7] = (Java.Modifier) java_AccessModifier3;
      try { 
        parser0.parsePackageDeclarationRest("?C#M'3Ui>~ m", java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: Access modifier(s) :tvZ#7 INA9i_=PuJMjZ enum interface not allowed in this context
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("VdHy9hEK}ZbC~b,)GA", stringReader0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", mockFileInputStream0);
      Parser parser0 = new Parser(scanner1);
      try { 
        parser0.parseUnaryExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = ' ';
      charArray0[2] = '7';
      charArray0[3] = 'f';
      charArray0[4] = '&';
      charArray0[5] = '}';
      charArray0[6] = '\\';
      stringReader0.read(charArray0);
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@=NPIs<b7?D:");
      String string0 = "g,8RdA}*Qe}T^j#";
      Scanner scanner0 = new Scanner("g,8RdA}*Qe}T^j#", stringReader0);
      StringReader stringReader1 = new StringReader("g,8RdA}*Qe}T^j#");
      Scanner scanner1 = new Scanner("g,8RdA}*Qe}T^j#", stringReader1);
      Parser parser0 = new Parser(scanner1);
      try { 
        parser0.parseVariableDeclarators();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'g,8RdA}*Qe}T^j#', Line 1, Column 3: IDENTIFIER expected instead of '8'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      Scanner scanner0 = new Scanner("Consta1t naWe \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseEnumConstant();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "Consta1t";
      stringArray0[2] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[3] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[4] = "Consta1t";
      // Undeclared exception!
      try { 
        parser0.peek(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member annotation type declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member annotation type declaration", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseAdditiveExpression();
      parser0.parseInclusiveOrExpression();
      parser0.parseFormalParameterList();
      Java.Type java_Type0 = parser0.parseType();
      assertNotNull(java_Type0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner((String) null, stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      Location location0 = scanner0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("interface", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseEnumDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 1, Column 1: Access modifier(s) interface not allowed in this context
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseEnumDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: '{' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      parser1.parseBracketsOpt();
      Parser parser2 = new Parser(scanner0);
      try { 
        parser2.parseConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 1, Column 9: ')' expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { `D. }");
      Scanner scanner0 = new Scanner("java", stringReader0, (-2487), 109);
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      parser0.parseOptionalModifier();
      java_ModifierArray0[0] = null;
      try { 
        parser0.parseMethodDeclarationRest("sun.boot.class.path", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, "org.codehaus.janino.source_debugging.dir", false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'java', Line -2487, Column 115: Invalid character input \"`\" (character code 96)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { `D. }");
      Scanner scanner0 = new Scanner("java", stringReader0, (-2487), 109);
      Location location0 = new Location("java", 109, 109);
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      parser0.parseOptionalModifier();
      try { 
        parser0.parseMethodDeclarationRest("sun.boot.class.path", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, "org.codehaus.janino.Wource_debugging.dir", false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'java', Line -2487, Column 115: Invalid character input \"`\" (character code 96)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<b7?D:");
      stringReader0.mark(157);
      StringReader stringReader1 = new StringReader("(");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<b7?D:", stringReader1, (-1), 157);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<b7?D:', Line -1, Column 158: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("onstant");
      Scanner scanner0 = new Scanner(".", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseVariableDeclaratorRest(".");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "onstant";
      stringArray0[1] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[2] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[3] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[4] = "Parsing compilation unit '";
      int int0 = parser0.peek(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("(", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "interface";
      stringArray0[2] = "(";
      stringArray0[3] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[4] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[5] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[6] = "(";
      stringArray0[7] = "(";
      parser0.peekRead(stringArray0);
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '(', Line 1, Column 1: 'continue' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      stringReader0.close();
      Scanner scanner0 = new Scanner("wYzgM#GFY@61<xQc63", stringReader0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Return type '");
      Scanner scanner0 = new Scanner("=", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[3];
      String string0 = "m";
      Location location0 = new Location("m", 92, 92);
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier((String) null, location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      Java.AccessModifier java_AccessModifier1 = new Java.AccessModifier("org.codehaus.janino.source_debugging.dir", location0);
      java_ModifierArray0[1] = (Java.Modifier) java_AccessModifier1;
      Java.AccessModifier java_AccessModifier2 = new Java.AccessModifier("!=", location0);
      java_ModifierArray0[2] = (Java.Modifier) java_AccessModifier2;
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseEnumDeclarationRest("org.codehaus.janino.Java$ElementValuePair", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onVstant name \"");
      Scanner scanner0 = new Scanner("@onVstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier java_Modifier0 = parser0.parseOptionalModifier();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      java_ModifierArray0[0] = java_Modifier0;
      java_ModifierArray0[1] = java_Modifier0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      try { 
        parser0.parseFormalParameterRest(java_ModifierArray0, (Java.Type) null, booleanArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onVstant name \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      parser1.parseMultiplicativeExpression();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 5);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.keep", pushbackInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser2 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser2.parseTryStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      Location location0 = Location.NOWHERE;
      Java.Rvalue[] java_RvalueArray0 = new Java.Rvalue[5];
      Java.TextBlock java_TextBlock0 = new Java.TextBlock(location0, "Constant name \"");
      java_RvalueArray0[0] = (Java.Rvalue) java_TextBlock0;
      Java.Block java_Block0 = new Java.Block(location0);
      java_Block0.findLocalVariable("org.codehaus.janino.source_debugging.dir");
      Java.LocalVariableAccess java_LocalVariableAccess0 = new Java.LocalVariableAccess(location0, (Java.LocalVariable) null);
      java_RvalueArray0[1] = (Java.Rvalue) java_LocalVariableAccess0;
      Java.SimpleConstant java_SimpleConstant0 = new Java.SimpleConstant(location0, 139);
      java_RvalueArray0[2] = (Java.Rvalue) java_SimpleConstant0;
      Java.SimpleConstant java_SimpleConstant1 = new Java.SimpleConstant(location0, 0.0F);
      java_RvalueArray0[3] = (Java.Rvalue) java_SimpleConstant1;
      Java.BinaryOperation java_BinaryOperation0 = new Java.BinaryOperation(location0, java_RvalueArray0[1], "6]5H$E", java_LocalVariableAccess0);
      java_RvalueArray0[4] = (Java.Rvalue) java_BinaryOperation0;
      Java.SuperclassMethodInvocation java_SuperclassMethodInvocation0 = new Java.SuperclassMethodInvocation(location0, "org.codehaus.janino.source_debugging.enable", java_RvalueArray0);
      Java.RvalueMemberType java_RvalueMemberType0 = new Java.RvalueMemberType(location0, java_SuperclassMethodInvocation0, (String) null);
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_RvalueMemberType0);
      Location location1 = java_MarkerAnnotation0.getLocation();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[6];
      java_ModifierArray0[0] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[1] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[2] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[3] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[4] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[5] = (Java.Modifier) java_MarkerAnnotation0;
      Java.Type[] java_TypeArray0 = new Java.Type[0];
      Java.PackageMemberEnumDeclaration java_PackageMemberEnumDeclaration0 = new Java.PackageMemberEnumDeclaration(location1, "", java_ModifierArray0, "org.codehaus.janino.source_debugging.enable", java_TypeArray0);
      try { 
        parser1.parseEnumBody(java_PackageMemberEnumDeclaration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: '{' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      Scanner scanner0 = new Scanner("%", stringReader0);
      StringReader stringReader1 = new StringReader("CONSTANT_InterfaceMethodref_info(");
      Scanner scanner1 = new Scanner("CONSTANT_InterfaceMethodref_info(", stringReader1, (-1), 1931);
      Parser parser0 = new Parser(scanner1);
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'CONSTANT_InterfaceMethodref_info(', Line -1, Column 1964: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7F[Q");
      Scanner scanner0 = new Scanner("7F[Q", stringReader0);
      stringReader0.mark(9);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Scanner scanner2 = new Scanner("org.codehaus.janino.source_debugging.enable", pipedInputStream0);
      Parser parser0 = new Parser(scanner2);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      TokenType[] tokenTypeArray0 = new TokenType[6];
      TokenType tokenType0 = TokenType.END_OF_INPUT;
      tokenTypeArray0[0] = tokenType0;
      TokenType tokenType1 = TokenType.KEYWORD;
      tokenTypeArray0[1] = tokenType1;
      TokenType tokenType2 = TokenType.INTEGER_LITERAL;
      tokenTypeArray0[2] = tokenType2;
      TokenType tokenType3 = TokenType.OPERATOR;
      tokenTypeArray0[3] = tokenType3;
      TokenType tokenType4 = TokenType.TEXT_BLOCK;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-57);
      pipedOutputStream0.write(byteArray0);
      tokenTypeArray0[4] = tokenType4;
      TokenType tokenType5 = TokenType.BOOLEAN_LITERAL;
      tokenTypeArray0[5] = tokenType5;
      try { 
        parser0.peek(tokenTypeArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.enable', Line 1, Column 1: Invalid character input \"\uFFFD\" (character code 65533)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CUonstant name \"");
      PipedInputStream pipedInputStream0 = new PipedInputStream(11);
      Scanner scanner0 = new Scanner("Rvalue ", pipedInputStream0, (String) null);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseImportDeclarationBody();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseEnumConstant();
      TokenType tokenType0 = TokenType.IDENTIFIER;
      String string0 = parser0.peekRead(tokenType0);
      assertEquals("name", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("do");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.peekNextButOne((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.AbstractCompilationUnit.ImportDeclaration java_AbstractCompilationUnit_ImportDeclaration0 = parser0.parseImportDeclarationBody();
      assertNotNull(java_AbstractCompilationUnit_ImportDeclaration0);
      
      try { 
        parser0.parseVoidOrType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UeDtW(\"@', Line 1, Column 6: IDENTIFIER expected instead of '('
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("b8b", stringReader0);
      Scanner scanner1 = new Scanner("onVstant", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.AbstractCompilationUnit.ImportDeclaration java_AbstractCompilationUnit_ImportDeclaration0 = parser0.parseImportDeclarationBody();
      assertNotNull(java_AbstractCompilationUnit_ImportDeclaration0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      Scanner scanner0 = new Scanner("Unknown literal \"", stringReader0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseClassBodyDeclaration((Java.AbstractClassDeclaration) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Unknown literal \"', Line 1, Column 1: IDENTIFIER expected instead of '('
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Location location0 = new Location("Constant name \"", 13, 36);
      Java.Primitive java_Primitive0 = Java.Primitive.DOUBLE;
      Java.PrimitiveType java_PrimitiveType0 = new Java.PrimitiveType(location0, java_Primitive0);
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_PrimitiveType0);
      Location location1 = java_MarkerAnnotation0.getLocation();
      Java.AnonymousClassDeclaration java_AnonymousClassDeclaration0 = new Java.AnonymousClassDeclaration(location1, java_PrimitiveType0);
      try { 
        parser0.parseClassBodyDeclaration(java_AnonymousClassDeclaration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Scanner scanner0 = new Scanner("org.codehaus.commons.compiler.util.resource.PathResourceFinder", pipedInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser0.parseMethodDeclaration();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { `D. }");
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0, 32, 32);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.codehaus.janino.source_debugging.dir");
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      stringReader0.close();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseMethodDeclarationRest("org.codehaus.janino.source_debugging.keep", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, "$VALUES", true, parser_MethodDeclarationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(8yqT4j6I");
      Scanner scanner0 = new Scanner("Y,=LJM;a\"9jwL$", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.reset();
      scanner0.setIgnoreWhiteSpace(true);
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Y,=LJM;a\"9jwL$', Line 1, Column 2: Expression \"8\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a(7HTqv!]ut");
      Scanner scanner0 = new Scanner("a(7HTqv!]ut", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.enable");
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser1.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'a(7HTqv!]ut', Line 1, Column 3: Expression \"7\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.dir");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      Scanner scanner1 = new Scanner("GA,(o.\"91YN:ZEX6", sequenceInputStream0);
      Parser parser1 = new Parser(scanner1);
      try { 
        parser1.parseRelationalExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.close();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Scanner scanner1 = new Scanner("7FH[Q", stringReader0);
      Parser parser1 = new Parser(scanner1);
      try { 
        parser0.parsePackageDeclaration();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "|U2?SK(J!/vVN&W3QP";
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 11, 11);
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Scanner scanner1 = new Scanner("\"*}5_:cy|?FO(Pl6z", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseExpressionList();
      Parser parser1 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser1.parseSynchronizedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("onstant");
      Scanner scanner0 = new Scanner((String) null, stringReader0, 419, 419);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseBlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CoVnstant name \"");
      Scanner scanner0 = new Scanner("CoVnstant name \"", stringReader0);
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseVariableDeclarators();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nAY83} n;*$");
      StringResource stringResource0 = new StringResource("Type parameters not allowed with constant declaration", "MDCM");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("~^O", inputStream0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseExclusiveOrExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CoVnstant name \"");
      Scanner scanner0 = new Scanner("CoVnstant name \"", stringReader0);
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseDoStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner("G!S`#;CSKaqSK", pipedInputStream0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.peekRead("org.codehaus.janino.source_debugging.enable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { `D. }");
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0, 32, 32);
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseAndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0, 2, 1779);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.BLOCK;
      tokenStreamImpl0.peekRead("Oc");
      try { 
        parser0.parseClassDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member interface declaration', Line 2, Column 1789: '{' expected instead of '\"default\"'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("^", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.peek();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.codehaus.janino.source_debugging.dir");
      parser0.parseBracketsOpt();
      Scanner scanner1 = new Scanner("^", stringReader0, (-823), 0);
      try { 
        parser0.parseConstructorDeclarator("org.codehaus.janino.Java$SynchronizedStatement", (Java.Modifier[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '^', Line 1, Column 4: '(' expected instead of '.'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseInclusiveOrExpression();
      scanner0.produce();
      try { 
        parser0.parseSelector((Java.Atom) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 1: Unexpected token 'H' in selector
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aMQa%u");
      StringReader stringReader0 = new StringReader("interface");
      Scanner scanner0 = new Scanner("aMQa%u", stringReader0, (-648), (-1910446377));
      Parser parser0 = new Parser(scanner0);
      TokenType[] tokenTypeArray0 = new TokenType[3];
      TokenType tokenType0 = TokenType.CHARACTER_LITERAL;
      tokenTypeArray0[0] = tokenType0;
      TokenType tokenType1 = TokenType.BOOLEAN_LITERAL;
      tokenTypeArray0[1] = tokenType1;
      TokenType tokenType2 = TokenType.END_OF_INPUT;
      tokenTypeArray0[2] = tokenType2;
      parser0.peek(tokenTypeArray0);
      try { 
        parser0.parseExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'aMQa%u', Line -648, Column -1910446376: Unexpected token \"interface\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<b7?D:");
      stringReader0.mark(157);
      StringReader stringReader1 = new StringReader("(");
      Scanner scanner0 = new Scanner("interface", stringReader1, (-1), 157);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'interface', Line -1, Column 158: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseFormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: '(' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("onstant", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseMultiplicativeExpression();
      Scanner scanner1 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0);
      scanner1.produce();
      Parser parser1 = new Parser(scanner0);
      parser1.parsePrimary();
      parser1.parseUnaryExpression();
      try { 
        parser1.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'onstant', Line 1, Column 40: ';' expected instead of 'interface'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1r59U13s>4-_ sGf2f");
      String string0 = "D,&`BDO<!erRSTD";
      Scanner scanner0 = new Scanner("D,&`BDO<!erRSTD", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.location();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cM`.@5NPIs<7?D:";
      stringArray0[1] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[2] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[3] = "org.codehaus.janino.source_debugging.keep";
      // Undeclared exception!
      try { 
        parser0.read(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      stringReader0.mark(5);
      stringReader0.close();
      Scanner scanner0 = new Scanner(")*57o-", stringReader0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExclusiveOrExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringResource stringResource0 = new StringResource("H\"", "VOID");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("H\"", inputStream0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseReferenceTypeList();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseConstructorDeclarator("org.codehaus.janino.source_debugging.enable", java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'H\"', Line 1, Column 1: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "VOID";
      StringResource stringResource0 = new StringResource("H\"", "VOID");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("H\"", inputStream0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseReferenceTypeList();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseConstructorDeclarator("org.codehaus.janino.source_debugging.enable", java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'H\"', Line 1, Column 1: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { `D. }");
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0, 32, 32);
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseMethodDeclarationRest("org.codehaus.janino.source_debugging.keep", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, "$VALUES", true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.dir', Line 32, Column 38: Invalid character input \"`\" (character code 96)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(S?l34f;/m9tcQ$q8qA");
      Scanner scanner0 = new Scanner("q#acLa_P{", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      try { 
        parser0.parseConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'q#acLa_P{', Line 1, Column 8: ':' expected instead of ';'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<=");
      Scanner scanner0 = new Scanner("(", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      TokenType tokenType0 = TokenType.OPERATOR;
      boolean boolean0 = parser0.peek(tokenType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("Consta1t naWe \"", mockFileInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseConditionalOrExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "onstant";
      StringReader stringReader0 = new StringReader("onstant");
      Scanner scanner0 = new Scanner("onstant", stringReader0);
      Parser parser0 = new Parser(scanner0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[1] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[2] = "org.codehaus.janino.source_debugging.enable";
      // Undeclared exception!
      try { 
        parser0.peekRead(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.parseConditionalExpression();
      Parser parser1 = new Parser(scanner0);
      // Undeclared exception!
      try { 
        parser1.peek((TokenType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cnsant g!n,me ");
      Scanner scanner0 = new Scanner("Cnsant g!n,me ", stringReader0);
      Location location0 = scanner0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("org.codehaus.janino.source_debugging.enable", location0);
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.COMPILATION_UNIT;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      java_ModifierArray0[1] = (Java.Modifier) java_AccessModifier0;
      try { 
        parser0.parseEnumDeclarationRest("interface", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Cnsant g!n,me ', Line 0, Column 0: Duplication access modifier \"org.codehaus.janino.source_debugging.enable\"
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Bz[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.parseLiteral();
      scanner0.produce();
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 4: ';' expected instead of '['
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\" has too many parameters (");
      Scanner scanner0 = new Scanner("xWWzo)t@BA", stringReader0, 427, 97);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseOptionalModifier();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'xWWzo)t@BA', Line 427, Column 98: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<b7?D:");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2997);
      Scanner scanner0 = new Scanner("cM`.@5NPIs<b7?D:", bufferedInputStream0);
      Scanner scanner1 = new Scanner("cM`.@5NPIs<b7?D:", bufferedInputStream0);
      Parser parser0 = new Parser(scanner1);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "O";
      StringReader stringReader0 = new StringReader("Ohep6R*dl<i&d,c+\"");
      Scanner scanner0 = new Scanner("O", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'O', Line 1, Column 17: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseSelector((Java.Atom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Parser$MethodDeclarationContext", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseAndExpression();
      parser0.parsePrimary();
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Parser$MethodDeclarationContext', Line 1, Column 5: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseOptionalModifier();
      parser0.parseOptionalModifier();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation((Java.Type) null);
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation((Java.Type) null);
      Location location0 = Location.NOWHERE;
      location0.toString();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("2R !z>ZHHT|", location0);
      parser0.parseOptionalModifier();
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[7];
      java_ModifierArray0[0] = null;
      java_ModifierArray0[1] = null;
      java_ModifierArray0[2] = (Java.Modifier) java_MarkerAnnotation1;
      java_ModifierArray0[3] = (Java.Modifier) java_MarkerAnnotation1;
      java_ModifierArray0[4] = (Java.Modifier) java_MarkerAnnotation1;
      java_ModifierArray0[5] = null;
      Java.MarkerAnnotation java_MarkerAnnotation2 = new Java.MarkerAnnotation((Java.Type) null);
      java_ModifierArray0[6] = (Java.Modifier) java_MarkerAnnotation2;
      try { 
        parser0.parseInterfaceDeclarationRest(".Q@C;Ui2'0&,kfz,", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member interface declaration', Line 1, Column 10: '{' expected instead of '\"default\"'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseModuleDeclarationRest((Java.Modifier[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 1: 'module' expected instead of '7F'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0);
      Scanner scanner1 = new Scanner((String) null, stringReader0);
      Parser parser0 = new Parser(scanner1);
      parser0.parseAndExpression();
      parser0.parsePrimary();
      parser0.parseEnumConstant();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[3];
      Java.Type java_Type0 = parser0.parseVoidOrType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_Type0);
      java_ModifierArray0[0] = (Java.Modifier) java_MarkerAnnotation0;
      Location location0 = parser0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier((String) null, location0);
      java_ModifierArray0[1] = (Java.Modifier) java_AccessModifier0;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Location location1 = tokenStreamImpl0.location();
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[2];
      java_AnnotationArray0[0] = (Java.Annotation) java_MarkerAnnotation0;
      java_AnnotationArray0[1] = (Java.Annotation) java_MarkerAnnotation0;
      Java.TypeArgument[] java_TypeArgumentArray0 = new Java.TypeArgument[6];
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_Type0);
      java_TypeArgumentArray0[0] = (Java.TypeArgument) java_ArrayType0;
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      java_TypeArgumentArray0[1] = (Java.TypeArgument) java_ReferenceType0;
      Java.Wildcard java_Wildcard0 = new Java.Wildcard(0, java_ReferenceType0);
      java_TypeArgumentArray0[2] = (Java.TypeArgument) java_Wildcard0;
      Java.Wildcard java_Wildcard1 = new Java.Wildcard((-198), java_ReferenceType0);
      java_TypeArgumentArray0[3] = (Java.TypeArgument) java_Wildcard1;
      Java.Wildcard java_Wildcard2 = new Java.Wildcard();
      java_TypeArgumentArray0[4] = (Java.TypeArgument) java_Wildcard2;
      Java.Wildcard java_Wildcard3 = new Java.Wildcard(47, java_Wildcard0.referenceType);
      java_TypeArgumentArray0[5] = (Java.TypeArgument) java_Wildcard3;
      Java.ReferenceType java_ReferenceType1 = new Java.ReferenceType(location1, java_AnnotationArray0, (String[]) null, java_TypeArgumentArray0);
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType1, java_AnnotationArray0[1]);
      java_ModifierArray0[2] = (Java.Modifier) java_SingleElementAnnotation0;
      try { 
        parser0.parseModuleDeclarationRest(java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 1, Column 35: 'module' expected instead of 'member'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.codehaus.janino.source_debugging.enable");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner1 = new Scanner("\"lvm.y>dl", mockFileInputStream0);
      Parser parser1 = new Parser(scanner1);
      parser0.parseVariableDeclarators();
      Location location0 = parser0.location();
      Java.TextBlock java_TextBlock0 = new Java.TextBlock(location0, (String) null);
      try { 
        parser1.parseSelector(java_TextBlock0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("hTWE7n{)YYp1~3x", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      parser0.parseModifiers();
      Parser parser1 = null;
      try {
        parser1 = new Parser((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      parser0.parseFieldDeclarationRest("short");
      scanner0.produce();
      parser0.location();
      Parser parser1 = new Parser(scanner0);
      parser0.parsePrimary();
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 11, Column 20: ')' expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      parser1.parseFieldDeclarationRest("NAMED_TYPE_DECLARATION");
      Scanner scanner1 = new Scanner("short", stringReader0, 359, 11);
      scanner1.produce();
      parser1.location();
      try { 
        parser0.parseFormalParameterListRest((Java.Type) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 11, Column 15: IDENTIFIER expected instead of '?'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      stringReader0.mark(95);
      Parser parser0 = new Parser(scanner0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      StringPattern[] stringPatternArray0 = new StringPattern[7];
      StringPattern stringPattern0 = new StringPattern("org.codehaus.janino.source_debugging.dir");
      stringPatternArray0[0] = stringPattern0;
      StringPattern stringPattern1 = new StringPattern(95, "org.codehaus.janino.source_debugging.keep");
      stringPatternArray0[1] = stringPattern1;
      StringPattern stringPattern2 = new StringPattern("interface");
      stringPatternArray0[2] = stringPattern2;
      StringPattern stringPattern3 = new StringPattern(99, "interface");
      stringPatternArray0[3] = stringPattern3;
      StringPattern stringPattern4 = new StringPattern("org.codehaus.janino.source_debugging.enable");
      stringPatternArray0[4] = stringPattern4;
      StringPattern stringPattern5 = new StringPattern("Constant name \"");
      stringPatternArray0[5] = stringPattern5;
      StringPattern stringPattern6 = new StringPattern(0, "PX!+_NHb^OeL^YhKdx");
      stringPatternArray0[6] = stringPattern6;
      FilterWarningHandler filterWarningHandler0 = new FilterWarningHandler(stringPatternArray0, (WarningHandler) null);
      parser0.setWarningHandler(filterWarningHandler0);
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      TokenType[] tokenTypeArray0 = new TokenType[6];
      TokenType tokenType0 = TokenType.END_OF_INPUT;
      tokenTypeArray0[0] = tokenType0;
      TokenType tokenType1 = TokenType.WHITE_SPACE;
      tokenTypeArray0[1] = tokenType1;
      TokenType tokenType2 = TokenType.IDENTIFIER;
      tokenTypeArray0[2] = tokenType2;
      TokenType tokenType3 = TokenType.CHARACTER_LITERAL;
      tokenTypeArray0[3] = tokenType3;
      TokenType tokenType4 = TokenType.FLOATING_POINT_LITERAL;
      tokenTypeArray0[4] = tokenType4;
      TokenType tokenType5 = TokenType.STRING_LITERAL;
      tokenTypeArray0[5] = tokenType5;
      parser0.peek(tokenTypeArray0);
      parser0.parsePrimary();
      try { 
        parser0.peekNextButOne();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h>RCT6<*RR99\"D!|d42");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      try { 
        parser0.parseConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 8: Unexpected token \"*\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      stringReader0.mark(6);
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0, 6, 6);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.dir', Line 6, Column 10: '->' expected instead of '{'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("@x.A6AXqbTx,=icJs ", stringReader0, 3284, 3284);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseShiftExpression();
      parser0.peekNextButOne();
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@x.A6AXqbTx,=icJs ', Line 3284, Column 3304: 'switch' expected instead of '\"default\"'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cnsant g!n,me ");
      Scanner scanner0 = new Scanner("Cnsant g!n,me ", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseClassDeclarationRest("Cnsant g!n,me ", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Cnsant g!n,me ', Line 1, Column 8: '{' expected instead of 'g'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseMultiplicativeExpression();
      scanner0.produce();
      parser0.setSourceVersion(138);
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member interface declaration', Line 1, Column 10: Expression \"\"default\"\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member annotation type declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member annotation type declaration", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      parser0.parseAdditiveExpression();
      Java.Atom java_Atom0 = parser0.parseInclusiveOrExpression();
      assertEquals("\"default\"", java_Atom0.toString());
      
      parser0.parseFormalParameterList();
      Java.AbstractCompilationUnit.ImportDeclaration java_AbstractCompilationUnit_ImportDeclaration0 = parser0.parseImportDeclarationBody();
      assertNotNull(java_AbstractCompilationUnit_ImportDeclaration0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Location location0 = new Location("", 105, (-388));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.codehaus.janino.source_debugging.dir";
      Java.TypeArgument[] java_TypeArgumentArray0 = new Java.TypeArgument[1];
      Java.Wildcard java_Wildcard0 = new Java.Wildcard();
      java_TypeArgumentArray0[0] = (Java.TypeArgument) java_Wildcard0;
      Java.ReferenceType java_ReferenceType0 = new Java.ReferenceType(location0, (Java.Annotation[]) null, stringArray0, java_TypeArgumentArray0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      Java.TypeParameter[] java_TypeParameterArray0 = new Java.TypeParameter[1];
      Java.ReferenceType[] java_ReferenceTypeArray0 = new Java.ReferenceType[3];
      java_ReferenceTypeArray0[0] = java_ReferenceType0;
      java_ReferenceTypeArray0[1] = java_ReferenceType0;
      java_ReferenceTypeArray0[2] = java_ReferenceType0;
      Java.TypeParameter java_TypeParameter0 = new Java.TypeParameter("org.codehaus.janino.source_debugging.keep", java_ReferenceTypeArray0);
      java_TypeParameterArray0[0] = java_TypeParameter0;
      // Undeclared exception!
      try { 
        parser0.parseMethodDeclarationRest("Ljava/lang/Boolean;", (Java.Modifier[]) null, java_TypeParameterArray0, (Java.Type) null, (String) null, false, parser_MethodDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.close();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0, (-802), 729);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("@onstant name \"", stringReader0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      Location location0 = null;
      Java.SimpleConstant java_SimpleConstant0 = new Java.SimpleConstant((Location) null, (byte)41);
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("@onstant name \"", java_SimpleConstant0);
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[1];
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onstant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Location location0 = new Location("", 105, (-388));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.codehaus.janino.source_debugging.dir";
      Java.TypeArgument[] java_TypeArgumentArray0 = new Java.TypeArgument[1];
      Java.Wildcard java_Wildcard0 = new Java.Wildcard();
      java_TypeArgumentArray0[0] = (Java.TypeArgument) java_Wildcard0;
      Java.ReferenceType java_ReferenceType0 = new Java.ReferenceType(location0, (Java.Annotation[]) null, stringArray0, java_TypeArgumentArray0);
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_ReferenceType0);
      Location location1 = java_MarkerAnnotation0.getLocation();
      Java.AnonymousClassDeclaration java_AnonymousClassDeclaration0 = new Java.AnonymousClassDeclaration(location1, java_ReferenceType0);
      try { 
        parser0.parseClassBody(java_AnonymousClassDeclaration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0, 2, 1779);
      Parser parser0 = new Parser(scanner0);
      Java.Type java_Type0 = parser0.parseType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_Type0);
      Location location0 = java_MarkerAnnotation0.getLocation();
      Java.TextBlock java_TextBlock0 = new Java.TextBlock(location0, "org.codehaus.janino.util.ClassFile$StringElementValue");
      try { 
        parser0.parseSelector(java_TextBlock0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member interface declaration', Line 2, Column 1780: Unexpected token '\"default\"' in selector
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser0 = new Parser(scanner0);
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseClassDeclarationRest("org.codehaus.janino.source_debugging.enable", (Java.Modifier[]) null, parser_ClassDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0, 2, 1779);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseClassDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member interface declaration', Line 2, Column 1789: '{' expected instead of '\"default\"'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.peek();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.codehaus.janino.source_debugging.enable");
      parser0.parseBracketsOpt();
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0, 0, 0);
      Java.Modifier[] java_ModifierArray0 = null;
      Scanner scanner2 = new Scanner("org.codehaus.janino.source_debugging.enable", stringReader0, (-1450), (-1450));
      Parser parser1 = new Parser(scanner2);
      String string0 = "KDJs)f[]^upy$(PwO*]";
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser1.parseClassDeclarationRest("#@]+$%Eu", (Java.Modifier[]) null, parser_ClassDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner1);
      parser0.parseVariableDeclarators();
      Location location0 = parser0.location();
      Java.TextBlock java_TextBlock0 = new Java.TextBlock(location0, "org.codehaus.janino.source_debugging.dir");
      parser0.parseSelector(java_TextBlock0);
      Parser parser1 = new Parser(scanner0);
      assertFalse(parser1.equals((Object)parser0));
      
      Java.EnumConstant java_EnumConstant0 = parser1.parseEnumConstant();
      assertEquals(0, java_EnumConstant0.anonymousClassCount);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "Contant nme \"";
      StringReader stringReader0 = new StringReader("Contant nme \"");
      Scanner scanner0 = new Scanner("Contant nme \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseOptionalModifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation((Java.Type) null);
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation((Java.Type) null);
      Location location0 = Location.NOWHERE;
      parser0.parseOptionalModifier();
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[5];
      java_ModifierArray0[1] = (Java.Modifier) java_MarkerAnnotation1;
      java_ModifierArray0[2] = null;
      java_ModifierArray0[3] = null;
      java_ModifierArray0[4] = null;
      try { 
        parser0.parseAnnotationTypeDeclarationRest("org.codehaus.janino.source_debugging.keep", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Contant nme \"', Line 1, Column 9: '{' expected instead of 'nme'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.ReferenceType[] java_ReferenceTypeArray0 = parser0.parseReferenceTypeList();
      assertEquals(1, java_ReferenceTypeArray0.length);
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      Location location0 = scanner0.location();
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[0];
      String[] stringArray0 = new String[0];
      Java.ReferenceType java_ReferenceType0 = new Java.ReferenceType(location0, java_AnnotationArray0, stringArray0, (Java.TypeArgument[]) null);
      Java.ElementValuePair[] java_ElementValuePairArray0 = new Java.ElementValuePair[8];
      Java.AmbiguousName java_AmbiguousName0 = new Java.AmbiguousName(location0, java_ReferenceType0.identifiers);
      Java.ArrayAccessExpression java_ArrayAccessExpression0 = new Java.ArrayAccessExpression(location0, java_AmbiguousName0, java_AmbiguousName0);
      Java.Lvalue java_Lvalue0 = java_ArrayAccessExpression0.toLvalue();
      Java.BinaryOperation java_BinaryOperation0 = new Java.BinaryOperation(location0, java_Lvalue0, ")", java_AmbiguousName0);
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("", java_BinaryOperation0);
      java_ElementValuePairArray0[0] = java_ElementValuePair0;
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair("YW", java_ArrayAccessExpression0);
      java_ElementValuePairArray0[1] = java_ElementValuePair1;
      Java.ElementValuePair java_ElementValuePair2 = new Java.ElementValuePair("-~!42R,JHi(", java_ElementValuePair1.elementValue);
      java_ElementValuePairArray0[2] = java_ElementValuePair2;
      Java.ElementValuePair java_ElementValuePair3 = new Java.ElementValuePair("", java_ElementValuePair0.elementValue);
      java_ElementValuePairArray0[3] = java_ElementValuePair3;
      Java.ElementValuePair java_ElementValuePair4 = new Java.ElementValuePair("org.codehaus.janino.source_debugging.dir", java_AmbiguousName0);
      java_ElementValuePairArray0[4] = java_ElementValuePair4;
      Java.ElementValuePair java_ElementValuePair5 = new Java.ElementValuePair("YW", java_ElementValuePair2.elementValue);
      java_ElementValuePairArray0[5] = java_ElementValuePair5;
      Java.ElementValuePair java_ElementValuePair6 = new Java.ElementValuePair("", java_Lvalue0);
      java_ElementValuePairArray0[6] = java_ElementValuePair6;
      Java.ElementValuePair java_ElementValuePair7 = new Java.ElementValuePair("i#t|(%7*hQ", java_ElementValuePair0.elementValue);
      java_ElementValuePairArray0[7] = java_ElementValuePair7;
      Java.NormalAnnotation java_NormalAnnotation0 = new Java.NormalAnnotation(java_ReferenceType0, java_ElementValuePairArray0);
      java_ModifierArray0[0] = (Java.Modifier) java_NormalAnnotation0;
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseAnnotationTypeDeclarationRest("org.codehaus.janino.source_debugging.keep", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      StringReader stringReader1 = new StringReader("org.codehaus.janino.source_debugging.dir");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.codehaus.janino.source_debugging.enable");
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.codehaus.janino.Parser$MethodDeclarationContext";
      stringArray0[1] = "Constant name \"";
      stringArray0[2] = "org.codehaus.janino.Parser$MethodDeclarationContext";
      stringArray0[3] = "Constant name \"";
      stringArray0[4] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[5] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[6] = "org.codehaus.janino.Parser$MethodDeclarationContext";
      parser0.peek(stringArray0);
      try { 
        parser0.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: '[' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CUonstan name \"");
      Scanner scanner0 = new Scanner("CUonstan name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseAnnotationTypeDeclarationRest("CUonstan name \"", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      StringReader stringReader1 = new StringReader("N4,F");
      StringReader stringReader2 = new StringReader("AnnotationDefault");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser0 = new Parser(scanner0);
      Java.Atom java_Atom0 = parser0.parseAdditiveExpression();
      assertEquals("7F", java_Atom0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringResource stringResource0 = new StringResource("", "DXbuJ");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("", inputStream0);
      Parser parser0 = new Parser(scanner0);
      parser0.peek("DXbuJ");
      parser0.parseConditionalExpression();
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: 'continue' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WSNR");
      Scanner scanner0 = new Scanner("WSNR", stringReader0, 11, 11);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.util.AbstractTraverser$9", pipedInputStream0);
      StringReader stringReader1 = new StringReader("WSNR");
      StringReader stringReader2 = new StringReader("import.doc_comment");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.peekNextButOne();
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseInterfaceDeclarationRest((String) null, (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseAnnotationTypeDeclarationRest("sX%jJ0@eaVn", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 1: IDENTIFIER expected instead of '7F'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      StringReader stringReader1 = new StringReader("org.codehaus.janino.source_debugging.dir");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.enable", stringReader0);
      Parser parser0 = new Parser(scanner1);
      Java.EnumConstant java_EnumConstant0 = parser0.parseEnumConstant();
      assertEquals("Constant", java_EnumConstant0.getClassName());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser0 = new Parser(scanner0);
      parser0.parseAdditiveExpression();
      try { 
        parser0.peekNextButOne();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parsePrimary();
      try { 
        parser0.peekNextButOne();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("catch");
      Scanner scanner0 = new Scanner("catch", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseCatchParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5k");
      Scanner scanner0 = new Scanner(", start offset ", stringReader0);
      String string0 = "|U00Er2n^{wz7{&";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|U00Er2n^{wz7{&");
      Parser parser0 = new Parser(scanner0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      parser0.parsePrimary();
      parser0.parseBracketsOpt();
      scanner0.location();
      stringReader0.close();
      scanner0.location();
      try { 
        parser0.parseDimExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File ', start offset ', Line 1, Column 2: '[' expected instead of 'k'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseMultiplicativeExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseFormalParameterListRest((Java.Type) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 1: IDENTIFIER expected instead of '7F'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 198);
      Scanner scanner0 = new Scanner("H&IR", bufferedInputStream0, (String) null);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.peek((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'H&IR', Line 1, Column 1: Invalid character input \"\u0006\" (character code 6)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Scanner scanner0 = new Scanner("@onstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onstant name \"', Line 1, Column 1: Unexpected token \"@\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("org.codehaus.commons.compiler.util.resource.StringResource", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      stringReader0.read();
      FileSystemHandling.shouldAllThrowIOExceptions();
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.dir");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      Parser parser2 = new Parser(scanner0);
      try { 
        parser2.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.commons.compiler.util.resource.StringResource', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("b8b", stringReader0);
      stringReader0.markSupported();
      Parser parser0 = new Parser(scanner0);
      parser0.parseVariableDeclarators();
      parser0.getScanner();
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'b8b', Line 1, Column 4: Unexpected token \".\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zrTorZIcRPbX-y1sF");
      StringReader stringReader0 = new StringReader("zrTorZIcRPbX-y1sF");
      Scanner scanner0 = new Scanner("zrTorZIcRPbX-y1sF", stringReader0, 7, (-134));
      Parser parser0 = new Parser(scanner0);
      parser0.parseVariableDeclarator();
      parser0.parseEqualityExpression();
      parser0.parseVariableDeclaratorRest("org.codehaus.janino.source_debugging.keep");
      try { 
        parser0.parseConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'zrTorZIcRPbX-y1sF', Line 7, Column -120: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("O0");
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hConstnt sm \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      parser0.parseFieldDeclarationRest("short");
      scanner0.produce();
      parser0.location();
      Parser parser1 = new Parser(scanner0);
      parser1.parseFormalParameterListRest((Java.Type) null);
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 11, Column 18: 'return' expected instead of 'U2'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      Scanner scanner0 = new Scanner((String) null, stringReader0, (-2089), 11);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      parser0.parseFieldDeclarationRest("=J=i<JW}p5?-M,");
      scanner0.produce();
      parser0.location();
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line -2089, Column 35: '[' expected instead of 'allowed'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringResource stringResource0 = new StringResource("do[8le", "mw");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("mw", inputStream0);
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("=L5.");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.peekNextButOne();
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      // Undeclared exception!
      try { 
        parser0.parseInterfaceDeclarationRest("org.codehaus.janino.source_debugging.enable", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      // Undeclared exception!
      try { 
        parser0.parseInterfaceDeclarationRest("o#}BhI'#Gf:py4rd.h", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("onstant");
      Scanner scanner0 = new Scanner("onstant", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      // Undeclared exception!
      try { 
        parser0.parseAnnotationTypeDeclarationRest("org.codehaus.janino.source_debugging.enable", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CUonstan name \"");
      Scanner scanner0 = new Scanner("CUonstan name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      // Undeclared exception!
      try { 
        parser0.parseAnnotationTypeDeclarationRest("CUonstan name \"", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      stringReader0.close();
      try { 
        parser0.parseMultiplicativeExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseConditionalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.BLOCK;
      // Undeclared exception!
      try { 
        parser0.parseEnumDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SNO: Enum declaration in unexpected context BLOCK
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      try { 
        parser0.parseEnumDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: '{' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      Scanner scanner0 = new Scanner("Consta1t naWe \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseOptionalModifier();
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      java_ModifierArray0[0] = null;
      try { 
        parser0.parseInterfaceDeclarationRest("])o|@;nIF1Rudj[", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Consta1t naWe \"', Line 1, Column 10: '{' expected instead of 'naWe'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringResource stringResource0 = new StringResource("", "DXbuJ");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("", inputStream0);
      Parser parser0 = new Parser(scanner0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.BLOCK;
      // Undeclared exception!
      try { 
        parser0.parseEnumDeclarationRest("", (Java.Modifier[]) null, parser_ClassDeclarationContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SNO: Enum declaration in unexpected context BLOCK
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      Parser parser0 = new Parser(scanner0);
      // Undeclared exception!
      try { 
        parser0.parseInterfaceDeclarationRest("Constant name \"", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseVariableDeclarators();
      scanner0.produce();
      Stack<InputStream> stack0 = new Stack<InputStream>();
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\" (see JL'S7 6.8.4)");
      Scanner scanner0 = new Scanner("\" (see JLS7 6.8.4)", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.read();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '\" (see JLS7 6.8.4)', Line 166, Column 12: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringResource stringResource0 = new StringResource("", "DXbuJ");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("", inputStream0);
      Parser parser0 = new Parser(scanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      parser0.parseConditionalExpression();
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: 'continue' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseCatchParameter();
      Scanner scanner1 = new Scanner("$DsRGU", stringReader0);
      Parser parser1 = new Parser(scanner1);
      try { 
        parser0.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      Scanner scanner1 = new Scanner("Ljava/lang/Double;", stringReader0, (-326), (-326));
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseInclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 166, Column 12: Unexpected token \"|\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      StringReader stringReader1 = new StringReader("org.codehaus.janino.source_debugging.dir");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.enable", stringReader0);
      Parser parser0 = new Parser(scanner1);
      parser0.parseReferenceTypeList();
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.enable', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-117), (byte)18);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      Scanner scanner0 = new Scanner("CW6W'iGH$Ftw@)a@]L=", pushbackInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      // Undeclared exception!
      try { 
        parser0.parseMultiplicativeExpression();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("%WX", stringReader0, 9, (-2390));
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("|U2?SK(J!/vVN&W3QP");
      Parser parser1 = new Parser(scanner0);
      Location location0 = parser1.location();
      Java.TextBlock java_TextBlock0 = new Java.TextBlock(location0, "Enum declaration must not have an EXTENDS clause");
      Java.SimpleConstant java_SimpleConstant0 = new Java.SimpleConstant(location0, 9);
      Stack<InputStream> stack0 = new Stack<InputStream>();
      try { 
        parser0.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '%WX', Line 9, Column -2389: '{' expected instead of '|'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseFormalParameter((boolean[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 11, Column 12: IDENTIFIER expected instead of '|'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CUonstant name \"");
      Scanner scanner0 = new Scanner("CUonstant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseCatchParameter();
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'CUonstant name \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.dir");
      parser0.location();
      StringReader stringReader1 = new StringReader("");
      try { 
        parser0.parseCatchParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: '(' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Scanner scanner1 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseFormalParameterList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseVariableDeclarators();
      Location location0 = parser0.location();
      assertEquals(1, location0.getColumnNumber());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<b7?D:");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Scanner scanner0 = new Scanner("cM`.@5NPIs<b7?D:", dataInputStream0);
      Parser parser0 = new Parser(scanner0);
      // Undeclared exception!
      try { 
        parser0.parseVoidOrType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("4\u0005X(r`,S5E01F:.y", mockFileInputStream0);
      TokenStream tokenStream0 = null;
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("b8b", stringReader0);
      Parser parser0 = new Parser(scanner0);
      stringReader0.mark(10);
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation((Java.Type) null);
      Parser parser1 = new Parser(scanner0);
      parser1.parseOptionalModifier();
      parser1.parseOptionalModifier();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenType[] tokenTypeArray0 = new TokenType[9];
      TokenType tokenType0 = TokenType.BOOLEAN_LITERAL;
      tokenTypeArray0[0] = tokenType0;
      TokenType tokenType1 = TokenType.FLOATING_POINT_LITERAL;
      tokenTypeArray0[1] = tokenType1;
      TokenType tokenType2 = TokenType.WHITE_SPACE;
      tokenTypeArray0[2] = tokenType2;
      TokenType tokenType3 = TokenType.KEYWORD;
      tokenTypeArray0[3] = tokenType3;
      TokenType tokenType4 = TokenType.CHARACTER_LITERAL;
      tokenTypeArray0[4] = tokenType4;
      TokenType tokenType5 = TokenType.TEXT_BLOCK;
      tokenTypeArray0[5] = tokenType5;
      TokenType tokenType6 = TokenType.BOOLEAN_LITERAL;
      tokenTypeArray0[6] = tokenType6;
      TokenType tokenType7 = TokenType.STRING_LITERAL;
      tokenTypeArray0[7] = tokenType7;
      TokenType tokenType8 = TokenType.CHARACTER_LITERAL;
      tokenTypeArray0[8] = tokenType8;
      tokenStreamImpl0.peekRead(tokenTypeArray0);
      Parser parser2 = new Parser(scanner0);
      String[] stringArray0 = parser0.parseQualifiedIdentifier();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      Scanner scanner0 = new Scanner("Invalid verification_type_info tag ", stringReader0, 6, 6);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Invalid verification_type_info tag ', Line 6, Column 7: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$EnumConstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseMultiplicativeExpression();
      try { 
        parser0.parseType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$EnumConstant', Line 1, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("", stringReader0, 1260, 2077);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.Java$CompilationUnit");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Java.TypeParameter[] java_TypeParameterArray0 = null;
      Location location0 = Location.NOWHERE;
      boolean boolean0 = false;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1260, Column 2078: IDENTIFIER expected instead of '7F'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFormalParameterListRest((Java.Type) null);
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: 'return' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringResource stringResource0 = new StringResource("", "DXbuJ");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("", inputStream0);
      StringReader stringReader0 = new StringReader("{B 2I0RF -iB.\"Vm");
      Scanner scanner1 = new Scanner("DXbuJ", stringReader0, 5534, 5534);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("Access modifier(s) ");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser1.parseArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'DXbuJ', Line 5534, Column 5538: ',' expected instead of '2'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@=NPIs<b7?D:");
      Scanner scanner0 = new Scanner("cM`.@=NPIs<b7?D:", stringReader0);
      StringReader stringReader1 = new StringReader("{B 20RF -iB.\"Vm");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.keep", stringReader1, 12, 12);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner1);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.keep");
      try { 
        parser0.parseArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.keep', Line 12, Column 16: ',' expected instead of '20'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.EnumConstant java_EnumConstant0 = parser0.parseEnumConstant();
      assertEquals(0, java_EnumConstant0.anonymousClassCount);
      
      try { 
        parser0.parseVariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 56, 32);
      Scanner scanner1 = new Scanner("Ljava/lang/Double;", stringReader0, 428, 56);
      Parser parser0 = new Parser(scanner1);
      try { 
        parser0.parseExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Ljava/lang/Double;', Line 428, Column 60: '->' expected instead of '{'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0, 32, 32);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseUnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.dir', Line 32, Column 36: '->' expected instead of '{'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Scanner scanner0 = new Scanner("Pr*-!BwtQd)1j#", byteArrayInputStream0, (String) null);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Pr*-!BwtQd)1j#', Line 1, Column 3: Invalid character input \"\uFFFD\" (character code 65533)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("G4b``(?as", stringReader0, 66, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseOptionalModifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|U2?SK(J!/vVN&W3QP";
      stringArray0[1] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[2] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[3] = ">>>";
      stringArray0[4] = "'C91s*zxTH5M";
      stringArray0[5] = "G4b``(?as";
      stringArray0[6] = "|U2?SK(J!/vVN&W3QP";
      stringArray0[7] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[8] = "org.codehaus.janino.source_debugging.dir";
      Java.AmbiguousName java_AmbiguousName0 = new Java.AmbiguousName((Location) null, stringArray0);
      Java.Type java_Type0 = java_AmbiguousName0.toType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_Type0);
      Parser parser1 = new Parser(scanner0);
      parser0.parseOptionalModifier();
      Java.Type java_Type1 = parser1.parseVoidOrType();
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation(java_Type1);
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      java_ModifierArray0[0] = null;
      java_ModifierArray0[1] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[2] = (Java.Modifier) java_MarkerAnnotation1;
      java_ModifierArray0[3] = null;
      try { 
        parser1.parseEnumDeclarationRest("0U`jmC?QjBh", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'G4b``(?as', Line 66, Column 15: IDENTIFIER expected instead of '?'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      scanner0.produce();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Scanner scanner1 = new Scanner("Mo", bufferedInputStream0);
      scanner1.produce();
      Parser parser1 = new Parser(scanner1, tokenStreamImpl0);
      try { 
        parser0.parseUnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 5: ']' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      StringReader stringReader1 = new StringReader("8DQ^l}[?{VaQFv");
      Scanner scanner1 = new Scanner("8DQ^l}[?{VaQFv", stringReader1, 10, 3680);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner1);
      Scanner scanner2 = new Scanner("C43", stringReader0);
      Scanner scanner3 = new Scanner(":", stringReader1, 95, 51);
      scanner3.produce();
      Parser parser1 = new Parser(scanner3);
      parser0.parseExpressionList();
      try { 
        parser0.parseTryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '8DQ^l}[?{VaQFv', Line 10, Column 3684: 'try' expected instead of '}'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zPb^O2swPww9+");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 13: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      String string0 = "";
      Scanner scanner0 = new Scanner("", stringReader0, 95, 95);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseVoidOrType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, 5534, 5534);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("?cAY1");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseMethodDeclarationRest("", java_ModifierArray0, (Java.TypeParameter[]) null, java_SimpleType0, "", true, parser_MethodDeclarationContext0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("onstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("onstant");
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, (-1653), 5534);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("p");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseMethodDeclarationRest("", java_ModifierArray0, (Java.TypeParameter[]) null, java_SimpleType0, "", false, parser_MethodDeclarationContext0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringResource stringResource0 = new StringResource("", "DXbuJ");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("", inputStream0);
      Parser parser0 = new Parser(scanner0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      parser0.parseAndExpression();
      parser0.peekNextButOne();
      try { 
        parser0.parseLabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      Scanner scanner0 = new Scanner("%", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseFormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '%', Line 1, Column 1: '(' expected instead of '%'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      boolean boolean0 = true;
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseForStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseExpressionList();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[9];
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser1.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 166, Column 20: ')' expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      scanner0.produce();
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 11, Column 20: ')' expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UeDtW(\"@', Line 1, Column 7: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[9];
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_ReferenceType0);
      java_ModifierArray0[0] = (Java.Modifier) java_MarkerAnnotation0;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser1.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 166, Column 20: ')' expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      stringReader0.read();
      Parser parser1 = new Parser(scanner0);
      parser1.peek("org.codehaus.janino.source_debugging.dir");
      parser0.parseLiteral();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 4: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      StringReader stringReader1 = new StringReader("8DQ^l}[?{VaQFv");
      Scanner scanner0 = new Scanner("Hh+Y", stringReader0, (-3954), (-1095));
      scanner0.setIgnoreWhiteSpace(true);
      Parser parser0 = new Parser(scanner0);
      Scanner scanner1 = new Scanner("n1PC.i26(", stringReader0);
      TokenType tokenType0 = TokenType.FLOATING_POINT_LITERAL;
      parser0.peekRead(tokenType0);
      Parser parser1 = new Parser(scanner0);
      parser0.parseArgumentList();
      try { 
        parser1.parseAssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Hh+Y', Line -3954, Column -1074: 'assert' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a(7HTqv!]ut");
      Scanner scanner0 = new Scanner("a(7HTqv!]ut", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.enable");
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'a(7HTqv!]ut', Line 1, Column 4: ')' expected instead of 'HTqv'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0, 122, 272);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseExpressionStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 122, Column 293: ';' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, 5534, (-1653));
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("?cAY1");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      try { 
        parser0.parseMethodDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, "import static ", false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: '(' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, 5534, 5534);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("?cAY1");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      try { 
        parser0.parseMethodDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, "org.codehaus.janino.source_debugging.keep", false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: '(' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0, 32, 32);
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseMethodDeclarationRest("org.codehaus.janino.source_debugging.keep", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, ")ehWaTj.t", false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.dir', Line 32, Column 38: Unexpected token \".\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      stringReader0.read();
      Parser parser1 = new Parser(scanner0);
      parser0.parseLiteral();
      try { 
        parser1.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 4: ']' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      Scanner scanner0 = new Scanner("Consta1t naWe \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Consta1t naWe \"', Line 1, Column 1: 'for' expected instead of 'Consta1t'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseModifiers();
      parser0.parseBracketsOpt();
      scanner0.produce();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      boolean boolean0 = true;
      try { 
        parser0.parseForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: 'for' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]9$~Qs~}u??");
      Scanner scanner0 = new Scanner("_7v|h", stringReader0, 1408, 1408);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseEqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '_7v|h', Line 1408, Column 1409: Unexpected token \"]\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("", stringReader0, 11, 11);
      TokenType tokenType0 = TokenType.END_OF_INPUT;
      TokenType tokenType1 = TokenType.BOOLEAN_LITERAL;
      TokenType tokenType2 = TokenType.STRING_LITERAL;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenType[] tokenTypeArray0 = new TokenType[4];
      tokenTypeArray0[0] = tokenType2;
      tokenTypeArray0[1] = tokenType1;
      tokenTypeArray0[2] = tokenType0;
      tokenTypeArray0[3] = tokenType1;
      tokenStreamImpl0.peekRead(tokenTypeArray0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseQualifiedIdentifier();
      try { 
        parser0.parseEqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 11, Column 15: Unexpected token \"?\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.enable");
      parser0.parseRelationalExpression();
      try { 
        parser0.parseArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      StringReader stringReader1 = new StringReader("8DQ^l}[?{VaQFv");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader1, 122, 272);
      scanner1.setIgnoreWhiteSpace(false);
      Parser parser0 = new Parser(scanner0);
      Scanner scanner2 = new Scanner("org.codehaus.janino.source_debugging.keep", stringReader0);
      Parser parser1 = new Parser(scanner1);
      try { 
        parser0.parseArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      Scanner scanner0 = new Scanner("Consta1t naWe \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      stringReader0.close();
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseOptionalModifier();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CUonstant name \"");
      Scanner scanner0 = new Scanner("CUonstant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseCatchParameter();
      try { 
        parser0.parseFieldDeclarationRest("CUonstant name \"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'CUonstant name \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl1);
      Scanner scanner1 = new Scanner("", stringReader0);
      Parser parser1 = new Parser(scanner1);
      StringPattern[] stringPatternArray0 = new StringPattern[0];
      FilterWarningHandler filterWarningHandler0 = new FilterWarningHandler(stringPatternArray0, (WarningHandler) null);
      parser1.setWarningHandler(filterWarningHandler0);
      parser1.parseExpressionList();
      try { 
        parser1.parseTryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 21: 'try' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("|U2?SKpJ/VN&WQP");
      Scanner scanner0 = new Scanner("8e$SD1jdBRnj-j+.cgl", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      StringPattern[] stringPatternArray0 = new StringPattern[5];
      StringPattern stringPattern0 = new StringPattern("*=");
      stringPatternArray0[0] = stringPattern0;
      StringPattern stringPattern1 = new StringPattern("8e$SD1jdBRnj-j+.cgl");
      stringPatternArray0[1] = stringPattern1;
      StringPattern stringPattern2 = new StringPattern((String) null);
      stringPatternArray0[2] = stringPattern2;
      StringPattern stringPattern3 = new StringPattern("");
      stringPatternArray0[3] = stringPattern3;
      StringPattern stringPattern4 = new StringPattern((-151), ":D[ky.1mgH3`SoZrb,0");
      stringPatternArray0[4] = stringPattern4;
      WarningHandler warningHandler0 = mock(WarningHandler.class, new ViolatedAssumptionAnswer());
      FilterWarningHandler filterWarningHandler0 = new FilterWarningHandler(stringPatternArray0, warningHandler0);
      parser0.setWarningHandler(filterWarningHandler0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringResource stringResource0 = new StringResource("", "DXbuJ");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("", inputStream0);
      StringReader stringReader0 = new StringReader("{B 2I0RF -iB.\"Vm");
      Scanner scanner1 = new Scanner("DXbuJ", stringReader0, 5534, 5534);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("Access modifier(s) ");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      try { 
        parser0.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'DXbuJ', Line 5534, Column 5538: IDENTIFIER expected instead of '2'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("F8tC`Mx#WewbkTt", stringReader0, 46, 46);
      Parser parser0 = new Parser(scanner0);
      parser0.parseExclusiveOrExpression();
      try { 
        parser0.parseBlock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'F8tC`Mx#WewbkTt', Line 46, Column 67: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "null";
      StringReader stringReader0 = new StringReader("null");
      String string1 = "$VALUES";
      StringReader stringReader1 = new StringReader("$VALUES");
      int int0 = 11;
      Scanner scanner0 = new Scanner("null", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseUnaryExpression();
      String string2 = "Abstract or native method must not have a body";
      scanner0.produce();
      StringReader stringReader2 = new StringReader("Abstract or native method must not have a body");
      try { 
        parser0.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'null', Line 11, Column 12: '[' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: 'assert' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      StringReader stringReader1 = new StringReader("8DQ^l}[?{VaQFv");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader1, 122, 272);
      scanner1.setIgnoreWhiteSpace(false);
      Parser parser0 = new Parser(scanner0);
      Scanner scanner2 = new Scanner("org.codehaus.janino.source_debugging.keep", stringReader0);
      Parser parser1 = new Parser(scanner1);
      parser1.parseExpressionList();
      try { 
        parser1.parseAssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.dir', Line 122, Column 275: 'assert' expected instead of 'Q'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("b8b", stringReader0);
      Parser parser0 = new Parser(scanner0);
      stringReader0.mark(10);
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation((Java.Type) null);
      Parser parser1 = new Parser(scanner0);
      parser1.parseOptionalModifier();
      parser1.parseOptionalModifier();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      java_ModifierArray0[2] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[0] = (Java.Modifier) java_MarkerAnnotation0;
      java_ModifierArray0[2] = null;
      java_ModifierArray0[3] = null;
      boolean[] booleanArray0 = new boolean[0];
      try { 
        parser0.parseFormalParameterRest(java_ModifierArray0, (Java.Type) null, booleanArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'b8b', Line 1, Column 5: '.' expected instead of 'codehaus'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("b8b", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      parser1.parseOptionalModifier();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[6];
      boolean[] booleanArray0 = new boolean[1];
      try { 
        parser0.parseFormalParameterRest(java_ModifierArray0, (Java.Type) null, booleanArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'b8b', Line 1, Column 5: '.' expected instead of 'codehaus'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseVariableDeclarators();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 1: IDENTIFIER expected instead of '7F'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0);
      Parser.ClassDeclarationContext.values();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[3] = "";
      stringArray0[4] = "org.codehaus.janino.source_debugging.keep";
      parser0.peekRead(stringArray0);
      try { 
        parser0.parseIfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'if' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringReader stringReader0 = new StringReader("static ");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseFormalParameterRest(java_ModifierArray0, (Java.Type) null, (boolean[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: IDENTIFIER expected instead of 'static'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      scanner0.produce();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.keep", stringReader0);
      parser0.parseOptionalModifier();
      parser0.location();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      parser0.parseFormalParameterRest(java_ModifierArray0, (Java.Type) null, booleanArray0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 4: IDENTIFIER expected instead of '['
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[3];
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation((Java.Type) null);
      java_ModifierArray0[0] = (Java.Modifier) java_MarkerAnnotation0;
      parser0.parseOptionalModifier();
      java_ModifierArray0[1] = null;
      parser0.parseOptionalModifier();
      java_ModifierArray0[2] = null;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      try { 
        parser0.parseFormalParameterRest(java_ModifierArray0, (Java.Type) null, booleanArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseVariableInitializer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseLabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 4: ':' expected instead of '.'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseInterfaceBody((Java.InterfaceDeclaration) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: '{' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("5Z8z%t'#dQZ`{", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseMultiplicativeExpression();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      scanner0.setIgnoreWhiteSpace(true);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Location location0 = scanner0.location();
      Java.ConditionalExpression java_ConditionalExpression0 = new Java.ConditionalExpression(location0, java_AmbiguousName0, java_AmbiguousName0, java_AmbiguousName0);
      Java.RvalueMemberType java_RvalueMemberType0 = new Java.RvalueMemberType(location0, java_AmbiguousName0, "org.codehaus.janino.source_debugging.keep");
      Java.ReferenceType java_ReferenceType0 = (Java.ReferenceType)java_AmbiguousName0.toType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_ReferenceType0);
      Java.ArrayAccessExpression java_ArrayAccessExpression0 = new Java.ArrayAccessExpression(location0, java_ConditionalExpression0, java_AmbiguousName0);
      Java.ArrayAccessExpression java_ArrayAccessExpression1 = (Java.ArrayAccessExpression)java_ArrayAccessExpression0.toLvalue();
      Java.RvalueMemberType java_RvalueMemberType1 = new Java.RvalueMemberType(location0, java_ArrayAccessExpression1, "|");
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation(java_RvalueMemberType1);
      Location location1 = new Location("=V~N: cE/ maP%e", 4, 44);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Java.MemberAnnotationTypeDeclaration java_MemberAnnotationTypeDeclaration0 = new Java.MemberAnnotationTypeDeclaration(location1, "|", java_ModifierArray0, "ZoQj2c9/I,j}[=6");
      Java.SimpleConstant java_SimpleConstant0 = new Java.SimpleConstant(location1);
      java_SimpleConstant0.setEnclosingScope(java_MemberAnnotationTypeDeclaration0);
      try { 
        parser0.parseInterfaceBody(java_MemberAnnotationTypeDeclaration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '5Z8z%t'#dQZ`{', Line 1, Column 21: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("INTERFACE_DECLARATION");
      Scanner scanner0 = new Scanner("", stringReader0, (-1116), 1931);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      Parser parser1 = new Parser(scanner0);
      parser1.read();
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_ReferenceType0);
      Location location0 = scanner0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("INTERFACE_DECLARATION", location0);
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType0, java_MarkerAnnotation0);
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("to", java_SingleElementAnnotation0);
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair("", java_MarkerAnnotation0);
      Java.ElementValuePair java_ElementValuePair2 = new Java.ElementValuePair("org.codehaus.janino.source_debugging.keep", java_ElementValuePair0.elementValue);
      parser1.parseOptionalModifier();
      Java.FloatingPointLiteral java_FloatingPointLiteral0 = new Java.FloatingPointLiteral(location0, "INTERFACE_DECLARATION");
      Java.SingleElementAnnotation java_SingleElementAnnotation1 = new Java.SingleElementAnnotation(java_ReferenceType0, java_ElementValuePair1.elementValue);
      Java.PackageDeclaration java_PackageDeclaration0 = new Java.PackageDeclaration(location0, "INTERFACE_DECLARATION");
      try { 
        parser0.parseSelector(java_ReferenceType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line -1116, Column 1932: Unexpected token 'end-of-input' in selector
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0, (-3168), 2);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("W,_l}=TD+.W6SNb]Sg");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      try { 
        parser0.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line -3168, Column 3: '{' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehausvjanino.sava$SynchronizedStatement");
      StringReader stringReader1 = new StringReader("c_}]");
      Scanner scanner0 = new Scanner("c_}]", stringReader1, 56, 4);
      Parser parser0 = new Parser(scanner0);
      parser0.parseExclusiveOrExpression();
      try { 
        parser0.parseExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'c_}]', Line 56, Column 7: Unexpected token \"}\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("", stringReader0, 11, 11);
      TokenType tokenType0 = TokenType.END_OF_INPUT;
      TokenType tokenType1 = TokenType.BOOLEAN_LITERAL;
      TokenType tokenType2 = TokenType.STRING_LITERAL;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenType[] tokenTypeArray0 = new TokenType[4];
      tokenTypeArray0[0] = tokenType2;
      tokenTypeArray0[1] = tokenType1;
      tokenTypeArray0[2] = tokenType0;
      tokenTypeArray0[3] = tokenType1;
      tokenStreamImpl0.peekRead(tokenTypeArray0);
      Parser parser0 = new Parser(scanner0);
      String[] stringArray0 = parser0.parseQualifiedIdentifier();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      stringReader0.read();
      Parser parser1 = new Parser(scanner0);
      parser0.parseLiteral();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 3: IDENTIFIER expected instead of '['
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ai");
      Scanner scanner0 = new Scanner("?|Pi0Hw", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseBracketsOpt();
      parser0.parseExpression();
      try { 
        parser0.parseMethodDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '?|Pi0Hw', Line 1, Column 1: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseImportDeclarationBody();
      try { 
        parser0.parseLabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UeDtW(\"@', Line 1, Column 6: IDENTIFIER expected instead of '('
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Location location0 = Location.NOWHERE;
      location0.toString();
      Parser.compileException("aDykw?ogKjb i?va<d", location0);
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, 1035, 1035);
      Parser parser0 = new Parser(scanner0);
      parser0.parseAbstractCompilationUnit();
      try { 
        parser0.parseLabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cnsant g!n,me ");
      Scanner scanner0 = new Scanner("Cnsant g!n,me ", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.BLOCK;
      try { 
        parser0.parseClassDeclarationRest("Cnsant g!n,me ", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Cnsant g!n,me ', Line 1, Column 8: '{' expected instead of 'g'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[6];
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_ReferenceType0);
      java_ModifierArray0[0] = (Java.Modifier) java_MarkerAnnotation0;
      Location location0 = scanner0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("|", location0);
      java_ModifierArray0[1] = (Java.Modifier) java_AccessModifier0;
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType0, java_MarkerAnnotation0);
      java_ModifierArray0[2] = (Java.Modifier) java_SingleElementAnnotation0;
      Java.ElementValuePair[] java_ElementValuePairArray0 = new Java.ElementValuePair[5];
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("org.codehaus.janino.source_debugging.keep", java_SingleElementAnnotation0);
      java_ElementValuePairArray0[0] = java_ElementValuePair0;
      java_ElementValuePairArray0[1] = java_ElementValuePair0;
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair("F$a^7I4;", java_SingleElementAnnotation0);
      java_ElementValuePairArray0[2] = java_ElementValuePair1;
      Java.ElementValuePair java_ElementValuePair2 = new Java.ElementValuePair("m_a", java_MarkerAnnotation0);
      java_ElementValuePairArray0[3] = java_ElementValuePair2;
      Java.ElementValuePair java_ElementValuePair3 = new Java.ElementValuePair("|U2?SK(J!/vVN&W3QP", java_MarkerAnnotation0);
      java_ElementValuePairArray0[4] = java_ElementValuePair3;
      parser0.parseOptionalModifier();
      java_ModifierArray0[4] = null;
      Java.FloatingPointLiteral java_FloatingPointLiteral0 = new Java.FloatingPointLiteral(location0, "F$a^7I4;");
      Java.SingleElementAnnotation java_SingleElementAnnotation1 = new Java.SingleElementAnnotation(java_ReferenceType0, java_FloatingPointLiteral0);
      java_ModifierArray0[5] = (Java.Modifier) java_SingleElementAnnotation1;
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation(java_SingleElementAnnotation1.type);
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.BLOCK;
      try { 
        parser0.parseClassDeclarationRest("|U2?SK(J!/vVN&W3QP", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 166, Column 15: IDENTIFIER expected instead of '?'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseModifiers();
      parser0.parseBracketsOpt();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser0 = new Parser(scanner0);
      Java.Atom java_Atom0 = parser0.parseAdditiveExpression();
      try { 
        parser0.read(((Java.AmbiguousName) java_Atom0).identifiers);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: One of 'Constant' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cM`.@5NPIs<7?D:";
      stringArray0[1] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[2] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[3] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[4] = "org.codehaus.janino.source_debugging.enable";
      try { 
        parser0.read(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 1: One of 'cM`.@5NPIs<7?D: org.codehaus.janino.source_debugging.enable org.codehaus.janino.source_debugging.dir org.codehaus.janino.source_debugging.keep org.codehaus.janino.source_debugging.enable' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      Parser parser0 = new Parser(scanner0);
      scanner0.location();
      parser0.peek();
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: ';' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member annotation type declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member annotation type declaration", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Atom java_Atom0 = parser0.parseConditionalOrExpression();
      try { 
        parser0.parseSelector(java_Atom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member annotation type declaration', Line 1, Column 1: Unexpected token '\"default\"' in selector
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$TypeParameter", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.AbstractCompilationUnit java_AbstractCompilationUnit0 = parser0.parseAbstractCompilationUnit();
      assertNotNull(java_AbstractCompilationUnit0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseDimExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: '[' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner1);
      try { 
        parser0.parseDimExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 1: '[' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H\"");
      Scanner scanner0 = new Scanner("H\"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'H\"', Line 1, Column 2: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseCatchParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 1: IDENTIFIER expected instead of '7F'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x6CuIP");
      Scanner scanner0 = new Scanner("x6CuIP", stringReader0);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0);
      String string0 = "oael";
      parser0.compileException("oael");
      try { 
        parser0.parseCatchParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'x6CuIP', Line 1, Column 1: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onVstant name \"");
      Scanner scanner0 = new Scanner("@onVstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onVstant name \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseLabeledStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      TokenType tokenType0 = TokenType.C_PLUS_PLUS_STYLE_COMMENT;
      try { 
        parser0.peekRead(tokenType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("Wt&e");
      TokenType tokenType0 = TokenType.FLOATING_POINT_LITERAL;
      parser0.peekNextButOne(tokenType0);
      parser0.peekRead(tokenType0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseFieldDeclarationRest("native");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(41);
      Scanner scanner0 = new Scanner("onVstant", pipedInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseBreakStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      Scanner scanner0 = new Scanner("eQRZpwhGg/ &Yy", pipedInputStream0);
      boolean boolean0 = false;
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseModifiers();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3Q");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      Token token0 = parser0.read();
      parser0.parseRelationalExpression();
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      parser0.parseFieldDeclarationRest("Class or interface name \"");
      parser1.peekNextButOne(token0.type);
      try { 
        parser1.parseIfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 18: 'if' expected instead of 'SK'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CUonstant name \"");
      Scanner scanner0 = new Scanner("CUonstant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      TokenType tokenType0 = TokenType.IDENTIFIER;
      parser0.peekNextButOne(tokenType0);
      parser0.parsePrimary();
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'CUonstant name \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      Scanner scanner0 = new Scanner("null", stringReader0, 1175, 272);
      Parser parser0 = new Parser(scanner0);
      parser0.parseVariableInitializer();
      stringReader0.reset();
      Parser parser1 = new Parser(scanner0);
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'null', Line 1175, Column 273: 'return' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      Scanner scanner0 = new Scanner("null", stringReader0, 1175, 272);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">>>";
      stringArray0[1] = "'C91s*zxTH5M";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      Scanner scanner1 = new Scanner("null", stringReader0);
      Parser parser1 = new Parser(scanner0);
      parser1.parseExpressionList();
      try { 
        parser0.parseTryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'null', Line 1175, Column 273: 'try' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("Y@kgd");
      Scanner scanner0 = new Scanner("Y@kgd", stringReader0);
      Parser parser0 = new Parser(scanner0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " 0<X*%7~0<#WSNSua");
      parser0.location();
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseConditionalOrExpression();
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseQualifiedIdentifier();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CUonstant name \"");
      Scanner scanner0 = new Scanner("CUonstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'CUonstant name \"', Line 1, Column 1: Literal expected
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      parser0.parseRelationalExpression();
      boolean boolean0 = false;
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseWhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 16: 'while' expected instead of 'SK'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseWhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 1: 'while' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7[");
      Scanner scanner0 = new Scanner("7[", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7[', Line 1, Column 2: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^}\"\"(zT0F5jc4wl ");
      int int0 = 46;
      Scanner scanner0 = new Scanner("^}\"\"(zT0F5jc4wl ", stringReader0, 46, 46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '^}\"\"(zT0F5jc4wl ', Line 46, Column 47: Invalid character input \"\" (character code 127)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      StringReader stringReader1 = new StringReader("org.codehaus.janino.source_debugging.dir");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.peek("org.codehaus.janino.Java$SynchronizedStatement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      parser0.parseRelationalExpression();
      boolean boolean0 = false;
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      scanner0.produce();
      stringReader0.read();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser0.parseExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 15: Unexpected token \"?\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("", stringReader1);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl1);
      scanner0.location();
      try { 
        parser0.parsePackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: 'package' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      StringReader stringReader1 = new StringReader("org.codehaus.janino.source_debugging.dir");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      scanner1.produce();
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Scanner scanner2 = new Scanner("org.codehaus.janino.source_debugging.keep", stringReader1);
      Parser parser1 = new Parser(scanner2, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser1.parseMethodBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("Wt&e");
      TokenType tokenType0 = TokenType.FLOATING_POINT_LITERAL;
      parser0.peekNextButOne(tokenType0);
      try { 
        parser0.parseIfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 4: 'if' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member interface declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member interface declaration", stringReader0, 2, 1779);
      Parser parser0 = new Parser(scanner0);
      TokenType tokenType0 = TokenType.TEXT_BLOCK;
      parser0.peekNextButOne(tokenType0);
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member interface declaration', Line 2, Column 1789: 'return' expected instead of 'Modifier'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseCatchParameter();
      Java.Type java_Type0 = null;
      try { 
        parser0.parseBracketsOpt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("Wt&e");
      scanner0.produce();
      Stack<InputStream> stack0 = new Stack<InputStream>();
      try { 
        parser0.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 4: '{' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("UeDtW(\"@");
      try { 
        parser0.parseArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UeDtW(\"@', Line 1, Column 1: '{' expected instead of 'UeDtW'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseImportDeclarationBody();
      try { 
        parser0.parseUnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UeDtW(\"@', Line 1, Column 7: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("", stringReader0, 11, 11);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseUnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 11, Column 12: Unexpected token \"|\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constantjnmez \"");
      Scanner scanner0 = new Scanner("Constantjnmez \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      // Undeclared exception!
      try { 
        parser0.parseFieldDeclarationRest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, 43, (-814));
      Parser parser0 = new Parser(scanner0);
      Java.VariableDeclarator java_VariableDeclarator0 = parser0.parseVariableDeclaratorRest("");
      assertEquals(0, java_VariableDeclarator0.brackets);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.setSourceVersion(2147483645);
      try { 
        parser0.parseThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 1: 'throw' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 0, Column 0: '[' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      Scanner scanner0 = new Scanner("%", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '%', Line 1, Column 1: '[' expected instead of '%'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      stringReader0.mark(5);
      Scanner scanner0 = new Scanner("org.co:ehaus.janino.source_debugging.dir", stringReader0, 5, 5);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseConditionalAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.co:ehaus.janino.source_debugging.dir', Line 5, Column 9: '->' expected instead of '{'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.ClassLiteral java_ClassLiteral0 = new Java.ClassLiteral((Location) null, java_ReferenceType0);
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair((String) null, java_ClassLiteral0);
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair((String) null, java_ClassLiteral0);
      Java.ElementValuePair java_ElementValuePair2 = new Java.ElementValuePair("org.codehaus.janino.Java$SynchronizedStatement", java_ElementValuePair1.elementValue);
      Java.ElementValuePair java_ElementValuePair3 = new Java.ElementValuePair("", java_ElementValuePair2.elementValue);
      Java.InferredLambdaParameters java_InferredLambdaParameters0 = new Java.InferredLambdaParameters(java_ReferenceType0.identifiers);
      Java.LambdaExpression java_LambdaExpression0 = new Java.LambdaExpression((Location) null, java_InferredLambdaParameters0, (Java.LambdaBody) null);
      Java.ElementValuePair java_ElementValuePair4 = new Java.ElementValuePair((String) null, java_LambdaExpression0);
      Java.NormalAnnotation java_NormalAnnotation0 = new Java.NormalAnnotation(java_ReferenceType0, (Java.ElementValuePair[]) null);
      java_NormalAnnotation0.getType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_NormalAnnotation0.type);
      parser0.parseOptionalModifier();
      Java.FloatingPointLiteral java_FloatingPointLiteral0 = new Java.FloatingPointLiteral((Location) null, "F$a^7I4;");
      Java.SimpleConstant java_SimpleConstant0 = new Java.SimpleConstant((Location) null, false);
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType0, java_SimpleConstant0);
      try { 
        parser0.parsePackageDeclarationRest("w)w", java_ReferenceType0.annotations);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$SynchronizedStatement', Line 1, Column 21: 'package' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janio.Java$Synch&onizedStatement");
      Scanner scanner0 = new Scanner("Q=[c", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Q=[c', Line 1, Column 30: Expression \"java.lang.String@0000000015.codehaus.janio.Java$Synch & java.lang.String@0000000021\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[6];
      stringReader0.skip(11);
      Java.ElementValuePair[] java_ElementValuePairArray0 = new Java.ElementValuePair[5];
      Scanner scanner0 = new Scanner((String) null, stringReader0, 3, 11);
      Parser parser0 = new Parser(scanner0);
      Java.Atom java_Atom0 = parser0.parseAssignmentExpression();
      assertNotNull(java_Atom0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      StringReader stringReader1 = new StringReader("org.codehaus.janino.source_debugging.dir");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      TokenType tokenType0 = TokenType.FLOATING_POINT_LITERAL;
      // Undeclared exception!
      try { 
        parser0.peekNextButOne(tokenType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      stringReader0.skip(0L);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseBreakStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("@onstant name \"", stringReader0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Scanner scanner1 = new Scanner("onstant", mockFileInputStream0);
      Parser parser0 = new Parser(scanner1);
      try { 
        parser0.parseReferenceTypeList();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("@onstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onstant name \"', Line 1, Column 1: ';' expected instead of '@'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XCt~4~T.6]cX)G*fw5");
      stringReader0.markSupported();
      Scanner scanner0 = new Scanner("v", stringReader0, (-2909), 3519);
      Location location0 = scanner0.location();
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Location location1 = scanner0.location();
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.ElementValuePair[] java_ElementValuePairArray0 = new Java.ElementValuePair[2];
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("", (Java.ElementValue) null);
      java_ElementValuePairArray0[0] = java_ElementValuePair0;
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair("*", (Java.ElementValue) null);
      java_ElementValuePairArray0[1] = java_ElementValuePair1;
      Java.NormalAnnotation java_NormalAnnotation0 = new Java.NormalAnnotation(java_ReferenceType0, java_ElementValuePairArray0);
      java_ModifierArray0[1] = (Java.Modifier) java_NormalAnnotation0;
      Java.ElementValuePair[] java_ElementValuePairArray1 = new Java.ElementValuePair[1];
      java_ElementValuePairArray1[0] = java_ElementValuePair0;
      Java.NormalAnnotation java_NormalAnnotation1 = new Java.NormalAnnotation(java_ReferenceType0, java_ElementValuePairArray1);
      java_ModifierArray0[2] = (Java.Modifier) java_NormalAnnotation1;
      Java.ReferenceType java_ReferenceType1 = new Java.ReferenceType(location1, java_ReferenceType0.annotations, java_ReferenceType0.identifiers, (Java.TypeArgument[]) null);
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType1, java_NormalAnnotation1);
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'v', Line -2909, Column 3523: ';' expected instead of '~'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.enable", stringReader0);
      Parser parser0 = new Parser(scanner1);
      parser0.parseBlockStatements();
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.enable', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      parser0.parseRelationalExpression();
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      scanner0.produce();
      stringReader0.read();
      parser1.parseVariableDeclarator();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      parser1.location();
      try { 
        parser1.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 20: IDENTIFIER expected instead of '/'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6D_>EaFd5w");
      Scanner scanner0 = new Scanner("6D_>EaFd5w", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '6D_>EaFd5w', Line 1, Column 3: ';' expected instead of '_'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseIfStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!T");
      Scanner scanner0 = new Scanner("ikR{uA)\")gR<snu0aC", stringReader0, 1, 1);
      Parser parser0 = new Parser(scanner0);
      Java.Rvalue[] java_RvalueArray0 = parser0.parseExpressionList();
      assertEquals(1, java_RvalueArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("XCt~4~T.6]cX)G*fw5");
      Scanner scanner0 = new Scanner("v", stringReader0, (-2909), 3519);
      scanner0.location();
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      scanner0.produce();
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl1);
      scanner0.location();
      parser0.parseExpressionOrType();
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'v', Line -2909, Column 3525: 'import' expected instead of '~'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.enable", stringReader0, 0, 0);
      scanner0.location();
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl1);
      scanner0.location();
      try { 
        parser0.parseExpressionOrType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.enable', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser0 = new Parser(scanner0);
      parser0.parseModifiers();
      parser0.parseBlockStatements();
      parser0.read();
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseReferenceTypeList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      parser0.parseRelationalExpression();
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 15: Unexpected token \"?\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      Scanner scanner0 = new Scanner("Consta1t naWe \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Consta1t naWe \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("@onstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseReferenceTypeList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onstant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      Scanner scanner0 = new Scanner("8?nhkJj@M", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseInterfaceDeclarationRest("8?nhkJj@M", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '8?nhkJj@M', Line 1, Column 1: IDENTIFIER expected instead of '('
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XCt~4~T.6]cX)G*fw5");
      stringReader0.markSupported();
      Scanner scanner0 = new Scanner("v", stringReader0, (-2909), 3519);
      Location location0 = scanner0.location();
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Location location1 = scanner0.location();
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.ElementValuePair[] java_ElementValuePairArray0 = new Java.ElementValuePair[2];
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("", (Java.ElementValue) null);
      java_ElementValuePairArray0[0] = java_ElementValuePair0;
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair("*", (Java.ElementValue) null);
      java_ElementValuePairArray0[1] = java_ElementValuePair1;
      Java.NormalAnnotation java_NormalAnnotation0 = new Java.NormalAnnotation(java_ReferenceType0, java_ElementValuePairArray0);
      java_ModifierArray0[1] = (Java.Modifier) java_NormalAnnotation0;
      Java.ElementValuePair[] java_ElementValuePairArray1 = new Java.ElementValuePair[1];
      java_ElementValuePairArray1[0] = java_ElementValuePair0;
      Java.NormalAnnotation java_NormalAnnotation1 = new Java.NormalAnnotation(java_ReferenceType0, java_ElementValuePairArray1);
      java_ModifierArray0[2] = (Java.Modifier) java_NormalAnnotation1;
      Java.ReferenceType java_ReferenceType1 = new Java.ReferenceType(location1, java_ReferenceType0.annotations, java_ReferenceType0.identifiers, (Java.TypeArgument[]) null);
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType1, java_NormalAnnotation1);
      java_ModifierArray0[3] = (Java.Modifier) java_SingleElementAnnotation0;
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      try { 
        parser0.parseInterfaceDeclarationRest("Local variable name \"", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'v', Line -2909, Column 3523: IDENTIFIER expected instead of '~'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Java.Type java_Type0 = null;
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = null;
      try {
        parser1 = new Parser((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      StringReader stringReader1 = new StringReader("]+u>6]+|*,6He5");
      Scanner scanner0 = new Scanner("Y(74K1", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseConditionalAndExpression();
      try { 
        parser0.parseFormalParameterList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Y(74K1', Line 1, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM}.@5NPTs<7?D:");
      Scanner scanner0 = new Scanner("cM}.@5NPTs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseFormalParameterList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM}.@5NPTs<7?D:', Line 1, Column 3: IDENTIFIER expected instead of '}'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseTryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: 'try' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("xcpaU#/!e`FTT");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseTryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'try' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner((String) null, stringReader0);
      Parser parser0 = new Parser(scanner0);
      String string0 = parser0.doc();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.read("ornstant");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: 'ornstant' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StringResource stringResource0 = new StringResource("case", "]");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("5Z8z%t'#dQZ`{", inputStream0, (String) null);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.read("org.codehaus.janino.source_debugging.keep");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '5Z8z%t'#dQZ`{', Line 1, Column 1: 'org.codehaus.janino.source_debugging.keep' expected instead of ']'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM}.@5NPTs<7?D:");
      Scanner scanner0 = new Scanner("cM}.@5NPTs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseIfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM}.@5NPTs<7?D:', Line 1, Column 1: 'if' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseIfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 1: 'if' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      stringReader0.close();
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseThrowStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Enumeration<InputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Scanner scanner1 = new Scanner("", sequenceInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      // Undeclared exception!
      try { 
        parser0.parsePackageDeclarationRest("org.codehaus.janino.source_debugging.dir", (Java.Modifier[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      tokenStreamImpl0.peekRead("Method does not override a method declared in a supertype");
      // Undeclared exception!
      try { 
        parser0.parseBracketsOpt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Enumeration<InputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Scanner scanner1 = new Scanner("", sequenceInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.peekNextButOne("");
      try { 
        parser0.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[3];
      parser0.parseOptionalModifier();
      java_ModifierArray0[0] = null;
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      Java.ReferenceType java_ReferenceType0 = parser1.parseReferenceType();
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType0, (Java.ElementValue) null);
      java_ModifierArray0[1] = (Java.Modifier) java_SingleElementAnnotation0;
      parser1.parseOptionalModifier();
      java_ModifierArray0[2] = null;
      try { 
        parser0.parsePackageDeclarationRest("", java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 4: 'package' expected instead of '7F'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseOptionalModifier();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation((Java.Type) null);
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation((Java.Type) null);
      Location location0 = Location.NOWHERE;
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("org.codehaus.janino.source_debugging.enable", location0);
      parser0.parseOptionalModifier();
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[5];
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      java_ModifierArray0[1] = (Java.Modifier) java_MarkerAnnotation1;
      java_ModifierArray0[2] = null;
      java_ModifierArray0[3] = null;
      java_ModifierArray0[4] = java_ModifierArray0[0];
      try { 
        parser0.parseInterfaceDeclarationRest("Constant name \"", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '<internally generated location>', Line -1, Column -1: Duplication access modifier \"org.codehaus.janino.source_debugging.enable\"
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[6];
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_ReferenceType0);
      java_ModifierArray0[0] = (Java.Modifier) java_MarkerAnnotation0;
      Location location0 = scanner0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("|", location0);
      java_ModifierArray0[1] = (Java.Modifier) java_AccessModifier0;
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType0, java_MarkerAnnotation0);
      java_ModifierArray0[2] = (Java.Modifier) java_SingleElementAnnotation0;
      Java.ElementValuePair[] java_ElementValuePairArray0 = new Java.ElementValuePair[5];
      Java.ElementValuePair java_ElementValuePair0 = new Java.ElementValuePair("org.codehaus.janino.source_debugging.keep", java_SingleElementAnnotation0);
      java_ElementValuePairArray0[0] = java_ElementValuePair0;
      Java.ElementValuePair java_ElementValuePair1 = new Java.ElementValuePair("|U2?SK(J!/vVN&W3QP", java_SingleElementAnnotation0);
      java_ElementValuePairArray0[1] = java_ElementValuePair1;
      Java.ElementValuePair java_ElementValuePair2 = new Java.ElementValuePair("F$a^7I4;", java_SingleElementAnnotation0);
      java_ElementValuePairArray0[2] = java_ElementValuePair2;
      Java.ElementValuePair java_ElementValuePair3 = new Java.ElementValuePair("m_a", java_MarkerAnnotation0);
      java_ElementValuePairArray0[3] = java_ElementValuePair3;
      Java.ElementValuePair java_ElementValuePair4 = new Java.ElementValuePair("|U2?SK(J!/vVN&W3QP", java_MarkerAnnotation0);
      java_ElementValuePairArray0[4] = java_ElementValuePair4;
      Java.NormalAnnotation java_NormalAnnotation0 = new Java.NormalAnnotation(java_ReferenceType0, java_ElementValuePairArray0);
      Java.Type java_Type0 = java_NormalAnnotation0.getType();
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation(java_Type0);
      java_ModifierArray0[3] = (Java.Modifier) java_MarkerAnnotation1;
      parser0.parseOptionalModifier();
      java_ModifierArray0[4] = null;
      Java.FloatingPointLiteral java_FloatingPointLiteral0 = new Java.FloatingPointLiteral(location0, "F$a^7I4;");
      Java.SingleElementAnnotation java_SingleElementAnnotation1 = new Java.SingleElementAnnotation(java_ReferenceType0, java_FloatingPointLiteral0);
      java_ModifierArray0[5] = (Java.Modifier) java_SingleElementAnnotation1;
      try { 
        parser0.parsePackageDeclarationRest("(", java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 166, Column 13: Access modifier(s) | not allowed in this context
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      StringReader stringReader0 = new StringReader("static ");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseCatchParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: Access modifier(s) static not allowed in this context
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("@onstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onstant name \"', Line 1, Column 10: 'package' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("E@,SYeD=\"N!e", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      TokenType tokenType0 = TokenType.STRING_LITERAL;
      try { 
        parser0.read(tokenType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'E@,SYeD=\"N!e', Line 0, Column 0: STRING_LITERAL expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1570);
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", pipedInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseLiteral();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3Q");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      parser0.parseRelationalExpression();
      boolean boolean0 = false;
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      scanner0.produce();
      stringReader0.read();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser1.parseLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 16: Literal expected
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      scanner0.produce();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      stringReader0.read();
      tokenStreamImpl0.peekRead("org.codehaus.janino.source_debugging.keep");
      parser0.parseBracketsOpt();
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 4: 'continue' expected instead of '['
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Atom java_Atom0 = parser0.parseMultiplicativeExpression();
      assertEquals("7F", java_Atom0.toString());
      
      Java.Type java_Type0 = parser0.parseType();
      assertNotNull(java_Type0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      Parser parser1 = new Parser(scanner0);
      // Undeclared exception!
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      Scanner scanner0 = new Scanner("Consta1t naWe \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseOptionalModifier();
      // Undeclared exception!
      try { 
        parser0.parseFieldDeclarationRest("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w~8Ibe+gy_,{<)XF");
      Scanner scanner0 = new Scanner(".|q5sqqYDR*`1 Qo", stringReader0, (-2741), (-2741));
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseAdditiveExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XCt~4~T.6]cX)G*fw5");
      Scanner scanner0 = new Scanner("v", stringReader0, (-2909), 3519);
      scanner0.location();
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      TokenStreamImpl tokenStreamImpl1 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl1);
      scanner0.location();
      parser0.parseExpressionOrType();
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'v', Line -2909, Column 3523: 'import' expected instead of '~'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner(">%", stringReader0, (-1726), (-1726));
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseMethodDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>%', Line -1726, Column -1723: Invalid character input \"`\" (character code 96)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6\"wmL`S");
      Scanner scanner0 = new Scanner("try", stringReader0, 0, 10);
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseOptionalModifier();
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'try', Line 0, Column 12: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1r59U13s>4-_ sGf2f");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Atom java_Atom0 = parser0.parseExclusiveOrExpression();
      assertEquals("1", java_Atom0.toString());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StringReader stringReader0 = new StringReader("() { ... }");
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("() { ... }", stringReader2, 111, 29);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("O0");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      assertFalse(parser1.equals((Object)parser0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Parser parser1 = new Parser(scanner0);
      parser1.parseFieldDeclarationRest(":n2[9lnP%F@Jm`f");
      try { 
        parser1.parseImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'import' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t aWe \"");
      Scanner scanner0 = new Scanner("6r.8}", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("6r.8}");
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = "org.codehaus.janino.Java$EnumConstant";
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$EnumConstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0, 27, 0);
      String string1 = "?#g|9<K";
      Scanner scanner1 = new Scanner("?#g|9<K", stringReader0, 27, 0);
      scanner0.location();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      boolean boolean0 = true;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.codehaus.janino.source_debugging.dir";
      String string2 = "org.codehaus.janino.Java$ArrayAccessExpression";
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[9];
      Java.Annotation[] java_AnnotationArray0 = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "org.codehaus.janino.source_debugging.dir";
      Java.TypeArgument[] java_TypeArgumentArray0 = new Java.TypeArgument[4];
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      java_TypeArgumentArray0[0] = (Java.TypeArgument) java_ReferenceType0;
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_ReferenceType0);
      java_TypeArgumentArray0[1] = (Java.TypeArgument) java_ArrayType0;
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '?#g|9<K', Line 27, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseMultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 7: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 1: 'throw' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      StringReader stringReader1 = new StringReader("org.codehaus.janino.source_debugging.dir");
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.enable", stringReader1, (-150), 5);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner1, tokenStreamImpl0);
      parser0.parseVariableInitializer();
      StringReader stringReader2 = new StringReader("A method named \"");
      stringReader2.reset();
      try { 
        parser0.parseThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.source_debugging.enable', Line -150, Column 43: 'throw' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member annotation type declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member annotation type declaration", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Location location0 = Location.NOWHERE;
      Java.SimpleType java_SimpleType0 = new Java.SimpleType(location0, (IType) null);
      Java.ArrayType java_ArrayType0 = new Java.ArrayType(java_SimpleType0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      try { 
        parser0.parseMethodDeclarationRest("Default interface methods only available for source version 8+", java_ModifierArray0, (Java.TypeParameter[]) null, java_ArrayType0, "Modifier \"default\" not allowed on member annotation type declaration", true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member annotation type declaration', Line 1, Column 1: '(' expected instead of 'Modifier'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Scanner scanner1 = new Scanner("org.codehaus.janino.source_debugging.dir", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseMethodDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner(">>>=", stringReader0, 166, 11);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      parser0.read();
      parser0.parseRelationalExpression();
      scanner0.setIgnoreWhiteSpace(false);
      Parser parser1 = new Parser(scanner0);
      parser1.parseModifiers();
      scanner0.produce();
      stringReader0.read();
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser1.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>>>=', Line 166, Column 20: '(' expected instead of '/'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      stringReader0.ready();
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBracketsOpt();
      scanner0.produce();
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 5: ']' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onVstant name \"");
      Scanner scanner0 = new Scanner("@onVstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAssignmentExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onVstant name \"', Line 1, Column 1: Unexpected token \"@\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner((String) null, stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAssignmentExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q/jhth+");
      Scanner scanner0 = new Scanner("q/jhth+", stringReader0, (-635), 7);
      scanner0.location();
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      scanner0.location();
      try { 
        parser0.parseExpressionOrType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'q/jhth+', Line -635, Column 14: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Rvalue[] java_RvalueArray0 = parser0.parseExpressionList();
      assertEquals(1, java_RvalueArray0.length);
      
      try { 
        parser0.parseSynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: 'synchronized' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      Scanner scanner0 = new Scanner("null", stringReader0, 1175, 272);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      parser0.parseOptionalModifier();
      java_ModifierArray0[0] = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">>>";
      stringArray0[1] = "'C91s*zxTH5M";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "org.codehaus.janino.source_debugging.enable";
      Java.AmbiguousName java_AmbiguousName0 = new Java.AmbiguousName((Location) null, stringArray0);
      Java.Type java_Type0 = java_AmbiguousName0.toType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_Type0);
      try { 
        parser0.parseSynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'null', Line 1175, Column 273: 'synchronized' expected instead of 'null'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("", stringReader0, 11, 11);
      scanner0.location();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      scanner0.produce();
      parser0.parseAndExpression();
      scanner0.location();
      try { 
        parser0.parseImportDeclarationBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 11, Column 15: IDENTIFIER expected instead of '?'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$EnumConstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.ReferenceType[] java_ReferenceTypeArray0 = parser0.parseReferenceTypeList();
      assertEquals(1, java_ReferenceTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$EnumConstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0, 27, 0);
      Scanner scanner1 = new Scanner("?#g|9<K", stringReader0, 27, 0);
      scanner0.location();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[1] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[2] = "org.codehaus.janino.Java$EnumConstant";
      stringArray0[3] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[4] = "";
      parser0.parseMultiplicativeExpression();
      stringArray0[5] = "?#g|9<K";
      stringArray0[6] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[7] = "org.codehaus.janino.source_debugging.keep";
      tokenStreamImpl0.peek(stringArray0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '?#g|9<K', Line 27, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Jav$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Jav$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")7!RCI\"");
      Scanner scanner0 = new Scanner("{]", stringReader0, 2244, 4);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '{]', Line 2244, Column 5: Unexpected token \")\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cd*`-%yZ");
      Scanner scanner0 = new Scanner("org.codehaus.janino.JaninoOption", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.dir");
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.JaninoOption', Line 1, Column 4: Invalid character input \"`\" (character code 96)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: ';' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 10: ';' expected instead of 'name'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ljava/lang/StringBuilder;");
      Scanner scanner0 = new Scanner("\" (see JLS7 6.8.6)", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '\" (see JLS7 6.8.6)', Line 1, Column 7: Java$BinaryOperation is not allowed as an expression statement. Expressions statements must be one of assignments, method invocations, or object allocations.
         //
         verifyException("org.codehaus.janino.Java$Located", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("<<=", stringReader0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Enumeration<InputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Scanner scanner0 = new Scanner((String) null, sequenceInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      scanner0.setIgnoreWhiteSpace(true);
      scanner0.setIgnoreWhiteSpace(true);
      Parser parser0 = new Parser(scanner0);
      TokenType tokenType0 = TokenType.C_STYLE_COMMENT;
      parser0.peek(tokenType0);
      StringReader stringReader0 = new StringReader("is[S{-m%!HuPpUl");
      stringReader0.read();
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Parser parser0 = null;
      try {
        parser0 = new Parser((Scanner) null, (TokenStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$MethodReference");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$MethodReference", stringReader0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      parser0.peekNextButOne();
      parser0.parseExclusiveOrExpression();
      try { 
        parser0.parseVariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$MethodReference', Line 1, Column 21: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseImportDeclarationBody();
      try { 
        parser0.parseExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UeDtW(\"@', Line 1, Column 7: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1r59U13s>4-_ sGf2f");
      Scanner scanner0 = new Scanner("D,&`BDO<!erRSTD", stringReader0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      parser0.parseExclusiveOrExpression();
      Java.ArrayInitializerOrRvalue java_ArrayInitializerOrRvalue0 = parser0.parseVariableInitializer();
      assertNotNull(java_ArrayInitializerOrRvalue0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      stringReader0.read();
      tokenStreamImpl0.peekRead("w");
      parser0.parseBracketsOpt();
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'continue' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: 'continue' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("H", stringReader0, 11, 11);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      scanner0.location();
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'H', Line 11, Column 12: Unexpected token \"|\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constat naWe ");
      Scanner scanner0 = new Scanner("Constat naWe ", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Type java_Type0 = parser0.parseType();
      assertNotNull(java_Type0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$EnumConstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0, 27, 0);
      Scanner scanner1 = new Scanner("?#g|9<K", stringReader0, 27, 0);
      scanner0.location();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[1] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[2] = "org.codehaus.janino.Java$EnumConstant";
      stringArray0[3] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[4] = "";
      stringArray0[5] = "?#g|9<K";
      stringArray0[6] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[7] = "org.codehaus.janino.source_debugging.keep";
      tokenStreamImpl0.peek(stringArray0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '?#g|9<K', Line 27, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePackageMemberTypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: One of 'class enum interface @' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("", stringReader0, 11, 11);
      scanner0.location();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      scanner0.produce();
      try { 
        parser0.parsePackageMemberTypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 11, Column 13: One of 'class enum interface @' expected instead of 'U2'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q?J#)JCm7)$nzm&");
      Scanner scanner0 = new Scanner("TP+{Uqbkx", stringReader0);
      boolean boolean0 = true;
      scanner0.setIgnoreWhiteSpace(true);
      Parser parser0 = new Parser(scanner0);
      parser0.parseVariableDeclarator();
      String string0 = "org.codehaus.janino.Java$Type";
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      Location location0 = scanner0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("org.codehaus.janino.source_debugging.enable", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[5];
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'TP+{Uqbkx', Line 1, Column 2: IDENTIFIER expected instead of '?'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: '{' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: '{' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = ":b!F8b }~z";
      StringReader stringReader0 = new StringReader(":b!F8b }~z");
      Scanner scanner0 = new Scanner("pYh|K%>", stringReader0, 152, 152);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      scanner0.location();
      scanner0.produce();
      String[] stringArray0 = new String[8];
      tokenStreamImpl0.peek();
      stringArray0[0] = "Short value out of legal range";
      stringArray0[1] = "";
      stringArray0[2] = "org.codehaus.janino.source_debugging.enable";
      try { 
        parser0.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'pYh|K%>', Line 152, Column 154: '{' expected instead of 'b'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("&", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '&', Line 0, Column 0: 'break' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      stringReader0.read();
      tokenStreamImpl0.peekRead("w");
      parser0.parseBracketsOpt();
      try { 
        parser0.parseBreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'break' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Consta1t naWe \"");
      Scanner scanner0 = new Scanner("Consta1t naWe \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Consta1t naWe \"', Line 1, Column 1: 'switch' expected instead of 'Consta1t'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Parser.ClassDeclarationContext.values();
      String string0 = "$=\"uYj$Up|il1_#?O";
      StringReader stringReader0 = new StringReader("$=\"uYj$Up|il1_#?O");
      Scanner scanner0 = new Scanner("$=\"uYj$Up|il1_#?O", stringReader0, 1931, 1247);
      Parser parser0 = new Parser(scanner0);
      parser0.read();
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '$=\"uYj$Up|il1_#?O', Line 1931, Column 1249: 'switch' expected instead of '='
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      Scanner scanner0 = new Scanner("%", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '%', Line 1, Column 1: Unexpected token \"%\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Stack<InputStream> stack0 = new Stack<InputStream>();
      Enumeration<InputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Scanner scanner0 = new Scanner((String) null, sequenceInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      scanner0.setIgnoreWhiteSpace(true);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseDoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: 'do' expected instead of 'Constant'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("5Z8z%t'#dQZ`{", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseDoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '5Z8z%t'#dQZ`{', Line 1, Column 1: 'do' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.CodeContext$ExceptionTableEntry");
      Scanner scanner0 = new Scanner("opens", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'opens', Line 1, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("hTWE7n{)YYp1~3x", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'hTWE7n{)YYp1~3x', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 1: Expression \"7F\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(rU!tOCY1*nU0D6");
      Scanner scanner0 = new Scanner("(rU!tOCY1*nU0D6", stringReader0, 56, 56);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '(rU!tOCY1*nU0D6', Line 56, Column 60: ')' expected instead of '!'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseVariableDeclarators();
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UeDtW(\"@");
      Scanner scanner0 = new Scanner("UeDtW(\"@", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UeDtW(\"@', Line 1, Column 7: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$EnumConstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0, 27, 0);
      scanner0.location();
      Parser parser0 = new Parser(scanner0);
      scanner0.location();
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$EnumConstant', Line 27, Column 21: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$EnumConstant");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$EnumConstant", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseUnaryExpression();
      try { 
        parser0.parseArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$EnumConstant', Line 1, Column 21: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Location location0 = parser0.location();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[7];
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("", location0);
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      parser0.parseOptionalModifier();
      java_ModifierArray0[1] = null;
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[7];
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constan name \"");
      Scanner scanner0 = new Scanner("Constan name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      parser0.parseInclusiveOrExpression();
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constan name \"', Line 1, Column 14: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = "[:Q|vKw@:=tkI";
      StringReader stringReader0 = new StringReader("[:Q|vKw@:=tkI");
      Scanner scanner0 = new Scanner("[:Q|vKw@:=tkI", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[8];
      Parser parser1 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser1.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '[:Q|vKw@:=tkI', Line 1, Column 1: IDENTIFIER expected instead of '['
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      try { 
        parser0.parseEnumDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      Scanner scanner0 = new Scanner("null", stringReader0, 1175, 272);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      parser0.parseOptionalModifier();
      java_ModifierArray0[0] = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">>>";
      stringArray0[1] = "'C91s*zxTH5M";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "org.codehaus.janino.source_debugging.enable";
      Java.AmbiguousName java_AmbiguousName0 = new Java.AmbiguousName((Location) null, stringArray0);
      Java.Type java_Type0 = java_AmbiguousName0.toType();
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_Type0);
      java_ModifierArray0[1] = (Java.Modifier) java_MarkerAnnotation0;
      Parser parser1 = new Parser(scanner0);
      parser1.parseOptionalModifier();
      java_ModifierArray0[2] = null;
      Java.MarkerAnnotation java_MarkerAnnotation1 = new Java.MarkerAnnotation(java_Type0);
      java_ModifierArray0[3] = (Java.Modifier) java_MarkerAnnotation1;
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      try { 
        parser0.parseEnumDeclarationRest(">>>", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'null', Line 1175, Column 273: IDENTIFIER expected instead of 'null'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$TryStatement", bufferedInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBracketsOpt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("|U2?SK(J!/vVN&W3QP", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseImportDeclarationBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '|U2?SK(J!/vVN&W3QP', Line 1, Column 1: IDENTIFIER expected instead of '|'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MCDCM");
      Scanner scanner0 = new Scanner("MCDCM", stringReader0, 1843, 1843);
      stringReader0.skip(1843);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.compileException("MCDCM");
      try { 
        parser0.parseImportDeclarationBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'MCDCM', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$SynchronizedStatement");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$SynchronizedStatement", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p5?s}%VppHBB1-<@v");
      Scanner scanner0 = new Scanner("E%o6[9Gx>Zkb;6)o", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("", stringReader0, 11, 11);
      scanner0.location();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.codehaus.janino.source_debugging.keep";
      tokenStreamImpl0.peek(stringArray0);
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 11, Column 12: IDENTIFIER expected instead of '|'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@onstant name \"");
      Scanner scanner0 = new Scanner("@onstant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseMethodDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '@onstant name \"', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mYy3O-");
      Scanner scanner0 = new Scanner("mYy3O-", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser0.parseAdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'mYy3O-', Line 1, Column 6: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.codehaus.janino.source_debugging.keep");
      stringReader0.read(charBuffer0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.peekRead("KSkbYU149||S1");
      scanner0.setIgnoreWhiteSpace(false);
      Token token0 = scanner0.produce();
      TokenType[] tokenTypeArray0 = new TokenType[8];
      tokenTypeArray0[0] = token0.type;
      tokenTypeArray0[1] = token0.type;
      tokenTypeArray0[2] = token0.type;
      tokenTypeArray0[3] = token0.type;
      tokenTypeArray0[4] = token0.type;
      tokenTypeArray0[5] = token0.type;
      tokenTypeArray0[6] = token0.type;
      TokenType tokenType0 = TokenType.WHITE_SPACE;
      tokenTypeArray0[7] = tokenType0;
      tokenStreamImpl0.read(tokenTypeArray0);
      try { 
        parser0.parseAdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      Scanner scanner0 = new Scanner("%", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '%', Line 1, Column 1: Unexpected token \"%\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|U2?SK(J!/vVN&W3QP");
      Scanner scanner0 = new Scanner("", stringReader0, 11, 11);
      scanner0.location();
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseVariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 11, Column 12: Unexpected token \"|\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7FH[Q");
      Scanner scanner0 = new Scanner("7FH[Q", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseLiteral();
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '7FH[Q', Line 1, Column 5: ']' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionOrType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 3: Invalid character input \"`\" (character code 96)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member annotation type declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member annotation type declaration", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseConditionalOrExpression();
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      Scanner scanner0 = new Scanner("%", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseInclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '%', Line 1, Column 1: Unexpected token \"%\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      parser0.parseFieldDeclarationRest("kuzIZ2Xlt7&4.");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member annotation type declaration");
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member annotation type declaration", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member annotation type declaration', Line 1, Column 1: 'import' expected instead of 'Modifier'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, 5534, (-1653));
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.keep");
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'import' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 1: 'return' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("cM`.@5NPIs<7?D:");
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<b7?B:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<b7?B:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<b7?B:', Line 1, Column 3: Invalid character input \"`\" (character code 96)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAbstractCompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cM`.@5NPIs<7?D:', Line 1, Column 1: One of 'class enum interface @' expected instead of 'cM'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cM`.@5NPIs<b7?D:");
      Scanner scanner0 = new Scanner("cM`.@5NPIs<b7?D:", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = parser0.parseModifiers();
      assertEquals(0, java_ModifierArray0.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = "try";
      StringReader stringReader0 = new StringReader("6\"wmL`S");
      Scanner scanner0 = new Scanner("try", stringReader0, 0, 10);
      scanner0.setIgnoreWhiteSpace(false);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseOptionalModifier();
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'try', Line 0, Column 11: IDENTIFIER expected instead of '6'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }
}
