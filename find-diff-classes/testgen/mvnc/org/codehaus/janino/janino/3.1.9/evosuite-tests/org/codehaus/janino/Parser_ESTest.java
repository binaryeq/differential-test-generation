/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:34:06 GMT 2024
 */

package org.codehaus.janino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.List;
import org.codehaus.commons.compiler.CompileException;
import org.codehaus.commons.compiler.Location;
import org.codehaus.commons.compiler.WarningHandler;
import org.codehaus.commons.compiler.util.StringPattern;
import org.codehaus.commons.compiler.util.resource.StringResource;
import org.codehaus.janino.Access;
import org.codehaus.janino.FilterWarningHandler;
import org.codehaus.janino.Java;
import org.codehaus.janino.Parser;
import org.codehaus.janino.Scanner;
import org.codehaus.janino.Token;
import org.codehaus.janino.TokenStream;
import org.codehaus.janino.TokenStreamImpl;
import org.codehaus.janino.TokenType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClss \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("3Z/\"k1'&g-", stringReader0);
      assertNotNull(scanner0);
      assertEquals("3Z/\"k1'&g-", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("3Z/\"k1'&g-", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("3Z/\"k1'&g-", scanner0.getFileName());
      
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("MS4*_wZ%");
      assertNotNull(java_VariableDeclaratorArray0);
      assertEquals(1, java_VariableDeclaratorArray0.length);
      assertEquals("3Z/\"k1'&g-", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Java.AbstractCompilationUnit.ImportDeclaration java_AbstractCompilationUnit_ImportDeclaration0 = parser0.parseImportDeclarationBody();
      assertNotNull(java_AbstractCompilationUnit_ImportDeclaration0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Qqe9OSLL2/e>{E");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("[Qqe9OSLL2/e>{E", stringReader0);
      assertNotNull(scanner0);
      assertEquals("[Qqe9OSLL2/e>{E", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("[Qqe9OSLL2/e>{E", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("[Qqe9OSLL2/e>{E", scanner0.getFileName());
      
      try { 
        parser0.parseDimExprs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '[Qqe9OSLL2/e>{E', Line 1, Column 14: Unexpected token \"{\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Statement is unreachable");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 8, (-369));
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 8, Column -355: ';' expected instead of 'unreachable'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loa=ding IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("<TvUuKQ[7", stringReader0, 55, (-3634));
      assertNotNull(scanner0);
      assertEquals("<TvUuKQ[7", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("<TvUuKQ[7", scanner0.getFileName());
      
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '<TvUuKQ[7', Line 55, Column -3633: Expression \"java.lang.String@0000000009 = java.lang.String@0000000014\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Redeclaration of local class \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 4236, 682);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      assertNotNull(java_ReferenceType0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseAnnotationTypeDeclarationRest("5_<G<EJ", java_ReferenceType0.annotations, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 4236, Column 700: '{' expected instead of 'local'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FBg{gK");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Y?Xp`Yx+[", stringReader0, 733, 6);
      assertNotNull(scanner0);
      assertEquals("Y?Xp`Yx+[", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Y?Xp`Yx+[", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Y?Xp`Yx+[", scanner0.getFileName());
      
      Java.Type java_Type0 = parser0.parseType();
      assertNotNull(java_Type0);
      assertEquals("Y?Xp`Yx+[", scanner0.getFileName());
      
      TokenType tokenType0 = TokenType.OPERATOR;
      String string0 = parser0.read(tokenType0);
      assertNotNull(string0);
      assertEquals("{", string0);
      assertEquals("Y?Xp`Yx+[", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[1] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[7] = "org.codehaus.janino.source_debugging.dir";
      int int0 = parser0.peekRead(stringArray0);
      assertEquals((-1), int0);
      assertEquals(8, stringArray0.length);
      assertEquals("", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, (-2008), 1346);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Token token0 = scanner0.produce();
      assertNotNull(token0);
      assertEquals("", scanner0.getFileName());
      assertEquals("end-of-input", token0.toString());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      String string0 = parser0.peekRead(token0.type);
      assertNotNull(string0);
      assertEquals("end-of-input", string0);
      assertEquals("", scanner0.getFileName());
      assertEquals("end-of-input", token0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      TokenType[] tokenTypeArray0 = new TokenType[9];
      TokenType tokenType0 = TokenType.CHARACTER_LITERAL;
      tokenTypeArray0[0] = tokenType0;
      TokenType tokenType1 = TokenType.IDENTIFIER;
      tokenTypeArray0[1] = tokenType1;
      int int0 = parser0.peek(tokenTypeArray0);
      assertEquals(1, int0);
      assertEquals(9, tokenTypeArray0.length);
      assertEquals("Loading IClass \"", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 40, 40);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      TokenType[] tokenTypeArray0 = new TokenType[9];
      TokenType tokenType0 = TokenType.C_PLUS_PLUS_STYLE_COMMENT;
      tokenTypeArray0[0] = tokenType0;
      tokenTypeArray0[1] = tokenType0;
      tokenTypeArray0[2] = tokenTypeArray0[0];
      tokenTypeArray0[3] = tokenType0;
      tokenTypeArray0[4] = tokenTypeArray0[1];
      tokenTypeArray0[5] = tokenTypeArray0[2];
      tokenTypeArray0[6] = tokenTypeArray0[0];
      tokenTypeArray0[7] = tokenTypeArray0[5];
      tokenTypeArray0[8] = tokenTypeArray0[1];
      int int0 = parser0.peek(tokenTypeArray0);
      assertEquals((-1), int0);
      assertEquals(9, tokenTypeArray0.length);
      assertEquals("Loading IClass \"", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.codehaus.janino.source_debugging.keep";
      stringArray0[1] = "";
      stringArray0[2] = "org.codehaus.janino.source_debugging.dir";
      int int0 = parser0.peek(stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      assertEquals("", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      boolean boolean0 = parser0.peek("org.codehaus.janino.source_debugging.enable");
      assertFalse(boolean0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      Token token0 = parser0.peek();
      assertNotNull(token0);
      assertEquals("", scanner0.getFileName());
      assertEquals("end-of-input", token0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClss \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      Java.VariableDeclarator java_VariableDeclarator0 = parser0.parseVariableDeclarator();
      assertNotNull(java_VariableDeclarator0);
      assertEquals("", scanner0.getFileName());
      assertEquals(0, java_VariableDeclarator0.brackets);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      int int0 = parser0.parseBracketsOpt();
      assertEquals(0, int0);
      assertEquals("", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringResource stringResource0 = new StringResource("ATDCM", "");
      assertNotNull(stringResource0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals("ATDCM", stringResource0.getFileName());
      assertEquals("ATDCM", stringResource0.toString());
      
      InputStream inputStream0 = stringResource0.open();
      assertNotNull(inputStream0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals("ATDCM", stringResource0.getFileName());
      assertEquals("ATDCM", stringResource0.toString());
      assertEquals(0, inputStream0.available());
      
      Scanner scanner0 = new Scanner("|!1'EZX[Rx0<K", inputStream0);
      assertNotNull(scanner0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals("ATDCM", stringResource0.getFileName());
      assertEquals("ATDCM", stringResource0.toString());
      assertEquals(0, inputStream0.available());
      assertEquals("|!1'EZX[Rx0<K", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals("ATDCM", stringResource0.getFileName());
      assertEquals("ATDCM", stringResource0.toString());
      assertEquals(0, inputStream0.available());
      assertEquals("|!1'EZX[Rx0<K", scanner0.getFileName());
      
      Location location0 = tokenStreamImpl0.location();
      assertNotNull(location0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals("ATDCM", stringResource0.getFileName());
      assertEquals("ATDCM", stringResource0.toString());
      assertEquals(0, inputStream0.available());
      assertEquals("|!1'EZX[Rx0<K", scanner0.getFileName());
      assertEquals("|!1'EZX[Rx0<K", location0.getFileName());
      assertEquals(0, location0.getLineNumber());
      assertEquals(0, location0.getColumnNumber());
      
      CompileException compileException0 = Parser.compileException("ua**Wf!`lNu", location0);
      assertNotNull(compileException0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals("ATDCM", stringResource0.getFileName());
      assertEquals("ATDCM", stringResource0.toString());
      assertEquals(0, inputStream0.available());
      assertEquals("|!1'EZX[Rx0<K", scanner0.getFileName());
      assertEquals("|!1'EZX[Rx0<K", location0.getFileName());
      assertEquals(0, location0.getLineNumber());
      assertEquals(0, location0.getColumnNumber());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      CompileException compileException0 = parser0.compileException("org.codehaus.janino.source_debugging.keep");
      assertNotNull(compileException0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GpYYj'SkW");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("GpYYj'SkW", stringReader0, 401, 401);
      assertNotNull(scanner0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      StringPattern[] stringPatternArray0 = new StringPattern[0];
      WarningHandler warningHandler0 = mock(WarningHandler.class, new ViolatedAssumptionAnswer());
      FilterWarningHandler filterWarningHandler0 = new FilterWarningHandler(stringPatternArray0, warningHandler0);
      assertNotNull(filterWarningHandler0);
      assertEquals(0, stringPatternArray0.length);
      
      // Undeclared exception!
      try { 
        parser0.setWarningHandler(filterWarningHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$AlternateConstructorInvocation");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$AlternateConstructorInvocation", stringReader0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.Java$AlternateConstructorInvocation", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("org.codehaus.janino.Java$AlternateConstructorInvocation", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.Java$AlternateConstructorInvocation", scanner0.getFileName());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[1] = "org.codehaus.janino.source_debugging.enable";
      stringArray0[2] = "ED%*HUb]q<C";
      stringArray0[3] = "org.codehaus.janino.source_debugging.dir";
      stringArray0[4] = "org.codehaus.janino.source_debugging.enable";
      try { 
        parser0.read(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Java$AlternateConstructorInvocation', Line 1, Column 1: One of 'org.codehaus.janino.source_debugging.dir org.codehaus.janino.source_debugging.enable ED%*HUb]q<C org.codehaus.janino.source_debugging.dir org.codehaus.janino.source_debugging.enable' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("super", stringReader0);
      assertNotNull(scanner0);
      assertEquals("super", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("super", scanner0.getFileName());
      
      try { 
        parser0.read("S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: 'S' expected instead of 'super'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClOss \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClOss \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClOss \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClOss \"", scanner0.getFileName());
      
      Java.CatchParameter java_CatchParameter0 = parser0.parseCatchParameter();
      assertNotNull(java_CatchParameter0);
      assertEquals("Loading IClOss \"", scanner0.getFileName());
      assertFalse(java_CatchParameter0.finaL);
      
      Location location0 = Location.NOWHERE;
      assertNotNull(location0);
      assertEquals((-1), location0.getLineNumber());
      assertEquals("<internally generated location>", location0.getFileName());
      assertEquals((-1), location0.getColumnNumber());
      
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[0];
      String[] stringArray0 = new String[7];
      Java.ReferenceType[] java_ReferenceTypeArray0 = new Java.ReferenceType[7];
      Java.ReferenceType java_ReferenceType0 = new Java.ReferenceType(location0, java_AnnotationArray0, stringArray0, java_ReferenceTypeArray0);
      assertNotNull(java_ReferenceType0);
      assertEquals(0, java_AnnotationArray0.length);
      assertEquals(7, stringArray0.length);
      assertEquals(7, java_ReferenceTypeArray0.length);
      assertEquals((-1), location0.getLineNumber());
      assertEquals("<internally generated location>", location0.getFileName());
      assertEquals((-1), location0.getColumnNumber());
      
      try { 
        parser0.peekRead(java_ReferenceType0.identifiers);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClOss \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      TokenType tokenType0 = TokenType.C_STYLE_COMMENT;
      // Undeclared exception!
      try { 
        parser0.peekNextButOne(tokenType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Token token0 = scanner0.produce();
      assertNotNull(token0);
      assertEquals("", scanner0.getFileName());
      assertEquals("end-of-input", token0.toString());
      
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.peekNextButOne(token0.type);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, 120, 76);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      TokenType tokenType0 = TokenType.STRING_LITERAL;
      stringReader0.close();
      try { 
        parser0.peek(tokenType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[MBmmK");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("zZ2", stringReader0);
      assertNotNull(scanner0);
      assertEquals("zZ2", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("zZ2", scanner0.getFileName());
      
      try { 
        parser0.peek("gFBYc2d(&R{uZd-]`s");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'zZ2', Line 1, Column 1: Invalid character input \"\" (character code 127)
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GpYYj'SkW");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("GpYYj'SkW", stringReader0, 401, 401);
      assertNotNull(scanner0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.peek("org.codehaus.janino.source_debugging.enable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseWhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'while' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringResource stringResource0 = new StringResource(";C.k[u)|yCc,G`>:`>", ";C.k[u)|yCc,G`>:`>");
      assertNotNull(stringResource0);
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(0L, stringResource0.lastModified());
      
      InputStream inputStream0 = stringResource0.open();
      assertNotNull(inputStream0);
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(18, inputStream0.available());
      
      Scanner scanner0 = new Scanner(";C.k[u)|yCc,G`>:`>", inputStream0);
      assertNotNull(scanner0);
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(18, inputStream0.available());
      assertEquals(";C.k[u)|yCc,G`>:`>", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(18, inputStream0.available());
      assertEquals(";C.k[u)|yCc,G`>:`>", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(18, inputStream0.available());
      assertEquals(";C.k[u)|yCc,G`>:`>", scanner0.getFileName());
      
      try { 
        parser0.parseVoidOrType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File ';C.k[u)|yCc,G`>:`>', Line 1, Column 1: IDENTIFIER expected instead of ';'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseVoidOrType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      String[] stringArray0 = parser0.parseQualifiedIdentifier();
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseVariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      Scanner scanner0 = new Scanner("", pushbackInputStream0);
      assertNotNull(scanner0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseVariableInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseVariableInitializer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6#VI?uiE<|Soyn");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("[6#VI?uiE<|Soyn", stringReader0);
      assertNotNull(scanner0);
      assertEquals("[6#VI?uiE<|Soyn", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("[6#VI?uiE<|Soyn", scanner0.getFileName());
      
      try { 
        parser0.parseVariableDeclarators();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '[6#VI?uiE<|Soyn', Line 1, Column 1: IDENTIFIER expected instead of '['
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 40, 40);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseVariableDeclarators();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      Scanner scanner0 = new Scanner("", mockFileInputStream0);
      assertNotNull(scanner0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseVariableDeclarators();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1452);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseVariableDeclarator();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=SA`J9/?1\"eh!-");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("SG<55IZkB|Bbg", stringReader0, 11, 13);
      assertNotNull(scanner0);
      assertEquals("SG<55IZkB|Bbg", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("SG<55IZkB|Bbg", scanner0.getFileName());
      
      try { 
        parser0.parseType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'SG<55IZkB|Bbg', Line 11, Column 14: IDENTIFIER expected instead of '='
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("interface");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("NuwOb", stringReader0, 2066, 2066);
      assertNotNull(scanner0);
      assertEquals("NuwOb", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("NuwOb", scanner0.getFileName());
      
      stringReader0.close();
      try { 
        parser0.parseType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("super", stringReader0);
      assertNotNull(scanner0);
      assertEquals("super", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("super", scanner0.getFileName());
      
      try { 
        parser0.parseTryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: 'try' expected instead of 'super'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uxiK(~Z");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, 114, 114);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseThrowStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseSynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'synchronized' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'switch' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$StringLiteral");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$StringLiteral", stringReader0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.Java$StringLiteral", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.Java$StringLiteral", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseSwitchStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$StringLiteral");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$StringLiteral", stringReader0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.Java$StringLiteral", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.Java$StringLiteral", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringResource stringResource0 = new StringResource(";C.k[u)|yCc,G`>:`>", ";C.k[u)|yCc,G`>:`>");
      assertNotNull(stringResource0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      
      InputStream inputStream0 = stringResource0.open();
      assertNotNull(inputStream0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(18, inputStream0.available());
      
      Scanner scanner0 = new Scanner(";C.k[u)|yCc,G`>:`>", inputStream0);
      assertNotNull(scanner0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(18, inputStream0.available());
      assertEquals(";C.k[u)|yCc,G`>:`>", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.toString());
      assertEquals(";C.k[u)|yCc,G`>:`>", stringResource0.getFileName());
      assertEquals(18, inputStream0.available());
      assertEquals(";C.k[u)|yCc,G`>:`>", scanner0.getFileName());
      
      try { 
        parser0.parseShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File ';C.k[u)|yCc,G`>:`>', Line 1, Column 1: Unexpected token \";\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.dir", dataInputStream0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.source_debugging.dir", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.source_debugging.dir", scanner0.getFileName());
      
      Location location0 = scanner0.location();
      assertNotNull(location0);
      assertEquals("org.codehaus.janino.source_debugging.dir", scanner0.getFileName());
      assertEquals(0, location0.getColumnNumber());
      assertEquals("org.codehaus.janino.source_debugging.dir", location0.getFileName());
      assertEquals(0, location0.getLineNumber());
      
      String[] stringArray0 = new String[6];
      Java.AmbiguousName java_AmbiguousName0 = new Java.AmbiguousName(location0, stringArray0);
      assertNotNull(java_AmbiguousName0);
      assertEquals(6, stringArray0.length);
      assertEquals("org.codehaus.janino.source_debugging.dir", scanner0.getFileName());
      assertEquals(0, location0.getColumnNumber());
      assertEquals("org.codehaus.janino.source_debugging.dir", location0.getFileName());
      assertEquals(0, location0.getLineNumber());
      assertEquals(6, java_AmbiguousName0.n);
      
      // Undeclared exception!
      try { 
        parser0.parseSelector(java_AmbiguousName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: 'return' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$StringLiteral");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$StringLiteral", stringReader0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.Java$StringLiteral", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.Java$StringLiteral", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseReturnStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("super", stringReader0);
      assertNotNull(scanner0);
      assertEquals("super", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("super", scanner0.getFileName());
      
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: '.' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner(">E", stringReader0);
      assertNotNull(scanner0);
      assertEquals(">E", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals(">E", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseRelationalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("interface");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("interface", stringReader0);
      assertNotNull(scanner0);
      assertEquals("interface", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("interface", scanner0.getFileName());
      
      try { 
        parser0.parseReferenceTypeList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'interface', Line 1, Column 1: IDENTIFIER expected instead of 'interface'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseReferenceTypeList();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringResource stringResource0 = new StringResource(">E", ">E");
      assertNotNull(stringResource0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(">E", stringResource0.toString());
      assertEquals(">E", stringResource0.getFileName());
      
      InputStream inputStream0 = stringResource0.open();
      assertNotNull(inputStream0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(">E", stringResource0.toString());
      assertEquals(">E", stringResource0.getFileName());
      assertEquals(2, inputStream0.available());
      
      Scanner scanner0 = new Scanner("", inputStream0);
      assertNotNull(scanner0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(">E", stringResource0.toString());
      assertEquals(">E", stringResource0.getFileName());
      assertEquals(2, inputStream0.available());
      assertEquals("", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(">E", stringResource0.toString());
      assertEquals(">E", stringResource0.getFileName());
      assertEquals(2, inputStream0.available());
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0L, stringResource0.lastModified());
      assertEquals(">E", stringResource0.toString());
      assertEquals(">E", stringResource0.getFileName());
      assertEquals(2, inputStream0.available());
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: IDENTIFIER expected instead of '>'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("udLt6[QlB");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner(">", stringReader0, (-3361), 14);
      assertNotNull(scanner0);
      assertEquals(">", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals(">", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      Scanner scanner0 = new Scanner("", pushbackInputStream0);
      assertNotNull(scanner0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseReferenceType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",A>%{{;?'");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("interface", stringReader0);
      assertNotNull(scanner0);
      assertEquals("interface", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("interface", scanner0.getFileName());
      
      try { 
        parser0.parseQualifiedIdentifier();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'interface', Line 1, Column 1: IDENTIFIER expected instead of ','
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 40, 40);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseQualifiedIdentifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseQualifiedIdentifier();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("requires");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("requires", stringReader0);
      assertNotNull(scanner0);
      assertEquals("requires", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("requires", scanner0.getFileName());
      
      try { 
        parser0.parsePackageMemberTypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'requires', Line 1, Column 1: One of 'class enum interface @' expected instead of 'requires'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner((String) null, pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(scanner0.getFileName());
      
      try { 
        parser0.parseOptionalModifier();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Parser parser1 = new Parser(scanner0);
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser1.parseRelationalExpression();
      assertNotNull(java_AmbiguousName0);
      assertNotSame(parser1, parser0);
      assertFalse(parser1.equals((Object)parser0));
      assertEquals("Loading IClass ", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
      
      try { 
        parser0.parseMultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass ', Line 1, Column 9: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseMultiplicativeExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      try { 
        parser0.parseModuleDeclarationRest(java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 1: 'module' expected instead of 'Loading'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseModuleDeclarationRest(java_ModifierArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pt");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Pt", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Pt", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Pt", scanner0.getFileName());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      Java.ReferenceType java_ReferenceType0 = parser0.parseReferenceType();
      assertNotNull(java_ReferenceType0);
      assertEquals("Pt", scanner0.getFileName());
      
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.INTERFACE_DECLARATION;
      try { 
        parser0.parseMethodDeclarationRest("org.codehaus.janino.source_debugging.dir", java_ModifierArray0, (Java.TypeParameter[]) null, java_ReferenceType0, "?)lDTO1:5\"aS#", true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Pt', Line 1, Column 1: '(' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClOss \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClOss \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClOss \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClOss \"", scanner0.getFileName());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      Java.TypeParameter[] java_TypeParameterArray0 = new Java.TypeParameter[4];
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseMethodDeclarationRest("org.codehaus.janino.source_debugging.keep", java_ModifierArray0, java_TypeParameterArray0, (Java.Type) null, "", true, parser_MethodDeclarationContext0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-idntical6defini]ionof IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      Scanner scanner0 = new Scanner("N&6jKn:Ec", pushbackInputStream0);
      assertNotNull(scanner0);
      assertEquals("N&6jKn:Ec", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("N&6jKn:Ec", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("N&6jKn:Ec", scanner0.getFileName());
      
      try { 
        parser0.parseLabeledStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[1];
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseInterfaceDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseInterfaceDeclarationRest((String) null, (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mUHzbyP@NuwOb@GTDI$");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Location location0 = tokenStreamImpl0.location();
      assertNotNull(location0);
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      assertEquals(0, location0.getColumnNumber());
      assertEquals("Non-identical definition of IClass \"", location0.getFileName());
      assertEquals(0, location0.getLineNumber());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[8];
      Java.PackageMemberAnnotationTypeDeclaration java_PackageMemberAnnotationTypeDeclaration0 = new Java.PackageMemberAnnotationTypeDeclaration(location0, "\"\"3L1FmcoDBp[lJ", java_ModifierArray0, "interface");
      assertNotNull(java_PackageMemberAnnotationTypeDeclaration0);
      assertEquals(8, java_ModifierArray0.length);
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      assertEquals(0, location0.getColumnNumber());
      assertEquals("Non-identical definition of IClass \"", location0.getFileName());
      assertEquals(0, location0.getLineNumber());
      assertEquals(Access.DEFAULT, java_PackageMemberAnnotationTypeDeclaration0.getAccess());
      assertFalse(java_PackageMemberAnnotationTypeDeclaration0.isAbstract());
      assertFalse(java_PackageMemberAnnotationTypeDeclaration0.isStrictfp());
      assertEquals("interface", java_PackageMemberAnnotationTypeDeclaration0.toString());
      assertFalse(java_PackageMemberAnnotationTypeDeclaration0.hasDeprecatedDocTag());
      assertFalse(java_PackageMemberAnnotationTypeDeclaration0.isStatic());
      assertEquals("\"\"3L1FmcoDBp[lJ", java_PackageMemberAnnotationTypeDeclaration0.getDocComment());
      assertEquals("interface", java_PackageMemberAnnotationTypeDeclaration0.getName());
      assertEquals(0, java_PackageMemberAnnotationTypeDeclaration0.anonymousClassCount);
      assertEquals(0, java_PackageMemberAnnotationTypeDeclaration0.localClassCount);
      
      try { 
        parser0.parseInterfaceBody(java_PackageMemberAnnotationTypeDeclaration0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Non-identical definition of IClass \"', Line 1, Column 1: '{' expected instead of 'mUHzbyP'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, 362, (-215));
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseInclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("super", stringReader0);
      assertNotNull(scanner0);
      assertEquals("super", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("super", scanner0.getFileName());
      
      try { 
        parser0.parseImportDeclarationBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: IDENTIFIER expected instead of 'super'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PM/K3Y$#Q");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner(".Pw", stringReader0, 16, (-816));
      assertNotNull(scanner0);
      assertEquals(".Pw", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals(".Pw", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseImportDeclarationBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3=\"='LWaD:8,eKb!CU6");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("AnQL/c", stringReader0, (-672), 49);
      assertNotNull(scanner0);
      assertEquals("AnQL/c", scanner0.getFileName());
      
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("AnQL/c", scanner0.getFileName());
      
      try { 
        parser0.parseImportDeclarationBody();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GpYYj'SkW");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("GpYYj'SkW", stringReader0, 401, 401);
      assertNotNull(scanner0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-idntical6defini]ionof IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClss \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseIfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 1: 'if' expected instead of 'Loading'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 744);
      assertNotNull(bufferedInputStream0);
      
      Scanner scanner0 = new Scanner("}V}dT\"[&}", bufferedInputStream0);
      assertNotNull(scanner0);
      assertEquals("}V}dT\"[&}", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("}V}dT\"[&}", scanner0.getFileName());
      
      try { 
        parser0.parseIfStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseFormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 1: '(' expected instead of 'Loading'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Java.ReferenceType[] java_ReferenceTypeArray0 = parser0.parseReferenceTypeList();
      assertNotNull(java_ReferenceTypeArray0);
      assertEquals(1, java_ReferenceTypeArray0.length);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Java.Type java_Type0 = parser0.parseType();
      assertNotNull(java_Type0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      try { 
        parser0.parseFormalParameterListRest(java_Type0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass ', Line 1, Column 9: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseFormalParameterListRest((Java.Type) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"IvYC!RY(k@AdDQl$f");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("FgE .UUv", stringReader0);
      assertNotNull(scanner0);
      assertEquals("FgE .UUv", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("FgE .UUv", scanner0.getFileName());
      
      try { 
        parser0.parseFormalParameterList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'FgE .UUv', Line 1, Column 1: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      try { 
        parser0.parseForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass ', Line 1, Column 1: 'for' expected instead of 'Loading'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseFieldDeclarationRest("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GpYYj'SkW");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("GpYYj'SkW", stringReader0, 71, 71);
      assertNotNull(scanner0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("GpYYj'SkW", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseFieldDeclarationRest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.dir");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("9EcS", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("9EcS", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("9EcS", scanner0.getFileName());
      
      try { 
        parser0.parseExpressionOrType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, (-1), (-1));
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseExpressionList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseExpressionList();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, 15, 0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("super", stringReader0);
      assertNotNull(scanner0);
      assertEquals("super", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("super", scanner0.getFileName());
      
      try { 
        parser0.parseEnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: IDENTIFIER expected instead of 'super'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("interface");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member class declaration", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Modifier \"default\" not allowed on member class declaration", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Modifier \"default\" not allowed on member class declaration", scanner0.getFileName());
      
      stringReader0.close();
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Modifier \"default\" not allowed on member class declaration", scanner0.getFileName());
      
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(40);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner((String) null, pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(scanner0.getFileName());
      
      try { 
        parser0.parseDoStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      Scanner scanner0 = new Scanner("", pushbackInputStream0);
      assertNotNull(scanner0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseDimExprs();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("%e2YF$r3?iA-", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("%e2YF$r3?iA-", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("%e2YF$r3?iA-", scanner0.getFileName());
      
      try { 
        parser0.parseDimExpr();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("with");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, 2575, 2575);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-20), 36);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(24, byteArrayInputStream0.available());
      
      Scanner scanner1 = new Scanner("with", byteArrayInputStream0);
      assertNotNull(scanner1);
      assertEquals(4, byteArray0.length);
      assertFalse(scanner1.equals((Object)scanner0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(24, byteArrayInputStream0.available());
      assertEquals("with", scanner1.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner1);
      assertNotNull(tokenStreamImpl0);
      assertEquals(4, byteArray0.length);
      assertFalse(scanner1.equals((Object)scanner0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(24, byteArrayInputStream0.available());
      assertEquals("with", scanner1.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(4, byteArray0.length);
      assertFalse(scanner0.equals((Object)scanner1));
      assertFalse(scanner1.equals((Object)scanner0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", scanner0.getFileName());
      assertEquals(24, byteArrayInputStream0.available());
      assertEquals("with", scanner1.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zZ2");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("zZ2", stringReader0);
      assertNotNull(scanner0);
      assertEquals("zZ2", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("zZ2", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("zZ2", scanner0.getFileName());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parseConstructorDeclarator("org.codehaus.janino.source_debugging.dir", java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'zZ2', Line 1, Column 1: '(' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("package");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("package", stringReader0, 396, 0);
      assertNotNull(scanner0);
      assertEquals("package", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("package", scanner0.getFileName());
      
      try { 
        parser0.parseConditionalAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'package', Line 396, Column 1: Unexpected token \"package\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$ElementValuePair", sequenceInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.codehaus.janino.Java$ElementValuePair", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.codehaus.janino.Java$ElementValuePair", scanner0.getFileName());
      
      try { 
        parser0.parseConditionalAndExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseCatchParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      Scanner scanner0 = new Scanner("[", stringReader0);
      assertNotNull(scanner0);
      assertEquals("[", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("[", scanner0.getFileName());
      
      try { 
        parser0.parseCatchParameter();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner(";", stringReader0);
      assertNotNull(scanner0);
      assertEquals(";", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(";", scanner0.getFileName());
      
      try { 
        parser0.parseBreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File ';', Line 1, Column 1: 'break' expected instead of ';'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-idntical6defini]ionof IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseBreakStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseBracketsOpt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-idntical6defini]ionof IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-22), 1313);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(27, byteArrayInputStream0.available());
      
      Scanner scanner0 = new Scanner("-(Kd", byteArrayInputStream0);
      assertNotNull(scanner0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(27, byteArrayInputStream0.available());
      assertEquals("-(Kd", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(27, byteArrayInputStream0.available());
      assertEquals("-(Kd", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-idntical6defini]ionof IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Parser");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.Parser", stringReader0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.Parser", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.Parser", scanner0.getFileName());
      
      try { 
        parser0.parseAssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Parser', Line 1, Column 1: 'assert' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseAssertStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Parser");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.Parser", stringReader0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.Parser", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.Parser", scanner0.getFileName());
      
      try { 
        parser0.parseArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Parser', Line 1, Column 1: '{' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseArrayInitializer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E58kfz~N\"\"c7:|7.Q");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("E58kfz~N\"\"c7:|7.Q", stringReader0);
      assertNotNull(scanner0);
      assertEquals("E58kfz~N\"\"c7:|7.Q", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("E58kfz~N\"\"c7:|7.Q", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[!*lTQd)c2!sN6");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("*.He=ycgVnng>", stringReader0, (-4280), 3033);
      assertNotNull(scanner0);
      assertEquals("*.He=ycgVnng>", scanner0.getFileName());
      
      stringReader0.close();
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("*.He=ycgVnng>", scanner0.getFileName());
      
      try { 
        parser0.parseArguments();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      try { 
        parser0.parseAnnotationTypeDeclarationRest("d+<0UG", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("interface");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Modifier \"default\" not allowed on member enum declaration", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Modifier \"default\" not allowed on member enum declaration", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Modifier \"default\" not allowed on member enum declaration", scanner0.getFileName());
      
      try { 
        parser0.parseAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Modifier \"default\" not allowed on member enum declaration', Line 1, Column 1: Unexpected token \"interface\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseAndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-idntical6defini]ionof IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-idntical6defini]ionof IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseAndExpression();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseAdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Bd`t5iN.3/E1c~1c", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Bd`t5iN.3/E1c~1c", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals("Bd`t5iN.3/E1c~1c", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.parseAbstractCompilationUnit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      assertNotNull(scanner0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Non-identical definition of IClass \"", scanner0.getFileName());
      
      try { 
        parser0.parseAbstractCompilationUnit();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      Scanner scanner0 = new Scanner(", stack=[])", byteArrayInputStream0);
      assertNotNull(scanner0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(", stack=[])", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      assertNotNull(parser0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(", stack=[])", scanner0.getFileName());
      
      // Undeclared exception!
      try { 
        parser0.location();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Parser parser0 = null;
      try {
        parser0 = new Parser((Scanner) null, (TokenStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Parser parser0 = null;
      try {
        parser0 = new Parser((Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3=\"='LWaD:8,eKb!CU6");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("AnQL/c", stringReader0, (-672), 49);
      assertNotNull(scanner0);
      assertEquals("AnQL/c", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("AnQL/c", scanner0.getFileName());
      
      Java.Rvalue java_Rvalue0 = parser0.parseLiteral();
      assertNotNull(java_Rvalue0);
      assertEquals("AnQL/c", scanner0.getFileName());
      assertEquals("3", java_Rvalue0.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uxiK(~Z");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0, 114, 114);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      Token token0 = scanner0.produce();
      assertNotNull(token0);
      assertEquals("", scanner0.getFileName());
      assertEquals("uxiK", token0.toString());
      
      try { 
        parser0.parseArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 114, Column 121: ')' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("super", stringReader0);
      assertNotNull(scanner0);
      assertEquals("super", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("super", scanner0.getFileName());
      
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: '.' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uxiK(~Z");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("m.5N#", stringReader0);
      assertNotNull(scanner0);
      assertEquals("m.5N#", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("m.5N#", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("m.5N#", scanner0.getFileName());
      
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'm.5N#', Line 1, Column 7: ')' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, (-4474), 76);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parsePrimary();
      assertNotNull(java_AmbiguousName0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mUHzbyP@NuwOb@GTDI$");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("mUHzbyP@NuwOb@GTDI$", stringReader0);
      assertNotNull(scanner0);
      assertEquals("mUHzbyP@NuwOb@GTDI$", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("mUHzbyP@NuwOb@GTDI$", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseUnaryExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("mUHzbyP@NuwOb@GTDI$", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qF$[");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("q|42^WiISs*Lnx=a", stringReader0, 113, 113);
      assertNotNull(scanner0);
      assertEquals("q|42^WiISs*Lnx=a", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("q|42^WiISs*Lnx=a", scanner0.getFileName());
      
      try { 
        parser0.parseUnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'q|42^WiISs*Lnx=a', Line 113, Column 117: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FDCM");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("\" does not begin with a lower-case letter (see JLS7 6.8.1)", stringReader0, 26, 26);
      assertNotNull(scanner0);
      assertEquals("\" does not begin with a lower-case letter (see JLS7 6.8.1)", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("\" does not begin with a lower-case letter (see JLS7 6.8.1)", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("\" does not begin with a lower-case letter (see JLS7 6.8.1)", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseMultiplicativeExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("\" does not begin with a lower-case letter (see JLS7 6.8.1)", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseAdditiveExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 40, 40);
      assertNotNull(scanner0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseEqualityExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("Loading IClass \"", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unrecognized JVM class file version \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseExclusiveOrExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseInclusiveOrExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gKgsSPdE8jE_&nku )");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("org.codehaus.janino.source_debugging.enable", stringReader0);
      assertNotNull(scanner0);
      assertEquals("org.codehaus.janino.source_debugging.enable", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("org.codehaus.janino.source_debugging.enable", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("org.codehaus.janino.source_debugging.enable", scanner0.getFileName());
      
      Java.Atom java_Atom0 = parser0.parseConditionalAndExpression();
      assertNotNull(java_Atom0);
      assertEquals("org.codehaus.janino.source_debugging.enable", scanner0.getFileName());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner(">u\"Gr", stringReader0);
      assertNotNull(scanner0);
      assertEquals(">u\"Gr", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals(">u\"Gr", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseConditionalOrExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals(">u\"Gr", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
      
      try { 
        parser0.parseEqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '>u\"Gr', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      assertNotNull(scanner0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseConditionalExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("Loading IClass ", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3=\"='LWaD:8,eKb!CU6");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("3=\"='LWaD:8,eKb!CU6", stringReader0);
      assertNotNull(scanner0);
      assertEquals("3=\"='LWaD:8,eKb!CU6", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("3=\"='LWaD:8,eKb!CU6", scanner0.getFileName());
      
      try { 
        parser0.parseAssignmentExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '3=\"='LWaD:8,eKb!CU6', Line 1, Column 1: Expression \"3\" is not an lvalue
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("dz5#Jt", stringReader0);
      assertNotNull(scanner0);
      assertEquals("dz5#Jt", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("dz5#Jt", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseAssignmentExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("dz5#Jt", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("9)kI85Ju|l}Sm", stringReader0);
      assertNotNull(scanner0);
      assertEquals("9)kI85Ju|l}Sm", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("9)kI85Ju|l}Sm", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseExpressionOrType();
      assertNotNull(java_AmbiguousName0);
      assertEquals("9)kI85Ju|l}Sm", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      try { 
        parser0.parseExpressionOrType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("requires");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("requires", stringReader0);
      assertNotNull(scanner0);
      assertEquals("requires", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("requires", scanner0.getFileName());
      
      Java.Rvalue[] java_RvalueArray0 = parser0.parseArgumentList();
      assertNotNull(java_RvalueArray0);
      assertEquals(1, java_RvalueArray0.length);
      assertEquals("requires", scanner0.getFileName());
      
      try { 
        parser0.parseExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'requires', Line 1, Column 1: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CDCM");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("CDCM", stringReader0);
      assertNotNull(scanner0);
      assertEquals("CDCM", scanner0.getFileName());
      
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      assertNotNull(tokenStreamImpl0);
      assertEquals("CDCM", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      assertNotNull(parser0);
      assertEquals("CDCM", scanner0.getFileName());
      
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseExpression();
      assertNotNull(java_AmbiguousName0);
      assertEquals("CDCM", scanner0.getFileName());
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";dpiV|9;Ni%`$dv3-k`");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("CHAR", stringReader0, (-958), (-958));
      assertNotNull(scanner0);
      assertEquals("CHAR", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("CHAR", scanner0.getFileName());
      
      Java.Statement java_Statement0 = parser0.parseStatement();
      assertNotNull(java_Statement0);
      assertEquals("CHAR", scanner0.getFileName());
      assertEquals(";", java_Statement0.toString());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Scanner scanner0 = new Scanner("", stringReader0);
      assertNotNull(scanner0);
      assertEquals("", scanner0.getFileName());
      
      Parser parser0 = new Parser(scanner0);
      assertNotNull(parser0);
      assertEquals("", scanner0.getFileName());
      
      Java.VariableDeclarator java_VariableDeclarator0 = parser0.parseVariableDeclaratorRest("org.codehaus.janino.source_debugging.enable");
      assertNotNull(java_VariableDeclarator0);
      assertEquals("", scanner0.getFileName());
      assertEquals(0, java_VariableDeclarator0.brackets);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IeW~pbT");
      Scanner scanner0 = new Scanner("IeW~pbT", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseShiftExpression();
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[4];
      Location location0 = new Location((String) null, 150, 4081);
      Java.Annotation[] java_AnnotationArray0 = new Java.Annotation[0];
      Java.TypeArgument[] java_TypeArgumentArray0 = new Java.TypeArgument[0];
      Java.ReferenceType java_ReferenceType0 = new Java.ReferenceType(location0, java_AnnotationArray0, (String[]) null, java_TypeArgumentArray0);
      Java.SingleElementAnnotation java_SingleElementAnnotation0 = new Java.SingleElementAnnotation(java_ReferenceType0, java_AmbiguousName0);
      Java.MarkerAnnotation java_MarkerAnnotation0 = new Java.MarkerAnnotation(java_SingleElementAnnotation0.type);
      boolean[] booleanArray0 = new boolean[8];
      try { 
        parser0.parseFormalParameterRest(java_ModifierArray0, java_MarkerAnnotation0.type, booleanArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'IeW~pbT', Line 1, Column 4: IDENTIFIER expected instead of '~'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Scanner scanner0 = new Scanner("", byteArrayInputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      boolean[] booleanArray0 = new boolean[6];
      try { 
        parser0.parseFormalParameter(booleanArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mUHzbyP@NuwOb@GTDI$");
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseReferenceType();
      Java.Modifier java_Modifier0 = parser0.parseOptionalModifier();
      assertNotNull(java_Modifier0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier java_Modifier0 = parser0.parseOptionalModifier();
      assertNull(java_Modifier0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FBg{gK");
      Scanner scanner0 = new Scanner("Y?Xp`Yx+[", stringReader0, 733, 6);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = parser0.parseModifiers();
      assertEquals(0, java_ModifierArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Java$AlternateConstructorInvocation");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$AlternateConstructorInvocation", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      String[] stringArray0 = parser0.parseQualifiedIdentifier();
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loding Ilass \"");
      Scanner scanner0 = new Scanner("Loding Ilass \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseBlock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loding Ilass \"', Line 1, Column 1: '{' expected instead of 'Loding'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vX$fCFZ");
      Scanner scanner0 = new Scanner((String) null, stringReader0, (-1), (-1));
      Parser parser0 = new Parser(scanner0);
      parser0.read("vX$fCFZ");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      boolean boolean0 = parser0.peekNextButOne("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      // Undeclared exception!
      try { 
        parser0.peek((TokenType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, (-2008), 1346);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Token token0 = parser0.read();
      assertEquals("end-of-input", token0.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        parser0.peek(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("udLt6[QlB");
      Scanner scanner0 = new Scanner(">", stringReader0, (-3361), 14);
      Parser parser0 = new Parser(scanner0);
      Location location0 = parser0.location();
      assertEquals(0, location0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      Scanner scanner0 = new Scanner("[", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      TokenType tokenType0 = TokenType.C_STYLE_COMMENT;
      boolean boolean0 = parser0.peek(tokenType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      Scanner scanner0 = new Scanner("8uSZpg]2<,t5", stringReader0, 1, 1);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Token token0 = parser0.peekNextButOne();
      assertEquals("IClass", token0.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member enum declaration");
      Scanner scanner0 = new Scanner("y8bXzuyfqh>`t", stringReader0);
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        parser0.read(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u7E");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Java$ReferenceType", stringReader0);
      Parser parser0 = new Parser(scanner0);
      boolean boolean0 = parser0.peek("u7E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      Scanner scanner0 = new Scanner("Kz#>PMz:CT", stringReader0);
      Parser parser0 = new Parser(scanner0);
      TokenType tokenType0 = TokenType.C_PLUS_PLUS_STYLE_COMMENT;
      try { 
        parser0.read(tokenType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Kz#>PMz:CT', Line 1, Column 1: C_PLUS_PLUS_STYLE_COMMENT expected instead of ']'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N!7`J>;");
      Scanner scanner0 = new Scanner("N!7`J>;", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseDimExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'N!7`J>;', Line 1, Column 1: '[' expected instead of 'N'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 6, 6);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[0];
      try { 
        parser0.parsePackageDeclarationRest("Package name \"", java_ModifierArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 6, Column 7: 'package' expected instead of 'Loading'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UlE$l)a/");
      Scanner scanner0 = new Scanner("UlE$l)a/", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      boolean boolean0 = parser0.peekRead("UMN1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      Parser parser0 = new Parser(scanner0);
      String string0 = parser0.doc();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mUHzbyP@NuwOb@GTDI$");
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Location location0 = tokenStreamImpl0.location();
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("org.codehaus.janino.source_debugging.enable", location0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.NAMED_TYPE_DECLARATION;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      java_ModifierArray0[0] = (Java.Modifier) java_AccessModifier0;
      java_ModifierArray0[1] = (Java.Modifier) java_AccessModifier0;
      try { 
        parser0.parseAnnotationTypeDeclarationRest("huPG", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Non-identical definition of IClass \"', Line 0, Column 0: Duplication access modifier \"org.codehaus.janino.source_debugging.enable\"
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UlE$l)a/");
      Scanner scanner0 = new Scanner("UlE$l)a/", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      Location location0 = Location.NOWHERE;
      Java.AccessModifier java_AccessModifier0 = new Java.AccessModifier("org.codehaus.janino.source_debugging.enable", location0);
      java_ModifierArray0[1] = (Java.Modifier) java_AccessModifier0;
      try { 
        parser0.parseInterfaceDeclarationRest("org.codehaus.janino.source_debugging.dir", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UlE$l)a/', Line 1, Column 1: Access modifier(s) org.codehaus.janino.source_debugging.enable not allowed in this context
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zZ2");
      Scanner scanner0 = new Scanner("zZ2", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseVariableDeclarators();
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">E");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("vsTn9j)1qQK%");
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("requires");
      Scanner scanner0 = new Scanner("requires", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseFieldDeclarationRest("requires");
      Location location0 = parser0.location();
      assertEquals("requires", location0.getFileName());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("LYPE_DECLARATION");
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3=\"='LWaD:8,eKb!CU6");
      Scanner scanner0 = new Scanner("AnQL/c", stringReader0, (-672), 49);
      Parser parser0 = new Parser(scanner0);
      Java.VariableDeclarator[] java_VariableDeclaratorArray0 = parser0.parseFieldDeclarationRest("3=\"='LWaD:8,eKb!CU6");
      assertEquals(1, java_VariableDeclaratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Constant name \"");
      Scanner scanner0 = new Scanner("byte", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.ANNOTATION_TYPE_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(true, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'byte', Line 1, Column 15: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UlE$l)a/");
      Scanner scanner0 = new Scanner("UlE$l)a/", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      try { 
        parser0.parseInterfaceDeclarationRest("org.codehaus.janino.source_debugging.dir", java_ModifierArray0, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'UlE$l)a/', Line 1, Column 6: '{' expected instead of ')'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      TokenType tokenType0 = TokenType.END_OF_INPUT;
      boolean boolean0 = parser0.peekNextButOne(tokenType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenType tokenType0 = TokenType.C_STYLE_COMMENT;
      Parser parser0 = new Parser(scanner0);
      boolean boolean0 = parser0.peekNextButOne(tokenType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass ', Line 1, Column 1: Literal expected
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Modifier \"default\" not allowed on member enum declaration");
      Scanner scanner0 = new Scanner("fdiyFU", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseEnumConstant();
      Java.Atom java_Atom0 = parser0.parsePrimary();
      assertEquals("\"default\"", java_Atom0.toString());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringResource stringResource0 = new StringResource("qF$[", "true");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("require@", inputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'require@', Line 1, Column 1: Expression \"true\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 40, 40);
      Parser parser0 = new Parser(scanner0);
      Java.Atom java_Atom0 = parser0.parseAndExpression();
      try { 
        parser0.parseSelector(java_Atom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 40, Column 41: Unexpected token 'IClass' in selector
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      Scanner scanner0 = new Scanner("super", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: '.' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringResource stringResource0 = new StringResource("", ";C.k[u)|yCc,G`>:`>");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner(";C.k[u)|yCc,G`>:`>", inputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File ';C.k[u)|yCc,G`>:`>', Line 1, Column 7: ']' expected instead of ')'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uxiK(~Z");
      Scanner scanner0 = new Scanner("R", stringReader0, 114, 114);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'R', Line 114, Column 121: ')' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uxiK(~Z");
      Scanner scanner0 = new Scanner("", stringReader0, 114, 114);
      scanner0.produce();
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseUnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 114, Column 121: ')' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(3yA/~mjk,>{9H.XB'");
      Scanner scanner0 = new Scanner("(3yA/~mjk,>{9H.XB'", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePrimary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '(3yA/~mjk,>{9H.XB'', Line 1, Column 2: Expression \"3\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Non-identical definition of IClass \"");
      Scanner scanner0 = new Scanner("WKsr+ro6ECdl", stringReader0, 78, (-5001));
      Parser parser0 = new Parser(scanner0);
      Java.Rvalue[] java_RvalueArray0 = parser0.parseExpressionList();
      assertEquals(1, java_RvalueArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~brgs>8q:>i[");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 8: ';' expected instead of 'q'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<init>");
      stringReader0.read();
      Scanner scanner0 = new Scanner("<init>", stringReader0, (-4474), 103);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '<init>', Line -4474, Column 108: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~brgs>8q:>i[");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 7: Expression \"~java.lang.String@0000000011 > 8\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringReader stringReader0 = new StringReader("soo<");
      Scanner scanner0 = new Scanner((String) null, stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 1, Column 4: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".2/NUb&w,beDc'XV6");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 7: Expression \".2 / java.lang.String@0000000013 & java.lang.String@0000000020\" is not a type
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k|P]I`}P>3n.s;t");
      Scanner scanner0 = new Scanner("k|P]I`}P>3n.s;t", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'k|P]I`}P>3n.s;t', Line 1, Column 4: ';' expected instead of ']'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3=\"='LWaD:8,eKb!CU6");
      Scanner scanner0 = new Scanner("AnQL/c", stringReader0, (-672), 49);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'AnQL/c', Line -672, Column 50: Expression \"3\" is not an lvalue
         //
         verifyException("org.codehaus.janino.Java$Atom", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Value of double literal \"");
      Scanner scanner0 = new Scanner("Value of double literal \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Type java_Type0 = parser0.parseType();
      parser0.parseFormalParameterListRest(java_Type0);
      try { 
        parser0.parseBlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Value of double literal \"', Line 1, Column 25: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("byte");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      try { 
        parser0.parseMethodDeclaration(false, parser_MethodDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      stringReader0.read();
      Scanner scanner0 = new Scanner((String) null, stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseFieldDeclarationRest("org.codehaus.janino.source_debugging.enable");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 1, Column 1: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringResource stringResource0 = new StringResource("fdiyFU", "eB<ao;@iYFV<#xX");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("Loading IClass ", inputStream0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseBlockStatements();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass ', Line 1, Column 4: Java$BinaryOperation is not allowed as an expression statement. Expressions statements must be one of assignments, method invocations, or object allocations.
         //
         verifyException("org.codehaus.janino.Java$Located", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      List<Java.BlockStatement> list0 = parser0.parseBlockStatements();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringResource stringResource0 = new StringResource(";C.k[u)|yCc,G`>:`>", ";C.k[u)|yCc,G`>:`>");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("vykLFRsuCiSa", inputStream0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBlockStatement();
      Java.Type java_Type0 = parser0.parseVoidOrType();
      assertNotNull(java_Type0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      parser0.parseFormalParameterListRest((Java.Type) null);
      Parser parser1 = new Parser(scanner0);
      try { 
        parser1.parseOptionalModifier();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      Scanner scanner0 = new Scanner("Loading IClass ", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.FunctionDeclarator.FormalParameters java_FunctionDeclarator_FormalParameters0 = parser0.parseFormalParameterList();
      assertFalse(java_FunctionDeclarator_FormalParameters0.variableArity);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.AmbiguousName java_AmbiguousName0 = (Java.AmbiguousName)parser0.parseVariableInitializer();
      assertEquals(1, java_AmbiguousName0.n);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      Scanner scanner0 = new Scanner("super", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.TypeParameter[] java_TypeParameterArray0 = new Java.TypeParameter[4];
      Parser.MethodDeclarationContext parser_MethodDeclarationContext0 = Parser.MethodDeclarationContext.CLASS_DECLARATION;
      // Undeclared exception!
      try { 
        parser0.parseMethodDeclarationRest("interface", (Java.Modifier[]) null, java_TypeParameterArray0, (Java.Type) null, (String) null, true, parser_MethodDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringResource stringResource0 = new StringResource(";C.k[u)|yCc,G`>:`>", ";C.k[u)|yCc,G`>:`>");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner(";C.k[u)|yCc,G`>:`>", inputStream0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseBlockStatement();
      Parser.InterfaceDeclarationContext parser_InterfaceDeclarationContext0 = Parser.InterfaceDeclarationContext.COMPILATION_UNIT;
      // Undeclared exception!
      try { 
        parser0.parseAnnotationTypeDeclarationRest("pDNBGW", (Java.Modifier[]) null, parser_InterfaceDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" error(s) while compiling unit \"");
      Scanner scanner0 = new Scanner("~o}/WJU;fgat\"Yq1V", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.EnumConstant java_EnumConstant0 = parser0.parseEnumConstant();
      assertNull(java_EnumConstant0.getDocComment());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringReader stringReader0 = new StringReader("with");
      Scanner scanner0 = new Scanner("", stringReader0, 2575, 2575);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      try { 
        parser0.parseEnumDeclarationRest("org.codehaus.janino.source_debugging.keep", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 2575, Column 2576: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader("up}b");
      Scanner scanner0 = new Scanner("up}b", stringReader0, 95, 95);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.BLOCK;
      // Undeclared exception!
      try { 
        parser0.parseEnumDeclarationRest("ordinal", (Java.Modifier[]) null, parser_ClassDeclarationContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SNO: Enum declaration in unexpected context BLOCK
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass ");
      Scanner scanner0 = new Scanner("interface", stringReader0, (-1724068645), (-1724068645));
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[5];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.TYPE_DECLARATION;
      try { 
        parser0.parseClassDeclarationRest("qd1a", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'interface', Line -1724068645, Column -1724068636: '{' expected instead of 'IClass'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mv*$8}jO);?~)GbDF#");
      Scanner scanner0 = new Scanner("Mv*$8}jO);?~)GbDF#", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[2];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.BLOCK;
      try { 
        parser0.parseClassDeclarationRest("\" does not begin with a lower-case letter (see JLS7 6.8.3)", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Mv*$8}jO);?~)GbDF#', Line 1, Column 3: '{' expected instead of '*'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("strictfp");
      Scanner scanner0 = new Scanner("9)kI85Ju|l}Sm", stringReader0);
      Parser parser0 = new Parser(scanner0);
      Java.AbstractCompilationUnit java_AbstractCompilationUnit0 = parser0.parseAbstractCompilationUnit();
      assertNotNull(java_AbstractCompilationUnit0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringResource stringResource0 = new StringResource("'6r(r46`", "java.lang.");
      InputStream inputStream0 = stringResource0.open();
      Scanner scanner0 = new Scanner("", inputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 1, Column 10: Unexpected selector 'end-of-input' after \".\"
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseWhileStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.setSourceVersion((-2828));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.COMPILATION_UNIT;
      // Undeclared exception!
      try { 
        parser0.parseEnumDeclarationRest("opens", (Java.Modifier[]) null, parser_ClassDeclarationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N!7`J>;");
      Scanner scanner0 = new Scanner("N!7`J>;", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'N!7`J>;', Line 1, Column 1: 'throw' expected instead of 'N'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      parser0.parseCatchParameter();
      TokenType tokenType0 = TokenType.OPERATOR;
      try { 
        parser0.peekNextButOne(tokenType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 1, Column 16: EOF in literal
         //
         verifyException("org.codehaus.janino.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LoAdKng ICla(ss ");
      Scanner scanner0 = new Scanner("LoAdKng ICla(ss ", stringReader0, 286, 41);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseClassBodyDeclaration((Java.AbstractClassDeclaration) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'LoAdKng ICla(ss ', Line 286, Column 55: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";dpiV|9;Ni%`$dv3-k`");
      Scanner scanner0 = new Scanner("CHAR", stringReader0, (-958), (-958));
      Parser parser0 = new Parser(scanner0);
      Scanner scanner1 = parser0.getScanner();
      assertSame(scanner0, scanner1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      Scanner scanner0 = new Scanner("super", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseDoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'super', Line 1, Column 1: 'do' expected instead of 'super'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringReader stringReader0 = new StringReader("package");
      Scanner scanner0 = new Scanner("package", stringReader0, 396, 0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'package', Line 396, Column 1: 'import' expected instead of 'package'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("Loading IClass \"", stringReader0, 40, 40);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Loading IClass \"', Line 40, Column 41: 'continue' expected instead of 'Loading'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner("Non-identical definition of IClass \"", pipedInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseSynchronizedStatement();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseMethodDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: IDENTIFIER expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Parser");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Parser", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseEmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Parser', Line 1, Column 1: ';' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PM/K3Y$#Q");
      Scanner scanner0 = new Scanner("..P,w", stringReader0, 16, (-816));
      Parser parser0 = new Parser(scanner0, (TokenStream) null);
      // Undeclared exception!
      try { 
        parser0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Loading IClass \"");
      Scanner scanner0 = new Scanner("9)kI85Ju|l}Sm", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseAbstractCompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '9)kI85Ju|l}Sm', Line 1, Column 1: One of 'class enum interface @' expected instead of 'Loading'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0, 1333, 1333);
      Parser parser0 = new Parser(scanner0);
      TokenType tokenType0 = TokenType.INTEGER_LITERAL;
      String string0 = parser0.peekRead(tokenType0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LoAdKng IClass ");
      Scanner scanner0 = new Scanner("LoAdKng IClass ", stringReader0, 286, 40);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseClassBodyDeclaration((Java.AbstractClassDeclaration) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'LoAdKng IClass ', Line 286, Column 49: ';' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StringReader stringReader0 = new StringReader("byte");
      Scanner scanner0 = new Scanner("Constant name \"", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseVariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'Constant name \"', Line 1, Column 1: IDENTIFIER expected instead of 'byte'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = MockFile.createTempFile("^'(r X*6", "^'(r X*6");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      Scanner scanner0 = new Scanner("E~)&", sequenceInputStream0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePackageMemberTypeDeclaration();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '', Line 0, Column 0: Unexpected token \"end-of-input\" in primary
         //
         verifyException("org.codehaus.janino.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Scanner scanner0 = new Scanner("", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      WarningHandler warningHandler0 = mock(WarningHandler.class, new ViolatedAssumptionAnswer());
      FilterWarningHandler filterWarningHandler0 = new FilterWarningHandler((StringPattern[]) null, warningHandler0);
      parser0.setWarningHandler(filterWarningHandler0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.codehaus.janino.Parser");
      Scanner scanner0 = new Scanner("org.codehaus.janino.Parser", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parseMethodBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'org.codehaus.janino.Parser', Line 1, Column 1: '{' expected instead of 'org'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(zero length array)");
      Scanner scanner0 = new Scanner("(zero length array)", stringReader0);
      Parser parser0 = new Parser(scanner0);
      try { 
        parser0.parsePackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File '(zero length array)', Line 1, Column 1: 'package' expected instead of '('
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zZ2");
      Scanner scanner0 = new Scanner("zZ2", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      Java.Modifier[] java_ModifierArray0 = new Java.Modifier[3];
      Parser.ClassDeclarationContext parser_ClassDeclarationContext0 = Parser.ClassDeclarationContext.COMPILATION_UNIT;
      try { 
        parser0.parseClassDeclarationRest("org.codehaus.janino.source_debugging.enable", java_ModifierArray0, parser_ClassDeclarationContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'zZ2', Line 1, Column 1: '{' expected instead of 'end-of-input'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uJ.ys)Pp397`,*d#i-'");
      Scanner scanner0 = new Scanner("uJ.ys)Pp397`,*d#i-'", stringReader0);
      TokenStreamImpl tokenStreamImpl0 = new TokenStreamImpl(scanner0);
      Parser parser0 = new Parser(scanner0, tokenStreamImpl0);
      try { 
        parser0.parseLabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'uJ.ys)Pp397`,*d#i-'', Line 1, Column 3: ':' expected instead of '.'
         //
         verifyException("org.codehaus.janino.TokenStreamImpl", e);
      }
  }
}
