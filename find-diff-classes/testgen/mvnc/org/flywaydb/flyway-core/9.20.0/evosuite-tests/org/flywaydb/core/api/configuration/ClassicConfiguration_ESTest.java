/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 22:12:17 GMT 2024
 */

package org.flywaydb.core.api.configuration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.PatternSyntaxException;
import javax.security.auth.Subject;
import javax.sql.DataSource;
import oracle.security.pki.OraclePKIPrincipalImpl;
import oracle.security.pki.OraclePKIProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.flywaydb.core.api.ClassProvider;
import org.flywaydb.core.api.ErrorCode;
import org.flywaydb.core.api.Location;
import org.flywaydb.core.api.MigrationPattern;
import org.flywaydb.core.api.MigrationVersion;
import org.flywaydb.core.api.ResourceProvider;
import org.flywaydb.core.api.callback.Callback;
import org.flywaydb.core.api.configuration.ClassicConfiguration;
import org.flywaydb.core.api.configuration.Configuration;
import org.flywaydb.core.api.configuration.FluentConfiguration;
import org.flywaydb.core.api.migration.JavaMigration;
import org.flywaydb.core.api.output.ErrorOutput;
import org.flywaydb.core.api.pattern.ValidatePattern;
import org.flywaydb.core.api.resolver.MigrationResolver;
import org.flywaydb.core.internal.clazz.NoopClassProvider;
import org.flywaydb.core.internal.configuration.models.ConfigurationModel;
import org.flywaydb.core.internal.configuration.models.EnvironmentModel;
import org.flywaydb.core.internal.configuration.models.FlywayModel;
import org.flywaydb.core.internal.configuration.models.ResolvedEnvironment;
import org.flywaydb.core.internal.database.DatabaseType;
import org.flywaydb.core.internal.parser.ParsingContext;
import org.flywaydb.core.internal.plugin.PluginRegister;
import org.flywaydb.core.internal.scanner.LocationScannerCache;
import org.flywaydb.core.internal.scanner.ResourceNameCache;
import org.flywaydb.core.internal.scanner.Scanner;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGSimpleDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassicConfiguration_ESTest extends ClassicConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      FluentConfiguration fluentConfiguration1 = fluentConfiguration0.connectRetriesInterval(0);
      assertFalse(fluentConfiguration1.isSkipDefaultCallbacks());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDataSource("", "bhywdp/", "\u0000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing required JDBC URL. Unable to create DataSource!
         //
         verifyException("org.flywaydb.core.internal.jdbc.DriverDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setDataSource("flyway.lockRetryCount", "I*%;I'5", "flyway.lockRetryCount");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No database found to handle flyway.lockRetryCount
         //
         verifyException("org.flywaydb.core.internal.database.DatabaseTypeRegister", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDataSource(" at ", " at ", "+?Thlp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No database found to handle  at 
         //
         verifyException("org.flywaydb.core.internal.database.DatabaseTypeRegister", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      ErrorCode errorCode0 = ErrorCode.JDBC_DRIVER;
      Integer integer0 = new Integer((-2637));
      ErrorOutput errorOutput0 = new ErrorOutput(errorCode0, "kE9ZF&%zsJX&", "Aligned applied migration checksums", integer0, "kE9ZF&%zsJX&");
      classicConfiguration0.setLockRetryCount(errorOutput0.error.lineNumber);
      assertFalse(classicConfiguration0.isMixed());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      classicConfiguration0.setConnectRetriesInterval(1358);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setConnectRetries(0);
      assertNull(classicConfiguration0.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setBaselineVersion("U");
      assertTrue(classicConfiguration0.isCreateSchemas());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      classicConfiguration0.setBaselineOnMigrate((Boolean) null);
      assertFalse(classicConfiguration0.isOutOfOrder());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      classicConfiguration0.configureUsingEnvVars();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.configure((Configuration) fluentConfiguration0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      classicConfiguration0.setValidateOnMigrate((Boolean) null);
      assertTrue(classicConfiguration0.isReportEnabled());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setReportFilename("[HD");
      assertEquals("[HD", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      FlywayModel flywayModel0 = FlywayModel.defaults();
      Boolean boolean0 = flywayModel0.getExecuteInTransaction();
      classicConfiguration0.setCleanDisabled(boolean0);
      assertNull(classicConfiguration0.getDefaultSchema());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      classicConfiguration0.setBaselineDescription("#)<VD&/+(A;tmR");
      assertEquals("#)<VD&/+(A;tmR", classicConfiguration0.getBaselineDescription());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      String[] stringArray0 = new String[0];
      ConfigurationModel configurationModel0 = fluentConfiguration0.getModernConfig();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      classicConfiguration0.setSchemas(stringArray0);
      assertFalse(classicConfiguration0.isCleanOnValidationError());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      Location[] locationArray0 = new Location[4];
      Location location0 = new Location("tempConfigEnvironment");
      locationArray0[0] = location0;
      locationArray0[1] = location0;
      locationArray0[2] = locationArray0[1];
      locationArray0[3] = locationArray0[0];
      classicConfiguration0.setLocations(locationArray0);
      assertEquals("V", classicConfiguration0.getSqlMigrationPrefix());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
          PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
          classicConfiguration0.setDataSource((DataSource) pGSimpleDataSource0);
          assertNull(pGSimpleDataSource0.getSslHostnameVerifier());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      classicConfiguration0.setBaselineVersion(migrationVersion0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      List<Callback> list0 = classicConfiguration0.loadCallbackLocation("SELECT relname FROM pg_catalog.pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace LEFT JOIN pg_depend dep ON dep.objid = c.oid AND dep.deptype = 'e' WHERE c.relkind = 'v' AND  n.nspname = ? AND dep.objid IS NULL", false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      fluentConfiguration0.skipDefaultCallbacks(true);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.isSkipDefaultCallbacks();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isBaselineOnMigrate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getUndoSqlMigrationPrefix();
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getScriptPlaceholderSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getScriptPlaceholderPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      FlywayModel flywayModel0 = new FlywayModel();
      configurationModel0.setFlyway(flywayModel0);
      String string0 = classicConfiguration0.getReportFilename();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      Map<String, String> map0 = classicConfiguration0.getPlaceholders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getPlaceholderSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getPlaceholderSeparator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ConfigurationModel configurationModel0 = classicConfiguration0.getModernConfig();
      assertNotNull(configurationModel0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getKerberosConfigFile();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      JavaMigration[] javaMigrationArray0 = new JavaMigration[8];
      classicConfiguration0.setJavaMigrations(javaMigrationArray0);
      JavaMigration[] javaMigrationArray1 = classicConfiguration0.getJavaMigrations();
      assertEquals(8, javaMigrationArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      classicConfiguration0.setInstalledBy("?");
      String string0 = classicConfiguration0.getInstalledBy();
      assertNotNull(string0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      ClassLoader classLoader0 = classicConfiguration0.getClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getBaselineDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setUrl((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setSqlMigrationSuffixes((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setSqlMigrationSeparator("placeholderSuffix cannot be empty!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      Boolean boolean0 = Boolean.valueOf("Invalid callback: ");
      // Undeclared exception!
      try { 
        classicConfiguration0.setSkipDefaultCallbacks(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setScriptPlaceholderSuffix("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scriptPlaceholderSuffix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setSchemas((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setResolversAsClassNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setModernConfig((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setPassword("qYf}bjk!77ebp&V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setLoggers((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      ErrorCode errorCode0 = ErrorCode.DESCRIPTION_MISMATCH;
      Integer integer0 = new Integer((-1757));
      ErrorOutput errorOutput0 = new ErrorOutput(errorCode0, "tempConfigEnvironment", (String) null, integer0, "0xffff");
      // Undeclared exception!
      try { 
        classicConfiguration0.setLockRetryCount(errorOutput0.error.lineNumber);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setJavaMigrations((JavaMigration[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javaMigrations cannot be null
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setInstalledBy("flywaydb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setInitSql("E2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setExecuteInTransaction(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDataSource((DataSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setConnectRetries(2310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classicConfiguration0.setCherryPick(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: cherryPick is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classicConfiguration0.setCallbacksAsClassNames(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to resolve location classpath:null.
         //
         verifyException("org.flywaydb.core.internal.scanner.classpath.ClassPathScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setCallbacksAsClassNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setBaselineOnMigrate((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.loadCallbackLocation("?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to resolve location classpath:?.
         //
         verifyException("org.flywaydb.core.internal.scanner.classpath.ClassPathScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.loadCallbackLocation("*\"N#v^/{m", false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 13
         // [^\\/]+?\"N#v^\\/{m\\/(?<relpath>.*)
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      FlywayModel flywayModel0 = new FlywayModel();
      configurationModel0.setFlyway(flywayModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isValidateOnMigrate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isValidateMigrationNaming();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      FlywayModel flywayModel0 = new FlywayModel();
      configurationModel0.setFlyway(flywayModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isSkipExecutingMigrations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isPlaceholderReplacement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isOutOfOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isFailOnMissingTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isExecuteInTransaction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isDetectEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isCreateSchemas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.isCleanDisabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getUser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      Hashtable<String, EnvironmentModel> hashtable0 = new Hashtable<String, EnvironmentModel>();
      configurationModel0.setEnvironments(hashtable0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getSchemas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getResolvedEnvironment("flyway.kerberosConfigFile");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      classicConfiguration0.setModernConfig(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getLoggers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getLockRetryCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getLicenseKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getJdbcProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getInstalledBy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getInitSql();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[5];
      classicConfiguration0.setIgnoreMigrationPatterns(stringArray0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getIgnoreMigrationPatterns();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pattern not allowed.
         //
         verifyException("org.flywaydb.core.api.pattern.ValidatePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getIgnoreMigrationPatterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getErrorOverrides();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getEncoding();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getDryRunOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getDriver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getCurrentResolvedEnvironment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.configureUsingEnvVars();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.configure((Configuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration((ClassLoader) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">.#50wy\"(SaS2``a";
      fluentConfiguration0.resolvers(stringArray0);
      ClassicConfiguration classicConfiguration0 = null;
      try {
        classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to instantiate class >.#50wy\"(SaS2``a : Class '>/#50wy\"(SaS2``a.class' should be in target project, but could not be found!
         //
         verifyException("org.flywaydb.core.internal.util.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.configure(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.String@0000000049", "{?Uf/=V#ri6/S");
      classicConfiguration0.configure((Map<String, String>) hashMap0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration(classLoader0);
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        fluentConfiguration0.configuration((Configuration) classicConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      ResolvedEnvironment resolvedEnvironment0 = classicConfiguration0.getResolvedEnvironment("default");
      assertNull(resolvedEnvironment0.getInitSql());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ResolvedEnvironment resolvedEnvironment0 = classicConfiguration0.getResolvedEnvironment("tempConfigEnvironment");
      assertNull(resolvedEnvironment0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.getSchemas();
      ResolvedEnvironment resolvedEnvironment0 = classicConfiguration0.getResolvedEnvironment("tempConfigEnvironment");
      assertNull(resolvedEnvironment0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ResolvedEnvironment resolvedEnvironment0 = classicConfiguration0.getCurrentResolvedEnvironment();
      assertNull(resolvedEnvironment0.getUrl());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      ResolvedEnvironment resolvedEnvironment0 = classicConfiguration0.getCurrentResolvedEnvironment();
      assertNull(resolvedEnvironment0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ResourceProvider resourceProvider0 = classicConfiguration0.getResourceProvider();
      assertNull(resourceProvider0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      DataSource dataSource0 = classicConfiguration0.getDataSource();
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      Class<String> class0 = String.class;
      TreeSet<OraclePKIPrincipalImpl> treeSet0 = new TreeSet<OraclePKIPrincipalImpl>();
      Subject subject0 = new Subject(true, treeSet0, treeSet0, treeSet0);
      Class<Location> class1 = Location.class;
      Set<Location> set0 = subject0.getPrivateCredentials(class1);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "G8F<");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Charset charset0 = Charset.defaultCharset();
      ResourceNameCache resourceNameCache0 = new ResourceNameCache();
      LocationScannerCache locationScannerCache0 = new LocationScannerCache();
      Scanner<String> scanner0 = new Scanner<String>(class0, set0, classLoader0, charset0, false, true, resourceNameCache0, locationScannerCache0, true);
      classicConfiguration0.setResourceProvider(scanner0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setModernConfig((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getCherryPick();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      Callback[] callbackArray0 = new Callback[0];
      classicConfiguration0.setCallbacks(callbackArray0);
      assertFalse(classicConfiguration0.isValidateMigrationNaming());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Callback[] callbackArray0 = classicConfiguration0.getCallbacks();
      assertEquals(0, callbackArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      JavaMigration[] javaMigrationArray0 = classicConfiguration0.getJavaMigrations();
      assertEquals(0, javaMigrationArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      NoopClassProvider noopClassProvider0 = NoopClassProvider.INSTANCE;
      classicConfiguration0.setJavaMigrationClassProvider(noopClassProvider0);
      assertEquals("", classicConfiguration0.getKerberosConfigFile());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      MigrationResolver[] migrationResolverArray0 = classicConfiguration0.getResolvers();
      assertEquals(0, migrationResolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setBaselineVersion("U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      ParsingContext parsingContext0 = new ParsingContext();
      Map<String, String> map0 = parsingContext0.getPlaceholders();
      classicConfiguration0.setPlaceholders(map0);
      assertEquals("FP__", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationResolver[] migrationResolverArray0 = new MigrationResolver[0];
      classicConfiguration0.setResolvers(migrationResolverArray0);
      assertTrue(classicConfiguration0.isReportEnabled());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      DatabaseType databaseType0 = classicConfiguration0.getDatabaseType();
      assertNull(databaseType0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      Map<String, String> map0 = classicConfiguration0.getPlaceholders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      FluentConfiguration fluentConfiguration1 = fluentConfiguration0.target(migrationVersion0);
      assertEquals(50, fluentConfiguration1.getLockRetryCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      FluentConfiguration fluentConfiguration1 = fluentConfiguration0.target((MigrationVersion) null);
      assertFalse(fluentConfiguration1.isMixed());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      OraclePKIProvider oraclePKIProvider0 = new OraclePKIProvider();
      classicConfiguration0.configure((Properties) oraclePKIProvider0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setUrl("getCharacterStream(int)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No database found to handle getCharacterStream(int)
         //
         verifyException("org.flywaydb.core.internal.database.DatabaseTypeRegister", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setUrl((String) null);
      assertEquals("__", classicConfiguration0.getScriptPlaceholderSuffix());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      classicConfiguration0.setCallbacksAsClassNames(stringArray0);
      assertFalse(classicConfiguration0.isBaselineOnMigrate());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setConnectRetriesInterval((-1903655909));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number for connectRetriesInterval (must be 0 or greater): -1903655909
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setConnectRetries((-2028705170));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of connectRetries (must be 0 or greater): -2028705170
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      FluentConfiguration fluentConfiguration1 = fluentConfiguration0.connectRetries(1);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration1);
      int int0 = classicConfiguration0.getConnectRetries();
      assertEquals("report", classicConfiguration0.getReportFilename());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setSqlMigrationSeparator("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sqlMigrationSeparator cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setSqlMigrationSeparator("EAT");
      assertEquals("EAT", classicConfiguration0.getSqlMigrationSeparator());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setScriptPlaceholderSuffix("tempConfigEnvironment");
      assertTrue(classicConfiguration0.isValidateOnMigrate());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholderSeparator("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // placeholderSeparator cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPlaceholderSeparator("]|P|c$YZnZ f]+e'.\"T");
      assertEquals("]|P|c$YZnZ f]+e'.\"T", classicConfiguration0.getPlaceholderSeparator());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholderSuffix((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // placeholderSuffix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPlaceholderSuffix("flyway.placeholderSeparator");
      assertEquals("flyway.placeholderSeparator", classicConfiguration0.getPlaceholderSuffix());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setScriptPlaceholderPrefix((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scriptPlaceholderPrefix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setScriptPlaceholderPrefix("/u(R@Kn>V/4iLeen");
      assertEquals("/u(R@Kn>V/4iLeen", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholderPrefix((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // placeholderPrefix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPlaceholderPrefix("fLVi5");
      assertEquals("fLVi5", classicConfiguration0.getPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setInstalledBy("");
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationPattern[] migrationPatternArray0 = classicConfiguration0.getCherryPick();
      assertNull(migrationPatternArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      MigrationPattern[] migrationPatternArray0 = classicConfiguration0.getCherryPick();
      assertNull(migrationPatternArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.getTarget();
      assertTrue(classicConfiguration0.isFailOnMissingTarget());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      OutputStream outputStream0 = classicConfiguration0.getDryRunOutput();
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ValidatePattern[] validatePatternArray0 = classicConfiguration0.getIgnoreMigrationPatterns();
      assertEquals(1, validatePatternArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ClassLoader) null);
      ClassProvider<JavaMigration> classProvider0 = classicConfiguration0.getJavaMigrationClassProvider();
      assertNull(classProvider0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isReportEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      boolean boolean0 = classicConfiguration0.isReportEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      ClassicConfiguration classicConfiguration1 = null;
      try {
        classicConfiguration1 = new ClassicConfiguration(classicConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setDataSource("qzfj%taq)ROy32`U", "qzfj%taq)ROy32`U", "qzfj%taq)ROy32`U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setInitSql("KOI8_R");
      assertEquals(50, classicConfiguration0.getLockRetryCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setKerberosConfigFile("flyway.placeholderReplacement");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: kerberosConfigFile is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration(classLoader0);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.isStream();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      PluginRegister pluginRegister0 = classicConfiguration0.getPluginRegister();
      classicConfiguration0.setPluginRegister(pluginRegister0);
      assertEquals(50, classicConfiguration0.getLockRetryCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isCleanOnValidationError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getKerberosConfigFile();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setSkipDefaultResolvers((Boolean) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.isSkipDefaultResolvers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setIgnoreMigrationPatterns((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getUser();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setDriver("/`I0[u,hL_K`s%E");
      assertFalse(classicConfiguration0.isDetectEncoding());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getScriptPlaceholderPrefix();
      assertEquals("FP__", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      MockThread mockThread0 = new MockThread("l=#.MA&o@O5\"<");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classicConfiguration0.setClassLoader(classLoader0);
      assertEquals("FP__", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isBatch();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setBaselineVersion((MigrationVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isValidateOnMigrate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getTable();
      assertEquals("flyway_schema_history", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration(classLoader0);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.getPlaceholderSuffix();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDryRunOutputAsFileName((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: dryRunOutput is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getPlaceholderSeparator();
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isDetectEncoding();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setLicenseKey("U%~/ESwKJTjfH/GHJ");
      assertEquals("<< Flyway Baseline >>", classicConfiguration0.getBaselineDescription());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = Boolean.valueOf("tempConfigEnvironment");
      classicConfiguration0.setCleanOnValidationError(boolean0);
      assertTrue(classicConfiguration0.isCreateSchemas());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getUndoSqlMigrationPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setBatch(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: batch is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      FlywayModel flywayModel0 = FlywayModel.defaults();
      Boolean boolean0 = flywayModel0.getSkipExecutingMigrations();
      classicConfiguration0.setOutOfOrder(boolean0);
      assertFalse(classicConfiguration0.isSkipDefaultCallbacks());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setRepeatableSqlMigrationPrefix("y!P Q'Acm");
      assertEquals("y!P Q'Acm", classicConfiguration0.getRepeatableSqlMigrationPrefix());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isCreateSchemas();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getReportFilename();
      assertEquals("report", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isSkipDefaultResolvers();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationPattern[] migrationPatternArray0 = new MigrationPattern[0];
      // Undeclared exception!
      try { 
        classicConfiguration0.setCherryPick(migrationPatternArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: cherryPick is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setTargetAsString("getUsedConnectionInternal");
      assertFalse(classicConfiguration0.isBaselineOnMigrate());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      FlywayModel flywayModel0 = FlywayModel.defaults();
      Boolean boolean0 = flywayModel0.getSkipExecutingMigrations();
      classicConfiguration0.setGroup(boolean0);
      assertTrue(classicConfiguration0.isValidateOnMigrate());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        classicConfiguration0.setJdbcProperties(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: jdbcProperties is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setLocations((Location[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      int int0 = classicConfiguration0.getLockRetryCount();
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getDefaultSchema();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      classicConfiguration0.setSqlMigrationSuffixes(stringArray0);
      assertFalse(classicConfiguration0.isFailOnMissingTarget());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isSkipExecutingMigrations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setBaselineVersionAsString("=a^,/D!BT$'kB");
      // Undeclared exception!
      try { 
        classicConfiguration0.getBaselineVersion();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Version may only contain 0..9 and . (dot). Invalid version: =a^,/D!BT$'kB
         //
         verifyException("org.flywaydb.core.api.MigrationVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setDefaultSchema("$F > #x");
      assertEquals("$F > #x", classicConfiguration0.getDefaultSchema());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getDriver();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setEncodingAsString("QJexR;G");
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isExecuteInTransaction();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getLicenseKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isMixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setTable("lang");
      assertEquals("lang", classicConfiguration0.getTable());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setSqlMigrationPrefix("tempConfigEnvironment");
      assertFalse(classicConfiguration0.isFailOnMissingTarget());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tempConfigEnvironment");
      // Undeclared exception!
      try { 
        classicConfiguration0.setDryRunOutput(mockFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: dryRunOutput is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setMixed((Boolean) null);
      assertFalse(classicConfiguration0.isBatch());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.isBaselineOnMigrate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Location[] locationArray0 = classicConfiguration0.getLocations();
      assertEquals(1, locationArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setStream(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: stream is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ValidatePattern[] validatePatternArray0 = new ValidatePattern[0];
      classicConfiguration0.setIgnoreMigrationPatterns(validatePatternArray0);
      assertEquals("FP__", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Map<String, String> map0 = classicConfiguration0.getJdbcProperties();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setSkipDefaultCallbacks((Boolean) null);
      assertNull(classicConfiguration0.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setUser("ConnectionsCreatedCountAttrDisplayName");
      assertFalse(classicConfiguration0.isSkipDefaultResolvers());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationVersion migrationVersion0 = classicConfiguration0.getBaselineVersion();
      classicConfiguration0.setTarget(migrationVersion0);
      assertEquals(":", classicConfiguration0.getPlaceholderSeparator());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = classicConfiguration0.getErrorOverrides();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      ConfigurationModel configurationModel0 = fluentConfiguration0.getModernConfig();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getSqlMigrationPrefix();
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MockFile mockFile0 = new MockFile("tempConfigEnvironment");
      // Undeclared exception!
      try { 
        classicConfiguration0.setDryRunOutputAsFile(mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: dryRunOutput is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isCleanDisabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      classicConfiguration0.setLoggers(stringArray0);
      assertEquals("V", classicConfiguration0.getSqlMigrationPrefix());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = Boolean.FALSE;
      classicConfiguration0.setPlaceholderReplacement(boolean0);
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration(classLoader0);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.isFailOnMissingTarget();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Charset charset0 = classicConfiguration0.getEncoding();
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      classicConfiguration0.setFailOnMissingLocations((Boolean) null);
      assertFalse(classicConfiguration0.isOutOfOrder());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setExecuteInTransaction(false);
      assertFalse(classicConfiguration0.isExecuteInTransaction());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      boolean boolean0 = classicConfiguration0.isValidateMigrationNaming();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      int int0 = classicConfiguration0.getConnectRetries();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[1];
      classicConfiguration0.setResolversAsClassNames(stringArray0);
      assertFalse(classicConfiguration0.isFailOnMissingTarget());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isSkipDefaultCallbacks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.configure((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.internal.configuration.ConfigUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.getPlaceholderPrefix();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isFailOnMissingLocations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = classicConfiguration0.getLoggers();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDetectEncoding(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: detectEncoding is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getTablespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getRepeatableSqlMigrationPrefix();
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setErrorOverrides((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: errorOverrides is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setTablespace("HST");
      assertEquals("HST", classicConfiguration0.getTablespace());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      int int0 = classicConfiguration0.getConnectRetriesInterval();
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setValidateMigrationNaming((Boolean) null);
      assertEquals(50, classicConfiguration0.getLockRetryCount());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      classicConfiguration0.setLocationsAsStrings(stringArray0);
      assertEquals("FP__", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Charset charset0 = Charset.defaultCharset();
      classicConfiguration0.setEncoding(charset0);
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setSkipExecutingMigrations(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: skipExecutingMigrations is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration(classLoader0);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.getInitSql();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getBaselineDescription();
      assertEquals("<< Flyway Baseline >>", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = classicConfiguration0.getSqlMigrationSuffixes();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = Boolean.FALSE;
      classicConfiguration0.setReportEnabled(boolean0);
      assertFalse(classicConfiguration0.isDetectEncoding());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isOutOfOrder();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setOutputQueryResults(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: outputQueryResults is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPassword("qYf}bjk!77ebp&V");
      assertFalse(classicConfiguration0.isGroup());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setShouldCreateSchemas(true);
      assertTrue(classicConfiguration0.isCreateSchemas());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getInstalledBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isGroup();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getPassword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isPlaceholderReplacement();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getSqlMigrationSeparator();
      assertEquals("__", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getScriptPlaceholderSuffix();
      assertEquals("__", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setUndoSqlMigrationPrefix(" hh,&Ou-oMb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: undoSqlMigrationPrefix is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isOutputQueryResults();
      assertTrue(boolean0);
  }
}
