/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:53:10 GMT 2024
 */

package org.flywaydb.core.internal.configuration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.flywaydb.core.internal.configuration.TomlUtils;
import org.flywaydb.core.internal.configuration.models.ConfigurationModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TomlUtils_ESTest extends TomlUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TomlUtils.loadConfigurationFromEnvironment();
      // Undeclared exception!
      TomlUtils.loadConfigurationFromEnvironment();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFromCommandlineArgs((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.internal.configuration.TomlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFiles((List<File>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.internal.configuration.TomlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFile((File) null, "ppaX7)xE;5YoEwq6dS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.internal.configuration.TomlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " |a>/F 3:ZEvY)94 ,");
      Stack<File> stack0 = new Stack<File>();
      MockFile mockFile0 = new MockFile("");
      stack0.add((File) mockFile0);
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFiles(stack0, "_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No mapper found for '.0/_' extension
         //
         verifyException("org.flywaydb.core.internal.util.ObjectMapperFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_4,v.02AI0=>uD|wi");
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFile(mockFile0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No mapper found for '.02AI0=>uD|wi' extension
         //
         verifyException("org.flywaydb.core.internal.util.ObjectMapperFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      MockFile mockFile0 = new MockFile("");
      stack0.add((File) mockFile0);
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFiles(stack0, "_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No mapper found for '' extension
         //
         verifyException("org.flywaydb.core.internal.util.ObjectMapperFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("+P`KQxulMwO0'H48", "+P`KQxulMwO0'H48");
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFile(file0, "+P`KQxulMwO0'H48");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No mapper found for '' extension
         //
         verifyException("org.flywaydb.core.internal.util.ObjectMapperFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("com.google.common.collect.Multimaps$Keys", "com.google.common.collect.Multimaps$Keys");
      // Undeclared exception!
      try { 
        TomlUtils.loadConfigurationFromCommandlineArgs(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized field \"com\" (class org.flywaydb.core.internal.configuration.models.ConfigurationModel), not marked as ignorable (2 known properties: \"environments\", \"flyway\"])
         //  at [Source: UNKNOWN; byte offset: #UNKNOWN] (through reference chain: org.flywaydb.core.internal.configuration.models.ConfigurationModel[\"com\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ConfigurationModel configurationModel0 = TomlUtils.loadConfigurationFromCommandlineArgs(hashMap0);
      assertNotNull(configurationModel0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<File> stack0 = new Stack<File>();
      ConfigurationModel configurationModel0 = TomlUtils.loadConfigurationFiles(stack0, "_");
      assertNotNull(configurationModel0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TomlUtils tomlUtils0 = new TomlUtils();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TomlUtils.loadConfigurationFromEnvironment();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      TomlUtils.loadConfigurationFromCommandlineArgs(hashMap0);
  }
}
