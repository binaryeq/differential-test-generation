/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 21:47:56 GMT 2024
 */

package org.flywaydb.core.api.configuration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import javax.sql.DataSource;
import oracle.jdbc.pool.OracleOCIConnectionPool;
import oracle.ucp.jdbc.PoolXADataSourceImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.flywaydb.core.api.ClassProvider;
import org.flywaydb.core.api.Location;
import org.flywaydb.core.api.MigrationPattern;
import org.flywaydb.core.api.MigrationVersion;
import org.flywaydb.core.api.ResourceProvider;
import org.flywaydb.core.api.callback.Callback;
import org.flywaydb.core.api.configuration.ClassicConfiguration;
import org.flywaydb.core.api.configuration.Configuration;
import org.flywaydb.core.api.configuration.FluentConfiguration;
import org.flywaydb.core.api.logging.Log;
import org.flywaydb.core.api.logging.LogCreator;
import org.flywaydb.core.api.logging.LogFactory;
import org.flywaydb.core.api.migration.JavaMigration;
import org.flywaydb.core.api.pattern.ValidatePattern;
import org.flywaydb.core.api.resolver.MigrationResolver;
import org.flywaydb.core.internal.configuration.models.ConfigurationModel;
import org.flywaydb.core.internal.configuration.models.FlywayModel;
import org.flywaydb.core.internal.configuration.models.ResolvedEnvironment;
import org.flywaydb.core.internal.parser.ParsingContext;
import org.flywaydb.core.internal.plugin.PluginRegister;
import org.flywaydb.core.internal.resource.ResourceName;
import org.flywaydb.core.internal.scanner.LocationScannerCache;
import org.flywaydb.core.internal.scanner.ResourceNameCache;
import org.flywaydb.core.internal.scanner.Scanner;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassicConfiguration_ESTest extends ClassicConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration((ClassLoader) null);
      FluentConfiguration fluentConfiguration1 = fluentConfiguration0.connectRetriesInterval(0);
      assertTrue(fluentConfiguration1.isCreateSchemas());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setConnectRetries(0);
      assertEquals("FP__", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDataSource((String) null, "tempConfigEnvironment", "Y-aMDSv5#?;.C]^|x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing required JDBC URL. Unable to create DataSource!
         //
         verifyException("org.flywaydb.core.internal.jdbc.DriverDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[7];
      classicConfiguration0.setSqlMigrationSuffixes(stringArray0);
      assertEquals("", classicConfiguration0.getOracleKerberosCacheFile());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      classicConfiguration0.setSchemas(stringArray0);
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[1];
      classicConfiguration0.setResolversAsClassNames(stringArray0);
      assertEquals(":", classicConfiguration0.getPlaceholderSeparator());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String[] stringArray0 = classicConfiguration0.getSqlMigrationSuffixes();
      classicConfiguration0.setLoggers(stringArray0);
      assertFalse(classicConfiguration0.isSkipExecutingMigrations());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Location[] locationArray0 = new Location[2];
      Location location0 = new Location("tempConfigEnvironment");
      locationArray0[0] = location0;
      locationArray0[1] = location0;
      classicConfiguration0.setLocations(locationArray0);
      assertFalse(classicConfiguration0.isValidateMigrationNaming());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ValidatePattern[] validatePatternArray0 = new ValidatePattern[0];
      classicConfiguration0.setIgnoreMigrationPatterns(validatePatternArray0);
      assertFalse(classicConfiguration0.isDetectEncoding());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ResourceName resourceName0 = new ResourceName("", (String) null, "", "oracle.jdbc.driver.OracleArray", "tempConfigEnvironment", "tempConfigEnvironment", false, (String) null);
      MigrationVersion migrationVersion0 = resourceName0.getVersion();
      classicConfiguration0.setBaselineVersion(migrationVersion0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionFactoryProperties();
      classicConfiguration0.configure(properties0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isSkipDefaultResolvers();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isPlaceholderReplacement();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isOutOfOrder();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isFailOnMissingLocations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isBaselineOnMigrate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getUser();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setUrl("tempConfigEnvironment");
      String string0 = classicConfiguration0.getUrl();
      assertEquals("tempConfigEnvironment", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getUndoSqlMigrationPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getTable();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getSqlMigrationSeparator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getSqlMigrationPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getScriptPlaceholderSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getScriptPlaceholderPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getReportFilename();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getRepeatableSqlMigrationPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      Map<String, String> map0 = classicConfiguration0.getPlaceholders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getPlaceholderSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getPlaceholderSeparator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getPlaceholderPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getOracleKerberosCacheFile();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = classicConfiguration0.getLoggers();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getKerberosConfigFile();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Map<String, String> map0 = classicConfiguration0.getJdbcProperties();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setInstalledBy(";");
      String string0 = classicConfiguration0.getInstalledBy();
      assertEquals(";", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getDriver();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setConnectRetries(819);
      int int0 = classicConfiguration0.getConnectRetries();
      assertEquals(819, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ClassLoader classLoader0 = classicConfiguration0.getClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      String string0 = classicConfiguration0.getBaselineDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setValidateMigrationNaming((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setUser("tempConfigEnvironment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setUrl("NET");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setSqlMigrationSeparator((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sqlMigrationSeparator cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setShouldCreateSchemas(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setScriptPlaceholderPrefix("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scriptPlaceholderPrefix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      configurationModel0.setFlyway((FlywayModel) null);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholderSuffix("latest?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setLocationsAsStrings((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setInstalledBy("tempConfigEnvironment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setInitSql("Types.BLOB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setIgnoreMigrationPatterns((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setEncodingAsString("\"Nib+Gy\"#6ayO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setEncoding((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setDriver("aZ{k]?yA]bsw7$>q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+t~~F?lb";
      // Undeclared exception!
      try { 
        classicConfiguration0.setCallbacksAsClassNames(stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +t~~F[^\\/]lb\\/(?<relpath>.*)
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setCallbacksAsClassNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[1];
      LogCreator logCreator0 = mock(LogCreator.class, new ViolatedAssumptionAnswer());
      doReturn((Log) null).when(logCreator0).createLogger(any(java.lang.Class.class));
      LogFactory.setLogCreator(logCreator0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setCallbacksAsClassNames(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.internal.logging.buffered.BufferedLog", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setCallbacks((Callback[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.loadCallbackLocation("tempConfigEnvironment", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to resolve location classpath:tempConfigEnvironment.
         //
         verifyException("org.flywaydb.core.internal.scanner.classpath.ClassPathScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.loadCallbackLocation("yKY,*,a1k(%J_/b", false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 38
         // yKY,[^\\/]+?,a1k(%J_\\/b\\/(?<relpath>.*)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      LogCreator logCreator0 = mock(LogCreator.class, new ViolatedAssumptionAnswer());
      doReturn((Log) null).when(logCreator0).createLogger(any(java.lang.Class.class));
      LogFactory.setLogCreator(logCreator0);
      // Undeclared exception!
      try { 
        classicConfiguration0.loadCallbackLocation(":", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.internal.logging.buffered.BufferedLog", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isValidateOnMigrate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isValidateMigrationNaming();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isSkipExecutingMigrations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isSkipDefaultCallbacks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isOutputQueryResults();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isOracleSqlplusWarn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isOracleSqlplus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isMixed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isGroup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isFailOnMissingTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isExecuteInTransaction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isDetectEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isCreateSchemas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isCleanOnValidationError();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isCleanDisabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isBatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      configurationModel0.setFlyway((FlywayModel) null);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getUndoSqlMigrationPrefix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getSqlMigrationSuffixes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getSchemas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getResolvedEnvironment("tempConfigEnvironment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getPassword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getLockRetryCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getLocations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getInitSql();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[9];
      classicConfiguration0.setIgnoreMigrationPatterns(stringArray0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getIgnoreMigrationPatterns();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pattern not allowed.
         //
         verifyException("org.flywaydb.core.api.pattern.ValidatePattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getIgnoreMigrationPatterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getErrorOverrides();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getEncoding();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getDryRunOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getConnectRetriesInterval();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.getConnectRetries();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getCherryPick();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.configureUsingEnvVars();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.configure((Configuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      ParsingContext parsingContext0 = new ParsingContext();
      Map<String, String> map0 = parsingContext0.getPlaceholders();
      // Undeclared exception!
      try { 
        classicConfiguration0.configure(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration((ClassLoader) null);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.configure((Configuration) fluentConfiguration0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      JavaMigration[] javaMigrationArray0 = new JavaMigration[1];
      classicConfiguration0.setJavaMigrations(javaMigrationArray0);
      assertEquals("", classicConfiguration0.getKerberosConfigFile());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ResolvedEnvironment resolvedEnvironment0 = classicConfiguration0.getResolvedEnvironment("default");
      assertNull(resolvedEnvironment0.getInitSql());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FluentConfiguration fluentConfiguration0 = new FluentConfiguration((ClassLoader) null);
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(fluentConfiguration0);
      classicConfiguration0.getResolvedEnvironment("");
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      ResolvedEnvironment resolvedEnvironment0 = classicConfiguration0.getCurrentResolvedEnvironment();
      assertNull(resolvedEnvironment0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ResourceProvider resourceProvider0 = classicConfiguration0.getResourceProvider();
      assertNull(resourceProvider0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      DataSource dataSource0 = classicConfiguration0.getDataSource();
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      classicConfiguration0.setResourceProvider((ResourceProvider) null);
      assertFalse(classicConfiguration0.isSkipDefaultResolvers());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setModernConfig((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholders((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationResolver[] migrationResolverArray0 = classicConfiguration0.getResolvers();
      assertEquals(0, migrationResolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Callback[] callbackArray0 = new Callback[0];
      classicConfiguration0.setCallbacks(callbackArray0);
      assertNull(classicConfiguration0.getTablespace());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Callback[] callbackArray0 = classicConfiguration0.getCallbacks();
      assertEquals(0, callbackArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setBaselineVersion("rCS\"v,1gaqVP,M");
      assertFalse(classicConfiguration0.isSkipDefaultResolvers());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ConfigurationModel configurationModel0 = classicConfiguration0.getModernConfig();
      assertNotNull(configurationModel0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(400);
      classicConfiguration0.setPlaceholders(hashtable0);
      assertEquals("<< Flyway Baseline >>", classicConfiguration0.getBaselineDescription());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setResolvers((MigrationResolver[]) null);
      assertNull(classicConfiguration0.getOracleWalletLocation());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      classicConfiguration0.setReportFilename("Fk]vD4WmY i1b0WBH6");
      assertEquals("Fk]vD4WmY i1b0WBH6", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      PluginRegister pluginRegister0 = classicConfiguration0.getPluginRegister();
      assertNotNull(pluginRegister0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ClassProvider<JavaMigration> classProvider0 = classicConfiguration0.getJavaMigrationClassProvider();
      assertNull(classProvider0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(classLoader0);
      JavaMigration[] javaMigrationArray0 = classicConfiguration0.getJavaMigrations();
      assertEquals(0, javaMigrationArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConfigurationModel configurationModel0 = ConfigurationModel.defaults();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      Class<JavaMigration> class0 = JavaMigration.class;
      LinkedHashSet<Location> linkedHashSet0 = new LinkedHashSet<Location>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Violating instance: instance=%s, service=%s, db=%s");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Charset charset0 = Charset.defaultCharset();
      ResourceNameCache resourceNameCache0 = new ResourceNameCache();
      LocationScannerCache locationScannerCache0 = new LocationScannerCache();
      Scanner<JavaMigration> scanner0 = new Scanner<JavaMigration>(class0, linkedHashSet0, classLoader0, charset0, false, false, resourceNameCache0, locationScannerCache0, true);
      classicConfiguration0.setJavaMigrationClassProvider(scanner0);
      assertFalse(classicConfiguration0.isStream());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationVersion migrationVersion0 = MigrationVersion.NEXT;
      classicConfiguration0.setTarget(migrationVersion0);
      assertFalse(classicConfiguration0.isOracleSqlplus());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setTarget((MigrationVersion) null);
      assertFalse(classicConfiguration0.isDetectEncoding());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.placeholders.AGT", unaryOperator0);
      classicConfiguration0.configure((Map<String, String>) hashtable0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.ignoreMigrationPatterns", unaryOperator0);
      classicConfiguration0.configure((Map<String, String>) hashtable0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.oracle.kerberosCacheFile", unaryOperator0);
      // Undeclared exception!
      try { 
        classicConfiguration0.configure((Map<String, String>) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: oracle.kerberosCacheFile is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Function<String, String> function0 = Function.identity();
      hashtable0.computeIfAbsent("flyway.errorOverrides", function0);
      // Undeclared exception!
      try { 
        classicConfiguration0.configure((Map<String, String>) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: errorOverrides is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.sqlMigrationSeparator", unaryOperator0);
      classicConfiguration0.configure((Map<String, String>) hashtable0);
      assertEquals("flyway.sqlMigrationSeparator", classicConfiguration0.getSqlMigrationSeparator());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Converter<String, String> converter0 = Converter.identity();
      hashtable0.computeIfAbsent("flyway.sqlMigrationPrefix", converter0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(hashtable0);
      classicConfiguration0.configure((Map<String, String>) hashMap0);
      assertEquals("flyway.sqlMigrationPrefix", classicConfiguration0.getSqlMigrationPrefix());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.locations", unaryOperator0);
      classicConfiguration0.configure((Map<String, String>) hashtable0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.password", unaryOperator0);
      classicConfiguration0.configure((Map<String, String>) hashtable0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.url", unaryOperator0);
      // Undeclared exception!
      try { 
        classicConfiguration0.configure((Map<String, String>) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No database found to handle flyway.url
         //
         verifyException("org.flywaydb.core.internal.database.DatabaseTypeRegister", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashtable0.computeIfAbsent("flyway.driver", unaryOperator0);
      classicConfiguration0.configure((Map<String, String>) hashtable0);
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.computeIfAbsent("environments.tempConfigEnvironment^0oBj:En({bNr", unaryOperator0);
      classicConfiguration0.configure((Map<String, String>) hashtable0);
      assertEquals(1, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      ClassicConfiguration classicConfiguration1 = null;
      try {
        classicConfiguration1 = new ClassicConfiguration(classicConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      List<Callback> list0 = classicConfiguration0.loadCallbackLocation("tempConfigEnvironment", false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.flywaydb.core.api.configuration.ClassicConfiguration";
      // Undeclared exception!
      try { 
        classicConfiguration0.setCallbacksAsClassNames(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid callback: org.flywaydb.core.api.configuration.ClassicConfiguration (must implement org.flywaydb.core.api.callback.Callback)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      classicConfiguration0.setCallbacksAsClassNames(stringArray0);
      assertNull(classicConfiguration0.getInstalledBy());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setConnectRetriesInterval((-1553));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number for connectRetriesInterval (must be 0 or greater): -1553
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setConnectRetriesInterval(1043);
      assertTrue(classicConfiguration0.isPlaceholderReplacement());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setConnectRetries((-4002));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of connectRetries (must be 0 or greater): -4002
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setSqlMigrationSeparator("~mE,qM.GA<4Jy>btgo");
      assertEquals("~mE,qM.GA<4Jy>btgo", classicConfiguration0.getSqlMigrationSeparator());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setJavaMigrations((JavaMigration[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // javaMigrations cannot be null
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setScriptPlaceholderSuffix((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scriptPlaceholderSuffix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setScriptPlaceholderSuffix("Enku7.2.:kc,");
      assertEquals("Enku7.2.:kc,", classicConfiguration0.getScriptPlaceholderSuffix());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholderSeparator((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // placeholderSeparator cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPlaceholderSeparator("k)w~*00JD=");
      assertEquals("k)w~*00JD=", classicConfiguration0.getPlaceholderSeparator());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholderSuffix((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // placeholderSuffix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPlaceholderSuffix("skpExecuingMigrations");
      assertEquals("skpExecuingMigrations", classicConfiguration0.getPlaceholderSuffix());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setScriptPlaceholderPrefix("");
      assertEquals("", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setPlaceholderPrefix("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // placeholderPrefix cannot be empty!
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPlaceholderPrefix("JkMX]cOA");
      assertEquals("JkMX]cOA", classicConfiguration0.getPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setInstalledBy("");
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationPattern[] migrationPatternArray0 = classicConfiguration0.getCherryPick();
      assertNull(migrationPatternArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      MigrationPattern[] migrationPatternArray0 = classicConfiguration0.getCherryPick();
      assertNull(migrationPatternArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.getTarget();
      boolean boolean0 = classicConfiguration0.isFailOnMissingTarget();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      OutputStream outputStream0 = classicConfiguration0.getDryRunOutput();
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ValidatePattern[] validatePatternArray0 = classicConfiguration0.getIgnoreMigrationPatterns();
      assertEquals(1, validatePatternArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      classicConfiguration0.getResolvedEnvironment("tempConfigEnvironment");
      // Undeclared exception!
      try { 
        classicConfiguration0.getDriver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.setDataSource("tempConfigEnvironment", "tempConfigEnvironment", "tempConfigEnvironment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setBaselineDescription(",o[!]uYf(i|K");
      assertEquals(",o[!]uYf(i|K", classicConfiguration0.getBaselineDescription());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setInitSql("PNT");
      assertFalse(classicConfiguration0.isOutOfOrder());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getOracleKerberosCacheFile();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setKerberosConfigFile("flyway.placeholders.MIT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: kerberosConfigFile is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isStream();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.configureUsingEnvVars();
      classicConfiguration0.getCurrentResolvedEnvironment();
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPluginRegister((PluginRegister) null);
      assertNull(classicConfiguration0.getOracleWalletLocation());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isCleanOnValidationError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getKerberosConfigFile();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = Boolean.TRUE;
      classicConfiguration0.setSkipDefaultResolvers(boolean0);
      assertEquals("FP__", classicConfiguration0.getScriptPlaceholderPrefix());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getUser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setDriver("`0+y87FS(uFQ");
      assertFalse(classicConfiguration0.isSkipDefaultResolvers());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getScriptPlaceholderPrefix();
      assertEquals("FP__", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classicConfiguration0.setClassLoader(classLoader0);
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = new Boolean("af,aq7_");
      classicConfiguration0.setValidateOnMigrate(boolean0);
      assertEquals("<< Flyway Baseline >>", classicConfiguration0.getBaselineDescription());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isBatch();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setBaselineVersion((MigrationVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isValidateOnMigrate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getTable();
      assertEquals("flyway_schema_history", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getPlaceholderSuffix();
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDryRunOutputAsFileName((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: dryRunOutput is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getPlaceholderSeparator();
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isDetectEncoding();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setLicenseKey("initialPoolSize");
      assertFalse(classicConfiguration0.isStream());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setCleanOnValidationError((Boolean) null);
      assertFalse(classicConfiguration0.isSkipDefaultCallbacks());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setBaselineOnMigrate((Boolean) null);
      assertFalse(classicConfiguration0.isOracleSqlplus());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getUndoSqlMigrationPrefix();
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setBatch(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: batch is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      OracleOCIConnectionPool oracleOCIConnectionPool0 = new OracleOCIConnectionPool();
      classicConfiguration0.setDataSource((DataSource) oracleOCIConnectionPool0);
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setOutOfOrder((Boolean) null);
      assertEquals("U", classicConfiguration0.getUndoSqlMigrationPrefix());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setRepeatableSqlMigrationPrefix("errorOverrides");
      assertEquals("errorOverrides", classicConfiguration0.getRepeatableSqlMigrationPrefix());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isCreateSchemas();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getReportFilename();
      assertEquals("report", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isSkipDefaultResolvers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationPattern[] migrationPatternArray0 = new MigrationPattern[0];
      // Undeclared exception!
      try { 
        classicConfiguration0.setCherryPick(migrationPatternArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: cherryPick is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setTargetAsString("flyway.placeholders.JST");
      assertEquals("flyway_schema_history", classicConfiguration0.getTable());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setOracleSqlplusWarn(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: oracle.sqlplusWarn is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = new Boolean("tempConfigEnvironment");
      classicConfiguration0.setGroup(boolean0);
      assertEquals("__", classicConfiguration0.getScriptPlaceholderSuffix());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classicConfiguration0.setCherryPick(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: cherryPick is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Map<String, String> map0 = classicConfiguration0.getPlaceholders();
      // Undeclared exception!
      try { 
        classicConfiguration0.setJdbcProperties(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: jdbcProperties is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isOracleSqlplusWarn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setLocations((Location[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      int int0 = classicConfiguration0.getLockRetryCount();
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isOracleSqlplus();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getDefaultSchema();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setSqlMigrationSuffixes((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isSkipExecutingMigrations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setBaselineVersionAsString("[Q#')3Iq(p)Qt&@S^+");
      assertEquals(50, classicConfiguration0.getLockRetryCount());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setDefaultSchema("isCriUnpopular");
      assertEquals("isCriUnpopular", classicConfiguration0.getDefaultSchema());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setEncodingAsString("flyway.detectEncoding");
      assertEquals("__", classicConfiguration0.getScriptPlaceholderSuffix());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isExecuteInTransaction();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getLicenseKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isMixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setTable("g]@#XMMq9S^2b;[#");
      assertEquals("g]@#XMMq9S^2b;[#", classicConfiguration0.getTable());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setSqlMigrationPrefix("flyway.reportFilename");
      assertEquals("flyway.reportFilename", classicConfiguration0.getSqlMigrationPrefix());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDryRunOutput((OutputStream) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: dryRunOutput is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setMixed((Boolean) null);
      assertEquals("", classicConfiguration0.getKerberosConfigFile());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.isBaselineOnMigrate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Location[] locationArray0 = classicConfiguration0.getLocations();
      assertEquals(1, locationArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setStream(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: stream is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setIgnoreMigrationPatterns((ValidatePattern[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getJdbcProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setSkipDefaultCallbacks((Boolean) null);
      assertFalse(classicConfiguration0.isOracleSqlplus());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setUser("tempConfigEnvironment");
      assertEquals("<< Flyway Baseline >>", classicConfiguration0.getBaselineDescription());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MigrationVersion migrationVersion0 = classicConfiguration0.getBaselineVersion();
      assertEquals("1", migrationVersion0.toString());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = classicConfiguration0.getErrorOverrides();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getSqlMigrationPrefix();
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      MockFile mockFile0 = new MockFile("tempConfigEnvironment", "tempConfigEnvironment");
      // Undeclared exception!
      try { 
        classicConfiguration0.setDryRunOutputAsFile(mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: dryRunOutput is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isCleanDisabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setLoggers((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPlaceholderReplacement((Boolean) null);
      assertFalse(classicConfiguration0.isGroup());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isFailOnMissingTarget();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setOracleWalletLocation("flyway.placeholders.MST");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: oracle.walletLocation is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getInitSql();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      FlywayModel flywayModel0 = FlywayModel.defaults();
      Boolean boolean0 = flywayModel0.getOutOfOrder();
      classicConfiguration0.setFailOnMissingLocations(boolean0);
      assertFalse(classicConfiguration0.isFailOnMissingLocations());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setExecuteInTransaction(true);
      assertTrue(classicConfiguration0.isExecuteInTransaction());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isValidateMigrationNaming();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      int int0 = classicConfiguration0.getConnectRetries();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setResolversAsClassNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isSkipDefaultCallbacks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.configure((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.internal.configuration.ConfigUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setSchemas((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getPlaceholderPrefix();
      assertEquals("${", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isFailOnMissingLocations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration((ConfigurationModel) null);
      // Undeclared exception!
      try { 
        classicConfiguration0.getLoggers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setDetectEncoding(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: detectEncoding is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getTablespace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getRepeatableSqlMigrationPrefix();
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setErrorOverrides((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: errorOverrides is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setTablespace("+*");
      assertEquals("+*", classicConfiguration0.getTablespace());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      int int0 = classicConfiguration0.getConnectRetriesInterval();
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Integer integer0 = new Integer((-1563));
      classicConfiguration0.setLockRetryCount(integer0);
      assertEquals("__", classicConfiguration0.getScriptPlaceholderSuffix());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setOracleSqlplus(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: oracle.sqlplus is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = Boolean.TRUE;
      classicConfiguration0.setValidateMigrationNaming(boolean0);
      assertFalse(classicConfiguration0.isGroup());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = new String[0];
      classicConfiguration0.setLocationsAsStrings(stringArray0);
      assertTrue(classicConfiguration0.isOutputQueryResults());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setOracleKerberosCacheFile("tempConfigEnvironment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: oracle.kerberosCacheFile is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String[] stringArray0 = classicConfiguration0.getSchemas();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Charset charset0 = classicConfiguration0.getEncoding();
      classicConfiguration0.setEncoding(charset0);
      assertFalse(classicConfiguration0.isSkipDefaultResolvers());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setSkipExecutingMigrations(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: skipExecutingMigrations is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      ClassicConfiguration classicConfiguration1 = new ClassicConfiguration(classicConfiguration0);
      classicConfiguration0.configure((Configuration) classicConfiguration1);
      assertEquals("report", classicConfiguration1.getReportFilename());
      assertEquals("report", classicConfiguration0.getReportFilename());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getBaselineDescription();
      assertEquals("<< Flyway Baseline >>", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isOutOfOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setOutputQueryResults(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: outputQueryResults is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setPassword("flyway.placeholders.PST");
      assertTrue(classicConfiguration0.isCreateSchemas());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setShouldCreateSchemas(true);
      assertTrue(classicConfiguration0.isCreateSchemas());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      classicConfiguration0.setUrl("tempConfigEnvironment");
      ClassicConfiguration classicConfiguration1 = null;
      try {
        classicConfiguration1 = new ClassicConfiguration(classicConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No database found to handle tempConfigEnvironment
         //
         verifyException("org.flywaydb.core.internal.database.DatabaseTypeRegister", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getInstalledBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      Boolean boolean0 = Boolean.valueOf("tempConfigEnvironment");
      classicConfiguration0.setCleanDisabled(boolean0);
      assertEquals("flyway_schema_history", classicConfiguration0.getTable());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isGroup();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ConfigurationModel configurationModel0 = new ConfigurationModel();
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration(configurationModel0);
      // Undeclared exception!
      try { 
        classicConfiguration0.isPlaceholderReplacement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getOracleWalletLocation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getSqlMigrationSeparator();
      assertEquals("__", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      String string0 = classicConfiguration0.getScriptPlaceholderSuffix();
      assertEquals("__", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      // Undeclared exception!
      try { 
        classicConfiguration0.setUndoSqlMigrationPrefix("[C< m0UY9gwl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Flyway Teams Edition upgrade required: undoSqlMigrationPrefix is not supported by Flyway Community Edition
         // Try Flyway Teams Edition for free: https://rd.gt/2VzHpkY
         //
         verifyException("org.flywaydb.core.api.configuration.ClassicConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ClassicConfiguration classicConfiguration0 = new ClassicConfiguration();
      boolean boolean0 = classicConfiguration0.isOutputQueryResults();
      assertTrue(boolean0);
  }
}
