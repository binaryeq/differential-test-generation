/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 11 03:42:12 GMT 2024
 */

package org.glassfish.jersey.jdkhttp.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.glassfish.jersey.internal.l10n.Localizable;
import org.glassfish.jersey.jdkhttp.internal.LocalizationMessages;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalizationMessages_ESTest extends LocalizationMessages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableERROR_CONTAINER_EXCEPTION_IO();
      assertEquals("error.container.exception.io", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableERROR_CONTAINER_URI_PATH_START("IOException thrown when creating the JDK HttpServer.");
      assertEquals("error.container.uri.path.start", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableERROR_CONTAINER_URI_PATH_EMPTY(object0);
      assertEquals("error.container.uri.path.empty", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableERROR_RESPONSEWRITER_RESPONSE_UNCOMMITED();
      assertEquals("error.responsewriter.response.uncommited", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableERROR_RESPONSEWRITER_WRITING_HEADERS();
      assertEquals("error.responsewriter.writing.headers", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableINFO_CONTAINER_HTTPS_NO_SSL();
      assertEquals("info.container.https.no.ssl", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableERROR_CONTAINER_URI_NULL();
      assertEquals("error.container.uri.null", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableWARNING_CONTAINER_URI_SCHEME_SECURED();
      assertEquals("warning.container.uri.scheme.secured", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableERROR_RESPONSEWRITER_SENDING_FAILURE_RESPONSE();
      assertEquals("error.responsewriter.sending.failure.response", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableERROR_CONTAINER_URI_PATH_NULL(object0);
      assertEquals("error.container.uri.path.null", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = LocalizationMessages.WARNING_CONTAINER_URI_SCHEME_SECURED();
      assertEquals("SSLContext is set, but http scheme was used instead of https. The SSLContext will be ignored.", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableERROR_CONTAINER_HTTPS_NO_SSL();
      String string0 = LocalizationMessages.ERROR_CONTAINER_URI_PATH_START(localizable0);
      assertEquals("The URI path, of the URI Attempt to start a HTTPS server with no SSL context defined. must start with a /.", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_CONTAINER_URI_PATH_EMPTY("The URI scheme, of the URI null must be equal (ignoring case) to http or https.");
      assertEquals("The URI path, of the URI The URI scheme, of the URI null must be equal (ignoring case) to http or https. must be present (not an empty string).", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_RESPONSEWRITER_RESPONSE_UNCOMMITED();
      assertEquals("ResponseWriter was not commited yet. Committing the Response now.", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_RESPONSEWRITER_SENDING_FAILURE_RESPONSE();
      assertEquals("Unable to send a failure response.", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_CONTAINER_URI_NULL();
      assertEquals("The URI must not be null.", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_CONTAINER_URI_SCHEME_UNKNOWN((Object) null);
      assertEquals("The URI scheme, of the URI null must be equal (ignoring case) to http or https.", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_CONTAINER_EXCEPTION_IO();
      assertEquals("IOException thrown when creating the JDK HttpServer.", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableERROR_CONTAINER_URI_SCHEME_UNKNOWN(object0);
      assertEquals("error.container.uri.scheme.unknown", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = LocalizationMessages.INFO_CONTAINER_HTTPS_NO_SSL();
      assertEquals("HTTPS server will be created with no SSL context defined. HttpsConfigurator must be set before the server is started.", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_CONTAINER_URI_PATH_NULL("ResponseWriter was not commited yet. Committing the Response now.");
      assertEquals("The URI path, of the URI ResponseWriter was not commited yet. Committing the Response now. must be non-null.", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_CONTAINER_HTTPS_NO_SSL();
      assertEquals("Attempt to start a HTTPS server with no SSL context defined.", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = LocalizationMessages.ERROR_RESPONSEWRITER_WRITING_HEADERS();
      assertEquals("Error writing out the response headers.", string0);
  }
}
