/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 11 00:22:47 GMT 2024
 */

package org.glassfish.jersey.servlet.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.glassfish.jersey.internal.l10n.Localizable;
import org.glassfish.jersey.servlet.internal.LocalizationMessages;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalizationMessages_ESTest extends LocalizationMessages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = LocalizationMessages.RESOURCE_CONFIG_PARENT_CLASS_INVALID(object0, object1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableRESOURCE_CONFIG_PARENT_CLASS_INVALID(object0, object1);
      assertEquals("resource.config.parent.class.invalid", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = LocalizationMessages.EXCEPTION_SENDING_ERROR_RESPONSE(object0, object1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = LocalizationMessages.SERVLET_PATH_MISMATCH(object0, object1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizablePERSISTENCE_UNIT_NOT_CONFIGURED(object0);
      assertEquals("persistence.unit.not.configured", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableRESOURCE_CONFIG_UNABLE_TO_LOAD(object0);
      assertEquals("resource.config.unable.to.load", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableSERVLET_REQUEST_SUSPEND_FAILED();
      assertEquals("servlet.request.suspend.failed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableFORM_PARAM_CONSUMED(object0);
      assertEquals("form.param.consumed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHEADER_VALUE_READ_FAILED();
      assertEquals("header.value.read.failed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableNO_THREAD_LOCAL_VALUE((Object) null);
      assertEquals("no.thread.local.value", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableEXCEPTION_SENDING_ERROR_RESPONSE(object0, "The servlet path java.lang.Object@73105839 does not start with the filter context path java.lang.Object@73105839.");
      assertEquals("exception.sending.error.response", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableASYNC_PROCESSING_NOT_SUPPORTED();
      assertEquals("async.processing.not.supported", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableSERVLET_PATH_MISMATCH(object0, object0);
      assertEquals("servlet.path.mismatch", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      String string0 = LocalizationMessages.INIT_PARAM_REGEX_SYNTAX_INVALID("No thread local value in scope for proxy of java.lang.Object@5ff992.", object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = LocalizationMessages.FILTER_CONTEXT_PATH_MISSING();
      assertEquals("The root of the app was not properly defined. Either use a Servlet 3.x container or add an init-param jersey.config.servlet.filter.contextPath to the filter configuration. Due to Servlet 2.x API, Jersey cannot determine the request base URI solely from the ServletContext. The application will most likely not work.", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableINIT_PARAM_REGEX_SYNTAX_INVALID(object0, object0);
      assertEquals("init.param.regex.syntax.invalid", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      String string0 = LocalizationMessages.NO_THREAD_LOCAL_VALUE(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = LocalizationMessages.SERVLET_REQUEST_SUSPEND_FAILED();
      assertEquals("Attempt to put servlet request into asynchronous mode has failed. Please check your servlet configuration - all Servlet instances and Servlet filters involved in the request processing must explicitly declare support for asynchronous request processing.", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = LocalizationMessages.HEADER_VALUE_READ_FAILED();
      assertEquals("Attempt to read the header value failed.", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableFILTER_CONTEXT_PATH_MISSING();
      String string0 = LocalizationMessages.PERSISTENCE_UNIT_NOT_CONFIGURED(localizable0);
      assertEquals("Persistence unit \"The root of the app was not properly defined. Either use a Servlet 3.x container or add an init-param jersey.config.servlet.filter.contextPath to the filter configuration. Due to Servlet 2.x API, Jersey cannot determine the request base URI solely from the ServletContext. The application will most likely not work.\" is not configured as a servlet parameter in web.xml.", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = LocalizationMessages.RESOURCE_CONFIG_UNABLE_TO_LOAD("Asynchronous processing not supported on Servlet 2.x container.");
      assertEquals("Resource configuration class Asynchronous processing not supported on Servlet 2.x container. could not be loaded.", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = LocalizationMessages.FORM_PARAM_CONSUMED("Asynchronous processing not supported on Servlet 2.x container.");
      assertEquals("A servlet request to the URI Asynchronous processing not supported on Servlet 2.x container. contains form parameters in the request body but the request body has been consumed by the servlet or a servlet filter accessing the request parameters. Only resource methods using @FormParam will work as expected. Resource methods consuming the request body by other means will not work as expected.", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = LocalizationMessages.ASYNC_PROCESSING_NOT_SUPPORTED();
      assertEquals("Asynchronous processing not supported on Servlet 2.x container.", string0);
  }
}
