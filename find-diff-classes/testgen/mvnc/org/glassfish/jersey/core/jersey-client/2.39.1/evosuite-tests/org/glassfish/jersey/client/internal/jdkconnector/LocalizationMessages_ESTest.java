/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 11 00:32:20 GMT 2024
 */

package org.glassfish.jersey.client.internal.jdkconnector;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.glassfish.jersey.client.internal.jdkconnector.LocalizationMessages;
import org.glassfish.jersey.internal.l10n.Localizable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalizationMessages_ESTest extends LocalizationMessages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      String string0 = LocalizationMessages.CONNECTION_CHANGING_STATE("\"Unexpected HTTP chunk header.\"", "\"HTTP packet initial line is too large.\"", object0, "\"Unexpected HTTP chunk header.\"");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableNEGATIVE_CHUNK_SIZE(object0, "\"HTTP packet header is too large.\"");
      LocalizationMessages.NEGATIVE_CHUNK_SIZE("\"HTTP packet header is too large.\"", localizable0);
      assertEquals("negative.chunk.size", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCLOSED_BY_CLIENT_WHILE_RECEIVING_BODY();
      assertEquals("closed.by.client.while.receiving.body", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizablePROXY_PASSWORD_MISSING();
      assertEquals("proxy.password.missing", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_BODY_SIZE_OVERFLOW();
      assertEquals("http.body.size.overflow", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_REQUEST_BODY_SIZE_NOT_AVAILABLE();
      assertEquals("http.request.body.size.not.available", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTHREAD_POOL_CORE_SIZE_TOO_SMALL();
      assertEquals("thread.pool.core.size.too.small", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_REQUEST_NO_BUFFERED_BODY();
      assertEquals("http.request.no.buffered.body", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTIMEOUT_RECEIVING_RESPONSE_BODY();
      assertEquals("timeout.receiving.response.body", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizablePROXY_FAIL_AUTH_HEADER();
      assertEquals("proxy.fail.auth.header", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCLOSED_WHILE_RECEIVING_BODY();
      assertEquals("closed.while.receiving.body", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTRANSPORT_CONNECTION_NOT_CLOSED();
      assertEquals("transport.connection.not.closed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableWRITE_WHEN_NOT_READY();
      assertEquals("write.when.not.ready", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableHTTP_CONNECTION_ESTABLISHING_ILLEGAL_STATE(object0);
      assertEquals("http.connection.establishing.illegal.state", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableSTREAM_CLOSED_FOR_INPUT();
      assertEquals("stream.closed.for.input", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_INITIAL_LINE_OVERFLOW();
      assertEquals("http.initial.line.overflow", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableSTREAM_CLOSED();
      assertEquals("stream.closed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableREDIRECT_ERROR_DETERMINING_LOCATION();
      assertEquals("redirect.error.determining.location", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_REQUEST_NO_BODY();
      assertEquals("http.request.no.body", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizablePROXY_MISSING_AUTH_HEADER();
      assertEquals("proxy.missing.auth.header", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTRANSPORT_EXECUTOR_QUEUE_LIMIT_REACHED();
      assertEquals("transport.executor.queue.limit.reached", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableCONNECTION_CHANGING_STATE(object0, object0, object0, object0);
      assertEquals("connection.changing.state", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizablePROXY_407_TWICE();
      assertEquals("proxy.407.twice", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizablePROXY_QOP_NO_SUPPORTED("\"Error determining redirect location.\"");
      assertEquals("proxy.qop.no.supported", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizablePROXY_CONNECT_FAIL("\"Operation not supported in asynchronous mode.\"");
      assertEquals("proxy.connect.fail", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableUNEXPECTED_DATA_IN_BUFFER();
      assertEquals("unexpected.data.in.buffer", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_CONNECTION_NOT_IDLE("\"Body size exceeds declared size\"");
      assertEquals("http.connection.not.idle", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_INVALID_CONTENT_LENGTH();
      assertEquals("http.invalid.content.length", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizablePROXY_USER_NAME_MISSING();
      assertEquals("proxy.user.name.missing", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_NEGATIVE_CONTENT_LENGTH();
      assertEquals("http.negative.content.length", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTRANSPORT_SET_CLASS_LOADER_FAILED();
      assertEquals("transport.set.class.loader.failed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_UNEXPECTED_CHUNK_HEADER();
      Localizable localizable1 = LocalizationMessages.localizableCONNECTOR_CONFIGURATION(localizable0);
      assertEquals("http.unexpected.chunk.header", localizable0.getKey());
      assertEquals("connector.configuration", localizable1.getKey());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCONNECTION_CLOSED();
      assertEquals("connection.closed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_PACKET_HEADER_OVERFLOW();
      assertEquals("http.packet.header.overflow", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableWRITING_FAILED();
      assertEquals("writing.failed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableASYNC_OPERATION_NOT_SUPPORTED();
      assertEquals("async.operation.not.supported", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTRANSPORT_EXECUTOR_CLOSED();
      assertEquals("transport.executor.closed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableREDIRECT_INFINITE_LOOP();
      assertEquals("redirect.infinite.loop", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = LocalizationMessages.SSL_SESSION_CLOSED();
      assertEquals("\"SSL session has been closed.\"", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = LocalizationMessages.CLOSED_WHILE_SENDING_REQUEST();
      assertEquals("\"Connection closed by the server while sending request\".", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = LocalizationMessages.READ_LISTENER_SET_ONLY_ONCE();
      assertEquals("\"Read listener can be set only once.\"", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableSSL_SESSION_CLOSED();
      assertEquals("ssl.session.closed", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = LocalizationMessages.SYNC_OPERATION_NOT_SUPPORTED();
      assertEquals("\"Operation not supported in asynchronous mode.\"", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = LocalizationMessages.BUFFER_INCORRECT_LENGTH();
      assertEquals("\"Buffer passed for encoding is neither a multiple of chunkSize nor smaller than chunkSize.\"", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = LocalizationMessages.WRITE_LISTENER_SET_ONLY_ONCE();
      assertEquals("\"Write listener can be set only once.\"", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = LocalizationMessages.CLOSED_WHILE_RECEIVING_RESPONSE();
      assertEquals("\"Connection closed by the server while receiving response.\"", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = LocalizationMessages.STREAM_CLOSED();
      assertEquals("\"The stream has been closed.\"", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableREAD_LISTENER_SET_ONLY_ONCE();
      assertEquals("read.listener.set.only.once", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_INVALID_CONTENT_LENGTH();
      assertEquals("\"Invalid format of content length code.\"", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = LocalizationMessages.REDIRECT_NO_LOCATION();
      assertEquals("\"Received redirect that does not contain a location or the location is empty.\"", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCLOSED_BY_CLIENT_WHILE_SENDING();
      String string0 = LocalizationMessages.REDIRECT_LIMIT_REACHED(localizable0);
      assertEquals("\"Max chained redirect limit (\"Connection closed by the client while sending request.\") exceeded.\"", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCLOSED_WHILE_RECEIVING_RESPONSE();
      Object object0 = new Object();
      Localizable localizable1 = LocalizationMessages.localizableNEGATIVE_CHUNK_SIZE(localizable0, object0);
      assertEquals("closed.while.receiving.response", localizable0.getKey());
      assertEquals("negative.chunk.size", localizable1.getKey());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = LocalizationMessages.CLOSED_WHILE_RECEIVING_BODY();
      assertEquals("\"Connection closed by the server while receiving response body.\"", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      String string0 = LocalizationMessages.PROXY_QOP_NO_SUPPORTED(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_TRAILER_HEADER_OVERFLOW();
      assertEquals("\"The chunked encoding trailer header is too large.\"", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_REQUEST_NO_BUFFERED_BODY();
      assertEquals("\"Buffered body is available only in buffered body mode.\"", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_NEGATIVE_CONTENT_LENGTH();
      assertEquals("\"Content length cannot be less than 0.\"", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_CHUNK_ENCODING_PREFIX_OVERFLOW();
      assertEquals("\"The chunked encoding length prefix is too large.\"", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = LocalizationMessages.CLOSED_BY_CLIENT_WHILE_RECEIVING();
      assertEquals("\"Connection closed by the client while receiving response.\"", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_UNEXPECTED_CHUNK_HEADER();
      assertEquals("\"Unexpected HTTP chunk header.\"", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = LocalizationMessages.TRANSPORT_EXECUTOR_CLOSED();
      assertEquals("\"Cannot set thread context class loader.\"", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = LocalizationMessages.TIMEOUT_RECEIVING_RESPONSE_BODY();
      assertEquals("\"Timeout receiving response body.\"", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCLOSED_BY_CLIENT_WHILE_SENDING();
      String string0 = LocalizationMessages.HTTP_CONNECTION_NOT_IDLE(localizable0);
      assertEquals("\"Http request cannot be sent over a connection that is in other state than IDLE. Current state: \"Connection closed by the client while sending request.\"\" ", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_INITIAL_LINE_OVERFLOW();
      assertEquals("\"HTTP packet initial line is too large.\"", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableSYNC_OPERATION_NOT_SUPPORTED();
      assertEquals("sync.operation.not.supported", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = LocalizationMessages.CONNECTION_TIMEOUT();
      assertEquals("\"Connection timed out.\"", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCLOSED_BY_CLIENT_WHILE_RECEIVING();
      assertEquals("closed.by.client.while.receiving", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableWRITE_LISTENER_SET_ONLY_ONCE();
      assertEquals("write.listener.set.only.once", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_BODY_SIZE_OVERFLOW();
      assertEquals("\"Body size exceeds declared size\"", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = LocalizationMessages.WRITE_WHEN_NOT_READY();
      assertEquals("\"Asynchronous write called when stream is in non-ready state.\"", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = LocalizationMessages.THREAD_POOL_MAX_SIZE_TOO_SMALL();
      assertEquals("\"Max thread pool size cannot be smaller than 3.\"", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      Localizable localizable0 = LocalizationMessages.localizableREDIRECT_LIMIT_REACHED(object0);
      assertEquals("redirect.limit.reached", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = LocalizationMessages.PROXY_UNSUPPORTED_SCHEME("\"Read listener can be set only once.\"");
      assertEquals("\"Unsupported scheme: \"Read listener can be set only once.\".\"", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = LocalizationMessages.PROXY_PASSWORD_MISSING();
      assertEquals("\"Password is missing\"", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_REQUEST_NO_BODY();
      assertEquals("\"This HTTP request does not have a body.\"", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = LocalizationMessages.PROXY_FAIL_AUTH_HEADER();
      assertEquals("\"Creating authorization header failed.\"", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = LocalizationMessages.PROXY_MISSING_AUTH_HEADER();
      assertEquals("\"Proxy-Authenticate header value is missing or empty.\"", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCONNECTION_TIMEOUT();
      assertEquals("connection.timeout", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = LocalizationMessages.TIMEOUT_RECEIVING_RESPONSE();
      assertEquals("\"Timeout receiving response.\"", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_TRAILER_HEADER_OVERFLOW();
      assertEquals("http.trailer.header.overflow", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = LocalizationMessages.CONNECTION_CLOSED();
      assertEquals("\"Connection closed by the server.\"", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableCLOSED_WHILE_SENDING_REQUEST();
      assertEquals("closed.while.sending.request", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = LocalizationMessages.UNEXPECTED_DATA_IN_BUFFER();
      assertEquals("\"Unexpected data remain in the buffer after the HTTP response has been parsed.\"", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = LocalizationMessages.CONNECTOR_CONFIGURATION("\"Body size is not available in chunked body mode.\"");
      assertEquals("\"Connector configuration: \"Body size is not available in chunked body mode.\".\"", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      String string0 = LocalizationMessages.PROXY_CONNECT_FAIL(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTIMEOUT_RECEIVING_RESPONSE();
      assertEquals("timeout.receiving.response", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      String string0 = LocalizationMessages.HTTP_INVALID_CHUNK_SIZE_HEX_VALUE(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_INVALID_CHUNK_SIZE_HEX_VALUE("\"Unexpected data remain in the buffer after the HTTP response has been parsed.\"");
      assertEquals("http.invalid.chunk.size.hex.value", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = LocalizationMessages.PROXY_407_TWICE();
      assertEquals("\"Received 407 for the second time.\"", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableREDIRECT_NO_LOCATION();
      Localizable localizable1 = LocalizationMessages.localizablePROXY_UNSUPPORTED_SCHEME(localizable0);
      assertEquals("proxy.unsupported.scheme", localizable1.getKey());
      assertEquals("redirect.no.location", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableHTTP_CHUNK_ENCODING_PREFIX_OVERFLOW();
      assertEquals("http.chunk.encoding.prefix.overflow", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = LocalizationMessages.TRANSPORT_EXECUTOR_QUEUE_LIMIT_REACHED();
      assertEquals("\"A limit of client thread pool queue has been reached.\"", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_PACKET_HEADER_OVERFLOW();
      assertEquals("\"HTTP packet header is too large.\"", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableBUFFER_INCORRECT_LENGTH();
      String string0 = LocalizationMessages.HTTP_CONNECTION_ESTABLISHING_ILLEGAL_STATE(localizable0);
      assertEquals("\"Cannot try to establish connection if the connection is in other than CREATED state. Current state: \"Buffer passed for encoding is neither a multiple of chunkSize nor smaller than chunkSize.\".", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Localizable localizable0 = LocalizationMessages.localizableTHREAD_POOL_MAX_SIZE_TOO_SMALL();
      Object object0 = new Object();
      LocalizationMessages.CONNECTION_CHANGING_STATE(object0, localizable0, object0, localizable0);
      assertEquals("thread.pool.max.size.too.small", localizable0.getKey());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = LocalizationMessages.REDIRECT_ERROR_DETERMINING_LOCATION();
      assertEquals("\"Error determining redirect location.\"", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = LocalizationMessages.PROXY_USER_NAME_MISSING();
      assertEquals("\"User name is missing\"", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = LocalizationMessages.ASYNC_OPERATION_NOT_SUPPORTED();
      assertEquals("\"Operation not supported in synchronous mode.\"", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = LocalizationMessages.WRITING_FAILED();
      assertEquals("\"Writing data failed\"", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = LocalizationMessages.TRANSPORT_CONNECTION_NOT_CLOSED();
      assertEquals("\"Could not close a connection.\"", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = LocalizationMessages.STREAM_CLOSED_FOR_INPUT();
      assertEquals("\"This stream has already been closed for input.\"", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = LocalizationMessages.TRANSPORT_SET_CLASS_LOADER_FAILED();
      assertEquals("\"Cannot set thread context class loader.\"", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = LocalizationMessages.HTTP_REQUEST_BODY_SIZE_NOT_AVAILABLE();
      assertEquals("\"Body size is not available in chunked body mode.\"", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = LocalizationMessages.CLOSED_BY_CLIENT_WHILE_RECEIVING_BODY();
      assertEquals("\"Connection closed by the client while receiving response body.\"", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = LocalizationMessages.THREAD_POOL_CORE_SIZE_TOO_SMALL();
      assertEquals("\"Core thread pool size cannot be smaller than 0.\"", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = LocalizationMessages.CLOSED_BY_CLIENT_WHILE_SENDING();
      assertEquals("\"Connection closed by the client while sending request.\"", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = LocalizationMessages.REDIRECT_INFINITE_LOOP();
      assertEquals("\"Infinite loop in chained redirects detected.\"", string0);
  }
}
