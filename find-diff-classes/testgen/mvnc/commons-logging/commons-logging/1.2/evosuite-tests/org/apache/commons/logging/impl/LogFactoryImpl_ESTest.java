/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:33:09 GMT 2024
 */

package org.apache.commons.logging.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.util.Hashtable;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogConfigurationException;
import org.apache.commons.logging.impl.LogFactoryImpl;
import org.apache.commons.logging.impl.SimpleLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogFactoryImpl_ESTest extends LogFactoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.logDiagnostic("5qZ:J/c^\"Gb+5%4RHc*");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.removeAttribute("org.apache.commons.logging.Log.allowFlawedContext");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.attributes = null;
      try { 
        logFactoryImpl0.newInstance("AsyncAppender-Dispatcher-");
        fail("Expecting exception: LogConfigurationException");
      
      } catch(LogConfigurationException e) {
         //
         // java.lang.NullPointerException (Caused by java.lang.NullPointerException)
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Class<ExceptionInInitializerError>[] classArray0 = (Class<ExceptionInInitializerError>[]) Array.newInstance(Class.class, 2);
      logFactoryImpl0.logConstructorSignature = classArray0;
      boolean boolean0 = logFactoryImpl0.isJdk14Available();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Class<ExceptionInInitializerError>[] classArray0 = (Class<ExceptionInInitializerError>[]) Array.newInstance(Class.class, 2);
      logFactoryImpl0.logConstructorSignature = classArray0;
      boolean boolean0 = logFactoryImpl0.isJdk13LumberjackAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = LogFactoryImpl.isDiagnosticsEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      ClassLoader classLoader0 = LogFactoryImpl.getClassLoader(class0);
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Class<Annotation> class0 = Annotation.class;
      logFactoryImpl0.setAttribute("XFlQ_5\"'w", class0);
      String[] stringArray0 = logFactoryImpl0.getAttributeNames();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      // Undeclared exception!
      try { 
        logFactoryImpl0.setAttribute((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.newInstance((String) null);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      // Undeclared exception!
      try { 
        logFactoryImpl0.setAttribute((String) null, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.instances = null;
      // Undeclared exception!
      try { 
        logFactoryImpl0.release();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("org.apache.commons.logging.Log", "org.apache.commons.logging.Log.allowFlawedHierarchy");
      try { 
        logFactoryImpl0.getLogConstructor();
        fail("Expecting exception: LogConfigurationException");
      
      } catch(LogConfigurationException e) {
         //
         // User-specified log class 'org.apache.commons.logging.Log.allowFlawedHierarchy' cannot be found or is not useable.
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.attributes = null;
      // Undeclared exception!
      try { 
        logFactoryImpl0.getLogConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      logFactoryImpl0.setAttribute("org.apache.commons.logging.Log", exceptionInInitializerError0);
      // Undeclared exception!
      try { 
        logFactoryImpl0.getLogConstructor();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.ExceptionInInitializerError cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("org.apache.commons.logging.Log", "org.apache.commons.logging.Log.allowFlawedHierarchy");
      // Undeclared exception!
      try { 
        logFactoryImpl0.getLogClassName();
        fail("Expecting exception: LogConfigurationException");
      
      } catch(LogConfigurationException e) {
         //
         // User-specified log class 'org.apache.commons.logging.Log.allowFlawedHierarchy' cannot be found or is not useable.
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.attributes = null;
      // Undeclared exception!
      try { 
        logFactoryImpl0.getLogClassName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("org.apache.commons.logging.Log", logFactoryImpl0);
      // Undeclared exception!
      try { 
        logFactoryImpl0.getLogClassName();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.logging.impl.LogFactoryImpl cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      // Undeclared exception!
      try { 
        logFactoryImpl0.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.newInstance((String) null);
      // Undeclared exception!
      try { 
        logFactoryImpl0.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Class<ExceptionInInitializerError>[] classArray0 = (Class<ExceptionInInitializerError>[]) Array.newInstance(Class.class, 14);
      // Undeclared exception!
      try { 
        logFactoryImpl0.getInstance(classArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.attributes = null;
      // Undeclared exception!
      try { 
        logFactoryImpl0.getAttributeNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      // Undeclared exception!
      try { 
        logFactoryImpl0.getAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.newInstance((String) null);
      // Undeclared exception!
      try { 
        logFactoryImpl0.getAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Class<ExceptionInInitializerError>[] classArray0 = (Class<ExceptionInInitializerError>[]) Array.newInstance(Class.class, 3);
      logFactoryImpl0.logConstructorSignature = classArray0;
      try { 
        logFactoryImpl0.getInstance("HW!mtHFR2^GNY,");
        fail("Expecting exception: LogConfigurationException");
      
      } catch(LogConfigurationException e) {
         //
         // No suitable Log implementation
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("org.apache.commons.logging.Log", "org.apache.commons.logging.Log");
      Class<Object> class0 = Object.class;
      try { 
        logFactoryImpl0.getInstance(class0);
        fail("Expecting exception: LogConfigurationException");
      
      } catch(LogConfigurationException e) {
         //
         // User-specified log class 'org.apache.commons.logging.Log' cannot be found or is not useable.
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("org.apache.commons.logging.Log.allowFlawedContext", "org.apache.commons.logging.Log.allowFlawedContext");
      SimpleLog simpleLog0 = (SimpleLog)logFactoryImpl0.newInstance((String) null);
      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Class<ExceptionInInitializerError>[] classArray0 = (Class<ExceptionInInitializerError>[]) Array.newInstance(Class.class, 3);
      logFactoryImpl0.logConstructorSignature = classArray0;
      boolean boolean0 = logFactoryImpl0.isLog4JAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.getLogClassName();
      try { 
        logFactoryImpl0.newInstance((String) null);
        fail("Expecting exception: LogConfigurationException");
      
      } catch(LogConfigurationException e) {
         //
         // java.lang.NullPointerException (Caused by java.lang.NullPointerException)
         //
         verifyException("org.apache.commons.logging.impl.LogFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.newInstance((String) null);
      Log log0 = logFactoryImpl0.getInstance("");
      assertTrue(log0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.getLogConstructor();
      Class<ExceptionInInitializerError>[] classArray0 = (Class<ExceptionInInitializerError>[]) Array.newInstance(Class.class, 6);
      logFactoryImpl0.logConstructorSignature = classArray0;
      boolean boolean0 = logFactoryImpl0.isLog4JAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.getLogClassName();
      Constructor constructor0 = logFactoryImpl0.getLogConstructor();
      assertFalse(constructor0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.newInstance((String) null);
      String string0 = logFactoryImpl0.getLogClassName();
      assertEquals("org.apache.commons.logging.impl.SimpleLog", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("use_tccl", (Object) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("use_tccl", "use_tccl");
      Log log0 = logFactoryImpl0.newInstance("use_tccl");
      assertNotNull(log0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.setAttribute("8P^ljd$", "8P^ljd$");
      Object object0 = logFactoryImpl0.getAttribute("8P^ljd$");
      assertEquals("8P^ljd$", object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Log log0 = logFactoryImpl0.getInstance("u");
      Log log1 = logFactoryImpl0.getInstance("u");
      assertNotNull(log1);
      assertSame(log1, log0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      LogFactoryImpl logFactoryImpl1 = new LogFactoryImpl();
      assertFalse(logFactoryImpl1.equals((Object)logFactoryImpl0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      String[] stringArray0 = logFactoryImpl0.getAttributeNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Class<Object> class0 = Object.class;
      Log log0 = logFactoryImpl0.getInstance(class0);
      assertNotNull(log0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      // Undeclared exception!
      try { 
        logFactoryImpl0.removeAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      logFactoryImpl0.release();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      boolean boolean0 = logFactoryImpl0.isJdk14Available();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Object object0 = logFactoryImpl0.getAttribute("org.apache.commons.logging.simplelog.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassLoader classLoader0 = LogFactoryImpl.getContextClassLoader();
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      Hashtable<Object, Object> hashtable0 = new Hashtable<Object, Object>();
      Object object0 = new Object();
      hashtable0.put(object0, classLoader0);
      logFactoryImpl0.attributes = hashtable0;
      // Undeclared exception!
      try { 
        logFactoryImpl0.getAttributeNames();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      boolean boolean0 = logFactoryImpl0.isLog4JAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LogFactoryImpl logFactoryImpl0 = new LogFactoryImpl();
      boolean boolean0 = logFactoryImpl0.isJdk13LumberjackAvailable();
      assertTrue(boolean0);
  }
}
