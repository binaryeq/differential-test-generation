/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 19:03:49 GMT 2024
 */

package org.apache.commons.io.filefilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import java.io.File;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.regex.Pattern;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NotFileFilter_ESTest extends NotFileFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      IOFileFilter[] iOFileFilterArray0 = new IOFileFilter[8];
      iOFileFilterArray0[0] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[1] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[2] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[3] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[4] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[5] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[6] = (IOFileFilter) orFileFilter0;
      iOFileFilterArray0[7] = (IOFileFilter) orFileFilter0;
      orFileFilter0.addFileFilter(iOFileFilterArray0);
      NotFileFilter notFileFilter0 = new NotFileFilter(orFileFilter0);
      // Undeclared exception!
      try { 
        notFileFilter0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      NotFileFilter notFileFilter0 = new NotFileFilter(directoryFileFilter0);
      // Undeclared exception!
      try { 
        notFileFilter0.accept((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("y+~yPv_", 0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Path> function1 = (Function<Object, Path>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Path, String> converter0 = Converter.from((Function<? super Path, ? extends String>) function0, (Function<? super String, ? extends Path>) function1);
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0, converter0);
      NotFileFilter notFileFilter0 = new NotFileFilter(regexFileFilter0);
      MockFile mockFile0 = new MockFile("OA_");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        notFileFilter0.accept(path0, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      NotFileFilter notFileFilter0 = new NotFileFilter(hiddenFileFilter0);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        notFileFilter0.accept(path0, basicFileAttributes0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      // Undeclared exception!
      try { 
        notFileFilter0.accept((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CanReadFileFilter canReadFileFilter0 = new CanReadFileFilter();
      NotFileFilter notFileFilter0 = new NotFileFilter(canReadFileFilter0);
      // Undeclared exception!
      try { 
        notFileFilter0.accept((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.filefilter.CanReadFileFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("");
      NotFileFilter notFileFilter0 = new NotFileFilter(suffixFileFilter0);
      MockFile mockFile0 = new MockFile("]W}!y yo]Lxr", "]W}!y yo]Lxr");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = notFileFilter0.accept(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      NotFileFilter notFileFilter1 = new NotFileFilter(notFileFilter0);
      File file0 = MockFile.createTempFile("apply", "apply");
      Path path0 = file0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = notFileFilter1.accept(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.TERMINATE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      File file0 = MockFile.createTempFile("apply", "apply");
      boolean boolean0 = notFileFilter0.accept(file0, "apply");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("/-)4]");
      NotFileFilter notFileFilter0 = new NotFileFilter(prefixFileFilter0);
      MockFile mockFile0 = new MockFile("/-)4]");
      boolean boolean0 = notFileFilter0.accept((File) mockFile0, "/-)4]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("/-)4]");
      NotFileFilter notFileFilter0 = new NotFileFilter(prefixFileFilter0);
      MockFile mockFile0 = new MockFile("/-)4]");
      boolean boolean0 = notFileFilter0.accept((File) mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      File file0 = MockFile.createTempFile("DR?l67*XYV>Q4}=?^N", "DR?l67*XYV>Q4}=?^N");
      boolean boolean0 = notFileFilter0.accept(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      NotFileFilter notFileFilter0 = new NotFileFilter(orFileFilter0);
      String string0 = notFileFilter0.toString();
      assertEquals("NOT (OrFileFilter())", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NotFileFilter notFileFilter0 = null;
      try {
        notFileFilter0 = new NotFileFilter((IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filter
         //
         verifyException("java.util.Objects", e);
      }
  }
}
