/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:25:39 GMT 2024
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.UncheckedIOException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.apache.commons.io.output.UncheckedAppendable;
import org.apache.commons.io.output.UncheckedAppendableImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UncheckedAppendableImpl_ESTest extends UncheckedAppendableImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(pipedWriter0);
      String string0 = uncheckedAppendableImpl0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("dos:readonly", true);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(mockPrintWriter0);
      UncheckedAppendable uncheckedAppendable0 = uncheckedAppendableImpl0.append((CharSequence) "dos:readonly", 0, 0);
      assertSame(uncheckedAppendable0, uncheckedAppendableImpl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(stringWriter0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      UncheckedAppendable uncheckedAppendable0 = uncheckedAppendableImpl0.append((CharSequence) stringBuffer0);
      assertSame(uncheckedAppendableImpl0, uncheckedAppendable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(stringWriter0);
      uncheckedAppendableImpl0.append('5');
      assertEquals("5", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(stringWriter0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append((CharSequence) "", 3920, 3920);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(pipedWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append((CharSequence) charBuffer0, 0, 0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(charBuffer0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append((CharSequence) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(charBuffer0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append((CharSequence) "B(/l'jM/#dg`G");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(charBuffer1);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append('9');
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(charBuffer0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append('_');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UncheckedAppendableImpl uncheckedAppendableImpl0 = null;
      try {
        uncheckedAppendableImpl0 = new UncheckedAppendableImpl((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(pipedWriter0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append((CharSequence) "java.io.PipedWriter@1bae43b4");
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(pipedWriter0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append('6');
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(stringWriter0);
      String string0 = uncheckedAppendableImpl0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      UncheckedAppendableImpl uncheckedAppendableImpl0 = new UncheckedAppendableImpl(charBuffer0);
      // Undeclared exception!
      try { 
        uncheckedAppendableImpl0.append((CharSequence) charBuffer0, 0, 20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }
}
