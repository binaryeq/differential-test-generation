/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:58:29 GMT 2024
 */

package org.apache.commons.configuration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.xml.transform.Transformer;
import org.apache.commons.configuration.AbstractHierarchicalFileConfiguration;
import org.apache.commons.configuration.CombinedConfiguration;
import org.apache.commons.configuration.DataConfiguration;
import org.apache.commons.configuration.DefaultConfigurationBuilder;
import org.apache.commons.configuration.DefaultFileSystem;
import org.apache.commons.configuration.FileSystem;
import org.apache.commons.configuration.HierarchicalConfiguration;
import org.apache.commons.configuration.HierarchicalINIConfiguration;
import org.apache.commons.configuration.MultiFileHierarchicalConfiguration;
import org.apache.commons.configuration.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.configuration.VFSFileSystem;
import org.apache.commons.configuration.XMLConfiguration;
import org.apache.commons.configuration.event.ConfigurationErrorEvent;
import org.apache.commons.configuration.event.ConfigurationEvent;
import org.apache.commons.configuration.event.ConfigurationListener;
import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
import org.apache.commons.configuration.reloading.ReloadingStrategy;
import org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy;
import org.apache.commons.configuration.tree.DefaultExpressionEngine;
import org.apache.commons.configuration.tree.UnionCombiner;
import org.apache.commons.configuration.tree.ViewNode;
import org.apache.xerces.impl.xs.util.SimpleLocator;
import org.apache.xerces.xni.parser.XMLParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.LocatorImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractHierarchicalFileConfiguration_ESTest extends AbstractHierarchicalFileConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getFileSystem();
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      hierarchicalINIConfiguration0.addConfigurationListener(xMLConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "SpaceRequiredBeforeEncodingInXMLDecl");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2602);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 2, 10, timeUnit0);
      patternSubtreeConfigurationWrapper0.addProperty("H10i-XCYGj}wFml:l", scheduledFuture0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(hierarchicalINIConfiguration0);
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      hierarchicalINIConfiguration0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getFileSystem();
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      hierarchicalINIConfiguration0.addConfigurationListener(xMLConfiguration0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputStream inputStream0 = null;
      String string0 = "b";
      // Undeclared exception!
      try { 
        hierarchicalINIConfiguration0.load((InputStream) null, "b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getFileSystem();
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      hierarchicalINIConfiguration0.addConfigurationListener(xMLConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "SpaceRequiredBeforeEncodingInXMLDecl");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2602);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 2, 10, timeUnit0);
      patternSubtreeConfigurationWrapper0.addProperty("H10i-XCYGj}wFml:l", scheduledFuture0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(hierarchicalINIConfiguration0);
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      hierarchicalINIConfiguration0.addPropertyDirect("SpaceRequiredBeforeEncodingInXMLDecl", scheduledFuture0);
      assertEquals(10, HierarchicalConfiguration.EVENT_CLEAR_TREE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      String string0 = "org.apache.commons.configuration.AbstractHierarchicalFileConfiguration";
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "org.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      patternSubtreeConfigurationWrapper0.append(xMLConfiguration0);
      patternSubtreeConfigurationWrapper0.getProperties("LW$?,zHzY]TBP]5");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper1 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "org.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      MockFile mockFile0 = new MockFile("", "");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper2 = new PatternSubtreeConfigurationWrapper(patternSubtreeConfigurationWrapper0, "");
      try { 
        patternSubtreeConfigurationWrapper2.save();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file name has been set!
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "org.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      patternSubtreeConfigurationWrapper0.append(xMLConfiguration0);
      patternSubtreeConfigurationWrapper0.getProperties("LW$?,zHzY]TBP]5");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper1 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "org.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      MockFile mockFile0 = new MockFile("", "");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper2 = new PatternSubtreeConfigurationWrapper(patternSubtreeConfigurationWrapper0, "");
      patternSubtreeConfigurationWrapper2.save("LW$?,zHzY]TBP]5");
      try { 
        patternSubtreeConfigurationWrapper2.save();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file name has been set!
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.load("h=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("");
      Integer integer0 = new Integer(5);
      String string0 = "4)3b>Z2 :_@w)W4B";
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException("4)3b>Z2 :_@w)W4B", locatorImpl0);
      SimpleLocator simpleLocator0 = new SimpleLocator("6;{\u0005IFGZRe5__", "E]Q}1ps6%", (-417), 2);
      XMLParseException xMLParseException0 = new XMLParseException(simpleLocator0, "6;{\u0005IFGZRe5__");
      Throwable throwable0 = sAXParseException0.initCause(xMLParseException0);
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(uRL0, (-417), "6;{\u0005IFGZRe5__", "", throwable0);
      multiFileHierarchicalConfiguration0.subnodeConfigurationChanged(configurationErrorEvent0);
      multiFileHierarchicalConfiguration0.getList("6;{\u0005IFGZRe5__");
      multiFileHierarchicalConfiguration0.getInteger("E]Q}1ps6%", integer0);
      try { 
        multiFileHierarchicalConfiguration0.load("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      String string0 = DefaultConfigurationBuilder.ADDITIONAL_NAME;
      hierarchicalINIConfiguration0.reload();
      hierarchicalINIConfiguration0.save("2");
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      try { 
        hierarchicalINIConfiguration0.load((InputStream) pipedInputStream0, "org.apache.commons.configuration.DefaultConfigurationBuilder/ADDITIONAL_CONFIG");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The requested encoding is not supported, try the default encoding.
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      URL uRL0 = MockURL.getHttpExample();
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(uRL0);
      try { 
        defaultConfigurationBuilder0.load(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      Integer integer0 = new Integer(4);
      defaultConfigurationBuilder0.getInteger("5Dfo%EOH", integer0);
      defaultConfigurationBuilder0.isEmpty();
      defaultConfigurationBuilder0.createResultConfiguration();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("iP&^");
      try { 
        multiFileHierarchicalConfiguration0.load("A");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source A
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      Integer integer0 = new Integer(4);
      defaultConfigurationBuilder0.getInteger("", (Integer) 4);
      defaultConfigurationBuilder0.isEmpty();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(defaultConfigurationBuilder0, "vmIN*0Xf ");
      PropertiesConfiguration propertiesConfiguration0 = null;
      try {
        propertiesConfiguration0 = new PropertiesConfiguration((URL) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cannot locate configuration source null
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.setFilePattern((String) null);
      Integer integer0 = new Integer(4);
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder();
      defaultConfigurationBuilder0.getURL();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration1 = new MultiFileHierarchicalConfiguration();
      DefaultConfigurationBuilder defaultConfigurationBuilder1 = new DefaultConfigurationBuilder((URL) null);
      String string0 = defaultConfigurationBuilder0.getConfigurationBasePath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.setFilePattern((String) null);
      Integer integer0 = new Integer(1);
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder();
      defaultConfigurationBuilder0.getURL();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration1 = new MultiFileHierarchicalConfiguration();
      DefaultConfigurationBuilder defaultConfigurationBuilder1 = new DefaultConfigurationBuilder((URL) null);
      String string0 = defaultConfigurationBuilder0.getConfigurationBasePath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getList("");
      hierarchicalINIConfiguration0.getFileSystem();
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      mockFile0.mkdirs();
      hierarchicalINIConfiguration0.addConfigurationListener(xMLConfiguration0);
      xMLConfiguration0.getURL();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "SpaceRequiredBeforeEncodingInXMLDecl");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2602);
      MockThread mockThread0 = new MockThread();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper1 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.removeConfigurationListener(patternSubtreeConfigurationWrapper1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Passed in key must select exactly one node: SpaceRequiredBeforeEncodingInXMLDecl
         //
         verifyException("org.apache.commons.configuration.HierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      URL uRL0 = MockURL.getFileExample();
      xMLConfiguration0.save(uRL0);
      xMLConfiguration0.clearErrorListeners();
      assertNull(xMLConfiguration0.getEncoding());
      
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(uRL0);
      AbstractHierarchicalFileConfiguration.FileConfigurationDelegate abstractHierarchicalFileConfiguration_FileConfigurationDelegate0 = defaultConfigurationBuilder0.createDelegate();
      ReloadingStrategy reloadingStrategy0 = abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.getReloadingStrategy();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.setReloadingStrategy(reloadingStrategy0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.save((Writer) charArrayWriter0);
      File file0 = MockFile.createTempFile("<vag.*+*i='QjA{", "<vag.*+*i='QjA{");
      DefaultConfigurationBuilder defaultConfigurationBuilder1 = new DefaultConfigurationBuilder(file0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(defaultConfigurationBuilder1, "");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper1 = new PatternSubtreeConfigurationWrapper(patternSubtreeConfigurationWrapper0, "org.apache.commons.configuration.DefaultConfigurationBuilder/ADDITIONAL_CONFIG");
      defaultConfigurationBuilder0.containsKey("");
      patternSubtreeConfigurationWrapper1.getFile();
      patternSubtreeConfigurationWrapper0.addConfigurationListener(defaultConfigurationBuilder0);
      assertFalse(defaultConfigurationBuilder1.isDetailEvents());
      
      multiFileHierarchicalConfiguration0.setFileName("X-A{>");
      assertEquals("X-A{>", multiFileHierarchicalConfiguration0.getFileName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder();
      defaultConfigurationBuilder0.getString("rqi~y");
      defaultConfigurationBuilder0.createResultConfiguration();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("iP&^");
      defaultConfigurationBuilder0.isAutoSave();
      try { 
        multiFileHierarchicalConfiguration0.load("A");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source A
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration(";");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(multiFileHierarchicalConfiguration0, "");
      multiFileHierarchicalConfiguration0.addErrorListener(patternSubtreeConfigurationWrapper0);
      ViewNode viewNode0 = new ViewNode();
      multiFileHierarchicalConfiguration0.createSubnodeConfiguration(viewNode0);
      multiFileHierarchicalConfiguration0.removeNode(viewNode0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Short short0 = new Short((short)0);
      multiFileHierarchicalConfiguration0.getShort(";", short0);
      DefaultExpressionEngine defaultExpressionEngine0 = new DefaultExpressionEngine();
      defaultExpressionEngine0.setEscapedDelimiter("org.apache.commons.configuration.AbstractHierarchicalFileConfiguration$FileConfigurationDelegate");
      multiFileHierarchicalConfiguration0.setExpressionEngine(defaultExpressionEngine0);
      multiFileHierarchicalConfiguration0.isSchemaValidation();
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(".");
      FileChangedReloadingStrategy fileChangedReloadingStrategy0 = new FileChangedReloadingStrategy();
      defaultConfigurationBuilder0.setReloadingStrategy(fileChangedReloadingStrategy0);
      defaultConfigurationBuilder0.removeConfigurationProvider(";");
      multiFileHierarchicalConfiguration0.getInteger("..", (Integer) 1);
      defaultConfigurationBuilder0.createNode("..");
      assertEquals(".", defaultConfigurationBuilder0.getFileName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(uRL0);
      DefaultConfigurationBuilder defaultConfigurationBuilder1 = new DefaultConfigurationBuilder();
      String string0 = DefaultConfigurationBuilder.KEY_CONFIGURATION_PROVIDERS;
      defaultConfigurationBuilder0.resetFileSystem();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.getKeys("org.apache.commons.configuration.DefaultConfigurationBuilder/ADDITIONAL_CONFIG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      String string0 = DefaultConfigurationBuilder.ADDITIONAL_NAME;
      hierarchicalINIConfiguration0.reload();
      try { 
        hierarchicalINIConfiguration0.save("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to save to file /home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/commons-configuration/commons-configuration/1.10
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getString("''RA6L=~%A");
      hierarchicalINIConfiguration0.reload();
      try { 
        hierarchicalINIConfiguration0.save("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to save to file /home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/commons-configuration/commons-configuration/1.10
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      String string0 = DefaultConfigurationBuilder.ADDITIONAL_NAME;
      hierarchicalINIConfiguration0.reload();
      hierarchicalINIConfiguration0.save("2");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        hierarchicalINIConfiguration0.load((InputStream) pipedInputStream0, "org.apache.commons.configuration.DefaultConfigurationBuilder/ADDITIONAL_CONFIG");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The requested encoding is not supported, try the default encoding.
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      defaultConfigurationBuilder0.createResultConfiguration();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("iP&^");
      FileSystem fileSystem0 = FileSystem.getDefaultFileSystem();
      multiFileHierarchicalConfiguration0.setFileSystem(fileSystem0);
      try { 
        multiFileHierarchicalConfiguration0.load("A");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source A
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getList("");
      FileSystem fileSystem0 = hierarchicalINIConfiguration0.getFileSystem();
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      hierarchicalINIConfiguration0.addConfigurationListener(xMLConfiguration0);
      xMLConfiguration0.getURL();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "SpaceRequiredBeforeEncodingInXMLDecl");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2602);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 2, 10, timeUnit0);
      patternSubtreeConfigurationWrapper0.addProperty("H10i-XCYGj}wFml:l", scheduledFuture0);
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("SpaceRequiredBeforeEncodingInXMLDecl");
      DataConfiguration dataConfiguration0 = new DataConfiguration(hierarchicalINIConfiguration0);
      multiFileHierarchicalConfiguration0.getString("4r8fz` O@\"IO\")%*A");
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = "";
      try { 
        fileSystem0.getInputStream("", "H10i-XCYGj}wFml:l");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source H10i-XCYGj}wFml:l
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      // Undeclared exception!
      try { 
        defaultConfigurationBuilder0.load((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      defaultConfigurationBuilder0.createResultConfiguration();
      defaultConfigurationBuilder0.getURL();
      String string0 = "RVH:'g%~,2>&d;.rbKe";
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.load("vPxMnQYQZU~%EN~Ks");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      // Undeclared exception!
      try { 
        defaultConfigurationBuilder0.addPropertyDirect("", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key for add operation must be defined!
         //
         verifyException("org.apache.commons.configuration.tree.DefaultExpressionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getList("");
      FileSystem fileSystem0 = hierarchicalINIConfiguration0.getFileSystem();
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "");
      patternSubtreeConfigurationWrapper0.isEmpty();
      xMLConfiguration0.getURL();
      ViewNode viewNode0 = new ViewNode();
      patternSubtreeConfigurationWrapper0.addProperty("H10i-XCYGj}wFml:l", viewNode0);
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("3y2.]WW^jg^Yo`ap8");
      DataConfiguration dataConfiguration0 = new DataConfiguration(patternSubtreeConfigurationWrapper0);
      multiFileHierarchicalConfiguration0.getString("org.apache.commons.configuration.format.date");
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      try { 
        fileSystem0.getInputStream("H10i-XCYGj}wFml:l", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "org.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      patternSubtreeConfigurationWrapper0.getProperties("LW$?,zHzY]TBP]5");
      xMLConfiguration0.getKeys("+TLT[");
      patternSubtreeConfigurationWrapper0.getBigDecimal("", (BigDecimal) null);
      assertFalse(xMLConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H10i-XCYGj}wFml:l/SpaceRequiredBeforeEncodingInXMLDecl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getList("");
      hierarchicalINIConfiguration0.getFileSystem();
      String string0 = "H10i-XCYGj}wFml:l";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("");
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H10i-XCYGj}wFml:l/SpaceRequiredBeforeEncodingInXMLDecl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "G<8[t%Dk9:$HG1\"i");
      hierarchicalINIConfiguration0.clearTree("");
      hierarchicalINIConfiguration0.getFileSystem();
      String string0 = "H10i-XCYGj}wFml:l";
      String string1 = "SpaceRequiredBeforeEncodingInXMLDecl";
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to load the configuration from the URL file:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/commons-configuration/commons-configuration/1.10/H10i-XCYGj%7DwFml:l/SpaceRequiredBeforeEncodingInXMLDecl
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      URL uRL0 = MockURL.getFtpExample();
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(uRL0);
      // Undeclared exception!
      try { 
        defaultConfigurationBuilder0.save(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      VFSFileChangedReloadingStrategy vFSFileChangedReloadingStrategy0 = new VFSFileChangedReloadingStrategy();
      vFSFileChangedReloadingStrategy0.setRefreshDelay(0L);
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("");
      multiFileHierarchicalConfiguration0.getReloadingStrategy();
      multiFileHierarchicalConfiguration0.setReloadingStrategy((ReloadingStrategy) null);
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration1 = new MultiFileHierarchicalConfiguration();
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration1.getKeys();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("");
      multiFileHierarchicalConfiguration0.clearProperty("org.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      multiFileHierarchicalConfiguration0.setFilePattern("[`w3M");
      assertFalse(multiFileHierarchicalConfiguration0.isThrowExceptionOnMissing());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("tk?M9n8q3@+:boV,9eR");
      multiFileHierarchicalConfiguration0.load();
      VFSFileChangedReloadingStrategy vFSFileChangedReloadingStrategy0 = new VFSFileChangedReloadingStrategy();
      vFSFileChangedReloadingStrategy0.setRefreshDelay(0L);
      MockFile mockFile0 = new MockFile("t-EJa>dX^oQz47tAmb");
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(mockFile0);
      defaultConfigurationBuilder0.createResultConfiguration();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration1 = new MultiFileHierarchicalConfiguration((String) null);
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration2 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.clearProperty("iP&^");
      multiFileHierarchicalConfiguration2.setEntityResolver(defaultConfigurationBuilder0);
      multiFileHierarchicalConfiguration2.setFilePattern((String) null);
      assertEquals(11, HierarchicalConfiguration.EVENT_ADD_NODES);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = null;
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      try { 
        defaultConfigurationBuilder0.load("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("e/y]");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(multiFileHierarchicalConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "e/y]");
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("e/y]", "e/y]");
      xMLConfiguration0.setURL(uRL0);
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.setRoot((HierarchicalConfiguration.Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Passed in key must select exactly one node: e/y]
         //
         verifyException("org.apache.commons.configuration.HierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration) null);
      try { 
        MockURI.URI("", "", "", 12, "resolvePublic(", "resolvePublic(", "z:LX");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://@:12resolvePublic(?resolvePublic(#%7Fz:LX
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(hierarchicalINIConfiguration0);
      AbstractHierarchicalFileConfiguration.FileConfigurationDelegate abstractHierarchicalFileConfiguration_FileConfigurationDelegate0 = xMLConfiguration0.createDelegate();
      abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.getFile();
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = null;
      try {
        defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "org.hsqldb.Table";
      MockFile mockFile0 = new MockFile("org.hsqldb.Table", "q6.4O9lr");
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(mockFile0);
      defaultConfigurationBuilder0.setThrowExceptionOnMissing(false);
      AbstractHierarchicalFileConfiguration.FileConfigurationDelegate abstractHierarchicalFileConfiguration_FileConfigurationDelegate0 = defaultConfigurationBuilder0.createDelegate();
      abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.clear();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.setThrowExceptionOnMissing(false);
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.getShort("org.hsqldb.Table", short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      String string0 = DefaultConfigurationBuilder.ADDITIONAL_NAME;
      hierarchicalINIConfiguration0.reload();
      try { 
        hierarchicalINIConfiguration0.refresh();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source null
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      URL uRL0 = MockURL.getFileExample();
      xMLConfiguration0.save(uRL0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "");
      patternSubtreeConfigurationWrapper0.removeConfigurationListener(xMLConfiguration0);
      patternSubtreeConfigurationWrapper0.getKeys("E91Tw2NfJ+V");
      assertFalse(xMLConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      URL uRL0 = MockURL.getFileExample();
      xMLConfiguration0.save(uRL0);
      xMLConfiguration0.clearErrorListeners();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "");
      patternSubtreeConfigurationWrapper0.removeConfigurationListener(xMLConfiguration0);
      patternSubtreeConfigurationWrapper0.getKeys("E91Tw2NfJ+V");
      assertFalse(xMLConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder();
      AbstractHierarchicalFileConfiguration.FileConfigurationDelegate abstractHierarchicalFileConfiguration_FileConfigurationDelegate0 = defaultConfigurationBuilder0.createDelegate();
      abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.getFile();
      DefaultConfigurationBuilder defaultConfigurationBuilder1 = null;
      try {
        defaultConfigurationBuilder1 = new DefaultConfigurationBuilder((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder();
      Document document0 = null;
      defaultConfigurationBuilder0.setAutoSave(false);
      try { 
        defaultConfigurationBuilder0.getConfiguration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source null
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=35GJ,!{xt5f+tQJ", "");
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration(mockFile0);
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder();
      Document document0 = null;
      defaultConfigurationBuilder0.setAutoSave(false);
      try { 
        defaultConfigurationBuilder0.getConfiguration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source null
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      String string0 = "";
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder("");
      HierarchicalConfiguration.Node hierarchicalConfiguration_Node0 = defaultConfigurationBuilder0.createNode("");
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.createSubnodeConfiguration(hierarchicalConfiguration_Node0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("No ConfigurationProvider registered for tag ");
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder("No ConfigurationProvider registered for tag ");
      Object object0 = defaultConfigurationBuilder0.interpolate(multiFileHierarchicalConfiguration0);
      DefaultConfigurationBuilder.ConfigurationProvider defaultConfigurationBuilder_ConfigurationProvider0 = new DefaultConfigurationBuilder.ConfigurationProvider();
      Class<ViewNode> class0 = ViewNode.class;
      defaultConfigurationBuilder_ConfigurationProvider0.setConfigurationClass(class0);
      defaultConfigurationBuilder0.setConfigurationBasePath("");
      defaultConfigurationBuilder0.addConfigurationProvider("org.apache.xerces.dom.DeferredAttrNSImpl", defaultConfigurationBuilder_ConfigurationProvider0);
      Object object1 = defaultConfigurationBuilder0.clone();
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(object0, 1409, "tr", object1, true);
      multiFileHierarchicalConfiguration0.configurationChanged(configurationEvent0);
      multiFileHierarchicalConfiguration0.clearErrorListeners();
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.addConfigurationListener((ConfigurationListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Listener must not be null!
         //
         verifyException("org.apache.commons.configuration.event.EventSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.setFilePattern((String) null);
      String string0 = "8-2z2]Fl1\"";
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(multiFileHierarchicalConfiguration0, "8-2z2]Fl1\"");
      String string1 = "";
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.setExecutable(true, true);
      try { 
        patternSubtreeConfigurationWrapper0.load((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      String string0 = null;
      multiFileHierarchicalConfiguration0.setFilePattern((String) null);
      String string1 = "8-2z2]Fl1\"";
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(multiFileHierarchicalConfiguration0, "8-2z2]Fl1\"");
      MockFile mockFile0 = new MockFile((String) null, "8-2z2]Fl1\"");
      try { 
        patternSubtreeConfigurationWrapper0.load((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL file:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/commons-configuration/commons-configuration/1.10/8-2z2%5DFl1%22
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      AbstractHierarchicalFileConfiguration.FileConfigurationDelegate abstractHierarchicalFileConfiguration_FileConfigurationDelegate0 = xMLConfiguration0.getDelegate();
      abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.getSourceURL();
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      Integer integer0 = new Integer(21);
      Integer integer1 = new Integer(12);
      defaultConfigurationBuilder0.getInteger("", integer1);
      defaultConfigurationBuilder0.isEmpty();
      defaultConfigurationBuilder0.createResultConfiguration();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("");
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration1 = new MultiFileHierarchicalConfiguration();
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration1.load("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("");
      AbstractHierarchicalFileConfiguration.FileConfigurationDelegate abstractHierarchicalFileConfiguration_FileConfigurationDelegate0 = multiFileHierarchicalConfiguration0.getDelegate();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(multiFileHierarchicalConfiguration0, "Y");
      DataConfiguration dataConfiguration0 = new DataConfiguration(multiFileHierarchicalConfiguration0);
      Class<ViewNode> class0 = ViewNode.class;
      dataConfiguration0.getList(class0, "", (List<ViewNode>) null);
      patternSubtreeConfigurationWrapper0.getList("Y", (List<?>) null);
      abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.getList("Y", (List<?>) null);
      ReloadingStrategy reloadingStrategy0 = abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.getReloadingStrategy();
      multiFileHierarchicalConfiguration0.setReloadingStrategy(reloadingStrategy0);
      multiFileHierarchicalConfiguration0.resolveContainerStore("");
      multiFileHierarchicalConfiguration0.addProperty("", (Object) null);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper1 = new PatternSubtreeConfigurationWrapper(multiFileHierarchicalConfiguration0, "");
      ViewNode viewNode0 = new ViewNode();
      patternSubtreeConfigurationWrapper1.setProperty("", viewNode0);
      multiFileHierarchicalConfiguration0.createNode("org.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      patternSubtreeConfigurationWrapper1.clear();
      multiFileHierarchicalConfiguration0.setProperty("fNEST", (Object) null);
      assertFalse(multiFileHierarchicalConfiguration0.isDelimiterParsingDisabled());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      defaultConfigurationBuilder0.getInterpolator();
      defaultConfigurationBuilder0.getInt((String) null, 680);
      AbstractHierarchicalFileConfiguration.FileConfigurationDelegate abstractHierarchicalFileConfiguration_FileConfigurationDelegate0 = defaultConfigurationBuilder0.createDelegate();
      defaultConfigurationBuilder0.setEncoding((String) null);
      defaultConfigurationBuilder0.fetchNodeList("");
      defaultConfigurationBuilder0.configurationAt("");
      try { 
        abstractHierarchicalFileConfiguration_FileConfigurationDelegate0.save((Writer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to save the configuration
         //
         verifyException("org.apache.commons.configuration.XMLConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to load the configuration from the URL ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      URL uRL0 = MockURL.getFtpExample();
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder(uRL0);
      XMLConfiguration xMLConfiguration1 = null;
      try {
        xMLConfiguration1 = new XMLConfiguration(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to load the configuration from the URL ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("|&");
      multiFileHierarchicalConfiguration0.setValidating(true);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      URL uRL0 = MockURL.getFileExample();
      xMLConfiguration0.save(uRL0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "");
      patternSubtreeConfigurationWrapper0.addConfigurationListener(xMLConfiguration0);
      assertFalse(xMLConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      Integer integer0 = new Integer(4);
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.reload();
      assertFalse(multiFileHierarchicalConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockURL.getFileExample();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("");
      try { 
        multiFileHierarchicalConfiguration0.load("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder((URL) null);
      defaultConfigurationBuilder0.createResultConfiguration();
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("iP&^");
      try { 
        multiFileHierarchicalConfiguration0.load("A");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot locate configuration source A
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = null;
      try {
        hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration("Key must not be null!");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cannot locate configuration source Key must not be null!
         //
         verifyException("org.apache.commons.configuration.AbstractFileConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = null;
      try {
        hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration();
      multiFileHierarchicalConfiguration0.reload();
      assertFalse(multiFileHierarchicalConfiguration0.isDetailEvents());
      
      MockFile mockFile0 = new MockFile("T~3=pKo]k;", "xXGp#bu!.Rg8f$'");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      xMLConfiguration0.getRegisteredEntities();
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.getKeys();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // File pattern must be defined
         //
         verifyException("org.apache.commons.configuration.MultiFileHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultConfigurationBuilder defaultConfigurationBuilder0 = new DefaultConfigurationBuilder();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(defaultConfigurationBuilder0, "Zrg.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      patternSubtreeConfigurationWrapper0.append(defaultConfigurationBuilder0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper1 = new PatternSubtreeConfigurationWrapper(defaultConfigurationBuilder0, "Zrg.apache.commons.configuration.AbstractHierarchicalFileConfiguration");
      MockFile mockFile0 = new MockFile("LW$?,zHzY]TBP]5", "LW$?,zHzY]TBP]5");
      try { 
        patternSubtreeConfigurationWrapper0.load((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL file:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/commons-configuration/commons-configuration/1.10/LW$%3F,zHzY%5DTBP%5D5/LW$%3F,zHzY%5DTBP%5D5
         //
         verifyException("org.apache.commons.configuration.DefaultFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      List<Object> list0 = new Vector<Object>();
      hierarchicalINIConfiguration0.getFileSystem();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "LX{bWf},mT[");
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      patternSubtreeConfigurationWrapper0.getKeys("LX{bWf},mT[");
      assertFalse(hierarchicalINIConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getList("");
      String string0 = "SpaceRequiredBeforeEncodingInXMLDecl";
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(hierarchicalINIConfiguration0, "SpaceRequiredBeforeEncodingInXMLDecl");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.removeConfigurationListener(hierarchicalINIConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Passed in key must select exactly one node: SpaceRequiredBeforeEncodingInXMLDecl
         //
         verifyException("org.apache.commons.configuration.HierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MultiFileHierarchicalConfiguration multiFileHierarchicalConfiguration0 = new MultiFileHierarchicalConfiguration("");
      // Undeclared exception!
      try { 
        multiFileHierarchicalConfiguration0.getLong("4!gnDhO^b1V");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // '4!gnDhO^b1V' doesn't map to an existing object
         //
         verifyException("org.apache.commons.configuration.AbstractConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HierarchicalINIConfiguration hierarchicalINIConfiguration0 = new HierarchicalINIConfiguration();
      hierarchicalINIConfiguration0.getStringArray("LX{bWf},mT[");
      hierarchicalINIConfiguration0.clearTree("LX{bWf},mT[");
      hierarchicalINIConfiguration0.getList("");
      hierarchicalINIConfiguration0.getFileSystem();
      String string0 = "H10i-XCYGj}wFml:l";
      MockFile mockFile0 = new MockFile("H10i-XCYGj}wFml:l", "SpaceRequiredBeforeEncodingInXMLDecl");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(mockFile0);
      hierarchicalINIConfiguration0.addConfigurationListener(xMLConfiguration0);
      mockFile0.toURI();
      mockFile0.setReadable(false, false);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "ISO-10646-UCS-4");
      patternSubtreeConfigurationWrapper0.copy(hierarchicalINIConfiguration0);
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.configurationAt("H10i-XCYGj}wFml:l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Passed in key must select exactly one node: ISO-10646-UCS-4/H10i-XCYGj}wFml:l
         //
         verifyException("org.apache.commons.configuration.HierarchicalConfiguration", e);
      }
  }
}
