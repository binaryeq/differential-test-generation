/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:17:32 GMT 2024
 */

package io.restassured.internal.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.restassured.internal.multipart.MultiPartSpecificationImpl;
import java.util.Collections;
import java.util.Map;
import java.util.SortedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiPartSpecificationImpl_ESTest extends MultiPartSpecificationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      SortedMap<String, String> sortedMap0 = Collections.emptySortedMap();
      multiPartSpecificationImpl0.setHeaders(sortedMap0);
      Map<String, String> map0 = multiPartSpecificationImpl0.getHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setFileNameSpecifiedExplicitly(true);
      boolean boolean0 = multiPartSpecificationImpl0.isFileNameSpecifiedExplicitly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setControlNameSpecifiedExplicitly(true);
      boolean boolean0 = multiPartSpecificationImpl0.isControlNameSpecifiedExplicitly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setFileName("h;l s");
      boolean boolean0 = multiPartSpecificationImpl0.hasFileName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setMimeType("(b;&-)i!=$&_k`i'r1");
      String string0 = multiPartSpecificationImpl0.getMimeType();
      assertEquals("(b;&-)i!=$&_k`i'r1", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setFileName("org.assertj.core.internal.bytebuddy.dynamic.loading.ByteArrayClassLoader");
      String string0 = multiPartSpecificationImpl0.getFileName();
      assertEquals("org.assertj.core.internal.bytebuddy.dynamic.loading.ByteArrayClassLoader", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setControlName("h;l s");
      String string0 = multiPartSpecificationImpl0.getControlName();
      assertEquals("h;l s", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      Object object0 = new Object();
      multiPartSpecificationImpl0.setContent(object0);
      Object object1 = multiPartSpecificationImpl0.getContent();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setCharset("h;l s");
      String string0 = multiPartSpecificationImpl0.getCharset();
      assertEquals("h;l s", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setCharset("X)oy%");
      String string0 = multiPartSpecificationImpl0.toString();
      assertEquals("controlName=<none>, mimeType=<none>, charset=X)oy%, fileName=<none>, content=null, headers=null", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setMimeType("(b;&-)i!=$&_k`i'r1");
      String string0 = multiPartSpecificationImpl0.toString();
      assertEquals("controlName=<none>, mimeType=(b;&-)i!=$&_k`i'r1, charset=<none>, fileName=<none>, content=null, headers=null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setControlName("h;l s");
      String string0 = multiPartSpecificationImpl0.toString();
      assertEquals("controlName=h;l s, mimeType=<none>, charset=<none>, fileName=<none>, content=null, headers=null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      boolean boolean0 = multiPartSpecificationImpl0.hasFileName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      boolean boolean0 = multiPartSpecificationImpl0.isControlNameSpecifiedExplicitly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setFileName("h;l s");
      String string0 = multiPartSpecificationImpl0.toString();
      assertEquals("controlName=<none>, mimeType=<none>, charset=<none>, fileName=h;l s, content=null, headers=null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      String string0 = multiPartSpecificationImpl0.getControlName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      boolean boolean0 = multiPartSpecificationImpl0.isFileNameSpecifiedExplicitly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      boolean boolean0 = multiPartSpecificationImpl0.getControlNameSpecifiedExplicitly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setMimeType("");
      String string0 = multiPartSpecificationImpl0.getMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      String string0 = multiPartSpecificationImpl0.getMimeType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setFileNameSpecifiedExplicitly(true);
      boolean boolean0 = multiPartSpecificationImpl0.getFileNameSpecifiedExplicitly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setControlNameSpecifiedExplicitly(true);
      boolean boolean0 = multiPartSpecificationImpl0.getControlNameSpecifiedExplicitly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      boolean boolean0 = multiPartSpecificationImpl0.getFileNameSpecifiedExplicitly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setControlName("");
      String string0 = multiPartSpecificationImpl0.getControlName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      String string0 = multiPartSpecificationImpl0.getFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      multiPartSpecificationImpl0.setCharset("");
      String string0 = multiPartSpecificationImpl0.getCharset();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      // Undeclared exception!
      try { 
        multiPartSpecificationImpl0.getHeaders();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      Object object0 = multiPartSpecificationImpl0.getContent();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiPartSpecificationImpl multiPartSpecificationImpl0 = new MultiPartSpecificationImpl();
      String string0 = multiPartSpecificationImpl0.getCharset();
      assertNull(string0);
  }
}
