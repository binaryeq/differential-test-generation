/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:49:34 GMT 2024
 */

package io.restassured.authentication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.restassured.authentication.OAuthScheme;
import io.restassured.authentication.OAuthSignature;
import io.restassured.internal.http.HTTPBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OAuthScheme_ESTest extends OAuthScheme_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      OAuthSignature oAuthSignature0 = OAuthSignature.QUERY_STRING;
      oAuthScheme0.setSignature(oAuthSignature0);
      OAuthSignature oAuthSignature1 = oAuthScheme0.getSignature();
      assertEquals(OAuthSignature.QUERY_STRING, oAuthSignature1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setSecretToken("auth");
      String string0 = oAuthScheme0.getSecretToken();
      assertEquals("auth", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setConsumerSecret("JcI}b.]^]Ui03mL l");
      String string0 = oAuthScheme0.getConsumerSecret();
      assertEquals("JcI}b.]^]Ui03mL l", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setConsumerSecret("");
      String string0 = oAuthScheme0.getConsumerSecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setConsumerKey("\\");
      String string0 = oAuthScheme0.getConsumerKey();
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setConsumerKey("");
      String string0 = oAuthScheme0.getConsumerKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setAccessToken("*/*&,,k.6; ");
      String string0 = oAuthScheme0.getAccessToken();
      assertEquals("*/*&,,k.6; ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      // Undeclared exception!
      try { 
        oAuthScheme0.authenticate((HTTPBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get property 'auth' on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      String string0 = oAuthScheme0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      OAuthSignature oAuthSignature0 = OAuthSignature.HEADER;
      oAuthScheme0.setSignature(oAuthSignature0);
      // Undeclared exception!
      try { 
        oAuthScheme0.authenticate((HTTPBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get property 'auth' on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.getSignature();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      String string0 = oAuthScheme0.getSecretToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setSecretToken("");
      String string0 = oAuthScheme0.getSecretToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      String string0 = oAuthScheme0.getConsumerSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      oAuthScheme0.setAccessToken("");
      String string0 = oAuthScheme0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      String string0 = oAuthScheme0.getConsumerKey();
      assertNull(string0);
  }
}
