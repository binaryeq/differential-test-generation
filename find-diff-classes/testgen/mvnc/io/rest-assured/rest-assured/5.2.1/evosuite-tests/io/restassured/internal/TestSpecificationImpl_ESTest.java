/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 21:56:55 GMT 2024
 */

package io.restassured.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovy.util.ConfigObject;
import io.restassured.authentication.ExplicitNoAuthScheme;
import io.restassured.authentication.OAuthScheme;
import io.restassured.authentication.PreemptiveBasicAuthScheme;
import io.restassured.authentication.PreemptiveOAuth2HeaderScheme;
import io.restassured.config.RestAssuredConfig;
import io.restassured.filter.Filter;
import io.restassured.http.Method;
import io.restassured.internal.RequestSpecificationImpl;
import io.restassured.internal.ResponseParserRegistrar;
import io.restassured.internal.ResponseSpecificationImpl;
import io.restassured.internal.RestAssuredResponseImpl;
import io.restassured.internal.TestSpecificationImpl;
import io.restassured.internal.log.LogRepository;
import io.restassured.specification.ProxySpecification;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.codehaus.groovy.runtime.callsite.CallSiteArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestSpecificationImpl_ESTest extends TestSpecificationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      Sequence sequence0 = new Sequence();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, logRepository0);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("", 1857, "", explicitNoAuthScheme0, sequence0, (RequestSpecification) null, false, restAssuredConfig0, logRepository0, (ProxySpecification) null, false, true);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        testSpecificationImpl0.put(uRL0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target host is null
         //
         verifyException("org.apache.http.util.Asserts", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TestSpecificationImpl testSpecificationImpl0 = null;
      try {
        testSpecificationImpl0 = new TestSpecificationImpl((RequestSpecification) null, (ResponseSpecification) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PreemptiveBasicAuthScheme preemptiveBasicAuthScheme0 = new PreemptiveBasicAuthScheme();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.port(2959);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("Kb4[sS)Aa7n(=Kh,", 2959, "Kb4[sS)Aa7n(=Kh,", preemptiveBasicAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, logRepository0, proxySpecification0, true, true);
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("Kb4[sS)Aa7n(=Kh,", (ResponseSpecification) null, (ResponseParserRegistrar) null, restAssuredConfig0, restAssuredResponseImpl0, logRepository0);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        testSpecificationImpl0.options((String) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PreemptiveOAuth2HeaderScheme preemptiveOAuth2HeaderScheme0 = new PreemptiveOAuth2HeaderScheme();
      Stack<Filter> stack0 = new Stack<Filter>();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.port((byte)100);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("~eP>~k1S|s1d;b", 758, "", preemptiveOAuth2HeaderScheme0, stack0, (RequestSpecification) null, false, restAssuredConfig0, logRepository0, proxySpecification0, false, false);
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("request", (ResponseSpecification) null, (ResponseParserRegistrar) null, restAssuredConfig0, logRepository0);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      ConfigObject configObject0 = new ConfigObject();
      // Undeclared exception!
      try { 
        testSpecificationImpl0.put("+@/k", (Map) configObject0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(Throwable e) {
         //
         // Illegal character in path at index 3: ~eP>~k1S|s1d;b
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PreemptiveBasicAuthScheme preemptiveBasicAuthScheme0 = new PreemptiveBasicAuthScheme();
      Class<CallSiteArray> class0 = CallSiteArray.class;
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.port(2959);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("Kb4[sS)Aa7n(=Kh,", 2959, "Kb4[sS)Aa7n(=Kh,", preemptiveBasicAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, logRepository0, proxySpecification0, true, true);
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("Kb4[sS)Aa7n(=Kh,", (ResponseSpecification) null, (ResponseParserRegistrar) null, restAssuredConfig0, restAssuredResponseImpl0, logRepository0);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      // Undeclared exception!
      try { 
        testSpecificationImpl0.put();
        fail("Expecting exception: URISyntaxException");
      
      } catch(Throwable e) {
         //
         // Illegal character in path at index 3: Kb4[sS)Aa7n(=Kh,
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      Sequence sequence0 = new Sequence();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("jO]<smQ`T^", 1857, "jO]<smQ`T^", explicitNoAuthScheme0, sequence0, (RequestSpecification) null, true, restAssuredConfig0, logRepository0, (ProxySpecification) null, true, false);
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, logRepository0);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      // Undeclared exception!
      try { 
        testSpecificationImpl0.get();
        fail("Expecting exception: URISyntaxException");
      
      } catch(Throwable e) {
         //
         // Illegal character in path at index 2: jO]<smQ`T^
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      Vector<Filter> vector0 = new Vector<Filter>();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      ProxySpecification proxySpecification0 = ProxySpecification.port(34);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("", 34, "", oAuthScheme0, vector0, (RequestSpecification) null, false, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("", (ResponseSpecification) null, (ResponseParserRegistrar) null, restAssuredConfig0, restAssuredResponseImpl0, (LogRepository) null);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      Method method0 = Method.HEAD;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        testSpecificationImpl0.request(method0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      Sequence sequence0 = new Sequence();
      RestAssuredConfig restAssuredConfig0 = new RestAssuredConfig();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.port(2212);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("options", 2212, "options", oAuthScheme0, sequence0, (RequestSpecification) null, false, restAssuredConfig0, logRepository0, proxySpecification0, false, false);
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, restAssuredResponseImpl0, logRepository0);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      // Undeclared exception!
      try { 
        testSpecificationImpl0.options();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target host is null
         //
         verifyException("org.apache.http.util.Asserts", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      Sequence sequence0 = new Sequence();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("jO]<smQ`T^", 1868, "jO]<smQ`T^", explicitNoAuthScheme0, sequence0, (RequestSpecification) null, true, restAssuredConfig0, logRepository0, (ProxySpecification) null, true, false);
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, logRepository0);
      TestSpecificationImpl testSpecificationImpl0 = new TestSpecificationImpl(requestSpecificationImpl0, responseSpecificationImpl0);
      // Undeclared exception!
      try { 
        testSpecificationImpl0.request("jO]<smQ`T^");
        fail("Expecting exception: URISyntaxException");
      
      } catch(Throwable e) {
         //
         // Illegal character in path at index 2: jO]<smQ`T^
         //
         verifyException("java.net.URI$Parser", e);
      }
  }
}
