/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:54:55 GMT 2024
 */

package io.restassured.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import io.restassured.authentication.BasicAuthScheme;
import io.restassured.authentication.OAuthScheme;
import io.restassured.config.LogConfig;
import io.restassured.config.RestAssuredConfig;
import io.restassured.filter.Filter;
import io.restassured.internal.LogSpecificationImpl;
import io.restassured.internal.RequestSpecificationImpl;
import io.restassured.internal.log.LogRepository;
import io.restassured.specification.ProxySpecification;
import io.restassured.specification.RequestSpecification;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogSpecificationImpl_ESTest extends LogSpecificationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      BasicAuthScheme basicAuthScheme0 = new BasicAuthScheme();
      Vector<Filter> vector0 = new Vector<Filter>();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = new ProxySpecification("1k[*-K/g/:d>zq}<b@s", 788, "SZHJ?l40bsYp0H#");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("1k[*-K/g/:d>zq}<b@s", 788, "1k[*-K/g/:d>zq}<b@s", basicAuthScheme0, vector0, (RequestSpecification) null, false, restAssuredConfig0, logRepository0, proxySpecification0, false, false);
      boolean boolean0 = logSpecificationImpl0.shouldUrlEncodeRequestUri(requestSpecificationImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      Stack<Filter> stack0 = new Stack<Filter>();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      LogConfig logConfig0 = LogConfig.logConfig();
      LogConfig logConfig1 = logConfig0.enablePrettyPrinting(false);
      RestAssuredConfig restAssuredConfig1 = restAssuredConfig0.logConfig(logConfig1);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("shouldUrlEncodeRequestUri", 319, "\"[?oq", oAuthScheme0, stack0, (RequestSpecification) null, false, restAssuredConfig1, logRepository0, (ProxySpecification) null, true, true);
      boolean boolean0 = logSpecificationImpl0.shouldPrettyPrint(requestSpecificationImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      // Undeclared exception!
      try { 
        logSpecificationImpl0.shouldUrlEncodeRequestUri((RequestSpecification) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      // Undeclared exception!
      try { 
        logSpecificationImpl0.getPrintStream((RequestSpecification) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      // Undeclared exception!
      try { 
        logSpecificationImpl0.shouldPrettyPrint((RequestSpecification) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      RestAssuredConfig restAssuredConfig0 = new RestAssuredConfig();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("a58/!mdj5M", 2061, "a58/!mdj5M", oAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, (ProxySpecification) null, true, true);
      boolean boolean0 = logSpecificationImpl0.shouldPrettyPrint(requestSpecificationImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      BasicAuthScheme basicAuthScheme0 = new BasicAuthScheme();
      ArrayList<Filter> arrayList0 = new ArrayList<Filter>();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.port(0);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("L24<%mxD'EW", 176, "L24<%mxD'EW", basicAuthScheme0, arrayList0, (RequestSpecification) null, true, (RestAssuredConfig) null, logRepository0, proxySpecification0, true, true);
      boolean boolean0 = logSpecificationImpl0.shouldPrettyPrint(requestSpecificationImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      RestAssuredConfig restAssuredConfig0 = new RestAssuredConfig();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("a58/!mdj5M", 2061, "a58/!mdj5M", oAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, (ProxySpecification) null, true, true);
      PrintStream printStream0 = logSpecificationImpl0.getPrintStream(requestSpecificationImpl0);
      assertNotNull(printStream0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      BasicAuthScheme basicAuthScheme0 = new BasicAuthScheme();
      ArrayList<Filter> arrayList0 = new ArrayList<Filter>();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.port(0);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("L24<%mxD'EW", 176, "L24<%mxD'EW", basicAuthScheme0, arrayList0, (RequestSpecification) null, true, (RestAssuredConfig) null, logRepository0, proxySpecification0, true, true);
      PrintStream printStream0 = logSpecificationImpl0.getPrintStream(requestSpecificationImpl0);
      assertNotNull(printStream0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LogSpecificationImpl logSpecificationImpl0 = new LogSpecificationImpl();
      BasicAuthScheme basicAuthScheme0 = new BasicAuthScheme();
      ArrayList<Filter> arrayList0 = new ArrayList<Filter>();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.port(0);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("L24<%mxD'EW", 176, "L24<%mxD'EW", basicAuthScheme0, arrayList0, (RequestSpecification) null, true, (RestAssuredConfig) null, logRepository0, proxySpecification0, true, true);
      boolean boolean0 = logSpecificationImpl0.shouldUrlEncodeRequestUri(requestSpecificationImpl0);
      assertFalse(boolean0);
  }
}
