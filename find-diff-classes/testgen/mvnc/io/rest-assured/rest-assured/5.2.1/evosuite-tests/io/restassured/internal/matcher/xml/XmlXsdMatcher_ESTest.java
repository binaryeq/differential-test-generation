/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:15:07 GMT 2024
 */

package io.restassured.internal.matcher.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.GroovyRuntimeException;
import groovy.lang.MissingMethodException;
import io.restassured.internal.matcher.xml.XmlXsdMatcher;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.hamcrest.Description;
import org.hamcrest.StringDescription;
import org.junit.runner.RunWith;
import org.w3c.dom.ls.LSResourceResolver;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlXsdMatcher_ESTest extends XmlXsdMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd(uRL0);
      StringDescription stringDescription0 = new StringDescription();
      xmlXsdMatcher0.describeTo(stringDescription0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsdInClasspath("xsd");
      assertNotNull(xmlXsdMatcher0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kt?'Y", "a]^5");
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd((File) mockFile0);
      assertNotNull(xmlXsdMatcher0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd(uRL0);
      xmlXsdMatcher0.setResourceResolver(uRL0);
      URL uRL1 = (URL)xmlXsdMatcher0.getResourceResolver();
      assertNull(uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlXsdMatcher.matchesXsdInClasspath("");
        fail("Expecting exception: GroovyRuntimeException");
      
      } catch(GroovyRuntimeException e) {
         //
         // Ambiguous method overloading for method io.restassured.internal.matcher.xml.XmlXsdMatcher#matchesXsd.
         // Cannot resolve which method to invoke for [null] due to overlapping prototypes between:
         // \t[class java.io.File]
         // \t[class java.io.InputStream]
         // \t[class java.io.Reader]
         // \t[class java.lang.String]
         // \t[class java.net.URL]
         //
         verifyException("groovy.lang.MetaClassImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlXsdMatcher.matchesXsd((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlXsdMatcher.matchesXsd((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlXsdMatcher.matchesXsd((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlXsdMatcher.matchesXsd((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd(uRL0);
      // Undeclared exception!
      try { 
        xmlXsdMatcher0.describeTo((Description) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method appendText() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd(uRL0);
      // Undeclared exception!
      try { 
        xmlXsdMatcher0.using((LSResourceResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd("nq.Yf=}$.ry26RIwa.");
      String string0 = xmlXsdMatcher0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2791);
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd((InputStream) pipedInputStream0);
      assertNotNull(xmlXsdMatcher0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd("Z7:V;");
      // Undeclared exception!
      try { 
        xmlXsdMatcher0.with((LSResourceResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd("nq.Yf=}$.ry26RIwa.");
      Object object0 = xmlXsdMatcher0.getResourceResolver();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd((Reader) pipedReader0);
      assertNotNull(xmlXsdMatcher0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlXsdMatcher.matchesXsdInClasspath((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd(";IPyqZpx^I+G41");
      Object object0 = xmlXsdMatcher0.getXsd();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd(uRL0);
      xmlXsdMatcher0.setXsd((Object) null);
      // Undeclared exception!
      try { 
        xmlXsdMatcher0.matches(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd("yC%n;c2dhrB+9FQLa");
      // Undeclared exception!
      try { 
        xmlXsdMatcher0.matches("yC%n;c2dhrB+9FQLa");
        fail("Expecting exception: SAXParseException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlXsdMatcher.matchesXsd((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      XmlXsdMatcher xmlXsdMatcher0 = XmlXsdMatcher.matchesXsd(uRL0);
      xmlXsdMatcher0.setResourceResolver(uRL0);
      // Undeclared exception!
      try { 
        xmlXsdMatcher0.matches(uRL0);
        fail("Expecting exception: MissingMethodException");
      
      } catch(MissingMethodException e) {
         //
         // No signature of method: com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.setResourceResolver() is applicable for argument types: (URL) values: [file://some/fake/but/wellformed/url]
         // Possible solutions: setResourceResolver(org.w3c.dom.ls.LSResourceResolver), setResourceResolver(org.w3c.dom.ls.LSResourceResolver), getResourceResolver(), getResourceResolver()
         //
         verifyException("org.codehaus.groovy.runtime.ScriptBytecodeAdapter", e);
      }
  }
}
