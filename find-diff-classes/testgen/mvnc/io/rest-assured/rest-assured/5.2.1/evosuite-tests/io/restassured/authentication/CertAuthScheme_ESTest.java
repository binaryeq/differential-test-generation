/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:42:39 GMT 2024
 */

package io.restassured.authentication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.restassured.authentication.CertAuthScheme;
import io.restassured.internal.http.HTTPBuilder;
import java.security.KeyStore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertAuthScheme_ESTest extends CertAuthScheme_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setTrustStoreType((String) null);
      certAuthScheme0.getTrustStoreType();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setTrustStoreType("");
      certAuthScheme0.getTrustStoreType();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setTrustStorePassword("groovyjarjarasm.asm.util.ASMifier");
      certAuthScheme0.getTrustStorePassword();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setTrustStorePassword("");
      certAuthScheme0.getTrustStorePassword();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      assertEquals((-1), certAuthScheme0.getPort());
      
      certAuthScheme0.setPort(0);
      int int0 = certAuthScheme0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setPathToTrustStore("");
      certAuthScheme0.getPathToTrustStore();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      Object object0 = new Object();
      certAuthScheme0.setPathToKeyStore(object0);
      certAuthScheme0.getPathToKeyStore();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setKeystoreType("");
      certAuthScheme0.getKeystoreType();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setKeyStorePassword("zT}U8z`H<r]mU''Ud]");
      certAuthScheme0.getKeyStorePassword();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setTrustStore((KeyStore) null);
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getTrustStorePassword();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getKeystoreType();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setKeyStorePassword("");
      certAuthScheme0.getKeyStorePassword();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getKeyStore();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setKeystoreType((String) null);
      certAuthScheme0.getKeystoreType();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      int int0 = certAuthScheme0.getPort();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getPathToKeyStore();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setPort(356);
      int int0 = certAuthScheme0.getPort();
      assertEquals(356, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getTrustStoreType();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.setKeyStore((KeyStore) null);
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      HTTPBuilder hTTPBuilder0 = mock(HTTPBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        certAuthScheme0.authenticate(hTTPBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method certificate() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getPathToTrustStore();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getTrustStore();
      assertEquals((-1), certAuthScheme0.getPort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CertAuthScheme certAuthScheme0 = new CertAuthScheme();
      certAuthScheme0.getKeyStorePassword();
      assertEquals((-1), certAuthScheme0.getPort());
  }
}
