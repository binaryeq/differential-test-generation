/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:13:47 GMT 2024
 */

package io.restassured.internal.matcher.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.GroovyRuntimeException;
import io.restassured.internal.matcher.xml.XmlDtdMatcher;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.net.URL;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.hamcrest.Matcher;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlDtdMatcher_ESTest extends XmlDtdMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlDtdMatcher.matchesDtdInClasspath((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlDtdMatcher.matchesDtd((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlDtdMatcher.matchesDtd((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlDtdMatcher.matchesDtd((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockFile mockFile0 = new MockFile("parse");
      // Undeclared exception!
      try { 
        XmlDtdMatcher.matchesDtd((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // parse (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlDtdMatcher.matchesDtd((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlDtdMatcher.matchesDtdInClasspath("$M\"D-2#0L}");
        fail("Expecting exception: GroovyRuntimeException");
      
      } catch(GroovyRuntimeException e) {
         //
         // Ambiguous method overloading for method io.restassured.internal.matcher.xml.XmlDtdMatcher#matchesDtd.
         // Cannot resolve which method to invoke for [null] due to overlapping prototypes between:
         // \t[class java.io.File]
         // \t[class java.io.InputStream]
         // \t[class java.lang.String]
         // \t[class java.net.URL]
         //
         verifyException("groovy.lang.MetaClassImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Matcher<String> matcher0 = XmlDtdMatcher.matchesDtd(uRL0);
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Matcher<String> matcher0 = XmlDtdMatcher.matchesDtd("");
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Matcher<String> matcher0 = XmlDtdMatcher.matchesDtd((InputStream) sequenceInputStream0);
      assertNotNull(matcher0);
  }
}
