/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:35:19 GMT 2024
 */

package io.restassured.assertion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.Sequence;
import io.restassured.assertion.DetailedCookieAssertion;
import io.restassured.http.Cookie;
import io.restassured.http.Cookies;
import io.restassured.internal.assertion.CookieMatcher;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Vector;
import org.codehaus.groovy.transform.AbstractASTTransformation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;
import org.hamcrest.core.IsSame;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DetailedCookieAssertion_ESTest extends DetailedCookieAssertion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      Matcher<Object> matcher0 = IsEqual.equalTo((Object) null);
      detailedCookieAssertion0.setMatcher(matcher0);
      Matcher<? super Cookie> matcher1 = detailedCookieAssertion0.getMatcher();
      assertNotNull(matcher1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      detailedCookieAssertion0.setCookieName("bh");
      String string0 = detailedCookieAssertion0.getCookieName();
      assertEquals("bh", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      detailedCookieAssertion0.setCookieName("");
      String string0 = detailedCookieAssertion0.getCookieName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Sequence sequence0 = new Sequence();
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      // Undeclared exception!
      try { 
        detailedCookieAssertion0.validateCookies(sequence0, (Cookies) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      Sequence sequence0 = new Sequence();
      sequence0.add((Object) detailedCookieAssertion0);
      // Undeclared exception!
      try { 
        detailedCookieAssertion0.validateCookies(sequence0, (Cookies) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // io.restassured.assertion.DetailedCookieAssertion cannot be cast to java.lang.String
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      Matcher<Object> matcher0 = IsSame.theInstance((Object) detailedCookieAssertion0);
      detailedCookieAssertion0.setMatcher(matcher0);
      Vector<String> vector0 = new Vector<String>();
      detailedCookieAssertion0.setCookieName("");
      Cookies cookies0 = CookieMatcher.getCookies(vector0);
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)detailedCookieAssertion0.validateCookies(vector0, cookies0);
      assertFalse(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      detailedCookieAssertion0.setCookieName("errorMessage");
      List<String> list0 = AbstractASTTransformation.tokenize("errorMessage");
      Cookies cookies0 = CookieMatcher.getCookies(list0);
      // Undeclared exception!
      try { 
        detailedCookieAssertion0.validateCookies(list0, cookies0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method matches() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      String string0 = detailedCookieAssertion0.getCookieName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      Matcher<? super Cookie> matcher0 = detailedCookieAssertion0.getMatcher();
      assertNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DetailedCookieAssertion detailedCookieAssertion0 = new DetailedCookieAssertion();
      IsNull<Object> isNull0 = new IsNull<Object>();
      detailedCookieAssertion0.setMatcher(isNull0);
      detailedCookieAssertion0.setCookieName("#S/;S8");
      Sequence sequence0 = new Sequence();
      Cookies cookies0 = CookieMatcher.getCookies(sequence0);
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)detailedCookieAssertion0.validateCookies(sequence0, cookies0);
      assertFalse(linkedHashMap0.isEmpty());
  }
}
