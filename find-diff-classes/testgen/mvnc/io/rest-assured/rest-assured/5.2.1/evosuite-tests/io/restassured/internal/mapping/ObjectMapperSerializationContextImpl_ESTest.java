/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:11:10 GMT 2024
 */

package io.restassured.internal.mapping;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.restassured.internal.mapping.ObjectMapperSerializationContextImpl;
import org.codehaus.groovy.runtime.callsite.CallSiteArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectMapperSerializationContextImpl_ESTest extends ObjectMapperSerializationContextImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Object object0 = new Object();
      objectMapperSerializationContextImpl0.setObject(object0);
      Class<Object> class0 = Object.class;
      Object object1 = objectMapperSerializationContextImpl0.getObjectToSerializeAs(class0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Object object0 = new Object();
      objectMapperSerializationContextImpl0.setObject(object0);
      Object object1 = objectMapperSerializationContextImpl0.getObjectToSerialize();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Object object0 = new Object();
      objectMapperSerializationContextImpl0.setObject(object0);
      Object object1 = objectMapperSerializationContextImpl0.getObject();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Object object0 = new Object();
      objectMapperSerializationContextImpl0.setContentType(object0);
      String string0 = objectMapperSerializationContextImpl0.getContentType();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Object object0 = new Object();
      objectMapperSerializationContextImpl0.setCharset(object0);
      String string0 = objectMapperSerializationContextImpl0.getCharset();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      objectMapperSerializationContextImpl0.setCharset("");
      String string0 = objectMapperSerializationContextImpl0.getCharset();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      // Undeclared exception!
      try { 
        objectMapperSerializationContextImpl0.getObjectToSerializeAs((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method isAssignableFrom() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Class<CallSiteArray> class0 = CallSiteArray.class;
      // Undeclared exception!
      try { 
        objectMapperSerializationContextImpl0.getObjectToSerializeAs(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Class<Object> class0 = Object.class;
      Object object0 = objectMapperSerializationContextImpl0.getObjectToSerializeAs(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Object object0 = objectMapperSerializationContextImpl0.getObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      String string0 = objectMapperSerializationContextImpl0.getCharset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      String string0 = objectMapperSerializationContextImpl0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      Object object0 = objectMapperSerializationContextImpl0.getObjectToSerialize();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapperSerializationContextImpl objectMapperSerializationContextImpl0 = new ObjectMapperSerializationContextImpl();
      objectMapperSerializationContextImpl0.setContentType("");
      String string0 = objectMapperSerializationContextImpl0.getContentType();
      assertEquals("", string0);
  }
}
