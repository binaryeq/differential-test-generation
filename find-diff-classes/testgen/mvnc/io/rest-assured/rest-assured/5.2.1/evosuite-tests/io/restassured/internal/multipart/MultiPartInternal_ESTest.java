/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:16:19 GMT 2024
 */

package io.restassured.internal.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.restassured.internal.multipart.MultiPartInternal;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.InputStreamBody;
import org.apache.http.entity.mime.content.StringBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiPartInternal_ESTest extends MultiPartInternal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setMimeType("");
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setHeaders((Map<String, String>) null);
      Map<String, String> map0 = multiPartInternal0.getHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("+=/=P,}", "zb}f4h");
      multiPartInternal0.setHeaders(hashMap0);
      Map<String, String> map0 = multiPartInternal0.getHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setFileName("0:lS';3rnpe\"kR8?In");
      String string0 = multiPartInternal0.getFileName();
      assertEquals("0:lS';3rnpe\"kR8?In", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setFileName("");
      String string0 = multiPartInternal0.getFileName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setControlName("+=/=P,}");
      String string0 = multiPartInternal0.getControlName();
      assertEquals("+=/=P,}", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setControlName("");
      String string0 = multiPartInternal0.getControlName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setCharset("StackMapTable");
      String string0 = multiPartInternal0.getCharset();
      assertEquals("StackMapTable", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setCharset("");
      String string0 = multiPartInternal0.getCharset();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setCharset("forName");
      multiPartInternal0.setContent(multiPartInternal0);
      // Undeclared exception!
      try { 
        multiPartInternal0.getContentBody();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // forName
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      multiPartInternal0.setContent(pipedInputStream0);
      multiPartInternal0.setMimeType("P@4N{wM?e(IaB~");
      InputStreamBody inputStreamBody0 = (InputStreamBody)multiPartInternal0.getContentBody();
      assertNull(inputStreamBody0.getCharset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setMimeType("\"g]hZ-+");
      Object object0 = new Object();
      multiPartInternal0.setContent(object0);
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("\"g]hZ-+", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      Object object0 = new Object();
      multiPartInternal0.setContent(object0);
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("text/plain", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setMimeType("q2='1oiAaSkjKDe");
      multiPartInternal0.setContent("application/octet-stream");
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("q2='1oiAaSkjKDe", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setContent("application/octet-stream");
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("text/plain", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      multiPartInternal0.setContent(pipedInputStream0);
      multiPartInternal0.setMimeType("P@4N{wM?e(IaB~");
      String string0 = multiPartInternal0.getMimeType();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      multiPartInternal0.setContent(pipedInputStream0);
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("application/octet-stream", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setMimeType("UgxY]D@+Qe&8t3F");
      MockFile mockFile0 = new MockFile("application/octet-stream", "application/octet-stream");
      multiPartInternal0.setContent(mockFile0);
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("UgxY]D@+Qe&8t3F", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      File file0 = MockFile.createTempFile("application/octet-stream", "yN]JP)cZ%c}pc)^");
      multiPartInternal0.setContent(file0);
      String string0 = multiPartInternal0.getMimeType();
      assertEquals("application/octet-stream", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      Object object0 = new Object();
      multiPartInternal0.setContent(object0);
      StringBody stringBody0 = (StringBody)multiPartInternal0.getContentBody();
      assertEquals("text", stringBody0.getMediaType());
      assertEquals(25L, stringBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      // Undeclared exception!
      try { 
        multiPartInternal0.getContentBody();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      multiPartInternal0.setContent(pipedInputStream0);
      InputStreamBody inputStreamBody0 = (InputStreamBody)multiPartInternal0.getContentBody();
      assertEquals("octet-stream", inputStreamBody0.getSubType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      MockFile mockFile0 = new MockFile("application/octet-stream");
      multiPartInternal0.setContent(mockFile0);
      multiPartInternal0.setMimeType("0\"YG FU< QB2 HuV");
      // Undeclared exception!
      try { 
        multiPartInternal0.getContentBody();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIME type may not contain reserved characters
         //
         verifyException("org.apache.http.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      File file0 = MockFile.createTempFile("application/octet-stream", "yN]JP)cZ%c}pc)^");
      multiPartInternal0.setContent(file0);
      FileBody fileBody0 = (FileBody)multiPartInternal0.getContentBody();
      assertEquals(0L, fileBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      String string0 = multiPartInternal0.getMimeType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      Object object0 = multiPartInternal0.getContent();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      Map<String, String> map0 = multiPartInternal0.getHeaders();
      multiPartInternal0.setContent(map0);
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)multiPartInternal0.getContent();
      assertTrue(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setCharset("R%Yh2t|5O;yj.t{6k5");
      multiPartInternal0.setContent("+=/=P,}");
      // Undeclared exception!
      try { 
        multiPartInternal0.getContentBody();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // R%Yh2t|5O;yj.t{6k5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      String string0 = multiPartInternal0.getCharset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      String string0 = multiPartInternal0.getFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      String string0 = multiPartInternal0.getControlName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiPartInternal multiPartInternal0 = new MultiPartInternal();
      multiPartInternal0.setMimeType("+=/=P,}");
      multiPartInternal0.setContent("+=/=P,}");
      // Undeclared exception!
      try { 
        multiPartInternal0.getContentBody();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIME type may not contain reserved characters
         //
         verifyException("org.apache.http.util.Args", e);
      }
  }
}
