/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 04:00:19 GMT 2024
 */

package io.restassured.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.GroovyClassLoader;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import io.restassured.authentication.ExplicitNoAuthScheme;
import io.restassured.authentication.FormAuthScheme;
import io.restassured.authentication.NTLMAuthScheme;
import io.restassured.authentication.NoAuthScheme;
import io.restassured.config.RestAssuredConfig;
import io.restassured.filter.Filter;
import io.restassured.filter.log.LogDetail;
import io.restassured.internal.RequestLogSpecificationImpl;
import io.restassured.internal.RequestSpecificationImpl;
import io.restassured.internal.log.LogRepository;
import io.restassured.specification.ProxySpecification;
import io.restassured.specification.RequestSpecification;
import java.util.ArrayList;
import java.util.Set;
import java.util.Vector;
import org.codehaus.groovy.control.ASTTransformationsContext;
import org.codehaus.groovy.control.CompilationUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RequestLogSpecificationImpl_ESTest extends RequestLogSpecificationImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.uri();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.params();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.parameters();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = compilationUnit0.getASTTransformationsContext();
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.method();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.headers();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      FormAuthScheme formAuthScheme0 = new FormAuthScheme();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("C/0gm.tCG.]m", 1414, "*AU}F?o|rF", formAuthScheme0, nonEmptySequence0, (RequestSpecification) null, false, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.getRequestSpecification();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      LogRepository logRepository0 = new LogRepository();
      requestLogSpecificationImpl0.setLogRepository(logRepository0);
      LogRepository logRepository1 = requestLogSpecificationImpl0.getLogRepository();
      assertEquals("", logRepository1.getResponseLog());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.everything(true);
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = compilationUnit0.getASTTransformationsContext();
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.everything();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.cookies();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.body(true);
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.body();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.all(true);
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.all();
      assertSame(requestSpecification0, requestSpecificationImpl0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      FormAuthScheme formAuthScheme0 = new FormAuthScheme();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("C/0gm.tCG.]m", 1414, "c'drN4M//r", formAuthScheme0, nonEmptySequence0, (RequestSpecification) null, false, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.uri();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      FormAuthScheme formAuthScheme0 = new FormAuthScheme();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host(".cY]R");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl(".cY]R", 4009, ".cY]R", formAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, true, true);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.params();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      FormAuthScheme formAuthScheme0 = new FormAuthScheme();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host(".cY]R");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl(".cY]R", 4009, ".cY]R", formAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, true, true);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.method();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      Class<Object> class0 = Object.class;
      Sequence sequence0 = new Sequence(class0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.port(1357);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 1357, "c'drN4M//r", explicitNoAuthScheme0, sequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.ifValidationFails();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method registerRequestLog() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      FormAuthScheme formAuthScheme0 = new FormAuthScheme();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("C/0gm.tCG.]m", 1414, "*AU}F?o|rF", formAuthScheme0, nonEmptySequence0, (RequestSpecification) null, false, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.headers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      NoAuthScheme noAuthScheme0 = new NoAuthScheme();
      Vector<Filter> vector0 = new Vector<Filter>();
      ProxySpecification proxySpecification0 = ProxySpecification.host("HEADERS");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("", 2577, "", noAuthScheme0, vector0, (RequestSpecification) null, true, (RestAssuredConfig) null, (LogRepository) null, proxySpecification0, true, true);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.everything(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      FormAuthScheme formAuthScheme0 = new FormAuthScheme();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host(".cY]R");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl(".cY]R", 4009, ".cY]R", formAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, true, true);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.cookies();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      FormAuthScheme formAuthScheme0 = new FormAuthScheme();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("C/0gm.tCG.]m", 1414, "*AU}F?o|rF", formAuthScheme0, nonEmptySequence0, (RequestSpecification) null, false, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.body(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("?ata-zl|MsGbh");
      NTLMAuthScheme nTLMAuthScheme0 = new NTLMAuthScheme();
      ArrayList<Filter> arrayList0 = new ArrayList<Filter>();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("?ata-zl|MsGbh", 745, "W;O}r&|b", nTLMAuthScheme0, arrayList0, (RequestSpecification) null, false, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.all(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("?ata-zl|MsGbh");
      NTLMAuthScheme nTLMAuthScheme0 = new NTLMAuthScheme();
      ArrayList<Filter> arrayList0 = new ArrayList<Filter>();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("?ata-zl|MsGbh", 745, "?ata-zl|MsGbh", nTLMAuthScheme0, arrayList0, (RequestSpecification) null, false, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.all();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.all();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.body(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.all(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      LogDetail logDetail0 = LogDetail.STATUS;
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.ifValidationFails(logDetail0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method registerRequestLog() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.everything(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("c'drN4M//r", 191, "c'drN4M//r", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, true);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      LogDetail logDetail0 = LogDetail.PARAMS;
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.ifValidationFails(logDetail0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method registerRequestLog() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.params();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.cookies();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      LogRepository logRepository0 = new LogRepository();
      requestLogSpecificationImpl0.setLogRepository(logRepository0);
      LogDetail logDetail0 = LogDetail.HEADERS;
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.ifValidationFails(logDetail0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      RequestSpecification requestSpecification0 = requestLogSpecificationImpl0.getRequestSpecification();
      assertNull(requestSpecification0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("s*Akv)4TA<NT", 191, "s*Akv)4TA<NT", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.ifValidationFails();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      LogDetail logDetail0 = LogDetail.PARAMS;
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.ifValidationFails(logDetail0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.body();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("s*Akv)4TA<NT", 191, "s*Akv)4TA<NT", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.everything();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.uri();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Set<String> set0 = requestLogSpecificationImpl0.getBlacklistedHeaders();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      LogRepository logRepository0 = requestLogSpecificationImpl0.getLogRepository();
      assertNull(logRepository0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.parameters();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      CompilationUnit compilationUnit0 = new CompilationUnit((GroovyClassLoader) null);
      ASTTransformationsContext aSTTransformationsContext0 = new ASTTransformationsContext(compilationUnit0, (GroovyClassLoader) null);
      Set<String> set0 = aSTTransformationsContext0.getGlobalTransformNames();
      requestLogSpecificationImpl0.setBlacklistedHeaders(set0);
      Set<String> set1 = requestLogSpecificationImpl0.getBlacklistedHeaders();
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.headers();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      Class<Object> class0 = Object.class;
      Vector<Object> vector0 = new Vector<Object>();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("C/0gm.tCG.]m");
      ExplicitNoAuthScheme explicitNoAuthScheme0 = new ExplicitNoAuthScheme();
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("s*Akv)4TA<NT", 191, "s*Akv)4TA<NT", explicitNoAuthScheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, false, false);
      requestLogSpecificationImpl0.setRequestSpecification(requestSpecificationImpl0);
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.method();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Blacklisted headers cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RequestLogSpecificationImpl requestLogSpecificationImpl0 = new RequestLogSpecificationImpl();
      // Undeclared exception!
      try { 
        requestLogSpecificationImpl0.everything();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }
}
