/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:01:49 GMT 2024
 */

package io.restassured.internal.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.Sequence;
import io.restassured.authentication.OAuthScheme;
import io.restassured.authentication.PreemptiveBasicAuthScheme;
import io.restassured.config.RestAssuredConfig;
import io.restassured.config.XmlConfig;
import io.restassured.filter.Filter;
import io.restassured.filter.FilterContext;
import io.restassured.internal.RequestSpecificationImpl;
import io.restassured.internal.ResponseParserRegistrar;
import io.restassured.internal.ResponseSpecificationImpl;
import io.restassured.internal.RestAssuredResponseImpl;
import io.restassured.internal.filter.FilterContextImpl;
import io.restassured.internal.filter.SendRequestFilter;
import io.restassured.internal.log.LogRepository;
import io.restassured.specification.FilterableRequestSpecification;
import io.restassured.specification.FilterableResponseSpecification;
import io.restassured.specification.ProxySpecification;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;
import java.net.URISyntaxException;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import javax.xml.stream.util.EventReaderDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SendRequestFilter_ESTest extends SendRequestFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SendRequestFilter sendRequestFilter0 = new SendRequestFilter();
      PreemptiveBasicAuthScheme preemptiveBasicAuthScheme0 = new PreemptiveBasicAuthScheme();
      Class<Object> class0 = Object.class;
      Sequence sequence0 = new Sequence(class0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.host("M\" i3R%IH,~");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("M\" i3R%IH,~", (-1), "M\" i3R%IH,~", preemptiveBasicAuthScheme0, sequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, true, true);
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("binary", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, restAssuredResponseImpl0, (LogRepository) null);
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      XmlConfig xmlConfig0 = XmlConfig.xmlConfig();
      Map<String, Object> map0 = xmlConfig0.properties();
      FilterContextImpl filterContextImpl0 = new FilterContextImpl("M\" i3R%IH,~", "M\" i3R%IH,~", "M\" i3R%IH,~", "M\" i3R%IH,~", "M\" i3R%IH,~", objectArray0, "M\" i3R%IH,~", object0, (Iterator<Filter>) null, map0);
      // Undeclared exception!
      try { 
        sendRequestFilter0.filter(requestSpecificationImpl0, responseSpecificationImpl0, filterContextImpl0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(Throwable e) {
         //
         // Illegal character in path at index 1: M\" i3R%IH,~
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SendRequestFilter sendRequestFilter0 = new SendRequestFilter();
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      Vector<Filter> vector0 = new Vector<Filter>();
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      RestAssuredConfig restAssuredConfig0 = new RestAssuredConfig();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      LogRepository logRepository0 = new LogRepository();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("properties", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, restAssuredResponseImpl0, logRepository0);
      ProxySpecification proxySpecification0 = ProxySpecification.auth("nyB}UgU;tg~dlS\u0003Lh'", "");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("properties", 713, "", oAuthScheme0, vector0, (RequestSpecification) null, true, restAssuredConfig0, logRepository0, proxySpecification0, true, true);
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      EventReaderDelegate eventReaderDelegate0 = new EventReaderDelegate();
      FilterContextImpl filterContextImpl0 = new FilterContextImpl("", "properties", "getInternalRequestURI", (String) null, "properties", objectArray0, "", object0, eventReaderDelegate0, (Map<String, Object>) null);
      // Undeclared exception!
      try { 
        sendRequestFilter0.filter(requestSpecificationImpl0, responseSpecificationImpl0, filterContextImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SendRequestFilter sendRequestFilter0 = new SendRequestFilter();
      // Undeclared exception!
      try { 
        sendRequestFilter0.filter((FilterableRequestSpecification) null, (FilterableResponseSpecification) null, (FilterContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method getInternalRequestURI() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }
}
