/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:18:46 GMT 2024
 */

package io.restassured.internal.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.restassured.internal.multipart.RestAssuredMultiPartEntity;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.http.Header;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.FormBodyPart;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.content.ContentBody;
import org.apache.http.entity.mime.content.InputStreamBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RestAssuredMultiPartEntity_ESTest extends RestAssuredMultiPartEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", (String) null, httpMultipartMode0, "ASCII");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamBody inputStreamBody0 = new InputStreamBody(pipedInputStream0, (String) null);
      restAssuredMultiPartEntity0.addPart("ASCII", (ContentBody) inputStreamBody0);
      boolean boolean0 = restAssuredMultiPartEntity0.isStreaming();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "jZ:");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ContentType contentType0 = ContentType.TEXT_XML;
      InputStreamBody inputStreamBody0 = new InputStreamBody(byteArrayInputStream0, contentType0, "");
      restAssuredMultiPartEntity0.addPart("", (ContentBody) inputStreamBody0);
      boolean boolean0 = restAssuredMultiPartEntity0.isRepeatable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", (String) null, httpMultipartMode0, "ASCII");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamBody inputStreamBody0 = new InputStreamBody(pipedInputStream0, (String) null);
      restAssuredMultiPartEntity0.addPart("ASCII", (ContentBody) inputStreamBody0);
      boolean boolean0 = restAssuredMultiPartEntity0.isChunked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", (String) null, httpMultipartMode0, "ASCII");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamBody inputStreamBody0 = new InputStreamBody(pipedInputStream0, (String) null);
      restAssuredMultiPartEntity0.addPart("ASCII", (ContentBody) inputStreamBody0);
      long long0 = restAssuredMultiPartEntity0.getContentLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        restAssuredMultiPartEntity0.writeTo(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      FormBodyPart formBodyPart0 = mock(FormBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn((ContentBody) null).when(formBodyPart0).getBody();
      restAssuredMultiPartEntity0.addPart(formBodyPart0);
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.isStreaming();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      FormBodyPart formBodyPart0 = mock(FormBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn((ContentBody) null).when(formBodyPart0).getBody();
      restAssuredMultiPartEntity0.addPart(formBodyPart0);
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.isRepeatable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      FormBodyPart formBodyPart0 = mock(FormBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn((ContentBody) null).when(formBodyPart0).getBody();
      restAssuredMultiPartEntity0.addPart(formBodyPart0);
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.isChunked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      FormBodyPart formBodyPart0 = mock(FormBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn((ContentBody) null).when(formBodyPart0).getBody();
      restAssuredMultiPartEntity0.addPart(formBodyPart0);
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.getContentType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.STRICT;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      FormBodyPart formBodyPart0 = mock(FormBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn((ContentBody) null).when(formBodyPart0).getBody();
      restAssuredMultiPartEntity0.addPart(formBodyPart0);
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.getContentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      FormBodyPart formBodyPart0 = mock(FormBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn((ContentBody) null).when(formBodyPart0).getBody();
      restAssuredMultiPartEntity0.addPart(formBodyPart0);
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.getContentEncoding();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      FormBodyPart formBodyPart0 = mock(FormBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn((ContentBody) null).when(formBodyPart0).getBody();
      restAssuredMultiPartEntity0.addPart(formBodyPart0);
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.consumeContent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.entity.mime.AbstractMultipartForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      // Undeclared exception!
      try { 
        restAssuredMultiPartEntity0.addPart("ASCII", (ContentBody) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Body may not be null
         //
         verifyException("org.apache.http.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = null;
      try {
        restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("getContentEncoding", "getContentEncoding", httpMultipartMode0, "getContentEncoding");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // getContentEncoding
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = null;
      try {
        restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("", "", httpMultipartMode0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = null;
      try {
        restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity((String) null, (String) null, httpMultipartMode0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      boolean boolean0 = restAssuredMultiPartEntity0.isStreaming();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("INSTANCE", (String) null, httpMultipartMode0, (String) null);
      boolean boolean0 = restAssuredMultiPartEntity0.isChunked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      restAssuredMultiPartEntity0.isRepeatable();
      restAssuredMultiPartEntity0.consumeContent();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("INSTANCE", (String) null, httpMultipartMode0, (String) null);
      restAssuredMultiPartEntity0.getContentType();
      boolean boolean0 = restAssuredMultiPartEntity0.isChunked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("INSTANCE", (String) null, httpMultipartMode0, (String) null);
      long long0 = restAssuredMultiPartEntity0.getContentLength();
      assertEquals(36L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity(".visitMultiANewArrayInsn(", (String) null, httpMultipartMode0, ".visitMultiANewArrayInsn(");
      Header header0 = restAssuredMultiPartEntity0.getContentEncoding();
      assertNull(header0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity(".visitMultiANewArrayInsn(", (String) null, httpMultipartMode0, ".visitMultiANewArrayInsn(");
      MockFile mockFile0 = new MockFile((String) null, "QY@d#K#4a-h0X}-=-j");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      restAssuredMultiPartEntity0.writeTo(mockFileOutputStream0);
      assertEquals(31L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.BROWSER_COMPATIBLE;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("ASCII", "ASCII", httpMultipartMode0, "ASCII");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ContentType contentType0 = ContentType.IMAGE_JPEG;
      InputStreamBody inputStreamBody0 = new InputStreamBody(pipedInputStream0, contentType0);
      restAssuredMultiPartEntity0.addPart("ASCII", (ContentBody) inputStreamBody0);
      try { 
        restAssuredMultiPartEntity0.consumeContent();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpMultipartMode httpMultipartMode0 = HttpMultipartMode.RFC6532;
      RestAssuredMultiPartEntity restAssuredMultiPartEntity0 = new RestAssuredMultiPartEntity("LuKF14", (String) null, httpMultipartMode0, (String) null);
      try { 
        restAssuredMultiPartEntity0.getContent();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
      }
  }
}
