/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:30:41 GMT 2024
 */

package io.restassured.internal.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.MissingMethodException;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import io.restassured.authentication.OAuth2Scheme;
import io.restassured.authentication.OAuthScheme;
import io.restassured.config.RestAssuredConfig;
import io.restassured.internal.RequestSpecificationImpl;
import io.restassured.internal.RestAssuredResponseImpl;
import io.restassured.internal.log.LogRepository;
import io.restassured.internal.support.Prettifier;
import io.restassured.parsing.Parser;
import io.restassured.response.ResponseBody;
import io.restassured.response.ResponseOptions;
import io.restassured.specification.FilterableRequestSpecification;
import io.restassured.specification.ProxySpecification;
import io.restassured.specification.RequestSpecification;
import java.io.File;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Prettifier_ESTest extends Prettifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      Parser parser0 = Parser.HTML;
      String string0 = prettifier0.prettify("ASTORE", parser0);
      assertEquals("<html>\n  <body>ASTORE</body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      Parser parser0 = Parser.XML;
      String string0 = prettifier0.prettify("oAbNIXf58lM}U@2mtH~J", parser0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      Parser parser0 = Parser.JSON;
      String string0 = prettifier0.prettify("", parser0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      Parser parser0 = Parser.JSON;
      String string0 = prettifier0.prettify((String) null, parser0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      // Undeclared exception!
      try { 
        prettifier0.getPrettifiedBodyIfPossible((FilterableRequestSpecification) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method getBody() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      // Undeclared exception!
      try { 
        prettifier0.getPrettifiedBodyIfPossible((ResponseOptions) restAssuredResponseImpl0, (ResponseBody) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method asString() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      restAssuredResponseImpl0.setContentType(restAssuredResponseImpl0);
      // Undeclared exception!
      try { 
        prettifier0.getPrettifiedBodyIfPossible((ResponseOptions) restAssuredResponseImpl0, (ResponseBody) restAssuredResponseImpl0);
        fail("Expecting exception: MissingMethodException");
      
      } catch(MissingMethodException e) {
         //
         // No signature of method: static org.apache.commons.lang3.StringUtils.isBlank() is applicable for argument types: (io.restassured.internal.RestAssuredResponseImpl) values: [io.restassured.internal.RestAssuredResponseImpl@1]
         // Possible solutions: isBlank(java.lang.CharSequence), isAllBlank([Ljava.lang.CharSequence;), isAnyBlank([Ljava.lang.CharSequence;), isNotBlank(java.lang.CharSequence), isAlpha(java.lang.CharSequence), isNoneBlank([Ljava.lang.CharSequence;)
         //
         verifyException("groovy.lang.MetaClassImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      Parser parser0 = Parser.TEXT;
      String string0 = prettifier0.prettify("\"Vs2907<", parser0);
      assertEquals("\"Vs2907<", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      Parser parser0 = Parser.XML;
      String string0 = prettifier0.prettify((String) null, parser0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      Parser parser0 = Parser.JSON;
      // Undeclared exception!
      try { 
        prettifier0.prettify("3_c={7+>JR6*rh&", parser0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.groovy.json.internal.FastStringUtils$ServiceHolder
         //
         verifyException("org.apache.groovy.json.internal.FastStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      String string0 = prettifier0.getPrettifiedBodyIfPossible((ResponseOptions) restAssuredResponseImpl0, (ResponseBody) restAssuredResponseImpl0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      OAuth2Scheme oAuth2Scheme0 = new OAuth2Scheme();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      ProxySpecification proxySpecification0 = ProxySpecification.port(1);
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("^m\"GZ<eU>uHg_Brm*D", 1, "", oAuth2Scheme0, nonEmptySequence0, (RequestSpecification) null, true, restAssuredConfig0, (LogRepository) null, proxySpecification0, true, true);
      MockFile mockFile0 = new MockFile("Fu-:pcCWrDiQADo)");
      requestSpecificationImpl0.body((File) mockFile0);
      String string0 = prettifier0.getPrettifiedBodyIfPossible((FilterableRequestSpecification) requestSpecificationImpl0);
      assertEquals("Fu-:pcCWrDiQADo)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      Class<Object> class0 = Object.class;
      Vector<RestAssuredResponseImpl> vector0 = new Vector<RestAssuredResponseImpl>();
      Sequence sequence0 = new Sequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.host("Xfr");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("", 1855, "", oAuthScheme0, sequence0, (RequestSpecification) null, false, restAssuredConfig0, logRepository0, proxySpecification0, true, false);
      requestSpecificationImpl0.body("");
      String string0 = prettifier0.getPrettifiedBodyIfPossible((FilterableRequestSpecification) requestSpecificationImpl0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Prettifier prettifier0 = new Prettifier();
      OAuthScheme oAuthScheme0 = new OAuthScheme();
      Class<Object> class0 = Object.class;
      Vector<RestAssuredResponseImpl> vector0 = new Vector<RestAssuredResponseImpl>();
      Sequence sequence0 = new Sequence(class0, vector0);
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      LogRepository logRepository0 = new LogRepository();
      ProxySpecification proxySpecification0 = ProxySpecification.host("Xfr");
      RequestSpecificationImpl requestSpecificationImpl0 = new RequestSpecificationImpl("", 1855, "", oAuthScheme0, sequence0, (RequestSpecification) null, false, restAssuredConfig0, logRepository0, proxySpecification0, true, false);
      String string0 = prettifier0.getPrettifiedBodyIfPossible((FilterableRequestSpecification) requestSpecificationImpl0);
      assertNull(string0);
  }
}
