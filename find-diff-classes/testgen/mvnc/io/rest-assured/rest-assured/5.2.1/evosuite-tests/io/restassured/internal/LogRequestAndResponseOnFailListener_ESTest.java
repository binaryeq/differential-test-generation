/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:53:28 GMT 2024
 */

package io.restassured.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.restassured.config.RestAssuredConfig;
import io.restassured.internal.LogRequestAndResponseOnFailListener;
import io.restassured.internal.ResponseParserRegistrar;
import io.restassured.internal.ResponseSpecificationImpl;
import io.restassured.internal.RestAssuredResponseImpl;
import io.restassured.internal.log.LogRepository;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;
import java.io.ByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogRequestAndResponseOnFailListener_ESTest extends LogRequestAndResponseOnFailListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LogRequestAndResponseOnFailListener logRequestAndResponseOnFailListener0 = new LogRequestAndResponseOnFailListener();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      LogRepository logRepository0 = new LogRepository();
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("tzG6W4;dr", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, logRepository0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(70);
      byteArrayOutputStream0.write(70);
      logRepository0.registerResponseLog(byteArrayOutputStream0);
      logRepository0.registerRequestLog(byteArrayOutputStream0);
      logRequestAndResponseOnFailListener0.onFailure((RequestSpecification) null, responseSpecificationImpl0, restAssuredResponseImpl0);
      assertFalse(restAssuredResponseImpl0.getHasExpectations());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogRequestAndResponseOnFailListener logRequestAndResponseOnFailListener0 = new LogRequestAndResponseOnFailListener();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      LogRepository logRepository0 = new LogRepository();
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("tzG6W4;dr", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, logRepository0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(70);
      byteArrayOutputStream0.write(70);
      logRepository0.registerResponseLog(byteArrayOutputStream0);
      logRequestAndResponseOnFailListener0.onFailure((RequestSpecification) null, responseSpecificationImpl0, restAssuredResponseImpl0);
      assertFalse(restAssuredResponseImpl0.getHasExpectations());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LogRequestAndResponseOnFailListener logRequestAndResponseOnFailListener0 = new LogRequestAndResponseOnFailListener();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.newConfig();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      LogRepository logRepository0 = new LogRepository();
      ResponseParserRegistrar responseParserRegistrar0 = new ResponseParserRegistrar();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("tzG6W4;dr", (ResponseSpecification) null, responseParserRegistrar0, restAssuredConfig0, logRepository0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(70);
      byteArrayOutputStream0.write(70);
      logRepository0.registerRequestLog(byteArrayOutputStream0);
      logRequestAndResponseOnFailListener0.onFailure((RequestSpecification) null, responseSpecificationImpl0, restAssuredResponseImpl0);
      assertNull(restAssuredResponseImpl0.getDefaultContentType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LogRequestAndResponseOnFailListener logRequestAndResponseOnFailListener0 = new LogRequestAndResponseOnFailListener();
      RestAssuredConfig restAssuredConfig0 = RestAssuredConfig.config();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      ResponseSpecificationImpl responseSpecificationImpl0 = new ResponseSpecificationImpl("binary", (ResponseSpecification) null, (ResponseParserRegistrar) null, restAssuredConfig0, (LogRepository) null);
      logRequestAndResponseOnFailListener0.onFailure((RequestSpecification) null, responseSpecificationImpl0, restAssuredResponseImpl0);
      assertFalse(restAssuredResponseImpl0.getHasExpectations());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LogRequestAndResponseOnFailListener logRequestAndResponseOnFailListener0 = new LogRequestAndResponseOnFailListener();
      RestAssuredResponseImpl restAssuredResponseImpl0 = new RestAssuredResponseImpl();
      // Undeclared exception!
      try { 
        logRequestAndResponseOnFailListener0.onFailure((RequestSpecification) null, (ResponseSpecification) null, restAssuredResponseImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke method getLogRepository() on null object
         //
         verifyException("org.codehaus.groovy.runtime.NullObject", e);
      }
  }
}
