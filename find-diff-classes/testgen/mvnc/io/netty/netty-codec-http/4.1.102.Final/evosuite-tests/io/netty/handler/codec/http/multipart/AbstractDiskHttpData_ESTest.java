/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:48:38 GMT 2024
 */

package io.netty.handler.codec.http.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledUnsafeHeapByteBuf;
import io.netty.handler.codec.http.multipart.DiskAttribute;
import io.netty.handler.codec.http.multipart.DiskFileUpload;
import io.netty.handler.codec.http.multipart.HttpData;
import io.netty.handler.codec.http.multipart.InternalAttribute;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractDiskHttpData_ESTest extends AbstractDiskHttpData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Charset charset0 = Charset.defaultCharset();
          DiskAttribute diskAttribute0 = new DiskAttribute(":;BoB@8", charset0);
          ByteBuf byteBuf0 = diskAttribute0.getChunk(334);
          DiskAttribute diskAttribute1 = new DiskAttribute(".att", 334, charset0, ".att", false);
          diskAttribute1.size = 8196L;
          // Undeclared exception!
          try { 
            diskAttribute1.addContent(byteBuf0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \".att/Attr_2892853708827722194_-2111982106\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.Files.newByteChannel(Files.java:361)
             // java.nio.file.Files.createFile(Files.java:632)
             // java.nio.file.TempFileHelper.create(TempFileHelper.java:138)
             // java.nio.file.TempFileHelper.createTempFile(TempFileHelper.java:161)
             // java.nio.file.Files.createTempFile(Files.java:852)
             // io.netty.util.internal.PlatformDependent.createTempFile(PlatformDependent.java:1501)
             // io.netty.handler.codec.http.multipart.AbstractDiskHttpData.tempFile(AbstractDiskHttpData.java:94)
             // io.netty.handler.codec.http.multipart.AbstractDiskHttpData.addContent(AbstractDiskHttpData.java:163)
             // io.netty.handler.codec.http.multipart.DiskAttribute.addContent(DiskAttribute.java:138)
             // sun.reflect.GeneratedMethodAccessor265.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
          UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 16, 16);
          ByteBuf byteBuf0 = unpooledUnsafeHeapByteBuf0.writeDouble((-827.709));
          DiskAttribute diskAttribute0 = new DiskAttribute("Hailed=to force.", 16);
          // Undeclared exception!
          try { 
            diskAttribute0.addContent(byteBuf0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Charset charset0 = Charset.defaultCharset();
          DiskFileUpload diskFileUpload0 = new DiskFileUpload("Out of size: ", "Out of size: ", "Out of size: ", "Out of size: ", charset0, (-9968L), (String) null, false);
          ByteBuf byteBuf0 = diskFileUpload0.getChunk(99);
          // Undeclared exception!
          try { 
            diskFileUpload0.addContent(byteBuf0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DiskAttribute diskAttribute0 = new DiskAttribute(">e2b\"]~?4=", 1526L);
          // Undeclared exception!
          try { 
            diskAttribute0.setValue(">e2b\"]~?4=");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(":;BoB@8", "_1QMbMc");
      DiskAttribute diskAttribute0 = new DiskAttribute(":EWV`_@b\"tc}ir-", charset0);
      diskAttribute0.setContent((File) mockFile0);
      assertTrue(diskAttribute0.isCompleted());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      diskAttribute0.setContent((File) mockFile0);
      ByteBuf byteBuf0 = diskAttribute0.getChunk(0);
      diskAttribute0.setContent(byteBuf0);
      assertEquals(0, byteBuf0.capacity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute("slF5p*Bl:3ejU:\"e-Q", charset0);
      diskAttribute0.delete();
      assertEquals((-1L), diskAttribute0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",\"");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("eeA=T> 0r8h", charset0);
      diskAttribute0.setContent((File) mockFile0);
      boolean boolean0 = diskAttribute0.renameTo(mockFile0);
      assertEquals(2L, diskAttribute0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("io.neqty.handler.codec.http@multipart.AbstractDiskHttpData", charset0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.getChunk(2147221567);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Charset charset0 = Charset.defaultCharset();
          MockFile mockFile0 = new MockFile("fH");
          DiskAttribute diskAttribute0 = new DiskAttribute("fH", charset0);
          diskAttribute0.setContent((File) mockFile0);
          diskAttribute0.setValue("fH");
          // Undeclared exception!
          try { 
            diskAttribute0.copy();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("!E(FqRiy+");
      DiskAttribute diskAttribute0 = new DiskAttribute("!E(FqRiy+", charset0);
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.setValue("slF5p*Bl:3ejU:\"e-Q");
      Object object0 = new Object();
      HttpData httpData0 = diskAttribute0.touch(object0);
      assertTrue(httpData0.isCompleted());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("!E(FqRiy+");
      DiskAttribute diskAttribute0 = new DiskAttribute("!E(FqRiy+", charset0);
      diskAttribute0.setContent((File) mockFile0);
      Object object0 = new Object();
      HttpData httpData0 = diskAttribute0.touch(object0);
      assertTrue(httpData0.isCompleted());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskFileUpload diskFileUpload0 = new DiskFileUpload("Zm", "", "Multiple exceptions detected, the following will be suppressed {}", "", charset0, 1021L, ".sVgP;a{C)+Ti%FEr", true);
      Object object0 = new Object();
      DiskFileUpload diskFileUpload1 = (DiskFileUpload)diskFileUpload0.touch(object0);
      assertEquals("Multiple exceptions detected, the following will be suppressed {}", diskFileUpload1.getContentType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute("Saxon limit on sequence length exceeded (2^31)", (-9983L), charset0);
      Object object0 = new Object();
      HttpData httpData0 = diskAttribute0.touch(object0);
      assertFalse(httpData0.isInMemory());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ",\"");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("eeA=T> 0r8h", charset0);
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.touch();
      assertEquals(2L, diskAttribute0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute("jWq-}^{");
      diskAttribute0.size = (-2607L);
      HttpData httpData0 = diskAttribute0.touch();
      assertFalse(httpData0.isCompleted());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("eeA=T> 0r8h", charset0);
      diskAttribute0.setContent((File) mockFile0);
      HttpData httpData0 = diskAttribute0.touch();
      assertTrue(httpData0.isCompleted());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskFileUpload diskFileUpload0 = new DiskFileUpload("Zm", "", "Multiple exceptions detected, the following will be suppressed {}", "", charset0, 1021L, ".sVgP;a{C)+Ti%FEr", true);
      HttpData httpData0 = diskFileUpload0.touch();
      assertEquals(0L, httpData0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute("Saxon limit on sequence length exceeded (2^31)", (-9983L), charset0);
      HttpData httpData0 = diskAttribute0.touch();
      assertSame(diskAttribute0, httpData0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute("3'&& ", charset0);
      diskAttribute0.setContent((File) mockFile0);
      File file0 = diskAttribute0.getFile();
      assertFalse(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr", true);
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.getFile();
      assertEquals(17L, diskAttribute0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(")<Wo->/hN+(4 +m", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("dV.OxVj", charset0);
      diskAttribute0.setContent((File) mockFile0);
      File file0 = diskAttribute0.getFile();
      assertFalse(file0.exists());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute("XT>hIj");
      ByteBuf byteBuf0 = diskAttribute0.getByteBuf();
      assertEquals(0, byteBuf0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", charset0);
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.get();
      assertEquals(17L, diskAttribute0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute("slF5p*Bl:3ejU:\"e-Q", charset0);
      // Undeclared exception!
      try { 
        diskAttribute0.setContent((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", charset0);
      // Undeclared exception!
      try { 
        diskAttribute0.setContent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute("net.sf.saxon.expr.TryCatch$FilteringErrorListener", 2147483647L);
      // Undeclared exception!
      try { 
        diskAttribute0.setContent((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("", "");
      DiskAttribute diskAttribute0 = new DiskAttribute("{,e", charset0);
      diskAttribute0.setContent((File) mockFile0);
      // Undeclared exception!
      try { 
        diskAttribute0.renameTo(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute("2");
      // Undeclared exception!
      try { 
        diskAttribute0.renameTo((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // dest
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr", true);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.getString();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":;BoB@8");
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(":;BoB@8", charset0);
      diskAttribute0.setContent((File) mockFile0);
      MockFile.createTempFile(".att", "Attr_", (File) mockFile0);
      // Undeclared exception!
      try { 
        diskAttribute0.getChunk((-2067947215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("");
      DiskAttribute diskAttribute0 = new DiskAttribute("slF5p*Bl:3ejU:\"e-Q", charset0);
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.renameTo(mockFile0);
      try { 
        diskAttribute0.getByteBuf();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr", true);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
          UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 16, 16);
          Charset charset0 = Charset.defaultCharset();
          unpooledUnsafeHeapByteBuf0.release();
          DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
          // Undeclared exception!
          try { 
            diskAttribute0.addContent(unpooledUnsafeHeapByteBuf0, false);
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // refCnt: 0, decrement: 1
             //
             verifyException("io.netty.util.internal.ReferenceCountUpdater", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVP;a{C)+Ti%FEr");
      // Undeclared exception!
      try { 
        diskAttribute0.addContent((ByteBuf) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.http.multipart.DiskAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      diskAttribute0.setContent((File) mockFile0);
      ByteBuf byteBuf0 = diskAttribute0.getChunk(0);
      try { 
        diskAttribute0.addContent(byteBuf0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      diskAttribute0.setContent((File) mockFile0);
      ByteBuf byteBuf0 = diskAttribute0.getChunk(0);
      try { 
        diskAttribute0.addContent(byteBuf0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Failed to create file
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.getString(charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskFileUpload diskFileUpload0 = new DiskFileUpload("@^I=dQpI^d7Od", "", " > ", "h0dw:'|QNEq:dq['", charset0, (-60L), "Kd~9|kyE{j", true);
      String string0 = diskFileUpload0.getString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(":;BoB@8", "_1QMbMc");
      DiskAttribute diskAttribute0 = new DiskAttribute(":EWV`_@b\"tc}ir-", charset0);
      diskAttribute0.setContent((File) mockFile0);
      MockFile.createTempFile(":;BoB@8", "", (File) mockFile0);
      // Undeclared exception!
      try { 
        diskAttribute0.getChunk(1401);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.flip()Ljava/nio/ByteBuffer;
         //
         verifyException("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zsr+Dzif.");
      DiskAttribute diskAttribute0 = new DiskAttribute("zsr+Dzif.");
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.deallocate();
      assertFalse(diskAttribute0.isInMemory());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", charset0);
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.getString();
      assertEquals(17L, diskAttribute0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("dV.OxVj", (-875L), charset0);
      diskAttribute0.setContent((File) mockFile0);
      MockFile mockFile1 = new MockFile(".sVgP;a{C)+Ti%FEr", "");
      boolean boolean0 = diskAttribute0.renameTo(mockFile1);
      assertEquals(17L, diskAttribute0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr/dV.OxVj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\"");
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute("dV.OxVj", 59L);
      diskAttribute0.setContent((File) mockFile0);
      boolean boolean0 = diskAttribute0.renameTo(mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      File file0 = MockFile.createTempFile(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr");
      MockFile mockFile0 = new MockFile(file0, "Attr_");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.sVgP;a{C)+Ti%FEr0.sVgP;a{C)+Ti%FEr");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      diskAttribute0.setContent(file0);
      try { 
        diskAttribute0.renameTo(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Failed to create file
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".sVgP;a{C)+Ti%FEr");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".sVgP;a{C)+Ti%FEr");
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr");
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr", true);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.renameTo(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute("XL6a:9kKK", "XL6a:9kKK", false);
      MockFile mockFile0 = new MockFile("`xO[G~");
      try { 
        diskAttribute0.renameTo(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No file defined so cannot be renamed
         //
         verifyException("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("fH");
      DiskAttribute diskAttribute0 = new DiskAttribute("fH", charset0);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.renameTo(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(".sgP;a{C)+Ta%FEr", charset0);
      File file0 = MockFile.createTempFile(".sgP;a{C)+Ta%FEr", ".sgP;a{C)+Ta%FEr");
      diskAttribute0.setContent(file0);
      String string0 = diskAttribute0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      File file0 = MockFile.createTempFile(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr");
      diskAttribute0.setContent(file0);
      // Undeclared exception!
      try { 
        diskAttribute0.getChunk(1042);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.flip()Ljava/nio/ByteBuffer;
         //
         verifyException("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(":;BoB@8", "__QMbMc");
      DiskAttribute diskAttribute0 = new DiskAttribute(":;BoB@8", charset0);
      diskAttribute0.setContent((File) mockFile0);
      MockFile.createTempFile(":;BoB@8", "", (File) mockFile0);
      // Undeclared exception!
      try { 
        diskAttribute0.getChunk(11);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.flip()Ljava/nio/ByteBuffer;
         //
         verifyException("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zsr+Dzif.");
      DiskAttribute diskAttribute0 = new DiskAttribute("zsr+Dzif.");
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.getChunk(460);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(">G%;T,fumgd!hC1", charset0);
      byte[] byteArray0 = diskAttribute0.get();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(":;BoB@8", "__QMbMc");
      DiskAttribute diskAttribute0 = new DiskAttribute(":;BoB@8", charset0);
      diskAttribute0.setContent((File) mockFile0);
      try { 
        diskAttribute0.get();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute("Failed to close a file.", "5-$McgghJZRK,", false);
      boolean boolean0 = diskAttribute0.release();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Charset charset0 = Charset.defaultCharset();
          MockFile mockFile0 = new MockFile(":;BoB@8", ":;BoB@8");
          DiskAttribute diskAttribute0 = new DiskAttribute(":;BoB@8", charset0);
          diskAttribute0.setContent((File) mockFile0);
          Stack<PushbackInputStream> stack0 = new Stack<PushbackInputStream>();
          Enumeration<PushbackInputStream> enumeration0 = stack0.elements();
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
          // Undeclared exception!
          try { 
            diskAttribute0.setContent((InputStream) sequenceInputStream0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DiskAttribute diskAttribute0 = new DiskAttribute(">,e2b\"]~?4=", 1541L);
          Stack<PushbackInputStream> stack0 = new Stack<PushbackInputStream>();
          Enumeration<PushbackInputStream> enumeration0 = stack0.elements();
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
          // Undeclared exception!
          try { 
            diskAttribute0.setContent((InputStream) sequenceInputStream0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", charset0);
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.setContent((File) mockFile0);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("io.neqty.handler.codec.http@multipart.AbstractDiskHttpData", charset0);
      diskAttribute0.setContent((File) mockFile0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      Stack<ByteBuf> stack0 = new Stack<ByteBuf>();
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, false, 311, stack0);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeFloat((-2558.3088F));
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.ensureWritable(86336693);
      diskAttribute0.addContent(compositeByteBuf2, true);
      assertEquals(0, compositeByteBuf2.readableBytes());
      assertEquals(4L, diskAttribute0.length());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(".sVgP;a{C)+Ti%FEr", "dV.OxVj");
      DiskAttribute diskAttribute0 = new DiskAttribute("io.neqty.handler.codec.http@multipart.AbstractDiskHttpData", charset0);
      diskAttribute0.setContent((File) mockFile0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      Stack<ByteBuf> stack0 = new Stack<ByteBuf>();
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, false, 311, stack0);
      compositeByteBuf0.writeFloat((-2558.3088F));
      // Undeclared exception!
      try { 
        diskAttribute0.addContent(compositeByteBuf0, true);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.clear()Ljava/nio/ByteBuffer;
         //
         verifyException("io.netty.buffer.UnpooledHeapByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(".sVgP;a{C)+Ti%FEr", charset0);
      File file0 = MockFile.createTempFile(".sVgP;a{C)+Ti%FEr", ".sVgP;a{C)+Ti%FEr");
      diskAttribute0.setContent(file0);
      ByteBuf byteBuf0 = diskAttribute0.getChunk(0);
      diskAttribute0.addContent(byteBuf0, false);
      diskAttribute0.addContent(byteBuf0, false);
      assertEquals(0, byteBuf0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(".sgP;a{C)+Ta%FEr", charset0);
      File file0 = MockFile.createTempFile(".sgP;a{C)+Ta%FEr", ".sgP;a{C)+Ta%FEr");
      MockFile mockFile0 = new MockFile(file0, "Attr_");
      diskAttribute0.setContent((File) mockFile0);
      diskAttribute0.setValue("");
      assertTrue(diskAttribute0.isCompleted());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DiskAttribute diskAttribute0 = new DiskAttribute("/O|Sr|)K@bepuwR\"", 9332L);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(pooledByteBufAllocator0, 2021161080, 2021161080);
      ByteBuf byteBuf0 = unpooledUnsafeHeapByteBuf0.writeZero(2021161080);
      try { 
        diskAttribute0.setContent(byteBuf0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Out of size: 2021161080 > 9332
         //
         verifyException("io.netty.handler.codec.http.multipart.AbstractDiskHttpData", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Charset charset0 = Charset.defaultCharset();
          DiskFileUpload diskFileUpload0 = new DiskFileUpload("WQntf=pz?4E", "WQntf=pz?4E", "WQntf=pz?4E", "", charset0, 174L, "CZcG+*h$VI]_B", true);
          InternalAttribute internalAttribute0 = new InternalAttribute(charset0);
          ByteBuf byteBuf0 = internalAttribute0.toByteBuf();
          // Undeclared exception!
          try { 
            diskFileUpload0.setContent(byteBuf0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"CZcG+*h$VI]_B/FUp_4066477061163320455_-838595071\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.Files.newByteChannel(Files.java:361)
             // java.nio.file.Files.createFile(Files.java:632)
             // java.nio.file.TempFileHelper.create(TempFileHelper.java:138)
             // java.nio.file.TempFileHelper.createTempFile(TempFileHelper.java:161)
             // java.nio.file.Files.createTempFile(Files.java:852)
             // io.netty.util.internal.PlatformDependent.createTempFile(PlatformDependent.java:1501)
             // io.netty.handler.codec.http.multipart.AbstractDiskHttpData.tempFile(AbstractDiskHttpData.java:94)
             // io.netty.handler.codec.http.multipart.AbstractDiskHttpData.setContent(AbstractDiskHttpData.java:114)
             // sun.reflect.GeneratedMethodAccessor217.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DiskAttribute diskAttribute0 = new DiskAttribute(".tmp", (-60L));
          // Undeclared exception!
          try { 
            diskAttribute0.setValue("");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute("w*Cs]LVc&", charset0);
      File file0 = diskAttribute0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DiskAttribute diskAttribute0 = new DiskAttribute(">G%;T,fumgd!hC1", charset0);
      boolean boolean0 = diskAttribute0.isInMemory();
      assertFalse(boolean0);
  }
}
