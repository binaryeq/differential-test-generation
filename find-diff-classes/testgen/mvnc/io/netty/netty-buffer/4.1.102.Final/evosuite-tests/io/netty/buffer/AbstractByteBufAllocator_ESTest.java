/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:40:55 GMT 2024
 */

package io.netty.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.AbstractByteBufAllocator;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.SimpleLeakAwareCompositeByteBuf;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.util.ResourceLeakTracker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractByteBufAllocator_ESTest extends AbstractByteBufAllocator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = pooledByteBufAllocator0.calculateNewCapacity(4194314, 4194315);
      assertEquals(4194315, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer();
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.buffer(2065, 236);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: 2065 (expected: not greater than maxCapacity(236)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(0, 1159);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeByteBuf compositeByteBuf0 = AbstractByteBufAllocator.toLeakAwareBuffer((CompositeByteBuf) null);
      assertNull(compositeByteBuf0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer();
      compositeByteBuf0.setIndex0((-1454496079), 3);
      CompositeByteBuf compositeByteBuf1 = AbstractByteBufAllocator.toLeakAwareBuffer(compositeByteBuf0);
      assertEquals(16, compositeByteBuf1.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 41, byteBufArray0, 41);
      ResourceLeakTracker<ByteBuf> resourceLeakTracker0 = (ResourceLeakTracker<ByteBuf>) mock(ResourceLeakTracker.class, new ViolatedAssumptionAnswer());
      SimpleLeakAwareCompositeByteBuf simpleLeakAwareCompositeByteBuf0 = new SimpleLeakAwareCompositeByteBuf(compositeByteBuf0, resourceLeakTracker0);
      CompositeByteBuf compositeByteBuf1 = AbstractByteBufAllocator.toLeakAwareBuffer(simpleLeakAwareCompositeByteBuf0);
      assertEquals(0, compositeByteBuf1.capacity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true, false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(64);
      ByteBuf byteBuf1 = AbstractByteBufAllocator.toLeakAwareBuffer(byteBuf0);
      assertNotNull(byteBuf1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      pooledByteBufAllocator0.heapBuffer(0);
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer(0);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer();
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true, false);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer(2534);
      assertEquals(2534, compositeByteBuf0.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer(64);
      assertEquals(64, compositeByteBuf0.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      int int0 = 0;
      unpooledByteBufAllocator0.buffer(0);
      AbstractByteBufAllocator.toLeakAwareBuffer((CompositeByteBuf) null);
      int int1 = (-4080);
      int int2 = (-1815);
      // Undeclared exception!
      try { 
        unpooledByteBufAllocator0.calculateNewCapacity((-4080), (-1815));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minNewCapacity : -4080 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.ioBuffer((-2229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -2229 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.heapBuffer((-607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -607 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      pooledByteBufAllocator0.directBuffer(2143289344, 2143289344);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      // Undeclared exception!
      unpooledByteBufAllocator0.directBuffer(268435200);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.compositeBuffer((-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxNumComponents: -35 (expected: >= 1)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      // Undeclared exception!
      unpooledByteBufAllocator0.buffer(2143289343, 2143289343);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.buffer((-1261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -1261 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.ioBuffer(3174, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: 3174 (expected: not greater than maxCapacity(3)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer(0, 400);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.directBuffer((-1257), (-1257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -1257 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer(0, 0);
      assertEquals(1, byteBuf0.refCnt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true, false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.heapBuffer(0, 124);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      pooledByteBufAllocator0.ioBuffer();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      // Undeclared exception!
      pooledByteBufAllocator0.buffer(543);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.directBuffer((-1263869161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -1263869161 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.compositeHeapBuffer((-1244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxNumComponents: -1244 (expected: >= 1)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer();
      assertEquals(16, compositeByteBuf0.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      pooledByteBufAllocator0.directBuffer();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.compositeDirectBuffer(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxNumComponents: 0 (expected: >= 1)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      int int0 = pooledByteBufAllocator0.calculateNewCapacity(9375162, 25296896);
      assertEquals(12582912, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      int int0 = pooledByteBufAllocator0.calculateNewCapacity(25296896, 25296896);
      assertEquals(25296896, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = pooledByteBufAllocator0.calculateNewCapacity(4194304, Integer.MAX_VALUE);
      assertEquals(4194304, int0);
      
      PooledByteBufAllocator.defaultPreferDirect();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer();
      assertEquals(256, byteBuf0.capacity());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.calculateNewCapacity(12345, (-1830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minNewCapacity: 12345 (expected: not greater than maxCapacity(-1830)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      // Undeclared exception!
      pooledByteBufAllocator0.ioBuffer(124);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(3488);
      assertEquals(3488, compositeByteBuf0.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      assertEquals(16, compositeByteBuf0.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      assertEquals(16, compositeByteBuf0.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      pooledByteBufAllocator0.ioBuffer(0, 0);
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.heapBuffer(0, 0);
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      pooledByteBufAllocator0.ioBuffer(119516, 119516);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer();
      assertEquals(256, byteBuf0.capacity());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      int int0 = unpooledByteBufAllocator0.calculateNewCapacity(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      int int0 = (-1474);
      unpooledByteBufAllocator0.decrementHeap((-1474));
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeLong((-1220L));
      compositeByteBuf1.readInt();
      compositeByteBuf0.refCnt();
      AbstractByteBufAllocator.toLeakAwareBuffer(compositeByteBuf0);
      AbstractByteBufAllocator.toLeakAwareBuffer(compositeByteBuf1);
      pooledByteBufAllocator0.threadCache();
      pooledByteBufAllocator0.compositeBuffer(1388);
      pooledByteBufAllocator0.toString();
      int int1 = (-3307);
      AbstractByteBufAllocator.toLeakAwareBuffer((ByteBuf) null);
      pooledByteBufAllocator0.trimCurrentThreadCache();
      // Undeclared exception!
      try { 
        unpooledByteBufAllocator0.heapBuffer((-3307), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -3307 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }
}
