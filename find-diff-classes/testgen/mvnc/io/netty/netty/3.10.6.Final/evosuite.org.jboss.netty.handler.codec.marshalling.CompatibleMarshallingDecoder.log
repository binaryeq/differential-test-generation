* EvoSuite 1.2.0
* Going to generate test cases for class: org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder
* Starting Client-0
* Connecting to master process on port 15855
* Analyzing classpath: 
  - /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/io/netty/netty/3.10.6.Final/netty-3.10.6.Final.jar
  - t/dependency/activation-1.1.1.jar
  - t/dependency/bcpkix-jdk15on-1.50.jar
  - t/dependency/bcprov-jdk15on-1.50.jar
  - t/dependency/cglib-nodep-2.2.2.jar
  - t/dependency/commons-logging-1.1.1.jar
  - t/dependency/easymock-3.1.jar
  - t/dependency/easymockclassextension-3.1.jar
  - t/dependency/hamcrest-core-1.3.jar
  - t/dependency/jboss-logging-3.1.4.GA.jar
  - t/dependency/jboss-marshalling-1.3.14.GA.jar
  - t/dependency/jboss-marshalling-river-1.3.14.GA.jar
  - t/dependency/jboss-marshalling-serial-1.3.14.GA.jar
  - t/dependency/junit-4.11.jar
  - t/dependency/log4j-1.2.16.jar
  - t/dependency/netty-tcnative-1.1.30.Fork2-windows-x86_64.jar
  - t/dependency/npn-api-1.1.0.v20120525.jar
  - t/dependency/objenesis-1.2.jar
  - t/dependency/org.osgi.compendium-1.4.0.jar
  - t/dependency/org.osgi.core-1.4.0.jar
  - t/dependency/protobuf-java-2.5.0.jar
  - t/dependency/servlet-api-2.5.jar
  - t/dependency/slf4j-api-1.6.4.jar
  - t/dependency/slf4j-simple-1.6.4.jar
[MASTER] 16:26:47.813 [logback-2] ERROR ConcreteClassAnalyzer - Problem for org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder. Class not found: org.jboss.marshalling.ModularClassResolver
[MASTER] 16:26:47.813 [logback-2] ERROR ConcreteClassAnalyzer - Removing class from inheritance tree
[MASTER] 16:26:47.821 [logback-2] ERROR ConcreteClassAnalyzer - Problem for org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder. Class not found: org.jboss.marshalling.ModularClassTable
[MASTER] 16:26:47.822 [logback-2] ERROR ConcreteClassAnalyzer - Removing class from inheritance tree
* Finished analyzing classpath
* Generating tests for class org.jboss.netty.handler.codec.marshalling.CompatibleMarshallingDecoder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 108
* Using seed 1731036405279
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 34 / 108
[Progress:===>                          10%] [Cov:=====================>             61%][Progress:====>                         16%] [Cov:====================>              59%][Progress:====>                         16%] [Cov:=======================>           67%][Progress:====>                         16%] [Cov:=======================>           67%][Progress:=====>                        18%] [Cov:=======================>           66%][MASTER] 16:26:59.744 [logback-1] WARN  TestCluster - Failed to check cache for java.util.concurrent.ForkJoinTask<V> : Type points to itself
[Progress:=======>                      26%] [Cov:=========================>         72%][Progress:=======>                      26%] [Cov:=========================>         72%][Progress:=======>                      26%] [Cov:=========================>         72%][Progress:=======>                      26%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:========================>          71%][Progress:=========>                    33%] [Cov:=========================>         72%][Progress:=========>                    33%] [Cov:========================>          71%][MASTER] 16:27:09.454 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[Progress:==========>                   35%] [Cov:========================>          71%][Progress:============>                 40%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:==================>           63%] [Cov:========================>          71%][Progress:==================>           63%] [Cov:=========================>         72%][Progress:==================>           63%] [Cov:=========================>         72%][Progress:====================>         68%] [Cov:=========================>         72%][Progress:====================>         68%] [Cov:=========================>         72%][Progress:=====================>        70%] [Cov:=========================>         72%][Progress:=====================>        70%] [Cov:=========================>         72%][Progress:========================>     80%] [Cov:=========================>         72%][Progress:========================>     80%] [Cov:=========================>         72%][Progress:=========================>    85%] [Cov:=========================>         72%][Progress:=========================>    85%] [Cov:=========================>         72%][Progress:=========================>    85%] [Cov:=========================>         72%][Progress:===========================>  93%] [Cov:=========================>         72%][Progress:===========================>  93%] [Cov:=========================>         72%][Progress:=============================>98%] [Cov:=========================>         72%][Progress:==============================100%] [Cov:=========================>         72%]
* Search finished after 65s and 38 generations, 33080 statements, best individual has fitness: 33.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 31
* Number of covered goals: 19
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 15
* Number of covered goals: 13
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 35
* Number of covered goals: 31
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 25%
* Total number of goals: 4
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 75%
* Total number of goals: 4
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 15
* Number of covered goals: 13
* Generated 15 tests with total length 145
* Resulting test suite's coverage: 73% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 94%
* Compiling and checking tests
[MASTER] 16:27:56.817 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<62> but was:<0>
[MASTER] 16:27:56.817 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SerialMarshallerFactory serialMarshallerFactory0 = new SerialMarshallerFactory();
MarshallingConfiguration marshallingConfiguration0 = new MarshallingConfiguration();
ThreadLocalUnmarshallerProvider threadLocalUnmarshallerProvider0 = new ThreadLocalUnmarshallerProvider(serialMarshallerFactory0, marshallingConfiguration0);
CompatibleMarshallingDecoder compatibleMarshallingDecoder0 = new CompatibleMarshallingDecoder(threadLocalUnmarshallerProvider0, Integer.MAX_VALUE);
DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(1024);
compatibleMarshallingDecoder0.decodeLast((ChannelHandlerContext) null, localChannel0, littleEndianHeapChannelBuffer0, (VoidEnum) null);
assertEquals(62, (int)localChannel0.getId());


[MASTER] 16:27:57.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<97> but was:<0>
[MASTER] 16:27:57.411 [logback-1] WARN  JUnitAnalyzer - Failing test:
 RiverMarshallerFactory riverMarshallerFactory0 = new RiverMarshallerFactory();
MarshallingConfiguration marshallingConfiguration0 = new MarshallingConfiguration();
ContextBoundUnmarshallerProvider contextBoundUnmarshallerProvider0 = new ContextBoundUnmarshallerProvider(riverMarshallerFactory0, marshallingConfiguration0);
CompatibleMarshallingDecoder compatibleMarshallingDecoder0 = new CompatibleMarshallingDecoder(contextBoundUnmarshallerProvider0, 2085);
DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
SQLTransientException sQLTransientException0 = new SQLTransientException(".[76h&E- Z");
TooLongFrameException tooLongFrameException0 = new TooLongFrameException(".[76h&E- Z", sQLTransientException0);
DefaultExceptionEvent defaultExceptionEvent0 = new DefaultExceptionEvent(localServerChannel0, tooLongFrameException0);
compatibleMarshallingDecoder0.exceptionCaught((ChannelHandlerContext) null, defaultExceptionEvent0);
assertEquals(97, (int)localServerChannel0.getId());


* Permissions denied during test execution: 
  - java.net.SocketPermission: 
         connect,resolve 200.42.42.0:1024: 1
         connect,resolve 127.0.0.1:121: 1
         connect,resolve 200.42.42.0:125: 1
         and other 5 cases of action/name for this exception class
* Writing tests to file
* Writing JUnit test case 'CompatibleMarshallingDecoder_ESTest' to evosuite-tests
* Done!

* Computation finished
