/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:23:59 GMT 2024
 */

package org.jboss.netty.channel.socket.nio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.UnknownHostException;
import java.nio.channels.ClosedSelectorException;
import java.nio.channels.Selector;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.SucceededChannelFuture;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink;
import org.jboss.netty.channel.socket.nio.NioDatagramWorker;
import org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool;
import org.jboss.netty.channel.socket.nio.NioServerBoss;
import org.jboss.netty.channel.socket.nio.NioServerBossPool;
import org.jboss.netty.channel.socket.nio.NioServerSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorkerPool;
import org.jboss.netty.channel.socket.nio.ShareableWorkerPool;
import org.jboss.netty.util.ThreadNameDeterminer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NioServerBoss_ESTest extends NioServerBoss_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(threadNameDeterminer0).determineThreadName(anyString() , anyString());
      NioServerBoss nioServerBoss0 = new NioServerBoss(scheduledThreadPoolExecutor0, threadNameDeterminer0);
      Selector selector0 = nioServerBoss0.selector;
      selector0.close();
      // Undeclared exception!
      try { 
        nioServerBoss0.select(selector0);
        fail("Expecting exception: ClosedSelectorException");
      
      } catch(ClosedSelectorException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ForkJoinTask.getPool();
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      NioServerBoss nioServerBoss0 = null;
      try {
        nioServerBoss0 = new NioServerBoss((Executor) null, threadNameDeterminer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parent
         //
         verifyException("org.jboss.netty.util.internal.DeadLockProofWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      String string0 = "9kR5CO{C]!>)";
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "9kR5CO{C]!>)");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(520, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      NioServerBoss nioServerBoss0 = new NioServerBoss(forkJoinPool0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 0;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      NioServerBoss nioServerBoss0 = new NioServerBoss(scheduledThreadPoolExecutor0, threadNameDeterminer0);
      assertNotNull(nioServerBoss0);
      
      // Undeclared exception!
      try { 
        nioServerBoss0.process((Selector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.socket.nio.NioServerBoss", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      assertNotNull(forkJoinPool0);
      
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(threadNameDeterminer0).determineThreadName(anyString() , anyString());
      NioServerBossPool nioServerBossPool0 = new NioServerBossPool(forkJoinPool0, 1, threadNameDeterminer0);
      assertNotNull(nioServerBossPool0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-2966), threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 1221;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1221, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      NioServerBoss nioServerBoss0 = new NioServerBoss(scheduledThreadPoolExecutor0, threadNameDeterminer0);
      Selector selector0 = null;
      // Undeclared exception!
      try { 
        nioServerBoss0.process((Selector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.socket.nio.NioServerBoss", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Executor executor0 = null;
      NioServerBoss nioServerBoss0 = null;
      try {
        nioServerBoss0 = new NioServerBoss((Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parent
         //
         verifyException("org.jboss.netty.util.internal.DeadLockProofWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ForkJoinTask.getPool();
      NioServerBoss nioServerBoss0 = null;
      try {
        nioServerBoss0 = new NioServerBoss((Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parent
         //
         verifyException("org.jboss.netty.util.internal.DeadLockProofWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      linkedBlockingDeque0.descendingIterator();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(207, 207, 0L, timeUnit0, linkedBlockingDeque0);
      NioDatagramWorkerPool nioDatagramWorkerPool0 = new NioDatagramWorkerPool(threadPoolExecutor0, 207);
      ShareableWorkerPool<NioDatagramWorker> shareableWorkerPool0 = new ShareableWorkerPool<NioDatagramWorker>(nioDatagramWorkerPool0);
      NioDatagramPipelineSink nioDatagramPipelineSink0 = new NioDatagramPipelineSink(shareableWorkerPool0);
      NioDatagramWorker nioDatagramWorker0 = nioDatagramPipelineSink0.nextWorker();
      threadPoolExecutor0.remove(nioDatagramWorker0);
      threadPoolExecutor0.prestartCoreThread();
      NioServerBoss nioServerBoss0 = new NioServerBoss(threadPoolExecutor0);
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      NioDatagramPipelineSink nioDatagramPipelineSink1 = new NioDatagramPipelineSink(nioDatagramWorkerPool0);
      NioWorkerPool nioWorkerPool0 = new NioWorkerPool(threadPoolExecutor0, 5982);
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(defaultLocalServerChannelFactory0, defaultChannelPipeline0, nioDatagramPipelineSink1, nioServerBoss0, nioWorkerPool0);
      SucceededChannelFuture succeededChannelFuture0 = new SucceededChannelFuture(nioServerSocketChannel0);
      ChannelFuture channelFuture0 = succeededChannelFuture0.sync();
      nioServerBoss0.close(nioServerSocketChannel0, channelFuture0);
  }
}
