/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:52:29 GMT 2024
 */

package io.netty.handler.codec.compression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.handler.codec.compression.ByteBufChecksum;
import io.netty.handler.codec.compression.Crc32c;
import io.netty.handler.codec.compression.Lz4XXHash32;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteBufChecksum_ESTest extends ByteBufChecksum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ByteBufChecksum byteBufChecksum0 = ByteBufChecksum.wrapChecksum(adler32_0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer();
      // Undeclared exception!
      try { 
        byteBufChecksum0.update(byteBuf0, 1, 1865);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.compression.ByteBufChecksum$ReflectiveByteBufChecksum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ByteBufChecksum byteBufChecksum0 = ByteBufChecksum.wrapChecksum(cRC32_0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.heapBuffer(2742);
      byteBufChecksum0.update(byteBuf0, 1, 1865);
      assertEquals(2748299309L, byteBufChecksum0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(164);
      Crc32c crc32c0 = new Crc32c();
      crc32c0.update(byteBuf0, 164, 0);
      assertEquals(0L, crc32c0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      Crc32c crc32c0 = new Crc32c();
      crc32c0.update((ByteBuf) emptyByteBuf0, (-2155), 0);
      assertEquals(1, emptyByteBuf0.nioBufferCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Crc32c crc32c0 = new Crc32c();
      crc32c0.update(0);
      ByteBufChecksum byteBufChecksum0 = ByteBufChecksum.wrapChecksum(crc32c0);
      assertEquals(1383945041L, byteBufChecksum0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteBufChecksum.wrapChecksum((Checksum) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // checksum
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lz4XXHash32 lz4XXHash32_0 = new Lz4XXHash32(2521);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      compositeByteBuf0.writeShort(2521);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.addComponent(true, (ByteBuf) compositeByteBuf0);
      // Undeclared exception!
      lz4XXHash32_0.update((ByteBuf) compositeByteBuf1, 8, 2521);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Crc32c crc32c0 = new Crc32c();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer(8);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.addComponents((Iterable<ByteBuf>) compositeByteBuf0);
      // Undeclared exception!
      try { 
        crc32c0.update((ByteBuf) compositeByteBuf1, 8, 8);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Crc32c crc32c0 = new Crc32c();
      // Undeclared exception!
      try { 
        crc32c0.update((ByteBuf) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.compression.ByteBufChecksum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lz4XXHash32 lz4XXHash32_0 = new Lz4XXHash32(1);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer();
      // Undeclared exception!
      try { 
        lz4XXHash32_0.update(byteBuf0, 1, 1);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.clear()Ljava/nio/ByteBuffer;
         //
         verifyException("io.netty.buffer.UnpooledDirectByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lz4XXHash32 lz4XXHash32_0 = new Lz4XXHash32((-2213));
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer();
      // Undeclared exception!
      try { 
        lz4XXHash32_0.update(byteBuf0, (-2213), (-2213));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: -2213, length: -2213 (expected: range(0, 256))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lz4XXHash32 lz4XXHash32_0 = new Lz4XXHash32(9352);
      lz4XXHash32_0.update((byte[]) null, 2127, 0);
      // Undeclared exception!
      try { 
        lz4XXHash32_0.update((ByteBuf) null, 0, 9352);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.compression.Lz4XXHash32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lz4XXHash32 lz4XXHash32_0 = new Lz4XXHash32((-2686));
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      // Undeclared exception!
      try { 
        lz4XXHash32_0.update((ByteBuf) emptyByteBuf0, (-2686), (-2686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengths must be >= 0
         //
         verifyException("net.jpountz.util.SafeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lz4XXHash32 lz4XXHash32_0 = new Lz4XXHash32(1);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.heapBuffer(1, 1);
      // Undeclared exception!
      try { 
        lz4XXHash32_0.update(byteBuf0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jpountz.util.SafeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Crc32c crc32c0 = new Crc32c();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      // Undeclared exception!
      try { 
        crc32c0.update((ByteBuf) emptyByteBuf0, 1336, 1336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1336
         //
         verifyException("io.netty.handler.codec.compression.Crc32c", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Crc32c crc32c0 = new Crc32c();
      ByteBufChecksum byteBufChecksum0 = ByteBufChecksum.wrapChecksum(crc32c0);
      assertSame(byteBufChecksum0, crc32c0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ByteBufChecksum byteBufChecksum0 = ByteBufChecksum.wrapChecksum(adler32_0);
      byteBufChecksum0.reset();
      assertEquals(1L, byteBufChecksum0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer();
      Crc32c crc32c0 = new Crc32c();
      crc32c0.update(byteBuf0, 1, 1);
      //  // Unstable assertion: assertEquals(2685849682L, crc32c0.getValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ByteBufChecksum byteBufChecksum0 = ByteBufChecksum.wrapChecksum(cRC32_0);
      byteBufChecksum0.update((-791));
      assertEquals(198489425L, cRC32_0.getValue());
  }
}
