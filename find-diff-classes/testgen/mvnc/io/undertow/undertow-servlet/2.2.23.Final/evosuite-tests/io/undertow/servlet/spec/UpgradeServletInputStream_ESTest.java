/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:33:04 GMT 2024
 */

package io.undertow.servlet.spec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.connector.ByteBufferPool;
import io.undertow.server.DefaultByteBufferPool;
import io.undertow.server.XnioByteBufferPool;
import io.undertow.servlet.spec.UpgradeServletInputStream;
import io.undertow.testutils.DebuggingSlicePool;
import java.nio.ByteBuffer;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import javax.servlet.ReadListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xnio.Pool;
import org.xnio.XnioIoThread;
import org.xnio.channels.EmptyStreamSourceChannel;
import org.xnio.channels.StreamSourceChannel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UpgradeServletInputStream_ESTest extends UpgradeServletInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[7];
      upgradeServletInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xnio.channels.EmptyStreamSourceChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[7];
      int int0 = upgradeServletInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = upgradeServletInputStream0.isFinished();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, (ByteBufferPool) null, (Executor) null);
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener(readListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, (-1));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read((byte[]) null, (-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, (ByteBufferPool) null, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, (-1513), 2052, 2052, 378);
      DebuggingSlicePool debuggingSlicePool0 = new DebuggingSlicePool(defaultByteBufferPool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, debuggingSlicePool0, (Executor) null);
      byte[] byteArray0 = new byte[7];
      defaultByteBufferPool0.close();
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, (-299), (-299), (-299), (-3010));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, defaultByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, (ByteBufferPool) null, forkJoinPool0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, forkJoinPool0);
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, (-1850), (-1850), 4428);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, (ByteBufferPool) null, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, (-1), (-1), (-1));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.available();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -1
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[7];
      int int0 = upgradeServletInputStream0.read(byteArray0, (int) (byte) (-94), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, (ByteBufferPool) null, (Executor) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, forkJoinPool0);
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.available();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[7];
      int int0 = upgradeServletInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      
      int int1 = upgradeServletInputStream0.available();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.DIRECT;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, (Executor) null);
      int int0 = upgradeServletInputStream0.available();
      assertEquals(0, int0);
      
      int int1 = upgradeServletInputStream0.read();
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, forkJoinPool0);
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0, (int) (byte)4, (-2352));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, (ByteBufferPool) null, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener((ReadListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, forkJoinPool0);
      boolean boolean0 = upgradeServletInputStream0.isReady();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, forkJoinPool0);
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      ReadListener readListener1 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener(readListener1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, xnioByteBufferPool0, (Executor) null);
      boolean boolean0 = upgradeServletInputStream0.isFinished();
      assertFalse(boolean0);
  }
}
