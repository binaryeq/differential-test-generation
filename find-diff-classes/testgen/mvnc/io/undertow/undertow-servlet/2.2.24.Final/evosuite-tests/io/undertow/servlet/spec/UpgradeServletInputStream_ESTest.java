/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 10 22:38:44 GMT 2024
 */

package io.undertow.servlet.spec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.connector.ByteBufferPool;
import io.undertow.server.DefaultByteBufferPool;
import io.undertow.server.XnioByteBufferPool;
import io.undertow.servlet.spec.UpgradeServletInputStream;
import io.undertow.testutils.DebuggingSlicePool;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import javax.servlet.ReadListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xnio.Pool;
import org.xnio.XnioIoThread;
import org.xnio.channels.EmptyStreamSourceChannel;
import org.xnio.channels.PushBackStreamChannel;
import org.xnio.channels.StreamSourceChannel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UpgradeServletInputStream_ESTest extends UpgradeServletInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, (ByteBufferPool) null, forkJoinPool0);
      upgradeServletInputStream0.isReady();
      UpgradeServletInputStream upgradeServletInputStream1 = new UpgradeServletInputStream((StreamSourceChannel) null, (ByteBufferPool) null, forkJoinPool0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream1.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 25, 25, 25, 25);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, forkJoinPool0);
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.available();
      defaultByteBufferPool0.allocate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 25, (-1384), (-1384), 25);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, forkJoinPool0);
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.available();
      defaultByteBufferPool0.allocate();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.available();
      ReadListener readListener1 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener(readListener1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 25, (-1384), (-1384), 25);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, forkJoinPool0);
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.available();
      defaultByteBufferPool0.allocate();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)40;
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 25, 25, 25, 25);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(25);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, forkJoinPool0);
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.available();
      defaultByteBufferPool0.allocate();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      upgradeServletInputStream0.setReadListener(readListener0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, (-1256), (-1256), (-1256));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -1256
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, (-3437), 0, 0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, defaultByteBufferPool0, forkJoinPool0);
      upgradeServletInputStream0.isReady();
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read((byte[]) null, 93, 1968);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 0, 3063, 0, 0);
      defaultByteBufferPool0.close();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.available();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 74, 3323, 57);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      upgradeServletInputStream0.read();
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener((ReadListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      PushBackStreamChannel pushBackStreamChannel0 = new PushBackStreamChannel(emptyStreamSourceChannel0);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 63);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(pushBackStreamChannel0, defaultByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      upgradeServletInputStream0.read(byteArray0, (-1456), 1253);
      int int0 = upgradeServletInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 0, (-3437), 0, 0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, defaultByteBufferPool0, forkJoinPool0);
      defaultByteBufferPool0.allocate();
      upgradeServletInputStream0.isReady();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0, (int) (byte)0, (int) (byte) (-93));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xnio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XnioIoThread.currentThread();
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 1031, (-3076), (-3076));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      upgradeServletInputStream0.isFinished();
      upgradeServletInputStream0.isFinished();
      upgradeServletInputStream0.available();
      upgradeServletInputStream0.isFinished();
      upgradeServletInputStream0.available();
      defaultByteBufferPool0.close();
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.read();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 1380, 1380, 1380);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      int int0 = upgradeServletInputStream0.available();
      assertEquals(0, int0);
      
      int int1 = upgradeServletInputStream0.available();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, (-4303));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      upgradeServletInputStream0.isReady();
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.available();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -4303
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 0, 3063, 0, 0);
      defaultByteBufferPool0.close();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0, 3063, 3063);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, (-1), (-1), (byte) (-1));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      PushBackStreamChannel pushBackStreamChannel0 = new PushBackStreamChannel(emptyStreamSourceChannel0);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 63, 63, 255);
      DebuggingSlicePool debuggingSlicePool0 = new DebuggingSlicePool(defaultByteBufferPool0);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(pushBackStreamChannel0, debuggingSlicePool0, (Executor) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-88);
      upgradeServletInputStream0.read(byteArray0, (int) (byte) (-1), 489);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xnio.channels.EmptyStreamSourceChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      PushBackStreamChannel pushBackStreamChannel0 = new PushBackStreamChannel(emptyStreamSourceChannel0);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 63, 63, 255);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(pushBackStreamChannel0, defaultByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      upgradeServletInputStream0.read(byteArray0, 6, 6);
      int int0 = upgradeServletInputStream0.read(byteArray0, 8, 620);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 924;
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 924, 0, 924);
      defaultByteBufferPool0.allocate();
      defaultByteBufferPool0.close();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, defaultByteBufferPool0, (Executor) null);
      defaultByteBufferPool0.close();
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.skip(924);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, (ByteBufferPool) null, (Executor) null);
      upgradeServletInputStream0.markSupported();
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xnio.channels.EmptyStreamSourceChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 2475, 2475, 0, 2475);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      forkJoinPool0.getActiveThreadCount();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, defaultByteBufferPool0, forkJoinPool0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      PushBackStreamChannel pushBackStreamChannel0 = new PushBackStreamChannel(emptyStreamSourceChannel0);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 18, 63, 8, 6);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      byte[] byteArray0 = new byte[0];
      int int0 = 0;
      upgradeServletInputStream0.read(byteArray0, 1300, 0);
      upgradeServletInputStream0.read(byteArray0, 0, 0);
      ReadListener readListener0 = null;
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener((ReadListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 1380, 1380, 1380);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      upgradeServletInputStream0.isFinished();
      int int0 = upgradeServletInputStream0.available();
      assertEquals(0, int0);
      
      int int1 = upgradeServletInputStream0.read();
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, (ByteBufferPool) null, forkJoinPool0);
      UpgradeServletInputStream upgradeServletInputStream1 = new UpgradeServletInputStream((StreamSourceChannel) null, (ByteBufferPool) null, forkJoinPool0);
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener(readListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 40, 40, 40);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      upgradeServletInputStream0.read();
      int int0 = upgradeServletInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 54, 54, 54);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      upgradeServletInputStream0.read();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener(readListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XnioIoThread.currentThread();
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 1031, (-3076), (-3076));
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      upgradeServletInputStream0.isFinished();
      upgradeServletInputStream0.isFinished();
      upgradeServletInputStream0.available();
      defaultByteBufferPool0.close();
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.read();
      ReadListener readListener0 = mock(ReadListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.setReadListener(readListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 8, 0, 8);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3875);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, defaultByteBufferPool0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 1);
      defaultByteBufferPool0.close();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(true, 54, 54, 54);
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      int int0 = upgradeServletInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      int int0 = 3063;
      int int1 = 788;
      DefaultByteBufferPool defaultByteBufferPool0 = new DefaultByteBufferPool(false, 0, 3063, 788, 0);
      defaultByteBufferPool0.close();
      defaultByteBufferPool0.close();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, defaultByteBufferPool0, (Executor) null);
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream((StreamSourceChannel) null, (ByteBufferPool) null, forkJoinPool0);
      upgradeServletInputStream0.isReady();
      // Undeclared exception!
      try { 
        upgradeServletInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.spec.UpgradeServletInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XnioIoThread.currentThread();
      EmptyStreamSourceChannel emptyStreamSourceChannel0 = new EmptyStreamSourceChannel((XnioIoThread) null);
      Pool<ByteBuffer> pool0 = Pool.HEAP;
      XnioByteBufferPool xnioByteBufferPool0 = new XnioByteBufferPool(pool0);
      emptyStreamSourceChannel0.isOpen();
      ByteBufferPool byteBufferPool0 = xnioByteBufferPool0.getArrayBackedPool();
      UpgradeServletInputStream upgradeServletInputStream0 = new UpgradeServletInputStream(emptyStreamSourceChannel0, byteBufferPool0, (Executor) null);
      xnioByteBufferPool0.allocate();
      upgradeServletInputStream0.isReady();
      upgradeServletInputStream0.available();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[3];
      String string0 = "pc#w";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("pc#w");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
