/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:38:47 GMT 2024
 */

package io.micronaut.kubernetes.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.kubernetes.client.common.KubernetesObject;
import io.kubernetes.client.custom.NodeMetrics;
import io.kubernetes.client.openapi.models.V1CSIVolumeSource;
import io.kubernetes.client.openapi.models.V1ConfigMap;
import io.kubernetes.client.openapi.models.V1ObjectMeta;
import io.kubernetes.client.openapi.models.V1Secret;
import io.kubernetes.client.openapi.models.V1ServiceAccount;
import io.micronaut.context.env.MapPropertySource;
import io.micronaut.context.env.PropertySource;
import io.micronaut.core.type.DefaultArgument;
import io.micronaut.kubernetes.client.reactor.CoreV1ApiReactorClient;
import io.micronaut.kubernetes.util.KubernetesUtils;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.SynchronousQueue;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import reactor.core.publisher.Mono;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KubernetesUtils_ESTest extends KubernetesUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.metadata(v1ObjectMeta0);
      v1ObjectMeta0.setName("binaryData");
      String string0 = KubernetesUtils.objectNameOrNull(v1ConfigMap1);
      assertEquals("binaryData", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        KubernetesUtils.objectNameOrNull((KubernetesObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.micronaut.kubernetes.util.KubernetesUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        KubernetesUtils.getLabelsFilter((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        KubernetesUtils.getIncludesFilter((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        KubernetesUtils.getExcludesFilter((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      // Undeclared exception!
      try { 
        KubernetesUtils.configMapAsPropertySource("stringData", (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      v1ConfigMap0.setData(map0);
      NodeMetrics nodeMetrics0 = new NodeMetrics();
      V1ObjectMeta v1ObjectMeta0 = nodeMetrics0.getMetadata();
      v1ConfigMap0.metadata(v1ObjectMeta0);
      // Undeclared exception!
      try { 
        KubernetesUtils.configMapAsPropertySource(v1ConfigMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      // Undeclared exception!
      try { 
        KubernetesUtils.configMapAsPropertySource(v1ConfigMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.micronaut.kubernetes.util.KubernetesUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        KubernetesUtils.computePodLabelSelector((CoreV1ApiReactorClient) null, linkedList0, "*", (Map<String, String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        KubernetesUtils.computeLabelSelector((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Mono<String> mono0 = KubernetesUtils.computePodLabelSelector((CoreV1ApiReactorClient) null, linkedList0, "tq&!7", map0, false);
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.metadata(v1ObjectMeta0);
      String string0 = KubernetesUtils.objectNameOrNull(v1ConfigMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      V1ServiceAccount v1ServiceAccount0 = new V1ServiceAccount();
      String string0 = KubernetesUtils.objectNameOrNull(v1ServiceAccount0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Predicate<KubernetesObject> predicate0 = KubernetesUtils.getLabelsFilter(hashMap0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      V1CSIVolumeSource v1CSIVolumeSource0 = new V1CSIVolumeSource();
      V1CSIVolumeSource v1CSIVolumeSource1 = v1CSIVolumeSource0.putVolumeAttributesItem("class V1Handler {\n", "nodePublishSecretRef");
      Map<String, String> map0 = v1CSIVolumeSource1.getVolumeAttributes();
      Predicate<KubernetesObject> predicate0 = KubernetesUtils.getLabelsFilter(map0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Predicate<KubernetesObject> predicate0 = KubernetesUtils.getExcludesFilter(synchronousQueue0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Set<String> set0 = DefaultArgument.PROVIDER_TYPES;
      Predicate<KubernetesObject> predicate0 = KubernetesUtils.getExcludesFilter(set0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Predicate<KubernetesObject> predicate0 = KubernetesUtils.getIncludesFilter(synchronousQueue0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Set<String> set0 = DefaultArgument.PROVIDER_TYPES;
      Predicate<KubernetesObject> predicate0 = KubernetesUtils.getIncludesFilter(set0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      V1Secret v1Secret0 = new V1Secret();
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      v1Secret0.metadata(v1ObjectMeta0);
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      v1Secret0.data(hashMap0);
      PropertySource propertySource0 = KubernetesUtils.secretAsPropertySource(v1Secret0);
      assertNotNull(propertySource0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      V1Secret v1Secret0 = new V1Secret();
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      V1Secret v1Secret1 = v1Secret0.metadata(v1ObjectMeta0);
      PropertySource propertySource0 = KubernetesUtils.secretAsPropertySource(v1Secret1);
      assertNotNull(propertySource0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      V1Secret v1Secret0 = new V1Secret();
      // Undeclared exception!
      try { 
        KubernetesUtils.secretAsPropertySource(v1Secret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.micronaut.kubernetes.util.KubernetesUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = KubernetesUtils.computeLabelSelector(hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.putDataItem("Dx$7A'H'd7D 0*jI+", "#");
      Map<String, String> map0 = v1ConfigMap1.getData();
      String string0 = KubernetesUtils.computeLabelSelector(map0);
      assertEquals("Dx$7A'H'd7D 0*jI+=#", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("io.micronaut.discovery.eureka.client.v2.AbstractEurekaClient", "FwAi]{");
      List<PropertySource> list0 = KubernetesUtils.configMapAsPropertySource("io.micronaut.discovery.eureka.client.v2.AbstractEurekaClient", (Map<String, String>) hashMap0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<PropertySource> list0 = KubernetesUtils.configMapAsPropertySource("Excludes not-matched: {}", (Map<String, String>) hashMap0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      v1ConfigMap0.putDataItem("Dx$7A'H'd7D 0*jI+", "#");
      Map<String, String> map0 = v1ConfigMap0.getData();
      List<PropertySource> list0 = KubernetesUtils.configMapAsPropertySource("Includes filter not-matched: {}", map0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      Map<String, String> map0 = v1ConfigMap0.getData();
      List<PropertySource> list0 = KubernetesUtils.configMapAsPropertySource("Includes filter not-matched: {}", map0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.metadata(v1ObjectMeta0);
      v1ConfigMap1.putDataItem("application.VCAP_SERVICES", "readOnly");
      // Undeclared exception!
      try { 
        KubernetesUtils.configMapAsPropertySource(v1ConfigMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error reading property source [application.VCAP_SERVICES]: Could not parse 'VCAP_SERVICES': Unrecognized token 'readOnly': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (ByteArrayInputStream); line: 1, column: 9]
         //
         verifyException("io.micronaut.context.env.PropertySourceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.metadata(v1ObjectMeta0);
      v1ConfigMap0.putDataItem("apiVersion", "deletionGracePeriodSeconds");
      KubernetesUtils.configMapAsPropertySource(v1ConfigMap0);
      MapPropertySource mapPropertySource0 = (MapPropertySource)KubernetesUtils.configMapAsPropertySource(v1ConfigMap1);
      assertEquals("null (Kubernetes ConfigMap)", mapPropertySource0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NodeMetrics nodeMetrics0 = new NodeMetrics();
      V1ObjectMeta v1ObjectMeta0 = nodeMetrics0.getMetadata();
      v1ConfigMap0.metadata(v1ObjectMeta0);
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.data(hashMap0);
      PropertySource propertySource0 = KubernetesUtils.configMapAsPropertySource(v1ConfigMap1);
      assertEquals(PropertySource.PropertyConvention.JAVA_PROPERTIES, propertySource0.getConvention());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.metadata(v1ObjectMeta0);
      MapPropertySource mapPropertySource0 = (MapPropertySource)KubernetesUtils.configMapAsPropertySource(v1ConfigMap1);
      assertEquals("application", mapPropertySource0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KubernetesUtils kubernetesUtils0 = new KubernetesUtils();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      V1ConfigMap v1ConfigMap0 = new V1ConfigMap();
      V1ObjectMeta v1ObjectMeta0 = new V1ObjectMeta();
      V1ConfigMap v1ConfigMap1 = v1ConfigMap0.metadata(v1ObjectMeta0);
      v1ConfigMap0.putDataItem("Hl*{v.i#", "8JuY<C=QV");
      PropertySource propertySource0 = KubernetesUtils.configMapAsPropertySource(v1ConfigMap1);
      assertEquals("application", propertySource0.getName());
  }
}
