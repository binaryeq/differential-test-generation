/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:19:30 GMT 2024
 */

package com.github.zafarkhaja.semver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.zafarkhaja.semver.MetadataVersion;
import com.github.zafarkhaja.semver.VersionParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VersionParser_ESTest extends VersionParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetadataVersion metadataVersion0 = VersionParser.parsePreRelease("5'2{4Z@X");
      assertNotNull(metadataVersion0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Character character0 = Character.valueOf('A');
      VersionParser.CharType.forCharacter(character0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetadataVersion metadataVersion0 = VersionParser.parseBuild("9{XE#'a");
      assertNotNull(metadataVersion0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseVersionCore("02De");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Numeric identifier MUST NOT contain leading zeroes
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseVersionCore("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input string is NULL or empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parsePreRelease("^6$rU9NyT;T[\u0003XAC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseBuild((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input string is NULL or empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VersionParser versionParser0 = null;
      try {
        versionParser0 = new VersionParser((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input string is NULL or empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseBuild("^Zew ^T.Kn!Oqb)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseBuild("N.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Identifiers MUST NOT be empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parsePreRelease("com.githubbzBfarkhaja.semver..ersionParser");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Identifiers MUST NOT be empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseValidSemVer("0y86;LB$nK(x]=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseValidSemVer("02De");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Numeric identifier MUST NOT contain leading zeroes
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseVersionCore("57#Hi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MetadataVersion metadataVersion0 = VersionParser.parseBuild("1)");
      assertNotNull(metadataVersion0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MetadataVersion metadataVersion0 = VersionParser.parseBuild("com.github.zafarkhaja.semver.VersionParser");
      assertNotNull(metadataVersion0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parsePreRelease("2.+3s+t4^+En");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Identifiers MUST NOT be empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parsePreRelease("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input string is NULL or empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseValidSemVer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input string is NULL or empty
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VersionParser.CharType.forCharacter((Character) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MetadataVersion metadataVersion0 = VersionParser.parsePreRelease("-");
      assertNotNull(metadataVersion0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionParser.parseValidSemVer("2.+3s+t4^+En");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Character character0 = Character.valueOf('|');
      VersionParser.CharType.forCharacter(character0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VersionParser versionParser0 = new VersionParser("Unexpected element '%s' at position '%d'");
      // Undeclared exception!
      try { 
        versionParser0.parse("Unexpected element '%s' at position '%d'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.zafarkhaja.semver.VersionParser", e);
      }
  }
}
