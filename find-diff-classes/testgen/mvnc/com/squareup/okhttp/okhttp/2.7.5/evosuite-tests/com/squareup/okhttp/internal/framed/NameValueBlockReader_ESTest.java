/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:54:06 GMT 2024
 */

package com.squareup.okhttp.internal.framed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.internal.framed.NameValueBlockReader;
import java.io.EOFException;
import java.io.IOException;
import okio.Buffer;
import okio.BufferedSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameValueBlockReader_ESTest extends NameValueBlockReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      NameValueBlockReader nameValueBlockReader0 = new NameValueBlockReader(buffer0);
      // Undeclared exception!
      try { 
        nameValueBlockReader0.readNameValueBlock((-1023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1023
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NameValueBlockReader nameValueBlockReader0 = null;
      try {
        nameValueBlockReader0 = new NameValueBlockReader((BufferedSource) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(684);
      NameValueBlockReader nameValueBlockReader0 = new NameValueBlockReader(buffer0);
      try { 
        nameValueBlockReader0.readNameValueBlock(684);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      NameValueBlockReader nameValueBlockReader0 = new NameValueBlockReader(buffer0);
      try { 
        nameValueBlockReader0.readNameValueBlock(0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      NameValueBlockReader nameValueBlockReader0 = new NameValueBlockReader(buffer0);
      try { 
        nameValueBlockReader0.readNameValueBlock(1024);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      NameValueBlockReader nameValueBlockReader0 = new NameValueBlockReader(buffer0);
      nameValueBlockReader0.close();
      // Undeclared exception!
      try { 
        nameValueBlockReader0.readNameValueBlock(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
