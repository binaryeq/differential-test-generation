/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:44:21 GMT 2024
 */

package com.google.common.collect.testing;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.collect.testing.TestsForSetsInJavaUtil;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestsForSetsInJavaUtil_ESTest extends TestsForSetsInJavaUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForHashSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForSingletonSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForTreeSetNatural();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForAbstractSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForEmptyNavigableSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForCopyOnWriteArraySet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForEmptySortedSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForCheckedSortedSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForConcurrentSkipListSetNatural();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForUnmodifiableSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForEmptySet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForSynchronizedNavigableSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForLinkedHashSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForEnumSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForConcurrentSkipListSetWithComparator();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = TestsForSetsInJavaUtil.arbitraryNullFriendlyComparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForCheckedNavigableSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForUnmodifiableNavigableSet();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForTreeSetWithComparator();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestsForSetsInJavaUtil testsForSetsInJavaUtil0 = new TestsForSetsInJavaUtil();
      Collection<Method> collection0 = testsForSetsInJavaUtil0.suppressForCheckedSet();
      assertNotNull(collection0);
  }
}
