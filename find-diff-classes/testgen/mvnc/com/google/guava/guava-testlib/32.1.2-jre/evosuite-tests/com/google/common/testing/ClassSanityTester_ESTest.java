/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:53:35 GMT 2024
 */

package com.google.common.testing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.reflect.Invokable;
import com.google.common.reflect.Parameter;
import com.google.common.testing.ClassSanityTester;
import com.google.common.testing.NullPointerTester;
import java.lang.annotation.Annotation;
import java.lang.reflect.InvocationTargetException;
import junit.framework.AssertionFailedError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassSanityTester_ESTest extends ClassSanityTester_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.TYPE;
      NullPointerTester.Visibility nullPointerTester_Visibility0 = NullPointerTester.Visibility.PACKAGE;
      classSanityTester0.doTestNulls(class0, nullPointerTester_Visibility0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<BoundType> class0 = BoundType.class;
      BoundType boundType0 = BoundType.OPEN;
      ClassSanityTester classSanityTester1 = classSanityTester0.setDefault(class0, boundType0);
      assertSame(classSanityTester0, classSanityTester1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        classSanityTester0.testNulls(class0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // wrong exception thrown from java.lang.reflect.Constructor@0000000034 when passing null to java.lang.String parameter at index 0.
         // Full parameters: [null]
         // Actual exception message: java.lang.NumberFormatException: null
         //
         verifyException("com.google.common.testing.NullPointerTester", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      // Undeclared exception!
      try { 
        classSanityTester0.testNulls((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        classSanityTester0.setDistinctValues(class0, (Annotation) null, (Annotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      // Undeclared exception!
      try { 
        classSanityTester0.instantiate((Class<Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.testing.ClassSanityTester", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      // Undeclared exception!
      try { 
        classSanityTester0.forAllPublicStaticMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      NullPointerTester.Visibility nullPointerTester_Visibility0 = NullPointerTester.Visibility.PROTECTED;
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      // Undeclared exception!
      try { 
        classSanityTester0.doTestNulls(class0, nullPointerTester_Visibility0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // wrong exception thrown from java.lang.reflect.Constructor@0000000034 when passing null to java.lang.String parameter at index 0.
         // Full parameters: [null]
         // Actual exception message: java.lang.NumberFormatException: null
         //
         verifyException("com.google.common.testing.NullPointerTester", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      // Undeclared exception!
      try { 
        classSanityTester0.doTestEquals((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.testing.ClassSanityTester", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        classSanityTester0.setDefault(class0, (Annotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      ClassSanityTester.FactoryMethodReturnValueTester classSanityTester_FactoryMethodReturnValueTester0 = classSanityTester0.forAllPublicStaticMethods(class0);
      try { 
        classSanityTester_FactoryMethodReturnValueTester0.testEqualsAndSerializable();
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      ClassSanityTester.FactoryMethodReturnValueTester classSanityTester_FactoryMethodReturnValueTester0 = classSanityTester0.forAllPublicStaticMethods(class0);
      try { 
        classSanityTester_FactoryMethodReturnValueTester0.testSerializable();
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<BoundType> class0 = BoundType.class;
      ClassSanityTester.FactoryMethodReturnValueTester classSanityTester_FactoryMethodReturnValueTester0 = classSanityTester0.forAllPublicStaticMethods(class0);
      try { 
        classSanityTester_FactoryMethodReturnValueTester0.testEquals();
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      ClassSanityTester.FactoryMethodReturnValueTester classSanityTester_FactoryMethodReturnValueTester0 = classSanityTester0.forAllPublicStaticMethods(class0);
      try { 
        classSanityTester_FactoryMethodReturnValueTester0.testNulls();
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.TYPE;
      Byte byte0 = classSanityTester0.instantiate(class0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<BoundType> class0 = BoundType.class;
      BoundType boundType0 = classSanityTester0.instantiate(class0);
      assertEquals(BoundType.OPEN, boundType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.TYPE;
      classSanityTester0.testEquals(class0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<BoundType> class0 = BoundType.class;
      classSanityTester0.doTestEquals(class0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Annotation> class0 = Annotation.class;
      classSanityTester0.testNulls(class0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      Byte byte0 = Byte.valueOf((byte)18);
      Byte byte1 = new Byte((byte)2);
      ClassSanityTester classSanityTester1 = classSanityTester0.setDistinctValues(class0, byte0, byte1);
      try { 
        classSanityTester1.doTestEquals(class0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)2);
      // Undeclared exception!
      try { 
        classSanityTester0.setDistinctValues(class0, byte0, byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate value provided.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Invokable<Byte, BoundType> invokable0 = (Invokable<Byte, BoundType>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(invokable0).toString();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(invokable0).when(parameter0).getDeclaringInvokable();
      doReturn("\"&q77[m)qR").when(parameter0).toString();
      ClassSanityTester.ParameterNotInstantiableException classSanityTester_ParameterNotInstantiableException0 = new ClassSanityTester.ParameterNotInstantiableException(parameter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((Invokable) null).when(parameter0).getDeclaringInvokable();
      doReturn((String) null).when(parameter0).toString();
      ClassSanityTester.ParameterHasNoDistinctValueException classSanityTester_ParameterHasNoDistinctValueException0 = new ClassSanityTester.ParameterHasNoDistinctValueException(parameter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassSanityTester.FactoryMethodReturnsNullException classSanityTester_FactoryMethodReturnsNullException0 = new ClassSanityTester.FactoryMethodReturnsNullException((Invokable<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        classSanityTester0.testEquals(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.InvocationTargetException
         //
         verifyException("com.google.common.testing.ClassSanityTester", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<Byte> class0 = Byte.class;
      Byte byte0 = classSanityTester0.instantiate(class0);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassSanityTester classSanityTester0 = new ClassSanityTester();
      Class<BoundType> class0 = BoundType.class;
      ClassSanityTester.FactoryMethodReturnValueTester classSanityTester_FactoryMethodReturnValueTester0 = classSanityTester0.forAllPublicStaticMethods(class0);
      ClassSanityTester.FactoryMethodReturnValueTester classSanityTester_FactoryMethodReturnValueTester1 = classSanityTester_FactoryMethodReturnValueTester0.thatReturn(class0);
      assertSame(classSanityTester_FactoryMethodReturnValueTester1, classSanityTester_FactoryMethodReturnValueTester0);
  }
}
