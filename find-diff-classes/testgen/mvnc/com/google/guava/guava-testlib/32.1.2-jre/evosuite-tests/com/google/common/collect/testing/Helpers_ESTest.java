/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:37:15 GMT 2024
 */

package com.google.common.collect.testing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.BoundType;
import com.google.common.collect.testing.Helpers;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import junit.framework.AssertionFailedError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Helpers_ESTest extends Helpers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Helpers.NullsBeforeTwo helpers_NullsBeforeTwo0 = Helpers.NullsBeforeTwo.INSTANCE;
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      boolean boolean0 = helpers_NullsBeforeTwo0.equals(helpers_NullsBeforeB0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      Map.Entry<BoundType, BoundType> map_Entry0 = Helpers.nefariousMapEntry(boundType0, boundType1);
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>(3046, 3046);
      List<BoundType> list0 = Helpers.castOrCopyToList((Iterable<BoundType>) linkedHashSet0);
      Object[] objectArray0 = new Object[0];
      Helpers.assertContentsInOrder(list0, objectArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      Helpers.NullsBeforeB[] helpers_NullsBeforeBArray0 = new Helpers.NullsBeforeB[4];
      helpers_NullsBeforeBArray0[1] = helpers_NullsBeforeB0;
      List<Helpers.NullsBeforeB> list0 = Helpers.copyToList(helpers_NullsBeforeBArray0);
      Iterator<Helpers.NullsBeforeB> iterator0 = Helpers.cycle((Iterable<Helpers.NullsBeforeB>) list0);
      Helpers.NullsBeforeB helpers_NullsBeforeB1 = Helpers.get(iterator0, 1901);
      assertTrue(list0.contains(helpers_NullsBeforeB1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-11));
      boolean boolean0 = Helpers.equal(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Helpers.NullsBeforeB>[] stackArray0 = (Stack<Helpers.NullsBeforeB>[]) Array.newInstance(Stack.class, 0);
      Set<Stack<Helpers.NullsBeforeB>> set0 = Helpers.copyToSet(stackArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<HashMap<Locale.Category, Locale.Category>> vector0 = new Vector<HashMap<Locale.Category, Locale.Category>>();
      Set<HashMap<Locale.Category, Locale.Category>> set0 = Helpers.copyToSet((Iterable<? extends HashMap<Locale.Category, Locale.Category>>) vector0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-862048943));
      vector0.add(integer0);
      Set<Object> set0 = Helpers.copyToSet((Iterable<?>) vector0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoundType[] boundTypeArray0 = new BoundType[0];
      List<BoundType> list0 = Helpers.copyToList(boundTypeArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      List<Object> list0 = Helpers.copyToList((Iterable<?>) serviceLoader0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      List<Comparable<Integer>> list0 = Helpers.copyToList((Iterable<? extends Comparable<Integer>>) arrayList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<AbstractMap.SimpleImmutableEntry<Object, Integer>> stack0 = new Stack<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      boolean boolean0 = Helpers.addAll((Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) stack0, (Iterable<? extends AbstractMap.SimpleImmutableEntry<Object, Integer>>) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.testCompareToAndEquals((List<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      // Undeclared exception!
      try { 
        Helpers.testComparator((Comparator<? super Locale.Category>) null, locale_CategoryArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Function<Object, Locale.Category> function0 = (Function<Object, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Locale.Category> converter0 = Converter.from((Function<? super Object, ? extends Locale.Category>) function0, (Function<? super Locale.Category, ?>) function0);
      Comparator<Object> comparator0 = Comparator.comparing((java.util.function.Function<? super Object, ? extends Locale.Category>) converter0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-4));
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        Helpers.testComparator((Comparator<? super Integer>) comparator0, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      // Undeclared exception!
      try { 
        Helpers.testComparator((Comparator<? super ArrayList<Object>>) null, (List<ArrayList<Object>>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      stack0.add(arrayList0);
      Function<Object, Locale.Category> function0 = (Function<Object, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Locale.Category> converter0 = Converter.from((Function<? super Object, ? extends Locale.Category>) function0, (Function<? super Locale.Category, ?>) function0);
      Comparator<Object> comparator0 = Comparator.comparing((java.util.function.Function<? super Object, ? extends Locale.Category>) converter0);
      // Undeclared exception!
      try { 
        Helpers.testComparator((Comparator<? super ArrayList<Object>>) comparator0, (List<ArrayList<Object>>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Helpers.NullsBeforeB[] helpers_NullsBeforeBArray0 = new Helpers.NullsBeforeB[1];
      Set<Helpers.NullsBeforeB> set0 = Helpers.copyToSet(helpers_NullsBeforeBArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(set0);
      Iterator<Object> iterator0 = Helpers.cycle((Iterable<Object>) arrayList0);
      // Undeclared exception!
      Helpers.get(iterator0, 65536);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      // Undeclared exception!
      try { 
        Helpers.get(iterator0, 0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ServiceLoader$LazyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Object> iterator0 = stack0.iterator();
      stack0.trimToSize();
      // Undeclared exception!
      try { 
        Helpers.get(iterator0, 8192);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.get((Iterator<Object>) null, (-2354));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.copyToList((MockFile[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Collection<Locale.Category> collection0 = Helpers.misleadingSizeCollection(1490);
      // Undeclared exception!
      try { 
        Helpers.copyToList((Iterable<?>) collection0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.castOrCopyToList((Iterable<ArrayList<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Collection<Locale.FilteringMode> collection0 = Helpers.misleadingSizeCollection(1339);
      // Undeclared exception!
      try { 
        Helpers.assertEqualInOrder(collection0, collection0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      // Undeclared exception!
      try { 
        Helpers.assertEqualInOrder(stack0, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Collection<Object> collection0 = Helpers.misleadingSizeCollection(1618);
      // Undeclared exception!
      try { 
        Helpers.assertEqualIgnoringOrder(collection0, collection0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(71, 71);
      // Undeclared exception!
      try { 
        Helpers.assertEqualIgnoringOrder((Iterable<?>) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.assertEmpty((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.assertEmpty((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Collection<String> collection0 = Helpers.misleadingSizeCollection(1800);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Helpers.assertContentsInOrder(collection0, objectArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>(3046, 3046);
      ArrayList<BoundType> arrayList0 = new ArrayList<BoundType>(linkedHashSet0);
      // Undeclared exception!
      try { 
        Helpers.assertContentsInOrder(arrayList0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Helpers.assertContentsAnyOrder(linkedList0, objectArray0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // did not contain expected element null, expected = [null], actual = java.util.ArrayList@0000000001
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Object[] objectArray0 = new Object[8];
      stack0.setSize(65535);
      // Undeclared exception!
      Helpers.assertContainsAllOf(stack0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Collection<Locale.FilteringMode> collection0 = Helpers.misleadingSizeCollection(335);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Helpers.assertContainsAllOf(collection0, objectArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.assertContainsAllOf((Iterable<?>) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Collection<String> collection0 = Helpers.misleadingSizeCollection(2859);
      // Undeclared exception!
      try { 
        Helpers.assertContains(collection0, hashMap0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Helpers.assertContains((Iterable<?>) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Collection<Locale.FilteringMode> collection0 = Helpers.misleadingSizeCollection(87855567);
      // Undeclared exception!
      try { 
        Helpers.addAll(collection0, (Iterable<? extends Locale.FilteringMode>) collection0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      stack0.add(locale_Category0);
      // Undeclared exception!
      try { 
        Helpers.addAll((Collection<Locale.Category>) stack0, (Iterable<? extends Locale.Category>) stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashSet<BoundType> hashSet0 = new HashSet<BoundType>();
      // Undeclared exception!
      try { 
        Helpers.addAll((Collection<BoundType>) hashSet0, (Iterable<? extends BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector<Helpers.NullsBeforeB> vector0 = new Vector<Helpers.NullsBeforeB>();
      Helpers.NullsBeforeB[] helpers_NullsBeforeBArray0 = new Helpers.NullsBeforeB[3];
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      helpers_NullsBeforeBArray0[0] = helpers_NullsBeforeB0;
      vector0.add(helpers_NullsBeforeB0);
      vector0.add(helpers_NullsBeforeBArray0[0]);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        Helpers.addAll((Collection<Object>) priorityQueue0, (Iterable<?>) vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.testing.Helpers$NullsBeforeB cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(41);
      ToDoubleFunction<Integer> toDoubleFunction0 = (ToDoubleFunction<Integer>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)41, (double)41, (double)41, 0.0, 0.0).when(toDoubleFunction0).applyAsDouble(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Integer>) toDoubleFunction0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[1] = integer0;
      List<Integer> list0 = Helpers.copyToList(integerArray0);
      // Undeclared exception!
      try { 
        Helpers.testComparator((Comparator<? super Integer>) comparator0, list0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // java.util.Comparator$$Lambda$144/1583600537@7c50f304.compare(null, null)
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      Integer integer0 = new Integer((-862048943));
      vector0.add(integer0);
      Helpers.testComparator((Comparator<? super Integer>) comparator0, (List<Integer>) vector0);
      assertTrue(vector0.contains((-862048943)));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      stack0.add(locale_Category0);
      Stack<AbstractMap.SimpleImmutableEntry<Object, Integer>> stack1 = new Stack<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        Helpers.assertEqualInOrder(stack0, stack1);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // contents were not equal and in the same order: expected = [DISPLAY], actual = []
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.copyToList((Iterable<? extends BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector<Helpers.NullsBeforeB> vector0 = new Vector<Helpers.NullsBeforeB>();
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      vector0.add(helpers_NullsBeforeB0);
      Helpers.assertEqualIgnoringOrder(vector0, vector0);
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<MockFile> arrayList0 = new ArrayList<MockFile>();
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      boolean boolean0 = helpers_NullsBeforeB0.equals(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      int int0 = helpers_NullsBeforeB0.compare("b", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      int int0 = helpers_NullsBeforeB0.compare("=", (String) null);
      assertEquals((-37), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      int int0 = helpers_NullsBeforeB0.compare((String) null, "b");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      int int0 = helpers_NullsBeforeB0.compare((String) null, "Q");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      int int0 = helpers_NullsBeforeB0.compare("N#7", "N#7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      int int0 = helpers_NullsBeforeB0.compare("<O", "*_Cmgb?");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      List<BoundType> list0 = Helpers.castOrCopyToList((Iterable<BoundType>) enumSet0);
      assertTrue(list0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      stack0.add(locale_Category0);
      stack0.add(locale_Category0);
      // Undeclared exception!
      try { 
        Helpers.testCompareToAndEquals((List<Locale.Category>) stack0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // DISPLAY.compareTo(DISPLAY)
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      stack0.add(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      stack0.add(locale_Category1);
      Helpers.testCompareToAndEquals((List<Locale.Category>) stack0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer((-2462));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Function<Object, Locale.FilteringMode> function0 = (Function<Object, Locale.FilteringMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0, (Object) null).when(function0).apply(any());
      Converter<Object, Locale.FilteringMode> converter0 = Converter.from((Function<? super Object, ? extends Locale.FilteringMode>) function0, (Function<? super Locale.FilteringMode, ?>) function0);
      Comparator<Object> comparator0 = Comparator.comparing((java.util.function.Function<? super Object, ? extends Locale.FilteringMode>) converter0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      // Undeclared exception!
      try { 
        Helpers.testComparator((Comparator<? super Integer>) comparator0, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Helpers.NullsBeforeB[] helpers_NullsBeforeBArray0 = new Helpers.NullsBeforeB[4];
      List<Helpers.NullsBeforeB> list0 = Helpers.copyToList(helpers_NullsBeforeBArray0);
      Iterator<Helpers.NullsBeforeB> iterator0 = Helpers.cycle((Iterable<Helpers.NullsBeforeB>) list0);
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.get(iterator0, 1901);
      assertNull(helpers_NullsBeforeB0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Helpers.assertContainsAllOf(stack0, objectArray0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Not true that [] contains all of [null]
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      linkedList0.add(locale_FilteringMode0);
      Object[] objectArray0 = new Object[0];
      Helpers.assertContainsAllOf(linkedList0, objectArray0);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stack0.add(locale_Category0);
      Helpers.assertContains(stack0, locale_Category0);
      assertFalse(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stack0.add(locale_Category0);
      Stack<AbstractMap.SimpleImmutableEntry<Object, Integer>> stack1 = new Stack<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        Helpers.assertEqualIgnoringOrder(stack1, stack0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // unexpected elements: [FORMAT]
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        Helpers.assertEqualIgnoringOrder(enumSet0, linkedList0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // did not contain expected element IGNORE_EXTENDED_RANGES, expected = [IGNORE_EXTENDED_RANGES], actual = java.util.ArrayList@0000000001
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Vector<ArrayList<Object>> vector0 = new Vector<ArrayList<Object>>();
      vector0.add(arrayList0);
      // Undeclared exception!
      try { 
        Helpers.assertEqualInOrder(arrayList0, vector0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // contents were not equal and in the same order: expected = [], actual = [[]]
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      stack0.add(locale_Category0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringModeArray0[0];
      Set<Locale.FilteringMode> set0 = Helpers.copyToSet(locale_FilteringModeArray0);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>(set0);
      // Undeclared exception!
      try { 
        Helpers.assertEqualInOrder(stack0, treeSet0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // contents were not equal and in the same order: expected = [DISPLAY], actual = [AUTOSELECT_FILTERING]
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Helpers.assertEmpty((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(stack0, stack0);
      // Undeclared exception!
      try { 
        Helpers.assertEmpty((Map<?, ?>) hashMap0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Not true that {[]=[]} is empty
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stack0.add(locale_Category0);
      // Undeclared exception!
      try { 
        Helpers.assertEmpty((Iterable<?>) stack0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Not true that [FORMAT] is empty
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Helpers.assertEmpty((Iterable<?>) stack0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Helpers.NullsBeforeB> class0 = Helpers.NullsBeforeB.class;
      ServiceLoader<Helpers.NullsBeforeB> serviceLoader0 = ServiceLoader.load(class0);
      Helpers.assertEmpty((Iterable<?>) serviceLoader0);
      assertEquals("java.util.ServiceLoader[com.google.common.collect.testing.Helpers$NullsBeforeB]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile[] mockFileArray0 = new MockFile[9];
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(uRI0);
      mockFileArray0[3] = mockFile1;
      List<MockFile> list0 = Helpers.copyToList(mockFileArray0);
      Iterable<MockFile> iterable0 = Helpers.reverse(list0);
      Helpers.assertContains(iterable0, mockFile0);
      assertEquals(0L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = Helpers.equal(locale_Category0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stack0.add(locale_Category0);
      Helpers.assertEqualInOrder(stack0, stack0);
      assertFalse(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Collection<Helpers.NullsBeforeB> collection0 = Helpers.misleadingSizeCollection(1);
      LinkedList<Helpers.NullsBeforeB> linkedList0 = new LinkedList<Helpers.NullsBeforeB>(collection0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFile[] mockFileArray0 = new MockFile[3];
      List<MockFile> list0 = Helpers.copyToList(mockFileArray0);
      Iterable<MockFile> iterable0 = Helpers.reverse(list0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        Helpers.assertContains(iterable0, stack0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Not true that com.google.common.collect.testing.Helpers$1@1 contains []
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      // Undeclared exception!
      try { 
        Helpers.assertContains(stack0, helpers_NullsBeforeB0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Not true that [] contains com.google.common.collect.testing.Helpers$NullsBeforeB@62
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Map.Entry<Locale.Category, Locale.Category> map_Entry0 = Helpers.nefariousMapEntry(locale_Category0, locale_Category0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      // Undeclared exception!
      try { 
        Helpers.fail(sQLInvalidAuthorizationSpecException0, map_Entry0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // DISPLAY=DISPLAY
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      Integer[] integerArray0 = new Integer[1];
      Helpers.testComparator((Comparator<? super Integer>) comparator0, integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>(3046, 3046);
      List<BoundType> list0 = Helpers.castOrCopyToList((Iterable<BoundType>) linkedHashSet0);
      Object[] objectArray0 = new Object[0];
      Helpers.assertContentsAnyOrder(list0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.copyToSet((ArrayList<Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Helpers.NullsBeforeB helpers_NullsBeforeB0 = Helpers.NullsBeforeB.INSTANCE;
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Map.Entry<Helpers.NullsBeforeB, Stack<Locale.Category>> map_Entry0 = Helpers.mapEntry(helpers_NullsBeforeB0, stack0);
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Helpers.getMethod(class0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockFile[] mockFileArray0 = new MockFile[4];
      List<MockFile> list0 = Helpers.copyToList(mockFileArray0);
      Iterable<MockFile> iterable0 = Helpers.reverse(list0);
      // Undeclared exception!
      try { 
        Helpers.assertEmpty(iterable0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // Not true that com.google.common.collect.testing.Helpers$1@1 is empty
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Stack<BoundType> stack0 = new Stack<BoundType>();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Helpers.assertContentsInOrder(stack0, objectArray0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // contents were not equal and in the same order: expected = [null, null], actual = []
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.copyToSet((Iterable<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.Helpers", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Helpers helpers0 = new Helpers();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Collection<Object> collection0 = Helpers.misleadingSizeCollection((-2901));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      boolean boolean0 = Helpers.addAll(collection0, (Iterable<?>) enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      // Undeclared exception!
      try { 
        Helpers.orderEntriesByKey((List<Map.Entry<BoundType, Comparable<BoundType>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }
}
