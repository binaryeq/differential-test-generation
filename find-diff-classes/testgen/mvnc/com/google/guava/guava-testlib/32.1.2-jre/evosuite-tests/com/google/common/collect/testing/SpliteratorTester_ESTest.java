/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:39:51 GMT 2024
 */

package com.google.common.collect.testing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.testing.SpliteratorTester;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Spliterator;
import java.util.Stack;
import java.util.function.Supplier;
import junit.framework.AssertionFailedError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpliteratorTester_ESTest extends SpliteratorTester_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Spliterator<Object> spliterator0 = priorityQueue0.spliterator();
      Supplier<Spliterator<Object>> supplier0 = (Supplier<Spliterator<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator0, spliterator0, spliterator0, spliterator0, spliterator0).when(supplier0).get();
      SpliteratorTester<Object> spliteratorTester0 = SpliteratorTester.of(supplier0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      spliteratorTester0.expect(objectArray0);
      priorityQueue0.add(object0);
      Object[] objectArray1 = new Object[0];
      // Undeclared exception!
      try { 
        spliteratorTester0.expect(objectArray1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$PriorityQueueSpliterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpliteratorTester<Object> spliteratorTester0 = SpliteratorTester.of((Supplier<Spliterator<Object>>) null);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        spliteratorTester0.expect(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.SpliteratorTester", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<Spliterator<Object>> supplier0 = (Supplier<Spliterator<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      SpliteratorTester<Object> spliteratorTester0 = SpliteratorTester.of(supplier0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        spliteratorTester0.expect(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<ImmutableSet<Object>> stack0 = new Stack<ImmutableSet<Object>>();
      Spliterator<ImmutableSet<Object>> spliterator0 = stack0.spliterator();
      Supplier<Spliterator<ImmutableSet<Object>>> supplier0 = (Supplier<Spliterator<ImmutableSet<Object>>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator0, spliterator0).when(supplier0).get();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stack0;
      objectArray0[1] = (Object) spliterator0;
      objectArray0[2] = (Object) spliterator0;
      objectArray0[3] = (Object) supplier0;
      ImmutableSet<Object> immutableSet0 = ImmutableSet.copyOf(objectArray0);
      stack0.add(immutableSet0);
      SpliteratorTester<ImmutableSet<Object>> spliteratorTester0 = SpliteratorTester.of(supplier0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpliteratorTester<ImmutableSet<Object>> spliteratorTester0 = SpliteratorTester.of((Supplier<Spliterator<ImmutableSet<Object>>>) null);
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.testing.SpliteratorTester", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<ImmutableSet<Object>> stack0 = new Stack<ImmutableSet<Object>>();
      Supplier<Spliterator<ImmutableSet<Object>>> supplier0 = (Supplier<Spliterator<ImmutableSet<Object>>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      SpliteratorTester<ImmutableSet<Object>> spliteratorTester0 = SpliteratorTester.of(supplier0);
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Spliterator.OfInt spliterator_OfInt0 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(110).when(spliterator_OfInt0).characteristics();
      doReturn(2862933555777941757L).when(spliterator_OfInt0).estimateSize();
      doReturn((Comparator) null).when(spliterator_OfInt0).getComparator();
      Spliterator.OfInt spliterator_OfInt1 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      Supplier<Spliterator.OfInt> supplier0 = (Supplier<Spliterator.OfInt>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator_OfInt0, spliterator_OfInt1).when(supplier0).get();
      SpliteratorTester<Integer> spliteratorTester0 = SpliteratorTester.ofInt(supplier0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of range: java.lang.Long@0000000010
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Spliterator.OfInt spliterator_OfInt0 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(spliterator_OfInt0).estimateSize();
      doReturn(false).when(spliterator_OfInt0).tryAdvance(any(java.util.function.Consumer.class));
      Spliterator.OfInt spliterator_OfInt1 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(3480).when(spliterator_OfInt1).characteristics();
      doReturn((-1523L)).when(spliterator_OfInt1).estimateSize();
      Spliterator.OfInt spliterator_OfInt2 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(spliterator_OfInt2).characteristics();
      doReturn((-476L), (-690L), 1L, 1L, 1L).when(spliterator_OfInt2).estimateSize();
      doReturn((long)(-1775), 0L).when(spliterator_OfInt2).getExactSizeIfKnown();
      doReturn(false, false, false).when(spliterator_OfInt2).hasCharacteristics(anyInt());
      doReturn(false, true, false).when(spliterator_OfInt2).tryAdvance(any(java.util.function.Consumer.class));
      doReturn(false, false).when(spliterator_OfInt2).tryAdvance(any(java.util.function.IntConsumer.class));
      doReturn((Spliterator.OfInt) null, spliterator_OfInt0, (Spliterator.OfInt) null).when(spliterator_OfInt2).trySplit();
      Supplier<Spliterator.OfInt> supplier0 = (Supplier<Spliterator.OfInt>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator_OfInt1, spliterator_OfInt2, spliterator_OfInt2, spliterator_OfInt2, spliterator_OfInt2).when(supplier0).get();
      SpliteratorTester<Integer> spliteratorTester0 = SpliteratorTester.ofInt(supplier0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SpliteratorTester.Ordered spliteratorTester_Ordered0 = spliteratorTester0.expect((Iterable<?>) arrayDeque0);
      assertNotNull(spliteratorTester_Ordered0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      Spliterator.OfInt spliterator_OfInt0 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MAX_VALUE).when(spliterator_OfInt0).characteristics();
      doReturn((long)Integer.MAX_VALUE).when(spliterator_OfInt0).estimateSize();
      doReturn(comparator0).when(spliterator_OfInt0).getComparator();
      Spliterator.OfInt spliterator_OfInt1 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      Supplier<Spliterator.OfInt> supplier0 = (Supplier<Spliterator.OfInt>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator_OfInt0, spliterator_OfInt1).when(supplier0).get();
      SpliteratorTester<Integer> spliteratorTester0 = SpliteratorTester.ofInt(supplier0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) arrayDeque0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // expected:<2147483647> but was:<0>
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spliterator.OfInt spliterator_OfInt0 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn((long)3480, (-318L)).when(spliterator_OfInt0).estimateSize();
      Spliterator.OfInt spliterator_OfInt1 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(3480).when(spliterator_OfInt1).characteristics();
      doReturn((-1523L)).when(spliterator_OfInt1).estimateSize();
      Spliterator.OfInt spliterator_OfInt2 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn((-476L), (-690L), 1L, 1L).when(spliterator_OfInt2).estimateSize();
      doReturn((long)(-1794)).when(spliterator_OfInt2).getExactSizeIfKnown();
      doReturn(false, false).when(spliterator_OfInt2).hasCharacteristics(anyInt());
      doReturn(false, true).when(spliterator_OfInt2).tryAdvance(any(java.util.function.Consumer.class));
      doReturn((Spliterator.OfInt) null, spliterator_OfInt0).when(spliterator_OfInt2).trySplit();
      Supplier<Spliterator.OfInt> supplier0 = (Supplier<Spliterator.OfInt>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator_OfInt1, spliterator_OfInt2, spliterator_OfInt2, spliterator_OfInt2, spliterator_OfInt2).when(supplier0).get();
      SpliteratorTester<Integer> spliteratorTester0 = SpliteratorTester.ofInt(supplier0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) arrayDeque0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // estimated size of trySplit result (-318) is larger than original size (1)
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Spliterator.OfInt spliterator_OfInt0 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      Spliterator.OfInt spliterator_OfInt1 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(2146808763).when(spliterator_OfInt1).characteristics();
      doReturn((long)2146808763).when(spliterator_OfInt1).estimateSize();
      Spliterator.OfInt spliterator_OfInt2 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn((-2248L), (-845L), (-1949L)).when(spliterator_OfInt2).estimateSize();
      doReturn(true).when(spliterator_OfInt2).hasCharacteristics(anyInt());
      doReturn(false).when(spliterator_OfInt2).tryAdvance(any(java.util.function.Consumer.class));
      doReturn(spliterator_OfInt0).when(spliterator_OfInt2).trySplit();
      Supplier<Spliterator.OfInt> supplier0 = (Supplier<Spliterator.OfInt>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator_OfInt1, spliterator_OfInt2, spliterator_OfInt2, spliterator_OfInt2).when(supplier0).get();
      SpliteratorTester<Integer> spliteratorTester0 = SpliteratorTester.ofInt(supplier0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) arrayDeque0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // estimated size of spliterator after trySplit (-1949) is larger than original size (-2248)
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Spliterator<Object> spliterator0 = priorityQueue0.spliterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Spliterator<Object> spliterator1 = linkedList0.spliterator();
      Object object0 = new Object();
      linkedList0.add(object0);
      Supplier<Spliterator<Object>> supplier0 = (Supplier<Spliterator<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator0, spliterator0, spliterator0, spliterator1).when(supplier0).get();
      SpliteratorTester<Object> spliteratorTester0 = SpliteratorTester.of(supplier0);
      linkedList0.add((Object) priorityQueue0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        spliteratorTester0.expect(objectArray0);
        fail("Expecting exception: AssertionFailedError");
      
      } catch(AssertionFailedError e) {
         //
         // expected:<0> but was:<2>
         //
         verifyException("junit.framework.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spliterator.OfInt spliterator_OfInt0 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn((-318L), (long)3480, 1L).when(spliterator_OfInt0).estimateSize();
      doReturn(false).when(spliterator_OfInt0).hasCharacteristics(anyInt());
      doReturn(true, false).when(spliterator_OfInt0).tryAdvance(any(java.util.function.Consumer.class));
      doReturn((Spliterator.OfInt) null).when(spliterator_OfInt0).trySplit();
      Spliterator.OfInt spliterator_OfInt1 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(3480).when(spliterator_OfInt1).characteristics();
      doReturn((-1523L)).when(spliterator_OfInt1).estimateSize();
      Spliterator.OfInt spliterator_OfInt2 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(spliterator_OfInt2).characteristics();
      doReturn((-476L), (-690L), 1L, 1L, 1L).when(spliterator_OfInt2).estimateSize();
      doReturn((long)(-1775), 0L).when(spliterator_OfInt2).getExactSizeIfKnown();
      doReturn(false, false, false).when(spliterator_OfInt2).hasCharacteristics(anyInt());
      doReturn(false, true, false).when(spliterator_OfInt2).tryAdvance(any(java.util.function.Consumer.class));
      doReturn(false, false).when(spliterator_OfInt2).tryAdvance(any(java.util.function.IntConsumer.class));
      doReturn((Spliterator.OfInt) null, spliterator_OfInt0, (Spliterator.OfInt) null).when(spliterator_OfInt2).trySplit();
      Supplier<Spliterator.OfInt> supplier0 = (Supplier<Spliterator.OfInt>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator_OfInt1, spliterator_OfInt2, spliterator_OfInt2, spliterator_OfInt2, spliterator_OfInt2).when(supplier0).get();
      SpliteratorTester<Integer> spliteratorTester0 = SpliteratorTester.ofInt(supplier0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SpliteratorTester.Ordered spliteratorTester_Ordered0 = spliteratorTester0.expect((Iterable<?>) arrayDeque0);
      assertNotNull(spliteratorTester_Ordered0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Supplier<Spliterator.OfDouble> supplier0 = (Supplier<Spliterator.OfDouble>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SpliteratorTester<Double> spliteratorTester0 = SpliteratorTester.ofDouble(supplier0);
      assertNotNull(spliteratorTester0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<Spliterator.OfLong> supplier0 = (Supplier<Spliterator.OfLong>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SpliteratorTester<Long> spliteratorTester0 = SpliteratorTester.ofLong(supplier0);
      assertNotNull(spliteratorTester0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Spliterator.OfInt spliterator_OfInt0 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(2143831464).when(spliterator_OfInt0).characteristics();
      doReturn(939L).when(spliterator_OfInt0).estimateSize();
      Spliterator.OfInt spliterator_OfInt1 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(spliterator_OfInt1).tryAdvance(any(java.util.function.Consumer.class));
      Spliterator.OfInt spliterator_OfInt2 = mock(Spliterator.OfInt.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(spliterator_OfInt2).estimateSize();
      doReturn(0L).when(spliterator_OfInt2).getExactSizeIfKnown();
      doReturn(false).when(spliterator_OfInt2).hasCharacteristics(anyInt());
      doReturn((Spliterator.OfInt) null).when(spliterator_OfInt2).trySplit();
      Supplier<Spliterator.OfInt> supplier0 = (Supplier<Spliterator.OfInt>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(spliterator_OfInt0, spliterator_OfInt1, spliterator_OfInt1, spliterator_OfInt2, (Object) null).when(supplier0).get();
      SpliteratorTester<Integer> spliteratorTester0 = SpliteratorTester.ofInt(supplier0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        spliteratorTester0.expect((Iterable<?>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
