/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:40:58 GMT 2024
 */

package com.google.common.collect.testing;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.collect.testing.TestsForListsInJavaUtil;
import java.lang.reflect.Method;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestsForListsInJavaUtil_ESTest extends TestsForListsInJavaUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForLinkedList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForCopyOnWriteArrayList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForSingletonList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForAbstractSequentialList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForCheckedList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForArraysAsList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForUnmodifiableList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForAbstractList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForVector();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForEmptyList();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestsForListsInJavaUtil testsForListsInJavaUtil0 = new TestsForListsInJavaUtil();
      Collection<Method> collection0 = testsForListsInJavaUtil0.suppressForArrayList();
      assertNotNull(collection0);
  }
}
