* EvoSuite 1.2.0
* Going to generate test cases for class: com.google.common.collect.Tables
* Starting Client-0
* Connecting to master process on port 3074
* Analyzing classpath: 
  - /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar
  - t/dependency/checker-qual-3.12.0.jar
  - t/dependency/error_prone_annotations-2.7.1.jar
  - t/dependency/failureaccess-1.0.1.jar
  - t/dependency/j2objc-annotations-1.3.jar
  - t/dependency/jsr305-3.0.2.jar
  - t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
* Finished analyzing classpath
* Generating tests for class com.google.common.collect.Tables
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 589
* Using seed 1729698518281
* Starting evolution
* Initial Number of Goals in DynaMOSA = 303 / 589
[MASTER] 04:48:41.137 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.SparseImmutableTable<R, C, V> for type Variable I with bounds [com.google.common.collect.Table<R, C, V>] of declaration Tables#toTable. The owner var map is {T=java.util.HashMap<java.util.HashMap<K, V>, com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V>>, R=com.google.common.collect.Tables.UnmodifiableRowSortedMap<java.lang.Integer, java.lang.Integer, java.util.HashMap<K, V>>, C=class java.lang.Integer, V=java.util.HashMap<java.lang.Integer, java.util.HashMap<K, V>>}
[MASTER] 04:48:41.149 [logback-1] WARN  TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 04:48:41.149 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> : Type points to itself
[MASTER] 04:48:41.149 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.SparseImmutableTable<R, C, V> : Type points to itself
[MASTER] 04:48:42.004 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends C
[MASTER] 04:48:42.381 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Comparable<T> : Type points to itself
[MASTER] 04:48:42.474 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<java.lang.Object, java.lang.Integer> : Type points to itself
[MASTER] 04:48:42.514 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.base.Function<java.lang.Object, java.lang.Integer> : Type points to itself
[MASTER] 04:48:42.609 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends R
[MASTER] 04:48:42.653 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends R
[MASTER] 04:48:45.336 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.RegularImmutableSortedSet<E> : Type points to itself
[MASTER] 04:48:45.336 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Map<K, V> : Type points to itself
[MASTER] 04:48:51.973 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends C
[MASTER] 04:48:54.270 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Iterable<java.util.Map<java.lang.Integer, java.lang.Integer>.Entry<java.util.Locale$Category, java.lang.Integer>> : Type points to itself
[MASTER] 04:49:00.381 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.StandardTable<R, C, V> for type Variable I with bounds [com.google.common.collect.Table<R, C, V>] of declaration Tables#toTable. The owner var map is {T=class java.lang.Integer, R=class java.lang.Integer, C=com.google.common.collect.Tables.UnmodifiableRowSortedMap<com.google.common.collect.Multiset<E>.Entry<E>, java.lang.Object, com.google.common.collect.Multiset<E>.Entry<E>>, V=java.util.Map<java.util.HashMap<K, V>, java.lang.Object>.Entry<com.google.common.collect.Multiset<E>.Entry<E>, java.util.HashMap<K, V>>}
[MASTER] 04:49:00.418 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.ImmutableTable<R, C, V> for type Variable I with bounds [com.google.common.collect.Table<R, C, V>] of declaration Tables#toTable. The owner var map is {T=class java.lang.Integer, R=class java.lang.Object, C=java.util.Map<java.lang.Integer, java.lang.Object>.Entry<com.google.common.collect.Multiset<E>.Entry<E>, java.lang.Object>, V=java.util.HashMap<java.util.HashMap<K, V>, com.google.common.collect.Multiset<E>.Entry<E>>}
[MASTER] 04:49:02.725 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Map<K, V>.Entry<K, V> : Type points to itself
[MASTER] 04:49:02.725 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.ImmutableTable<R, C, V> : Type points to itself
[MASTER] 04:49:03.680 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends V
[MASTER] 04:49:16.726 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends V
[MASTER] 04:49:16.983 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends V
[MASTER] 04:49:19.283 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Iterable<java.util.HashMap<java.util.Locale$Category, java.lang.Integer>> : Type points to itself
[MASTER] 04:49:28.967 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.Table<R, C, V>.Cell<R, C, V> : Type points to itself
[MASTER] 04:49:29.110 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends R
[MASTER] 04:49:30.331 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.RegularImmutableList<E> : Type points to itself
[MASTER] 04:49:30.411 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends R
[MASTER] 04:49:32.781 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V> for wildcard ? extends R
[MASTER] 04:49:35.640 [logback-1] WARN  CastClassManager - Nothing is assignable after adding class java.lang.Integer for type Variable E with bounds [java.lang.Comparable<? super E>] of declaration ImmutableSortedSet#of. The owner var map is {E=class java.lang.Integer, E=class java.lang.Integer, E=class java.lang.Integer, E=class java.lang.Integer, E=class java.lang.Integer, E=class java.lang.Integer, E=class java.lang.Integer, E=class java.lang.Integer, E=class java.util.Locale$FilteringMode, E=java.util.HashMap<java.lang.Integer, java.lang.Comparable<T>>, E=java.util.HashMap<java.util.Locale$FilteringMode, java.util.Map<K, V>>, E=class java.util.Locale$FilteringMode, E=java.lang.Comparable<java.lang.Comparable<T>>, E=java.util.Map<java.lang.Integer, java.lang.Integer>, E=java.util.HashMap<java.lang.Integer, java.lang.Comparable<T>>, E=class java.lang.Integer, E=java.lang.Comparable<java.util.Map<K, V>>, E=class java.util.Locale$FilteringMode, E=class java.util.Locale$FilteringMode, E=java.lang.Comparable<java.lang.Object>, E=java.lang.Comparable<java.lang.Comparable<T>>, E=com.google.common.collect.Tables.UnmodifiableRowSortedMap<java.lang.Integer, com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V>, com.google.common.collect.Tables.UnmodifiableRowSortedMap<R, C, V>>, E=class java.lang.Integer, E=java.lang.Comparable<java.lang.Object>}
[MASTER] 04:49:36.874 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.875 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.877 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.886 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.888 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.890 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.893 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.907 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.910 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.913 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.926 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.929 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.931 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.933 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:36.936 [logback-1] WARN  CastClassManager - Nothing is assignable after adding java.util.Map<K, V> for wildcard ? extends java.util.Map<java.util.Locale$FilteringMode, java.util.Locale$FilteringMode>
[MASTER] 04:49:45.269 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.ImmutableSortedSet<E> : Type points to itself
[Progress:==============================100%] [Cov:>                                  0%][MASTER] 04:49:46.096 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 04:49:46.203 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.BiFunction<T, U, R> : Type points to itself
[MASTER] 04:49:46.326 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.base.Function<F, T> : Type points to itself
[Progress:==============================100%] [Cov:=========>                         26%]
* Search finished after 68s and 0 generations, 173 statements, best individual has fitness: 489.0
[MASTER] 04:49:49.461 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 8 seconds more than allowed.
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 29%
* Total number of goals: 122
* Number of covered goals: 35
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 22%
* Total number of goals: 101
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100% (no goals)
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 50%
* Total number of goals: 107
* Number of covered goals: 54
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 25%
* Total number of goals: 20
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 16%
* Total number of goals: 69
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 16%
* Total number of goals: 69
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 22%
* Total number of goals: 101
* Number of covered goals: 22
* Generated 11 tests with total length 42
* Resulting test suite's coverage: 26% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
[MASTER] 04:49:52.123 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_3_1729698592080/com/google/common/collect/Tables_3_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_3_1729698592080/com/google/common/collect/Tables_3_tmp__ESTest_scaffolding.java]]
[MASTER] 04:49:52.123 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:t/dependency/checker-qual-3.12.0.jar:t/dependency/error_prone_annotations-2.7.1.jar:t/dependency/failureaccess-1.0.1.jar:t/dependency/j2objc-annotations-1.3.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:49:52.123 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:49:52.125 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: com.google.common.collect.ImmutableTable<java.lang.Integer,java.lang.Object,java.lang.Integer> cannot be converted to com.google.common.collect.Table<java.lang.Comparable<java.lang.Comparable>,java.lang.Object,java.util.Map<java.lang.Object,java.lang.Comparable>>: 24
[MASTER] 04:49:52.126 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_3_1729698592080/com/google/common/collect/Tables_3_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Oct 23 15:49:52 GMT 2024
4:  */
5: 
6: package com.google.common.collect;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableTable;
11: import com.google.common.collect.Table;
12: import com.google.common.collect.Tables;
13: import java.util.Map;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Tables_3_tmp__ESTest extends Tables_3_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       ImmutableTable<Integer, Object, Integer> immutableTable0 = ImmutableTable.of();
24:       Table<Object, Comparable<Comparable>, Map<Object, Comparable>> table0 = Tables.transpose((Table<Comparable<Comparable>, Object, Map<Object, Comparable>>) immutableTable0);
25:       assertNotNull(table0);
26:   }
27: }
RegularFileObject[/tmp/EvoSuite_3_1729698592080/com/google/common/collect/Tables_3_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Oct 23 15:49:52 GMT 2024
5:  */
6: 
7: package com.google.common.collect;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Tables_3_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.collect.Tables"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Tables_3_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.RegularContiguousSet",
82:       "com.google.common.collect.ImmutableSet$SetBuilderImpl",
83:       "com.google.common.collect.AllEqualOrdering",
84:       "com.google.common.collect.ImmutableList$SubList",
85:       "com.google.common.collect.ListMultimap",
86:       "com.google.common.collect.HashBasedTable",
87:       "com.google.common.collect.StandardTable$RowMap",
88:       "com.google.common.collect.StandardTable$CellIterator",
89:       "com.google.common.collect.PeekingIterator",
90:       "com.google.common.collect.RegularImmutableList",
91:       "com.google.common.collect.Tables$TransposeTable$1",
92:       "com.google.common.collect.RegularContiguousSet$3",
93:       "com.google.common.collect.RegularContiguousSet$2",
94:       "com.google.common.collect.StandardRowSortedTable$RowSortedMap",
95:       "com.google.common.collect.SparseImmutableTable",
96:       "com.google.common.collect.RegularContiguousSet$1",
97:       "com.google.common.collect.Synchronized$SynchronizedRandomAccessList",
98:       "com.google.common.collect.SingletonImmutableTable",
99:       "com.google.common.collect.Iterators$ArrayItr",
100:       "com.google.common.collect.RegularImmutableMap$KeySet",
101:       "com.google.common.collect.Maps$KeySet",
102:       "com.google.common.collect.Synchronized$SynchronizedList",
103:       "com.google.common.collect.NullsLastOrdering",
104:       "com.google.common.collect.RegularImmutableMap",
105:       "com.google.common.collect.RowSortedTable",
106:       "com.google.common.collect.Range",
107:       "com.google.common.collect.Maps$SortedKeySet",
108:       "com.google.common.collect.StandardTable$TableSet",
109:       "com.google.common.collect.ByFunctionOrdering",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.common.collect.Iterators$10",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
115:       "com.google.common.base.Predicate",
116:       "com.google.common.collect.LexicographicalOrdering",
117:       "com.google.common.collect.TreeBasedTable$Factory",
118:       "com.google.common.collect.Tables$UnmodifiableRowSortedMap",
119:       "com.google.common.collect.RegularImmutableTable$CellSet",
120:       "com.google.common.collect.HashBasedTable$Factory",
121:       "com.google.common.collect.NullsFirstOrdering",
122:       "com.google.common.collect.ContiguousSet",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.common.collect.DiscreteDomain$BigIntegerDomain",
125:       "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet",
126:       "com.google.common.collect.ImmutableSet$Builder",
127:       "com.google.common.collect.ImmutableSet$CachingAsList",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.common.collect.SingletonImmutableSet",
130:       "com.google.common.collect.Cut$BelowValue",
131:       "com.google.common.collect.ImmutableMapEntrySet",
132:       "com.google.common.collect.ForwardingTable",
133:       "com.google.common.collect.StandardTable$RowMap$EntrySet",
134:       "com.google.common.collect.StandardRowSortedTable",
135:       "com.google.common.collect.Tables$ImmutableCell",
136:       "com.google.common.collect.DiscreteDomain",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.common.collect.Synchronized$SynchronizedCollection",
139:       "com.google.common.collect.UsingToStringOrdering",
140:       "com.google.common.collect.EmptyContiguousSet",
141:       "com.google.common.collect.DenseImmutableTable",
142:       "com.google.common.collect.Cut",
143:       "com.google.common.collect.ImmutableSortedSet",
144:       "com.google.common.collect.RangeGwtSerializationDependencies",
145:       "com.google.common.collect.Maps$BiMapConverter",
146:       "com.google.common.collect.AbstractIterator",
147:       "com.google.common.collect.ImmutableSortedSet$Builder",
148:       "com.google.common.collect.TreeBasedTable",
149:       "com.google.common.collect.ImmutableList$1",
150:       "com.google.common.collect.MapDifference",
151:       "com.google.common.collect.SortedIterable",
152:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
153:       "com.google.common.collect.StandardTable",
154:       "com.google.common.collect.Sets$ImprovedAbstractSet",
155:       "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
156:       "com.google.common.base.Preconditions",
157:       "com.google.common.collect.RegularImmutableTable$Values",
158:       "com.google.common.collect.UnmodifiableIterator",
159:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
160:       "com.google.common.collect.ImmutableEntry",
161:       "com.google.common.collect.AbstractTable$CellSet",
162:       "com.google.common.collect.Iterators$EmptyModifiableIterator",
163:       "com.google.common.collect.ImmutableCollection",
164:       "com.google.common.collect.ImmutableEnumMap",
165:       "com.google.common.collect.Tables",
166:       "com.google.common.collect.Synchronized$SynchronizedTable",
167:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
168:       "com.google.common.base.Objects",
169:       "com.google.common.collect.SingletonImmutableList",
170:       "com.google.common.base.Converter",
171:       "com.google.errorprone.annotations.DoNotMock",
172:       "com.google.common.collect.ImmutableCollection$Builder",
173:       "com.google.common.collect.Maps$8",
174:       "com.google.common.collect.BiMap",
175:       "com.google.common.collect.ImmutableTable$Builder",
176:       "com.google.common.collect.IndexedImmutableSet",
177:       "com.google.common.base.Function",
178:       "com.google.common.collect.ImmutableSet",
179:       "com.google.common.collect.Iterators$9",
180:       "com.google.common.collect.SortedSetMultimap",
181:       "com.google.common.collect.ImmutableMap",
182:       "com.google.common.collect.ImmutableMapEntry",
183:       "com.google.common.collect.ComparatorOrdering",
184:       "com.google.common.collect.DiscreteDomain$IntegerDomain",
185:       "com.google.common.collect.AbstractIndexedListIterator",
186:       "com.google.common.collect.Maps$1",
187:       "com.google.common.collect.CollectPreconditions",
188:       "com.google.common.collect.Iterators$1",
189:       "com.google.common.collect.Iterators$4",
190:       "com.google.common.collect.Iterators$5",
191:       "com.google.common.collect.Maps$3",
192:       "com.google.common.collect.DiscreteDomain$LongDomain",
193:       "com.google.common.base.ExtraObjectsMethodsForWeb",
194:       "com.google.common.collect.BoundType",
195:       "com.google.common.collect.ExplicitOrdering",
196:       "com.google.common.collect.StandardTable$RowMap$EntrySet$1",
197:       "com.google.common.collect.Cut$AboveValue",
198:       "com.google.common.collect.Maps$ViewCachingAbstractMap",
199:       "com.google.common.collect.ImmutableMap$1",
200:       "com.google.common.collect.ForwardingObject",
201:       "com.google.common.collect.Tables$1",
202:       "com.google.common.collect.AbstractTable",
203:       "com.google.common.collect.Multiset",
204:       "com.google.common.base.Supplier",
205:       "com.google.common.collect.Multimap",
206:       "com.google.common.collect.AbstractSequentialIterator",
207:       "com.google.common.collect.Iterators",
208:       "com.google.common.collect.CompoundOrdering",
209:       "com.google.common.collect.ImmutableBiMap",
210:       "com.google.common.collect.ImmutableList",
211:       "com.google.common.collect.ReverseOrdering",
212:       "com.google.common.collect.Table$Cell",
213:       "com.google.common.collect.ImmutableBiMapFauxverideShim",
214:       "com.google.common.collect.Synchronized",
215:       "com.google.common.collect.Tables$TransformedTable",
216:       "com.google.common.collect.Tables$AbstractCell",
217:       "com.google.common.collect.Cut$BelowAll",
218:       "com.google.common.collect.Tables$TransposeTable",
219:       "com.google.common.collect.Synchronized$SynchronizedSet",
220:       "com.google.common.collect.ReverseNaturalOrdering",
221:       "com.google.common.collect.Maps",
222:       "com.google.common.collect.ImmutableMap$Builder",
223:       "com.google.common.collect.SetMultimap",
224:       "com.google.common.collect.TransformedIterator",
225:       "com.google.common.collect.DescendingImmutableSortedSet",
226:       "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
227:       "com.google.common.collect.Maps$EntryTransformer",
228:       "com.google.common.collect.Ordering",
229:       "com.google.common.collect.Synchronized$SynchronizedObject",
230:       "com.google.common.collect.Tables$UnmodifiableTable",
231:       "com.google.common.collect.ImmutableTable",
232:       "com.google.common.collect.ImmutableTable$SerializedForm",
233:       "com.google.common.collect.NaturalOrdering",
234:       "com.google.common.collect.RegularImmutableTable",
235:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
236:       "com.google.common.collect.Iterators$MergingIterator",
237:       "com.google.common.collect.RegularImmutableMap$Values",
238:       "com.google.common.collect.RegularImmutableSortedSet",
239:       "com.google.common.collect.Cut$AboveAll",
240:       "com.google.common.collect.Table"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Tables_3_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.common.collect.Tables$1",
249:       "com.google.common.collect.Tables",
250:       "com.google.common.collect.Tables$AbstractCell",
251:       "com.google.common.collect.Tables$ImmutableCell",
252:       "com.google.common.collect.AbstractTable",
253:       "com.google.common.collect.Tables$TransposeTable$1",
254:       "com.google.common.collect.Tables$TransposeTable",
255:       "com.google.common.collect.Tables$TransformedTable",
256:       "com.google.common.collect.ForwardingObject",
257:       "com.google.common.collect.ForwardingTable",
258:       "com.google.common.collect.Tables$UnmodifiableTable",
259:       "com.google.common.collect.Tables$UnmodifiableRowSortedMap",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.collect.StandardTable",
262:       "com.google.common.collect.StandardRowSortedTable",
263:       "com.google.common.collect.TreeBasedTable",
264:       "com.google.common.collect.TreeBasedTable$Factory",
265:       "com.google.common.collect.Ordering",
266:       "com.google.common.collect.NaturalOrdering",
267:       "com.google.common.collect.ImmutableCollection",
268:       "com.google.common.collect.ImmutableSet",
269:       "com.google.common.collect.ImmutableSet$CachingAsList",
270:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
271:       "com.google.common.collect.ImmutableSortedSet",
272:       "com.google.common.collect.ImmutableList",
273:       "com.google.common.collect.RegularImmutableList",
274:       "com.google.common.collect.RegularImmutableSortedSet",
275:       "com.google.common.collect.ImmutableTable",
276:       "com.google.common.collect.RegularImmutableTable",
277:       "com.google.common.collect.Maps$ViewCachingAbstractMap",
278:       "com.google.common.collect.StandardTable$RowMap",
279:       "com.google.common.collect.StandardRowSortedTable$RowSortedMap",
280:       "com.google.common.collect.AbstractTable$CellSet",
281:       "com.google.common.collect.StandardTable$CellIterator",
282:       "com.google.common.collect.Iterators",
283:       "com.google.common.collect.Iterators$EmptyModifiableIterator",
284:       "com.google.common.collect.Sets$ImprovedAbstractSet",
285:       "com.google.common.collect.Maps$KeySet",
286:       "com.google.common.collect.Maps$SortedKeySet",
287:       "com.google.common.collect.StandardTable$TableSet",
288:       "com.google.common.collect.StandardTable$RowMap$EntrySet",
289:       "com.google.common.collect.StandardTable$RowMap$EntrySet$1",
290:       "com.google.common.collect.Maps",
291:       "com.google.common.collect.TransformedIterator",
292:       "com.google.common.collect.Maps$3",
293:       "com.google.common.collect.Maps$1",
294:       "com.google.common.collect.RangeGwtSerializationDependencies",
295:       "com.google.common.collect.Cut",
296:       "com.google.common.collect.Cut$BelowAll",
297:       "com.google.common.collect.Cut$AboveAll",
298:       "com.google.common.collect.Range",
299:       "com.google.common.collect.Cut$BelowValue",
300:       "com.google.common.collect.DiscreteDomain",
301:       "com.google.common.collect.DiscreteDomain$IntegerDomain",
302:       "com.google.common.collect.ContiguousSet",
303:       "com.google.common.collect.RegularContiguousSet",
304:       "com.google.common.collect.Range$1",
305:       "com.google.common.collect.Cut$AboveValue",
306:       "com.google.common.primitives.Booleans",
307:       "com.google.common.collect.EmptyContiguousSet",
308:       "com.google.common.collect.HashBasedTable",
309:       "com.google.common.collect.CollectPreconditions",
310:       "com.google.common.collect.HashBasedTable$Factory",
311:       "com.google.common.collect.StandardTable$ColumnMap",
312:       "com.google.common.collect.AbstractMapEntry",
313:       "com.google.common.collect.ImmutableEntry",
314:       "com.google.common.collect.ImmutableMapEntry",
315:       "com.google.common.collect.Maps$Values",
316:       "com.google.common.collect.Maps$2",
317:       "com.google.common.base.Strings",
318:       "com.google.common.base.ExtraObjectsMethodsForWeb",
319:       "com.google.common.base.Objects",
320:       "com.google.common.collect.RegularImmutableSet",
321:       "com.google.common.collect.ImmutableMap$Builder",
322:       "com.google.common.collect.UnmodifiableIterator",
323:       "com.google.common.collect.UnmodifiableListIterator",
324:       "com.google.common.collect.AbstractIndexedListIterator",
325:       "com.google.common.collect.Iterators$ArrayItr",
326:       "com.google.common.collect.ImmutableMap",
327:       "com.google.common.collect.RegularImmutableMap",
328:       "com.google.common.collect.SparseImmutableTable",
329:       "com.google.common.collect.CollectSpliterators",
330:       "com.google.common.collect.CollectSpliterators$FlatMapSpliterator",
331:       "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject",
332:       "com.google.common.collect.Synchronized",
333:       "com.google.common.collect.Synchronized$SynchronizedObject",
334:       "com.google.common.collect.Synchronized$SynchronizedTable",
335:       "com.google.common.collect.StandardTable$Column",
336:       "com.google.common.collect.Synchronized$SynchronizedCollection",
337:       "com.google.common.collect.Synchronized$SynchronizedSet",
338:       "com.google.common.collect.AbstractMultimap",
339:       "com.google.common.collect.AbstractMapBasedMultimap",
340:       "com.google.common.collect.AbstractSetMultimap",
341:       "com.google.common.collect.HashMultimapGwtSerializationDependencies",
342:       "com.google.common.collect.HashMultimap",
343:       "com.google.common.collect.Platform",
344:       "com.google.common.collect.BoundType"
345:     );
346:   }
347: }

[MASTER] 04:49:52.127 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
ImmutableTable<Integer, Object, Integer> immutableTable0 = ImmutableTable.of();
Table<Object, Comparable<Comparable>, Map<Object, Comparable>> table0 = Tables.transpose((Table<Comparable<Comparable>, Object, Map<Object, Comparable>>) immutableTable0);
assertNotNull(table0);


[MASTER] 04:49:52.281 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_6_1729698592230/com/google/common/collect/Tables_6_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_6_1729698592230/com/google/common/collect/Tables_6_tmp__ESTest_scaffolding.java]]
[MASTER] 04:49:52.281 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:t/dependency/checker-qual-3.12.0.jar:t/dependency/error_prone_annotations-2.7.1.jar:t/dependency/failureaccess-1.0.1.jar:t/dependency/j2objc-annotations-1.3.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:49:52.281 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:49:52.281 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: com.google.common.collect.HashBasedTable<java.lang.Object,java.lang.Object,java.lang.Integer> cannot be converted to com.google.common.collect.Table<java.lang.Comparable<java.util.HashMap>,java.lang.Object,java.lang.Integer>: 26
[MASTER] 04:49:52.282 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_6_1729698592230/com/google/common/collect/Tables_6_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Oct 23 15:49:52 GMT 2024
4:  */
5: 
6: package com.google.common.collect;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.HashBasedTable;
11: import com.google.common.collect.ImmutableTable;
12: import com.google.common.collect.Table;
13: import com.google.common.collect.Tables;
14: import java.util.HashMap;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Tables_6_tmp__ESTest extends Tables_6_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       ImmutableTable<Integer, Object, Integer> immutableTable0 = ImmutableTable.of();
25:       HashBasedTable<Object, Object, Integer> hashBasedTable0 = HashBasedTable.create((Table<?, ?, ? extends Integer>) immutableTable0);
26:       Table<Comparable<HashMap>, Object, Integer> table0 = Tables.synchronizedTable((Table<Comparable<HashMap>, Object, Integer>) hashBasedTable0);
27:       boolean boolean0 = Tables.equalsImpl(hashBasedTable0, table0);
28:       assertTrue(boolean0);
29:   }
30: }
RegularFileObject[/tmp/EvoSuite_6_1729698592230/com/google/common/collect/Tables_6_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Oct 23 15:49:52 GMT 2024
5:  */
6: 
7: package com.google.common.collect;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Tables_6_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.collect.Tables"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Tables_6_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.RegularContiguousSet",
82:       "com.google.common.collect.ImmutableSet$SetBuilderImpl",
83:       "com.google.common.collect.AllEqualOrdering",
84:       "com.google.common.collect.ImmutableList$SubList",
85:       "com.google.common.collect.ListMultimap",
86:       "com.google.common.collect.HashBasedTable",
87:       "com.google.common.collect.StandardTable$RowMap",
88:       "com.google.common.collect.StandardTable$CellIterator",
89:       "com.google.common.collect.PeekingIterator",
90:       "com.google.common.collect.RegularImmutableList",
91:       "com.google.common.collect.Tables$TransposeTable$1",
92:       "com.google.common.collect.RegularContiguousSet$3",
93:       "com.google.common.collect.RegularContiguousSet$2",
94:       "com.google.common.collect.StandardRowSortedTable$RowSortedMap",
95:       "com.google.common.collect.SparseImmutableTable",
96:       "com.google.common.collect.RegularContiguousSet$1",
97:       "com.google.common.collect.Synchronized$SynchronizedRandomAccessList",
98:       "com.google.common.collect.SingletonImmutableTable",
99:       "com.google.common.collect.Iterators$ArrayItr",
100:       "com.google.common.collect.RegularImmutableMap$KeySet",
101:       "com.google.common.collect.Maps$KeySet",
102:       "com.google.common.collect.Synchronized$SynchronizedList",
103:       "com.google.common.collect.NullsLastOrdering",
104:       "com.google.common.collect.RegularImmutableMap",
105:       "com.google.common.collect.RowSortedTable",
106:       "com.google.common.collect.Range",
107:       "com.google.common.collect.Maps$SortedKeySet",
108:       "com.google.common.collect.StandardTable$TableSet",
109:       "com.google.common.collect.ByFunctionOrdering",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.common.collect.Iterators$10",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
115:       "com.google.common.base.Predicate",
116:       "com.google.common.collect.LexicographicalOrdering",
117:       "com.google.common.collect.TreeBasedTable$Factory",
118:       "com.google.common.collect.Tables$UnmodifiableRowSortedMap",
119:       "com.google.common.collect.RegularImmutableTable$CellSet",
120:       "com.google.common.collect.HashBasedTable$Factory",
121:       "com.google.common.collect.NullsFirstOrdering",
122:       "com.google.common.collect.ContiguousSet",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.common.collect.DiscreteDomain$BigIntegerDomain",
125:       "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet",
126:       "com.google.common.collect.ImmutableSet$Builder",
127:       "com.google.common.collect.ImmutableSet$CachingAsList",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.common.collect.SingletonImmutableSet",
130:       "com.google.common.collect.Cut$BelowValue",
131:       "com.google.common.collect.ImmutableMapEntrySet",
132:       "com.google.common.collect.ForwardingTable",
133:       "com.google.common.collect.StandardTable$RowMap$EntrySet",
134:       "com.google.common.collect.StandardRowSortedTable",
135:       "com.google.common.collect.Tables$ImmutableCell",
136:       "com.google.common.collect.DiscreteDomain",
137:       "com.google.common.collect.UnmodifiableListIterator",
138:       "com.google.common.collect.Synchronized$SynchronizedCollection",
139:       "com.google.common.collect.UsingToStringOrdering",
140:       "com.google.common.collect.EmptyContiguousSet",
141:       "com.google.common.collect.DenseImmutableTable",
142:       "com.google.common.collect.Cut",
143:       "com.google.common.collect.ImmutableSortedSet",
144:       "com.google.common.collect.RangeGwtSerializationDependencies",
145:       "com.google.common.collect.Maps$BiMapConverter",
146:       "com.google.common.collect.AbstractIterator",
147:       "com.google.common.collect.ImmutableSortedSet$Builder",
148:       "com.google.common.collect.TreeBasedTable",
149:       "com.google.common.collect.ImmutableList$1",
150:       "com.google.common.collect.MapDifference",
151:       "com.google.common.collect.SortedIterable",
152:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
153:       "com.google.common.collect.StandardTable",
154:       "com.google.common.collect.Sets$ImprovedAbstractSet",
155:       "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
156:       "com.google.common.base.Preconditions",
157:       "com.google.common.collect.RegularImmutableTable$Values",
158:       "com.google.common.collect.UnmodifiableIterator",
159:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
160:       "com.google.common.collect.ImmutableEntry",
161:       "com.google.common.collect.AbstractTable$CellSet",
162:       "com.google.common.collect.Iterators$EmptyModifiableIterator",
163:       "com.google.common.collect.ImmutableCollection",
164:       "com.google.common.collect.ImmutableEnumMap",
165:       "com.google.common.collect.Tables",
166:       "com.google.common.collect.Synchronized$SynchronizedTable",
167:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
168:       "com.google.common.base.Objects",
169:       "com.google.common.collect.SingletonImmutableList",
170:       "com.google.common.base.Converter",
171:       "com.google.errorprone.annotations.DoNotMock",
172:       "com.google.common.collect.ImmutableCollection$Builder",
173:       "com.google.common.collect.Maps$8",
174:       "com.google.common.collect.BiMap",
175:       "com.google.common.collect.ImmutableTable$Builder",
176:       "com.google.common.collect.IndexedImmutableSet",
177:       "com.google.common.base.Function",
178:       "com.google.common.collect.ImmutableSet",
179:       "com.google.common.collect.Iterators$9",
180:       "com.google.common.collect.SortedSetMultimap",
181:       "com.google.common.collect.ImmutableMap",
182:       "com.google.common.collect.ImmutableMapEntry",
183:       "com.google.common.collect.ComparatorOrdering",
184:       "com.google.common.collect.DiscreteDomain$IntegerDomain",
185:       "com.google.common.collect.AbstractIndexedListIterator",
186:       "com.google.common.collect.Maps$1",
187:       "com.google.common.collect.CollectPreconditions",
188:       "com.google.common.collect.Iterators$1",
189:       "com.google.common.collect.Iterators$4",
190:       "com.google.common.collect.Iterators$5",
191:       "com.google.common.collect.Maps$3",
192:       "com.google.common.collect.DiscreteDomain$LongDomain",
193:       "com.google.common.base.ExtraObjectsMethodsForWeb",
194:       "com.google.common.collect.BoundType",
195:       "com.google.common.collect.ExplicitOrdering",
196:       "com.google.common.collect.StandardTable$RowMap$EntrySet$1",
197:       "com.google.common.collect.Cut$AboveValue",
198:       "com.google.common.collect.Maps$ViewCachingAbstractMap",
199:       "com.google.common.collect.ImmutableMap$1",
200:       "com.google.common.collect.ForwardingObject",
201:       "com.google.common.collect.Tables$1",
202:       "com.google.common.collect.AbstractTable",
203:       "com.google.common.collect.Multiset",
204:       "com.google.common.base.Supplier",
205:       "com.google.common.collect.Multimap",
206:       "com.google.common.collect.AbstractSequentialIterator",
207:       "com.google.common.collect.Iterators",
208:       "com.google.common.collect.CompoundOrdering",
209:       "com.google.common.collect.ImmutableBiMap",
210:       "com.google.common.collect.ImmutableList",
211:       "com.google.common.collect.ReverseOrdering",
212:       "com.google.common.collect.Table$Cell",
213:       "com.google.common.collect.ImmutableBiMapFauxverideShim",
214:       "com.google.common.collect.Synchronized",
215:       "com.google.common.collect.Tables$TransformedTable",
216:       "com.google.common.collect.Tables$AbstractCell",
217:       "com.google.common.collect.Cut$BelowAll",
218:       "com.google.common.collect.Tables$TransposeTable",
219:       "com.google.common.collect.Synchronized$SynchronizedSet",
220:       "com.google.common.collect.ReverseNaturalOrdering",
221:       "com.google.common.collect.Maps",
222:       "com.google.common.collect.ImmutableMap$Builder",
223:       "com.google.common.collect.SetMultimap",
224:       "com.google.common.collect.TransformedIterator",
225:       "com.google.common.collect.DescendingImmutableSortedSet",
226:       "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
227:       "com.google.common.collect.Maps$EntryTransformer",
228:       "com.google.common.collect.Ordering",
229:       "com.google.common.collect.Synchronized$SynchronizedObject",
230:       "com.google.common.collect.Tables$UnmodifiableTable",
231:       "com.google.common.collect.ImmutableTable",
232:       "com.google.common.collect.ImmutableTable$SerializedForm",
233:       "com.google.common.collect.NaturalOrdering",
234:       "com.google.common.collect.RegularImmutableTable",
235:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
236:       "com.google.common.collect.Iterators$MergingIterator",
237:       "com.google.common.collect.RegularImmutableMap$Values",
238:       "com.google.common.collect.RegularImmutableSortedSet",
239:       "com.google.common.collect.Cut$AboveAll",
240:       "com.google.common.collect.Table"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Tables_6_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.common.collect.Tables$1",
249:       "com.google.common.collect.Tables",
250:       "com.google.common.collect.Tables$AbstractCell",
251:       "com.google.common.collect.Tables$ImmutableCell",
252:       "com.google.common.collect.AbstractTable",
253:       "com.google.common.collect.Tables$TransposeTable$1",
254:       "com.google.common.collect.Tables$TransposeTable",
255:       "com.google.common.collect.Tables$TransformedTable",
256:       "com.google.common.collect.ForwardingObject",
257:       "com.google.common.collect.ForwardingTable",
258:       "com.google.common.collect.Tables$UnmodifiableTable",
259:       "com.google.common.collect.Tables$UnmodifiableRowSortedMap",
260:       "com.google.common.base.Preconditions",
261:       "com.google.common.collect.StandardTable",
262:       "com.google.common.collect.StandardRowSortedTable",
263:       "com.google.common.collect.TreeBasedTable",
264:       "com.google.common.collect.TreeBasedTable$Factory",
265:       "com.google.common.collect.Ordering",
266:       "com.google.common.collect.NaturalOrdering",
267:       "com.google.common.collect.ImmutableCollection",
268:       "com.google.common.collect.ImmutableSet",
269:       "com.google.common.collect.ImmutableSet$CachingAsList",
270:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
271:       "com.google.common.collect.ImmutableSortedSet",
272:       "com.google.common.collect.ImmutableList",
273:       "com.google.common.collect.RegularImmutableList",
274:       "com.google.common.collect.RegularImmutableSortedSet",
275:       "com.google.common.collect.ImmutableTable",
276:       "com.google.common.collect.RegularImmutableTable",
277:       "com.google.common.collect.Maps$ViewCachingAbstractMap",
278:       "com.google.common.collect.StandardTable$RowMap",
279:       "com.google.common.collect.StandardRowSortedTable$RowSortedMap",
280:       "com.google.common.collect.AbstractTable$CellSet",
281:       "com.google.common.collect.StandardTable$CellIterator",
282:       "com.google.common.collect.Iterators",
283:       "com.google.common.collect.Iterators$EmptyModifiableIterator",
284:       "com.google.common.collect.Sets$ImprovedAbstractSet",
285:       "com.google.common.collect.Maps$KeySet",
286:       "com.google.common.collect.Maps$SortedKeySet",
287:       "com.google.common.collect.StandardTable$TableSet",
288:       "com.google.common.collect.StandardTable$RowMap$EntrySet",
289:       "com.google.common.collect.StandardTable$RowMap$EntrySet$1",
290:       "com.google.common.collect.Maps",
291:       "com.google.common.collect.TransformedIterator",
292:       "com.google.common.collect.Maps$3",
293:       "com.google.common.collect.Maps$1",
294:       "com.google.common.collect.RangeGwtSerializationDependencies",
295:       "com.google.common.collect.Cut",
296:       "com.google.common.collect.Cut$BelowAll",
297:       "com.google.common.collect.Cut$AboveAll",
298:       "com.google.common.collect.Range",
299:       "com.google.common.collect.Cut$BelowValue",
300:       "com.google.common.collect.DiscreteDomain",
301:       "com.google.common.collect.DiscreteDomain$IntegerDomain",
302:       "com.google.common.collect.ContiguousSet",
303:       "com.google.common.collect.RegularContiguousSet",
304:       "com.google.common.collect.Range$1",
305:       "com.google.common.collect.Cut$AboveValue",
306:       "com.google.common.primitives.Booleans",
307:       "com.google.common.collect.EmptyContiguousSet",
308:       "com.google.common.collect.HashBasedTable",
309:       "com.google.common.collect.CollectPreconditions",
310:       "com.google.common.collect.HashBasedTable$Factory",
311:       "com.google.common.collect.StandardTable$ColumnMap",
312:       "com.google.common.collect.AbstractMapEntry",
313:       "com.google.common.collect.ImmutableEntry",
314:       "com.google.common.collect.ImmutableMapEntry",
315:       "com.google.common.collect.Maps$Values",
316:       "com.google.common.collect.Maps$2",
317:       "com.google.common.base.Strings",
318:       "com.google.common.base.ExtraObjectsMethodsForWeb",
319:       "com.google.common.base.Objects",
320:       "com.google.common.collect.RegularImmutableSet",
321:       "com.google.common.collect.ImmutableMap$Builder",
322:       "com.google.common.collect.UnmodifiableIterator",
323:       "com.google.common.collect.UnmodifiableListIterator",
324:       "com.google.common.collect.AbstractIndexedListIterator",
325:       "com.google.common.collect.Iterators$ArrayItr",
326:       "com.google.common.collect.ImmutableMap",
327:       "com.google.common.collect.RegularImmutableMap",
328:       "com.google.common.collect.SparseImmutableTable",
329:       "com.google.common.collect.CollectSpliterators",
330:       "com.google.common.collect.CollectSpliterators$FlatMapSpliterator",
331:       "com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject",
332:       "com.google.common.collect.Synchronized",
333:       "com.google.common.collect.Synchronized$SynchronizedObject",
334:       "com.google.common.collect.Synchronized$SynchronizedTable",
335:       "com.google.common.collect.StandardTable$Column",
336:       "com.google.common.collect.Synchronized$SynchronizedCollection",
337:       "com.google.common.collect.Synchronized$SynchronizedSet",
338:       "com.google.common.collect.AbstractMultimap",
339:       "com.google.common.collect.AbstractMapBasedMultimap",
340:       "com.google.common.collect.AbstractSetMultimap",
341:       "com.google.common.collect.HashMultimapGwtSerializationDependencies",
342:       "com.google.common.collect.HashMultimap",
343:       "com.google.common.collect.Platform",
344:       "com.google.common.collect.BoundType"
345:     );
346:   }
347: }

[MASTER] 04:49:52.283 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
ImmutableTable<Integer, Object, Integer> immutableTable0 = ImmutableTable.of();
HashBasedTable<Object, Object, Integer> hashBasedTable0 = HashBasedTable.create((Table<?, ?, ? extends Integer>) immutableTable0);
Table<Comparable<HashMap>, Object, Integer> table0 = Tables.synchronizedTable((Table<Comparable<HashMap>, Object, Integer>) hashBasedTable0);
boolean boolean0 = Tables.equalsImpl(hashBasedTable0, table0);
assertTrue(boolean0);


* Writing tests to file
* Writing JUnit test case 'Tables_ESTest' to evosuite-tests
* Done!

* Computation finished
