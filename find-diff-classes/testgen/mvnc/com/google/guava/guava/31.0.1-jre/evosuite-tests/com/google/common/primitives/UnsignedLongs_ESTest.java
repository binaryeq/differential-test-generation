/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:56:50 GMT 2024
 */

package com.google.common.primitives;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.primitives.UnsignedLongs;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnsignedLongs_ESTest extends UnsignedLongs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = UnsignedLongs.toString((-1L), 4);
      assertEquals("33333333333333333333333333333333", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = UnsignedLongs.toString(1511L, 36);
      assertEquals("15z", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong("2d3fgb0b9cg4b953", 36);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Too large for unsigned long: 2d3fgb0b9cg4b953
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = UnsignedLongs.remainder((-218L), 9223372036854775807L);
      assertEquals(9223372036854775591L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.remainder(18446744073709534L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = UnsignedLongs.remainder(1781L, 1781L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = UnsignedLongs.remainder((-666L), (-3692L));
      assertEquals(3026L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = UnsignedLongs.divide(1844674407370955L, 4611686018427387904L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = UnsignedLongs.divide((-703L), (-704L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 9223372036854775795L;
      UnsignedLongs.sortDescending(longArray0);
      assertArrayEquals(new long[] {9223372036854775795L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[0];
      UnsignedLongs.LexicographicalComparator unsignedLongs_LexicographicalComparator0 = UnsignedLongs.LexicographicalComparator.INSTANCE;
      long[] longArray1 = new long[3];
      int int0 = unsignedLongs_LexicographicalComparator0.compare(longArray0, longArray1);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-4490L);
      UnsignedLongs.LexicographicalComparator unsignedLongs_LexicographicalComparator0 = UnsignedLongs.LexicographicalComparator.INSTANCE;
      long[] longArray1 = new long[8];
      int int0 = unsignedLongs_LexicographicalComparator0.compare(longArray0, longArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[8];
      UnsignedLongs.sort(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = UnsignedLongs.remainder((-631L), (-1L));
      assertEquals((-631L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = UnsignedLongs.parseUnsignedLong("0", 35);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = UnsignedLongs.parseUnsignedLong("10", 18);
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = UnsignedLongs.parseUnsignedLong("00000000000000000000");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = UnsignedLongs.parseUnsignedLong("8");
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9223372036854775797L;
      longArray0[1] = (-2561L);
      long long0 = UnsignedLongs.min(longArray0);
      assertEquals(9223372036854775797L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2460L);
      longArray0[4] = (-1L);
      long long0 = UnsignedLongs.min(longArray0);
      assertEquals((-2460L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1469L);
      long long0 = UnsignedLongs.max(longArray0);
      assertEquals((-1469L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = UnsignedLongs.divide((-335L), 1L);
      assertEquals((-335L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = UnsignedLongs.decode("0");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = UnsignedLongs.decode("9223372036854775795");
      assertEquals(9223372036854775795L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = UnsignedLongs.compare(9223372036854775797L, 9223372036854775797L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = UnsignedLongs.compare((-11L), 9223372036854775807L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.sortDescending((long[]) null, 9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        UnsignedLongs.sortDescending(longArray0, 63, 63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be greater than size (java.lang.Integer@0000000003)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.sort((long[]) null, 3901, 3901);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        UnsignedLongs.sort(longArray0, (-2146405592), (-2146405592));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong((String) null, 2045222521);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.min((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.max((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.join("", (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[12];
      // Undeclared exception!
      try { 
        UnsignedLongs.join((String) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.divide(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.ParseRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = UnsignedLongs.toString((-1255L), 18);
      assertEquals("2d3fgb0b9cg4b953", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = UnsignedLongs.toString(0L, 6);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong("y", 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // y
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = UnsignedLongs.parseUnsignedLong("2d3fgb0b9cg4b953", 18);
      assertEquals((-1255L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong("", Integer.MAX_VALUE);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // empty string
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = UnsignedLongs.divide((-9223372036854775808L), 9223372036854775807L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = UnsignedLongs.divide((-218L), 87L);
      assertEquals(212031541077121280L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[12];
      UnsignedLongs.sortDescending(longArray0, 2, 10);
      assertEquals(12, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = UnsignedLongs.compare(1L, (-2928L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = UnsignedLongs.toString((-1225L), 2);
      assertEquals("1111111111111111111111111111111111111111111111111111101100110111", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.toString((long) 134, 134);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // radix (java.lang.Integer@0000000001) must be between Character.MIN_RADIX and Character.MAX_RADIX
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.toString((long) 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // radix (java.lang.Integer@0000000001) must be between Character.MIN_RADIX and Character.MAX_RADIX
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = UnsignedLongs.decode("18446744073709551615");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong("UnsignedLongs.lexicographicalComparator()", 32);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Too large for unsigned long: UnsignedLongs.lexicographicalComparator()
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.decode("1111111111111111111111111111111111111111111111111111101100110111");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Error parsing value: 1111111111111111111111111111111111111111111111111111101100110111
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.decode("18446744073709551597");
       //  fail("Expecting exception: NumberFormatException");
       // Unstable assertion
      } catch(NumberFormatException e) {
         //
         // Error parsing value: 18446744073709551597
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong("|~", 64);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // illegal radix: 64
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong("J z#CZfh|}X", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // illegal radix: 1
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.parseUnsignedLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // empty string
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = UnsignedLongs.remainder((-1L), 9762413458372L);
      assertEquals(488319L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.remainder(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.primitives.UnsignedLongs", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = UnsignedLongs.remainder((-9223372036854775808L), (-9223372036854775808L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = UnsignedLongs.remainder((-1367L), 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = UnsignedLongs.toString((-9223372036854775808L), 3);
      assertEquals("2021110011022210012102010021220101220222", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long long0 = UnsignedLongs.divide((-705L), (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long long0 = UnsignedLongs.divide((-1L), (-1L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long[] longArray0 = new long[8];
      UnsignedLongs.sort(longArray0, 1, 2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long[] longArray0 = new long[4];
      UnsignedLongs.LexicographicalComparator unsignedLongs_LexicographicalComparator0 = UnsignedLongs.LexicographicalComparator.INSTANCE;
      long[] longArray1 = new long[5];
      longArray1[0] = 255L;
      int int0 = unsignedLongs_LexicographicalComparator0.compare(longArray1, longArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long[] longArray0 = new long[4];
      UnsignedLongs.LexicographicalComparator unsignedLongs_LexicographicalComparator0 = UnsignedLongs.LexicographicalComparator.INSTANCE;
      int int0 = unsignedLongs_LexicographicalComparator0.compare(longArray0, longArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = UnsignedLongs.join(";,`2k1u,", longArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long[] longArray0 = new long[20];
      String string0 = UnsignedLongs.join("", longArray0);
      assertEquals("00000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1287L;
      long long0 = UnsignedLongs.max(longArray0);
      assertEquals(1287L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = UnsignedLongs.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        UnsignedLongs.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 4231L;
      long long0 = UnsignedLongs.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        UnsignedLongs.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Comparator<long[]> comparator0 = UnsignedLongs.lexicographicalComparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.sort((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedLongs.sortDescending((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long long0 = UnsignedLongs.parseUnsignedLong("18446744073709549272");
      assertEquals((-2344L), long0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = UnsignedLongs.toString((-19L));
      assertEquals("18446744073709551597", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UnsignedLongs.LexicographicalComparator unsignedLongs_LexicographicalComparator0 = UnsignedLongs.LexicographicalComparator.INSTANCE;
      String string0 = unsignedLongs_LexicographicalComparator0.toString();
      assertEquals("UnsignedLongs.lexicographicalComparator()", string0);
  }
}
