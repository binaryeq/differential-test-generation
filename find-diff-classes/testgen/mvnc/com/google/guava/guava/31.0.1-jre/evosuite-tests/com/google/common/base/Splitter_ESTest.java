/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:15:40 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.CharMatcher;
import com.google.common.base.Splitter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Splitter_ESTest extends Splitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Splitter splitter0 = Splitter.fixedLength(1692);
      // Undeclared exception!
      try { 
        splitter0.limit(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be greater than zero: java.lang.Integer@0000000003
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.fixedLength(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The length may not be less than 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Splitter splitter0 = Splitter.on(".`hJA?m<a");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ".`hJA?m<a");
      StringWriter stringWriter2 = stringWriter1.append('-');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      List<String> list0 = splitter0.splitToList(stringBuffer0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Splitter splitter0 = Splitter.on("V;2,Yh=6LLcM=7~(WS");
      Splitter.MapSplitter splitter_MapSplitter0 = splitter0.withKeyValueSeparator("V;2,Yh=6LLcM=7~(WS");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('@');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "V;2,Yh=6LLcM=7~(WS");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        splitter_MapSplitter0.split(stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Chunk [java.lang.String@0000000011] is not a valid entry
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("com.google.common.collect.DiscreteDomain$1");
      Splitter.MapSplitter splitter_MapSplitter0 = splitter0.withKeyValueSeparator("#iWi  !lKHY-nX");
      // Undeclared exception!
      try { 
        splitter_MapSplitter0.split("com.google.common.collect.DiscreteDomain$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Chunk [java.lang.String@0000000015] is not a valid entry
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("f$");
      Splitter.MapSplitter splitter_MapSplitter0 = splitter0.withKeyValueSeparator(';');
      char[] charArray0 = new char[6];
      charArray0[2] = ';';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Map<String, String> map0 = splitter_MapSplitter0.split(charBuffer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Key '%s' not present in map");
      Splitter splitter0 = Splitter.on(pattern0);
      assertNotNull(splitter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("uX@7^\"^F%&\"EZ9J");
      // Undeclared exception!
      try { 
        splitter0.withKeyValueSeparator((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Splitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Splitter splitter0 = Splitter.on('D');
      // Undeclared exception!
      try { 
        splitter0.withKeyValueSeparator("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The separator may not be the empty string.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("com.google.common.base.CharMatcher$JavaLowerCase");
      // Undeclared exception!
      try { 
        splitter0.withKeyValueSeparator((Splitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Splitter splitter0 = Splitter.on("Ranges have a nonempty intersection: ");
      CharBuffer charBuffer0 = CharBuffer.allocate(87855567);
      // Undeclared exception!
      splitter0.splitToList(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Splitter splitter0 = Splitter.on("3Mr*wU?Sk`");
      // Undeclared exception!
      try { 
        splitter0.splitToList((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Splitter splitter0 = Splitter.fixedLength(1928);
      // Undeclared exception!
      try { 
        splitter0.split((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.onPattern("Go;n(E71;B");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // Go;n(E71;B
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.onPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      // Undeclared exception!
      try { 
        Splitter.on(pattern0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern may not match the empty string: com.google.common.base.JdkPattern@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.on((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Splitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.on((CharMatcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("C6-.c");
      Splitter splitter1 = splitter0.limit(1);
      List<String> list0 = splitter1.splitToList("C6-.c");
      assertTrue(list0.contains("C6-.c"));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Splitter splitter0 = Splitter.fixedLength(1);
      Splitter splitter1 = splitter0.limit(1);
      List<String> list0 = splitter1.splitToList("");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("com.gooNle.common.base.Splotter$5");
      Splitter splitter1 = splitter0.omitEmptyStrings();
      List<String> list0 = splitter1.splitToList("com.gooNle.common.base.Splotter$5");
      assertTrue(list0.contains("com.gooNle.common.base.Splotter$5"));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Splitter splitter0 = Splitter.on("Z,%GU$Y");
      Splitter splitter1 = splitter0.omitEmptyStrings();
      List<String> list0 = splitter1.splitToList("Z,%GU$Y");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Splitter splitter0 = Splitter.fixedLength(3833);
      Splitter splitter1 = splitter0.trimResults();
      List<String> list0 = splitter1.splitToList(" and ");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("com.google.common.base.CharMatcher$RangesMatcher");
      CharMatcher charMatcher0 = CharMatcher.ascii();
      Splitter splitter1 = splitter0.trimResults(charMatcher0);
      List<String> list0 = splitter1.splitToList("com.google.common.base.CharMatcher$RangesMatcher");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern(".`hJA?m<a");
      CharMatcher charMatcher0 = CharMatcher.anyOf(".`hJA?m<a");
      Splitter splitter1 = Splitter.on(charMatcher0);
      Splitter.MapSplitter splitter_MapSplitter0 = splitter0.withKeyValueSeparator(splitter1);
      // Undeclared exception!
      try { 
        splitter_MapSplitter0.split(".`hJA?m<a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Chunk [java.lang.String@0000000016] is not a valid entry
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("KYnta]T3&84%ccbc");
      // Undeclared exception!
      try { 
        splitter0.limit((-1256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be greater than zero: java.lang.Integer@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.fixedLength((-2593));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The length may not be less than 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.onPattern("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern may not match the empty string: com.google.common.base.JdkPattern@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.on("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The separator may not be the empty string.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Splitter splitter0 = Splitter.on("\"");
      List<String> list0 = splitter0.splitToList("\"");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("com.google.common.base.Splitter$5");
      Stream<String> stream0 = splitter0.splitToStream("com.google.common.base.Splitter$5");
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Splitter splitter0 = Splitter.onPattern("HE2?vI<K1lt0R5E^*");
      Iterable<String> iterable0 = splitter0.split("HE2?vI<K1lt0R5E^*");
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Splitter splitter0 = Splitter.on("0f)rNP{!N");
      // Undeclared exception!
      try { 
        splitter0.trimResults((CharMatcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Splitter.on((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Splitter splitter0 = Splitter.fixedLength(929);
      // Undeclared exception!
      try { 
        splitter0.splitToStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Splitter splitter0 = Splitter.fixedLength(10);
      List<String> list0 = splitter0.splitToList("The pattern may not match the empty string: %s");
      assertEquals(5, list0.size());
  }
}
