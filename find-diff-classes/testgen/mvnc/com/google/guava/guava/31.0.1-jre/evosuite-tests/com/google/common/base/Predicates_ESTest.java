/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:12:27 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.CharMatcher;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.common.collect.Range;
import java.lang.reflect.Array;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Predicates_ESTest extends Predicates_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Predicates.ObjectPredicate> arrayList0 = new ArrayList<Predicates.ObjectPredicate>();
      Predicate<Object> predicate0 = Predicates.and((Iterable<? extends Predicate<? super Object>>) arrayList0);
      Predicate<Object> predicate1 = Predicates.and((Iterable<? extends Predicate<? super Object>>) arrayList0);
      java.util.function.Predicate<Object> predicate2 = java.util.function.Predicate.isEqual((Object) predicate1);
      boolean boolean0 = predicate2.test(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      Predicate<Object> predicate0 = Predicates.not((Predicate<Object>) predicates_ObjectPredicate0);
      Predicate<Object> predicate1 = Predicates.or((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.NOT_NULL;
      Range<Predicates.ObjectPredicate> range0 = Range.singleton(predicates_ObjectPredicate0);
      Predicate<Predicates.ObjectPredicate> predicate0 = Predicates.equalTo(predicates_ObjectPredicate0);
      Predicate<Predicates.ObjectPredicate> predicate1 = Predicates.and((Predicate<? super Predicates.ObjectPredicate>) range0, (Predicate<? super Predicates.ObjectPredicate>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Predicates.ObjectPredicate>[] predicateArray0 = (Predicate<Predicates.ObjectPredicate>[]) Array.newInstance(Predicate.class, 3);
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.NOT_NULL;
      Range<Predicates.ObjectPredicate> range0 = Range.singleton(predicates_ObjectPredicate0);
      // Undeclared exception!
      try { 
        Predicates.and((Predicate<? super Predicates.ObjectPredicate>) predicateArray0[1], (Predicate<? super Predicates.ObjectPredicate>) range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.IS_NULL;
      Predicate<Object> predicate0 = predicates_ObjectPredicate0.withNarrowedType();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      Predicate<Class<CharMatcher>> predicate1 = Predicates.or((Predicate<? super Class<CharMatcher>>[]) predicateArray0);
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Predicate<CharMatcher>> predicate0 = Predicates.or((Iterable<? extends Predicate<? super Predicate<CharMatcher>>>) hashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashSet<CharMatcher> hashSet0 = new HashSet<CharMatcher>();
      Vector<CharMatcher> vector0 = new Vector<CharMatcher>(hashSet0);
      List<CharMatcher> list0 = Predicates.defensiveCopy((Iterable<CharMatcher>) vector0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashSet<Class<CharMatcher>> hashSet0 = new HashSet<Class<CharMatcher>>();
      Class<CharMatcher> class0 = CharMatcher.class;
      hashSet0.add(class0);
      List<Class<CharMatcher>> list0 = Predicates.defensiveCopy((Iterable<Class<CharMatcher>>) hashSet0);
      assertTrue(list0.contains(class0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicates.ObjectPredicate[] predicates_ObjectPredicateArray0 = Predicates.ObjectPredicate.values();
      Predicate<CharMatcher> predicate0 = Predicates.and((Predicate<? super CharMatcher>[]) predicates_ObjectPredicateArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.subtypeOf((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      // Undeclared exception!
      try { 
        Predicates.or((Predicate<? super Class<Object>>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.or((Predicate<? super Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.not((Predicate<CharMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.instanceOf((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.in((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.defensiveCopy((Iterable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Predicates", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.containsPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.contains((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      // Undeclared exception!
      try { 
        Predicates.and((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Predicates.ObjectPredicate> arrayList0 = new ArrayList<Predicates.ObjectPredicate>();
      arrayList0.add((Predicates.ObjectPredicate) null);
      // Undeclared exception!
      try { 
        Predicates.and((Iterable<? extends Predicate<? super Object>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Predicate<Object> predicate0 = Predicates.in((Collection<?>) arrayDeque0);
      Predicate<Object> predicate1 = Predicates.in((Collection<?>) arrayDeque0);
      arrayDeque0.add(predicate1);
      boolean boolean0 = predicate0.test(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Predicate<Object> predicate0 = Predicates.in((Collection<?>) arrayDeque0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) predicate0);
      boolean boolean0 = predicate1.test(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Predicates.ObjectPredicate> linkedHashSet0 = new LinkedHashSet<Predicates.ObjectPredicate>();
      Predicate<Object> predicate0 = Predicates.in((Collection<?>) linkedHashSet0);
      boolean boolean0 = predicate0.test(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Predicates.ObjectPredicate> class0 = Predicates.ObjectPredicate.class;
      Predicate<ArrayList<Object>> predicate0 = Predicates.instanceOf((Class<?>) class0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Predicates.ObjectPredicate> class0 = Predicates.ObjectPredicate.class;
      Predicate<ArrayList<Object>> predicate0 = Predicates.instanceOf((Class<?>) class0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) predicate0);
      boolean boolean0 = predicate1.test(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.NOT_NULL;
      Predicate<Object> predicate0 = Predicates.or((Predicate<? super Object>) predicates_ObjectPredicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      Predicate<Object> predicate0 = Predicates.or((Predicate<? super Object>) predicates_ObjectPredicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) predicate0);
      boolean boolean0 = predicate1.test(predicates_ObjectPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Predicates.ObjectPredicate> arrayList0 = new ArrayList<Predicates.ObjectPredicate>();
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.IS_NULL;
      arrayList0.add(predicates_ObjectPredicate0);
      Predicate<Object> predicate0 = Predicates.and((Iterable<? extends Predicate<? super Object>>) arrayList0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) predicate0);
      boolean boolean0 = arrayList0.removeIf(predicate1);
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Predicates.ObjectPredicate> arrayList0 = new ArrayList<Predicates.ObjectPredicate>();
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.IS_NULL;
      arrayList0.add(predicates_ObjectPredicate0);
      Predicate<Object> predicate0 = Predicates.and((Iterable<? extends Predicate<? super Object>>) arrayList0);
      boolean boolean0 = arrayList0.removeIf(predicate0);
      assertEquals(1, arrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Predicates.ObjectPredicate> arrayList0 = new ArrayList<Predicates.ObjectPredicate>();
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      arrayList0.add(predicates_ObjectPredicate0);
      Predicate<Object> predicate0 = Predicates.and((Iterable<? extends Predicate<? super Object>>) arrayList0);
      boolean boolean0 = arrayList0.removeIf(predicate0);
      assertFalse(arrayList0.contains(predicates_ObjectPredicate0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Predicates.ObjectPredicate> arrayList0 = new ArrayList<Predicates.ObjectPredicate>();
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.IS_NULL;
      arrayList0.add(predicates_ObjectPredicate0);
      Predicate<Object> predicate0 = Predicates.not((Predicate<Object>) predicates_ObjectPredicate0);
      boolean boolean0 = arrayList0.removeIf(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.NOT_NULL;
      Predicate<Object> predicate0 = Predicates.or((Predicate<? super Object>) predicates_ObjectPredicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      boolean boolean0 = predicate0.test(predicates_ObjectPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.NOT_NULL;
      Predicate<Object> predicate0 = Predicates.or((Predicate<? super Object>) predicates_ObjectPredicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      boolean boolean0 = predicate0.test((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.IS_NULL;
      boolean boolean0 = predicates_ObjectPredicate0.test((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Predicate<Object> predicate0 = Predicates.equalTo((Object) null);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_FALSE;
      Predicate<Object> predicate0 = Predicates.or((Predicate<? super Object>) predicates_ObjectPredicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      boolean boolean0 = predicate0.test(predicates_ObjectPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Predicate<CharSequence> predicate0 = Predicates.containsPattern("xid7Pm9qq^yt=!");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_FALSE;
      Predicates.ObjectPredicate predicates_ObjectPredicate1 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      // Undeclared exception!
      try { 
        EnumSet.range(predicates_ObjectPredicate0, predicates_ObjectPredicate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicates.alwaysFalse() > Predicates.alwaysTrue()
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<Predicates.ObjectPredicate> linkedHashSet0 = new LinkedHashSet<Predicates.ObjectPredicate>();
      Predicate<Object> predicate0 = Predicates.in((Collection<?>) linkedHashSet0);
      boolean boolean0 = linkedHashSet0.contains(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      Converter<Object, Object> converter0 = Converter.identity();
      Predicate<Object> predicate0 = Predicates.compose((Predicate<Object>) predicates_ObjectPredicate0, (Function<Object, ?>) converter0);
      boolean boolean0 = predicate0.test(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.and((Iterable<? extends Predicate<? super Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Predicates", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("", 1519);
      Predicate<CharSequence> predicate0 = Predicates.contains(pattern0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<CharMatcher> class0 = CharMatcher.class;
      Predicate<Class<?>> predicate0 = Predicates.subtypeOf(class0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Predicate<Class<Object>> predicate0 = Predicates.notNull();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.or((Iterable<? extends Predicate<? super Predicates.ObjectPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Predicates", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Predicate<Object> predicate0 = Predicates.isNull();
      // Undeclared exception!
      try { 
        Predicates.compose(predicate0, (Function<ArrayList<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.or((Predicate<? super Predicate<CharMatcher>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.and((Predicate<? super ArrayList<Predicates.ObjectPredicate>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      Predicate<Object> predicate0 = Predicates.or((Predicate<? super Object>) predicates_ObjectPredicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      Predicate<Object> predicate1 = Predicates.not(predicate0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      boolean boolean0 = predicate1.test(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Predicates.containsPattern("&Pn1JWN3kg{6.gn5");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed counted closure near index 12
         // &Pn1JWN3kg{6.gn5
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Predicate<Object> predicate0 = Predicates.alwaysFalse();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Predicate<Predicates.ObjectPredicate> predicate0 = Predicates.alwaysTrue();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      Predicate<Object> predicate0 = Predicates.or((Predicate<? super Object>) predicates_ObjectPredicate0, (Predicate<? super Object>) predicates_ObjectPredicate0);
      Predicates.ObjectPredicate predicates_ObjectPredicate1 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      Predicate<Object> predicate1 = Predicates.equalTo((Object) predicates_ObjectPredicate1);
      boolean boolean0 = predicate1.test(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.IS_NULL;
      // Undeclared exception!
      try { 
        Range.open(predicates_ObjectPredicate0, predicates_ObjectPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: (Predicates.isNull()..Predicates.isNull())
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = Predicates.instanceOf((Class<?>) class0);
      boolean boolean0 = predicate0.test(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.NOT_NULL;
      Predicates.ObjectPredicate predicates_ObjectPredicate1 = Predicates.ObjectPredicate.ALWAYS_FALSE;
      // Undeclared exception!
      try { 
        Range.closed(predicates_ObjectPredicate0, predicates_ObjectPredicate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: [Predicates.notNull()..Predicates.alwaysFalse()]
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }
}
