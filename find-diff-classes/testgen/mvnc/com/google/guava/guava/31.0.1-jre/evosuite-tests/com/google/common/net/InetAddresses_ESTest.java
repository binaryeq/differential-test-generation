/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:46:18 GMT 2024
 */

package com.google.common.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.net.InetAddresses;
import java.math.BigInteger;
import java.net.Inet4Address;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InetAddresses_ESTest extends InetAddresses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger(8);
      boolean boolean0 = InetAddresses.isMaximum(inet4Address0);
      assertEquals("/0.0.0.8", inet4Address0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger((-1083));
      InetAddress inetAddress0 = InetAddresses.increment(inet4Address0);
      assertEquals("255.255.251.198", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger((-536870912));
      InetAddress inetAddress0 = InetAddresses.decrement(inet4Address0);
      assertEquals("/223.255.255.255", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1548, mockRandom0);
      // Undeclared exception!
      try { 
        InetAddresses.fromIPv6BigInteger(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BigInteger cannot be converted to InetAddress because it has more than 16 bytes: 143665816071237431556343778462384667013380584806769638791750039201101899707234335011731768450968399240090405173481560784323648850196753851380775645932022426471296022236922697722579908343260703567462637583451144419059267990746567233171496698804774050804020702953372417005966573300533208045865992145791975329191206560237384933041164630946958773309120487314712302164123999057724000109823532576979137512978856520311378982541242644190924892846573514502751399936
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLoopbackAddress();
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 65535, 65535);
      assertEquals(65535, inetAddresses_TeredoInfo0.getPort());
      assertEquals(65535, inetAddresses_TeredoInfo0.getFlags());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getByName("9ByByWhCV8`fNy=h");
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 0, 1815);
      assertEquals(0, inetAddresses_TeredoInfo0.getPort());
      assertEquals(1815, inetAddresses_TeredoInfo0.getFlags());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = InetAddresses.isInetAddress("#b*a_ckw,r?BGZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("J9?ArBGn");
      BigInteger bigInteger0 = InetAddresses.toBigInteger(inetAddress0);
      assertEquals((short)10752, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = InetAddresses.increment(inetAddress0);
      assertEquals("192.168.1.43", inetAddress1.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = InetAddresses.increment(inetAddress0);
      assertEquals("/127.0.0.2", inetAddress1.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      Inet4Address inet4Address0 = InetAddresses.getCoercedIPv4Address(inetAddress0);
      assertFalse(inet4Address0.isMCOrgLocal());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)10;
      InetAddress inetAddress0 = InetAddresses.fromLittleEndianByteArray(byteArray0);
      assertEquals("10.0.0.0", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)7;
      InetAddress inetAddress0 = InetAddresses.fromLittleEndianByteArray(byteArray0);
      assertEquals("/0.0.7.0", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger((-536870912));
      InetAddress inetAddress0 = InetAddresses.increment(inet4Address0);
      assertEquals("/224.0.0.1", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger((-430675100));
      assertEquals("230.84.107.100", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger(Integer.MAX_VALUE);
      InetAddress inetAddress0 = InetAddresses.increment(inet4Address0);
      assertEquals("/128.0.0.0", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger(0);
      assertTrue(inet4Address0.isAnyLocalAddress());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      BigInteger bigInteger0 = InetAddresses.toBigInteger(inetAddress0);
      Inet4Address inet4Address0 = InetAddresses.fromIPv4BigInteger(bigInteger0);
      assertFalse(inet4Address0.isMCLinkLocal());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Inet4Address inet4Address0 = InetAddresses.fromIPv4BigInteger(bigInteger0);
      BigInteger bigInteger1 = InetAddresses.toBigInteger(inet4Address0);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forUriString("192.168.1.42");
      assertTrue(inetAddress0.isSiteLocalAddress());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forUriString("224.0.0.0");
      assertTrue(inetAddress0.isMCLinkLocal());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forUriString("127.0.0.1");
      assertEquals("/127.0.0.1", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forUriString("0.0.0.0");
      assertEquals("0.0.0.0", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forString("192.168.1.42");
      assertTrue(inetAddress0.isSiteLocalAddress());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forString("127.0.0.1");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forString("0.0.0.0");
      assertTrue(inetAddress0.isAnyLocalAddress());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      InetAddress inetAddress1 = InetAddresses.decrement(inetAddress0);
      assertEquals("/192.168.1.41", inetAddress1.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      InetAddress inetAddress1 = InetAddresses.decrement(inetAddress0);
      assertEquals("127.0.0.0", inetAddress1.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Inet4Address inet4Address0 = InetAddresses.fromIPv4BigInteger(bigInteger0);
      InetAddress inetAddress0 = InetAddresses.decrement(inet4Address0);
      assertEquals("0.0.0.1", inet4Address0.getHostAddress());
      assertEquals("0.0.0.0", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      int int0 = InetAddresses.coerceToInteger(inetAddress0);
      assertEquals((-1062731478), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.toUriString((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.toBigInteger((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.toAddrString((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.isUriInetAddress((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.isTeredoAddress((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.isMaximum((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.isMappedIPv4Address((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.isIsatapAddress((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.isInetAddress((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.isCompatIPv4Address((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.is6to4Address((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.increment((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      InetAddress inetAddress0 = InetAddress.getByAddress("?j8E jJt", byteArray0);
      // Undeclared exception!
      try { 
        InetAddresses.increment(inetAddress0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.hasEmbeddedIPv4ClientAddress((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.getTeredoInfo((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = Inet6Address.getByAddress("?j8E {Jt", byteArray0, (NetworkInterface) null);
      // Undeclared exception!
      try { 
        InetAddresses.getTeredoInfo(inet6Address0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Address 'java.lang.String@0000000001' is not a Teredo address.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.getEmbeddedIPv4ClientAddress((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.getCompatIPv4Address((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.getCoercedIPv4Address((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress(byteArray0);
      // Undeclared exception!
      try { 
        InetAddresses.get6to4IPv4Address(inet6Address0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Address 'java.lang.String@0000000001' is not a 6to4 address.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        InetAddresses.fromLittleEndianByteArray(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.fromLittleEndianByteArray((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.fromIPv6BigInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.fromIPv4BigInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forUriString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.decrement((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.coerceToInteger((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Inet4Address inet4Address0 = InetAddresses.getCoercedIPv4Address(inetAddress0);
      assertEquals("192.168.1.42", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress("?j8E jJt", byteArray0);
      boolean boolean0 = InetAddresses.isIsatapAddress(inet6Address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = Inet6Address.getByAddress(".H^", byteArray0, (NetworkInterface) null);
      boolean boolean0 = InetAddresses.isTeredoAddress(inet6Address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress("C?j8E jJt", byteArray0);
      boolean boolean0 = InetAddresses.is6to4Address(inet6Address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress("?j8E jJt", byteArray0);
      boolean boolean0 = InetAddresses.isCompatIPv4Address(inet6Address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = InetAddresses.toAddrString(inetAddress0);
      assertEquals("127.0.0.1", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      InetAddress inetAddress0 = InetAddress.getByAddress("?j8E jJt", byteArray0);
      String string0 = InetAddresses.toAddrString(inetAddress0);
      assertEquals("::", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("9ByByWhCV8`fNy=h");
      boolean boolean0 = InetAddresses.isMaximum(inetAddress0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger((-1));
      boolean boolean0 = InetAddresses.isMaximum(inet4Address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger((-1));
      // Undeclared exception!
      try { 
        InetAddresses.increment(inet4Address0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incrementing java.net.Inet4Address@0000000001 would wrap.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("0");
      // Undeclared exception!
      try { 
        InetAddresses.decrement(inetAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Decrementing java.net.Inet4Address@0000000001 would wrap.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = InetAddresses.fromLittleEndianByteArray(byteArray0);
      int int0 = InetAddresses.coerceToInteger(inetAddress0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-56);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        InetAddresses.fromIPv4BigInteger(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BigInteger cannot be converted to InetAddress because it has more than 4 bytes: 858993459200
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-1));
      // Undeclared exception!
      try { 
        InetAddresses.fromIPv6BigInteger(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BigInteger must be greater than or equal to 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      InetAddress inetAddress0 = InetAddress.getByAddress("C?j8E jJt", byteArray0);
      Inet4Address inet4Address0 = InetAddresses.getCoercedIPv4Address(inetAddress0);
      assertEquals("0.0.0.0", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = InetAddresses.isMappedIPv4Address("0.0.0.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = InetAddresses.isMappedIPv4Address("::");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress("[com.google.common.base.CharMatcher$None", byteArray0);
      // Undeclared exception!
      try { 
        InetAddresses.getEmbeddedIPv4ClientAddress(inet6Address0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // '::' has no embedded IPv4 address.
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress("?j8E jJt", byteArray0);
      // Undeclared exception!
      try { 
        InetAddresses.getIsatapIPv4Address(inet6Address0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Address 'java.lang.String@0000000001' is not an ISATAP address.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLoopbackAddress();
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = null;
      try {
        inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 3842, 2147483639);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // flags 'java.lang.Integer@0000000001' is out of range (0 <= flags <= 0xffff)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)InetAddress.getLocalHost();
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = null;
      try {
        inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 465, (-130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // flags 'java.lang.Integer@0000000001' is out of range (0 <= flags <= 0xffff)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger(127);
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = null;
      try {
        inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 2147483639, 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port 'java.lang.Integer@0000000001' is out of range (0 <= port <= 0xffff)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = null;
      try {
        inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo((Inet4Address) null, (Inet4Address) null, (-6254807), (-6254807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port 'java.lang.Integer@0000000001' is out of range (0 <= port <= 0xffff)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress("C?j8E jJt", byteArray0);
      boolean boolean0 = InetAddresses.hasEmbeddedIPv4ClientAddress(inet6Address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = InetAddresses.isUriInetAddress("127.0.0.1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forUriString("::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a valid URI IP literal: '::'
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = InetAddresses.isUriInetAddress("[Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forUriString("[::]");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InetAddress inetAddress0 = InetAddresses.forUriString("255.255.255.82");
      assertEquals("255.255.255.82", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      InetAddress inetAddress0 = InetAddress.getByAddress(byteArray0);
      String string0 = InetAddresses.toUriString(inetAddress0);
      assertEquals("[::]", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forUriString(".C%O&Pe8{g5vJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a valid URI IP literal: '.C%O&Pe8{g5vJ'
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = InetAddresses.isUriInetAddress("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forUriString(":.C%O&Pe8{g5vJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a valid URI IP literal: ':.C%O&Pe8{g5vJ'
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = InetAddresses.isMappedIPv4Address(":C%O&Je8{g5v\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = InetAddresses.isInetAddress("0.0.0.0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forString("Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'Z' is not an IP string literal.
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.forString("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        InetAddresses.fromIPv6BigInteger(bigInteger0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      int int0 = InetAddresses.coerceToInteger(inetAddress0);
      assertEquals(2130706433, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.get6to4IPv4Address((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Inet6Address inet6Address0 = (Inet6Address)InetAddress.getByAddress("C?j8E jJt", byteArray0);
      // Undeclared exception!
      try { 
        InetAddresses.getCompatIPv4Address(inet6Address0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Address 'java.lang.String@0000000001' is not IPv4-compatible.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Inet4Address inet4Address0 = InetAddresses.fromInteger((-1049));
      BigInteger bigInteger0 = InetAddresses.toBigInteger(inet4Address0);
      Inet4Address inet4Address1 = InetAddresses.fromIPv4BigInteger(bigInteger0);
      assertEquals("255.255.251.231", inet4Address1.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        InetAddresses.getIsatapIPv4Address((Inet6Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.net.InetAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      BigInteger bigInteger0 = InetAddresses.toBigInteger(inetAddress0);
      Inet4Address inet4Address0 = InetAddresses.fromIPv4BigInteger(bigInteger0);
      assertEquals("127.0.0.1", inet4Address0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo((Inet4Address) null, (Inet4Address) null, 2, 2);
      inetAddresses_TeredoInfo0.getServer();
      assertEquals(2, inetAddresses_TeredoInfo0.getFlags());
      assertEquals(2, inetAddresses_TeredoInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getByName("9ByByWhCV8`fNy=h");
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 5, 0);
      inetAddresses_TeredoInfo0.getClient();
      assertEquals(0, inetAddresses_TeredoInfo0.getFlags());
      assertEquals(5, inetAddresses_TeredoInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getByName("9ByByWhCV8`fNy=h");
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 2283, 2283);
      int int0 = inetAddresses_TeredoInfo0.getFlags();
      assertEquals(2283, inetAddresses_TeredoInfo0.getPort());
      assertEquals(2283, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getByName((String) null);
      InetAddresses.TeredoInfo inetAddresses_TeredoInfo0 = new InetAddresses.TeredoInfo(inet4Address0, inet4Address0, 11, 61);
      int int0 = inetAddresses_TeredoInfo0.getPort();
      assertEquals(61, inetAddresses_TeredoInfo0.getFlags());
      assertEquals(11, int0);
  }
}
