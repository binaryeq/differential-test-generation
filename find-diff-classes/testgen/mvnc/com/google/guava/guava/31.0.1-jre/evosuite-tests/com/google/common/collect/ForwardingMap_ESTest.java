/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:59:10 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.DescendingImmutableSortedSet;
import com.google.common.collect.EnumBiMap;
import com.google.common.collect.EnumHashBiMap;
import com.google.common.collect.ForwardingMap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Maps;
import com.google.common.collect.MutableClassToInstanceMap;
import com.google.common.collect.RegularImmutableSortedSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ForwardingMap_ESTest extends ForwardingMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumHashBiMap<Locale.Category, DescendingImmutableSortedSet<Locale.Category>> enumHashBiMap0 = EnumHashBiMap.create(class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Locale.Category> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Locale.Category>) comparator0);
      DescendingImmutableSortedSet<Locale.Category> descendingImmutableSortedSet0 = new DescendingImmutableSortedSet<Locale.Category>(regularImmutableSortedSet0);
      DescendingImmutableSortedSet<Locale.Category> descendingImmutableSortedSet1 = enumHashBiMap0.put(locale_Category0, descendingImmutableSortedSet0);
      assertNull(descendingImmutableSortedSet1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumHashBiMap<Locale.Category, DescendingImmutableSortedSet<Locale.Category>> enumHashBiMap0 = EnumHashBiMap.create(class0);
      boolean boolean0 = enumHashBiMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumHashBiMap<BoundType, BoundType> enumHashBiMap0 = EnumHashBiMap.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      enumHashBiMap0.put(boundType0, boundType0);
      EnumBiMap<BoundType, BoundType> enumBiMap0 = EnumBiMap.create((Map<BoundType, BoundType>) enumHashBiMap0);
      assertNotNull(enumBiMap0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumBiMap<BoundType, BoundType> enumBiMap0 = EnumBiMap.create(class0, class0);
      ForwardingMap.StandardKeySet forwardingMap_StandardKeySet0 = enumBiMap0.new StandardKeySet();
      assertEquals(0, forwardingMap_StandardKeySet0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableClassToInstanceMap<Object> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = mutableClassToInstanceMap0.put((Class<?>) class0, (Object) locale_Category0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeMap<BoundType, BoundType> treeMap0 = new TreeMap<BoundType, BoundType>();
      Maps.UnmodifiableNavigableMap<BoundType, BoundType> maps_UnmodifiableNavigableMap0 = new Maps.UnmodifiableNavigableMap<BoundType, BoundType>(treeMap0, (Maps.UnmodifiableNavigableMap<BoundType, BoundType>) null);
      int int0 = maps_UnmodifiableNavigableMap0.standardHashCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumBiMap<Locale.FilteringMode, Locale.FilteringMode> enumBiMap0 = EnumBiMap.create(class0, class0);
      enumBiMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumHashBiMap<BoundType, BoundType> enumHashBiMap0 = EnumHashBiMap.create(class0);
      String string0 = enumHashBiMap0.standardToString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumHashBiMap<BoundType, BoundType> enumHashBiMap0 = EnumHashBiMap.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      enumHashBiMap0.put(boundType0, boundType0);
      BoundType boundType1 = enumHashBiMap0.put(boundType0, boundType0);
      assertSame(boundType1, boundType0);
  }
}
