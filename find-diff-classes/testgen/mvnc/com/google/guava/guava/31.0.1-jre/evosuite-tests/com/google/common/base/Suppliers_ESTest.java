/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:20:32 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Suppliers_ESTest extends Suppliers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<Integer> supplier0 = Suppliers.ofInstance((Integer) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Suppliers.ExpiringMemoizingSupplier<Integer> suppliers_ExpiringMemoizingSupplier0 = null;
      try {
        suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<Integer>(supplier0, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration (java.lang.Long@0000000002 java.util.concurrent.TimeUnit$3@0000000003) must be > 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(supplier0);
      TimeUnit timeUnit1 = suppliers_NonSerializableMemoizingSupplier0.get();
      suppliers_NonSerializableMemoizingSupplier0.initialized = false;
      Supplier<TimeUnit> supplier1 = Suppliers.synchronizedSupplier((Supplier<TimeUnit>) suppliers_NonSerializableMemoizingSupplier0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier1, 3014L, timeUnit1);
      // Undeclared exception!
      try { 
        suppliers_ExpiringMemoizingSupplier0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<Integer> supplier0 = Suppliers.ofInstance((Integer) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Supplier<Integer> supplier1 = Suppliers.memoizeWithExpiration(supplier0, 1L, timeUnit0);
      assertFalse(supplier1.equals((Object)supplier0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Suppliers.synchronizedSupplier((Supplier<TimeUnit>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      // Undeclared exception!
      try { 
        Suppliers.memoizeWithExpiration(supplier0, 9223372036854775807L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Suppliers$ExpiringMemoizingSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        Suppliers.memoizeWithExpiration((Supplier<TimeUnit>) null, 2523L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter<Integer, Integer> converter0 = Converter.identity();
      // Undeclared exception!
      try { 
        Suppliers.compose((Function<? super Integer, Integer>) converter0, (Supplier<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 1L, timeUnit0);
      TimeUnit timeUnit1 = suppliers_ExpiringMemoizingSupplier0.get();
      assertSame(timeUnit0, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 1561L, timeUnit0);
      suppliers_ExpiringMemoizingSupplier0.expirationNanos = 1561L;
      TimeUnit timeUnit1 = suppliers_ExpiringMemoizingSupplier0.get();
      assertSame(timeUnit0, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 858L, timeUnit0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(suppliers_ExpiringMemoizingSupplier0);
      suppliers_NonSerializableMemoizingSupplier0.get();
      TimeUnit timeUnit1 = suppliers_ExpiringMemoizingSupplier0.get();
      assertSame(timeUnit0, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(supplier0);
      suppliers_NonSerializableMemoizingSupplier0.get();
      String string0 = suppliers_NonSerializableMemoizingSupplier0.toString();
      assertEquals("Suppliers.memoize(<supplier that returned DAYS>)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.MemoizingSupplier<TimeUnit> suppliers_MemoizingSupplier0 = new Suppliers.MemoizingSupplier<TimeUnit>(supplier0);
      suppliers_MemoizingSupplier0.get();
      String string0 = suppliers_MemoizingSupplier0.toString();
      assertEquals("Suppliers.memoize(<supplier that returned NANOSECONDS>)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Supplier<TimeUnit> supplier1 = Suppliers.memoize(supplier0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(supplier1);
      String string0 = suppliers_NonSerializableMemoizingSupplier0.toString();
      assertEquals("Suppliers.memoize(Suppliers.memoize(Suppliers.ofInstance(NANOSECONDS)))", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 858L, timeUnit0);
      Suppliers.MemoizingSupplier<TimeUnit> suppliers_MemoizingSupplier0 = new Suppliers.MemoizingSupplier<TimeUnit>(suppliers_ExpiringMemoizingSupplier0);
      Supplier<TimeUnit> supplier1 = Suppliers.synchronizedSupplier((Supplier<TimeUnit>) suppliers_MemoizingSupplier0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(supplier1);
      suppliers_NonSerializableMemoizingSupplier0.get();
      TimeUnit timeUnit1 = suppliers_MemoizingSupplier0.get();
      assertSame(timeUnit1, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Suppliers.memoize((Supplier<Suppliers.NonSerializableMemoizingSupplier<TimeUnit>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.MemoizingSupplier<TimeUnit> suppliers_MemoizingSupplier0 = new Suppliers.MemoizingSupplier<TimeUnit>(supplier0);
      Supplier<TimeUnit> supplier1 = Suppliers.memoize((Supplier<TimeUnit>) suppliers_MemoizingSupplier0);
      assertFalse(supplier1.equals((Object)supplier0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 858L, timeUnit0);
      Suppliers.MemoizingSupplier<TimeUnit> suppliers_MemoizingSupplier0 = new Suppliers.MemoizingSupplier<TimeUnit>(suppliers_ExpiringMemoizingSupplier0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(suppliers_MemoizingSupplier0);
      Supplier<TimeUnit> supplier1 = Suppliers.memoize((Supplier<TimeUnit>) suppliers_NonSerializableMemoizingSupplier0);
      assertFalse(supplier1.equals((Object)supplier0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Supplier<TimeUnit> supplier1 = Suppliers.synchronizedSupplier(supplier0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(supplier1);
      String string0 = suppliers_NonSerializableMemoizingSupplier0.toString();
      assertEquals("Suppliers.memoize(Suppliers.synchronizedSupplier(Suppliers.ofInstance(NANOSECONDS)))", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Converter<TimeUnit, TimeUnit> converter0 = Converter.identity();
      Supplier<TimeUnit> supplier1 = Suppliers.compose((Function<? super TimeUnit, TimeUnit>) converter0, supplier0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(supplier1);
      TimeUnit timeUnit1 = suppliers_NonSerializableMemoizingSupplier0.get();
      assertSame(timeUnit0, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Converter<Integer, Integer> converter0 = Converter.identity();
      Integer integer0 = new Integer(2386);
      Supplier<Integer> supplier0 = Suppliers.ofInstance(integer0);
      Supplier<Integer> supplier1 = Suppliers.compose((Function<? super Integer, Integer>) converter0, supplier0);
      Suppliers.NonSerializableMemoizingSupplier<Integer> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<Integer>(supplier1);
      String string0 = suppliers_NonSerializableMemoizingSupplier0.toString();
      assertEquals("Suppliers.memoize(Suppliers.compose(Converter.identity(), Suppliers.ofInstance(2386)))", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      // Undeclared exception!
      try { 
        Suppliers.memoizeWithExpiration(supplier0, (-1210L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration (java.lang.Long@0000000002 java.util.concurrent.TimeUnit$5@0000000003) must be > 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function<Supplier<Integer>, Integer> function0 = Suppliers.supplierFunction();
      // Undeclared exception!
      try { 
        function0.apply((Supplier<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Suppliers$SupplierFunctionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 9223372036854775807L, timeUnit0);
      TimeUnit timeUnit1 = suppliers_ExpiringMemoizingSupplier0.get();
      TimeUnit timeUnit2 = suppliers_ExpiringMemoizingSupplier0.get();
      assertSame(timeUnit2, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 9223372036854775807L, timeUnit0);
      Suppliers.NonSerializableMemoizingSupplier<TimeUnit> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<TimeUnit>(suppliers_ExpiringMemoizingSupplier0);
      suppliers_NonSerializableMemoizingSupplier0.get();
      TimeUnit timeUnit1 = suppliers_NonSerializableMemoizingSupplier0.get();
      assertSame(timeUnit0, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Supplier<TimeUnit> supplier0 = Suppliers.ofInstance(timeUnit0);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(supplier0, 858L, timeUnit0);
      String string0 = suppliers_ExpiringMemoizingSupplier0.toString();
      assertEquals("Suppliers.memoizeWithExpiration(Suppliers.ofInstance(NANOSECONDS), 858, NANOS)", string0);
  }
}
