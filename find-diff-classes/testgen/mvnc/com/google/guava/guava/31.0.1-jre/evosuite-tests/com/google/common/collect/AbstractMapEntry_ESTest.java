/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:33:20 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableEntry;
import com.google.common.collect.ImmutableMapEntry;
import com.google.common.collect.LinkedHashMultimap;
import com.google.common.collect.MapMaker;
import java.util.AbstractMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractMapEntry_ESTest extends AbstractMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MapMaker.Dummy mapMaker_Dummy0 = MapMaker.Dummy.VALUE;
      LinkedHashMultimap.ValueEntry<MapMaker.Dummy, Integer> linkedHashMultimap_ValueEntry0 = LinkedHashMultimap.ValueEntry.newHeader();
      LinkedHashMultimap.ValueEntry<MapMaker.Dummy, Integer> linkedHashMultimap_ValueEntry1 = new LinkedHashMultimap.ValueEntry<MapMaker.Dummy, Integer>(mapMaker_Dummy0, (Integer) null, 426, linkedHashMultimap_ValueEntry0);
      AbstractMap.SimpleImmutableEntry<MapMaker.Dummy, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<MapMaker.Dummy, Integer>(linkedHashMultimap_ValueEntry1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      ImmutableEntry<AbstractMap.SimpleImmutableEntry<MapMaker.Dummy, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> immutableEntry0 = new ImmutableEntry<AbstractMap.SimpleImmutableEntry<MapMaker.Dummy, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      immutableEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MapMaker.Dummy mapMaker_Dummy0 = MapMaker.Dummy.VALUE;
      ImmutableEntry<Integer, MapMaker.Dummy> immutableEntry0 = new ImmutableEntry<Integer, MapMaker.Dummy>((Integer) null, mapMaker_Dummy0);
      MapMaker.Dummy mapMaker_Dummy1 = immutableEntry0.getValue();
      assertSame(mapMaker_Dummy1, mapMaker_Dummy0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-2135));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      ImmutableMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Map.Entry<Integer, Integer>> immutableMapEntry0 = new ImmutableMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Map.Entry<Integer, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        immutableMapEntry0.setValue(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-2135));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      ImmutableMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Map.Entry<Integer, Integer>> immutableMapEntry0 = new ImmutableMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Map.Entry<Integer, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      ImmutableMapEntry.NonTerminalImmutableMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Map.Entry<Integer, Integer>> immutableMapEntry_NonTerminalImmutableMapEntry0 = new ImmutableMapEntry.NonTerminalImmutableMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Map.Entry<Integer, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, immutableMapEntry0);
      String string0 = immutableMapEntry_NonTerminalImmutableMapEntry0.toString();
      assertEquals("-2135=-2135=-2135=-2135", string0);
  }
}
