/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:39:31 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Function;
import com.google.common.collect.BoundType;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.Cut;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Ordering;
import com.google.common.collect.Range;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.RegularImmutableSet;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.SingletonImmutableSet;
import com.google.common.collect.TreeMultiset;
import java.util.Comparator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.ServiceLoader;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1458);
      Range<Integer> range0 = Range.closedOpen(integer0, integer0);
      Range<Integer> range1 = Range.singleton(integer0);
      Range<Integer> range2 = range0.span(range1);
      assertSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-3122));
      BoundType boundType0 = BoundType.CLOSED;
      Range<Integer> range0 = Range.upTo(integer0, boundType0);
      Range<Integer> range1 = Range.singleton(integer0);
      // Undeclared exception!
      try { 
        range1.gap(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ranges have a nonempty intersection: [-3122..-3122], (-\u221E..-3122]
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.lessThan(locale_Category0);
      BoundType boundType0 = BoundType.OPEN;
      Range<Locale.Category> range1 = Range.downTo(locale_Category0, boundType0);
      Range<Locale.Category> range2 = range0.gap(range1);
      assertTrue(range2.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(134);
      Range<Integer> range0 = Range.openClosed(integer0, integer0);
      Range<Integer> range1 = Range.closedOpen(integer0, integer0);
      Range<Integer> range2 = range0.gap(range1);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.lessThan(locale_FilteringMode1);
      SingletonImmutableSet<Locale.FilteringMode> singletonImmutableSet0 = new SingletonImmutableSet<Locale.FilteringMode>(locale_FilteringMode0);
      Range<Locale.FilteringMode> range1 = Range.encloseAll((Iterable<Locale.FilteringMode>) singletonImmutableSet0);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: [MAP_EXTENDED_RANGES..EXTENDED_FILTERING)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(69);
      Range<Integer> range0 = Range.greaterThan(integer0);
      Range<Integer> range1 = Range.openClosed(integer0, integer0);
      Range<Integer> range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Range<Integer> range0 = Range.lessThan(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      ContiguousSet<Integer> contiguousSet0 = regularContiguousSet0.headSetImpl(integer0, true);
      assertFalse(range0.hasLowerBound());
      assertTrue(range0.hasUpperBound());
      assertEquals(Integer.MAX_VALUE, contiguousSet0.size());
      assertFalse(contiguousSet0.contains(4));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.Category> range1 = Range.lessThan(locale_Category0);
      boolean boolean0 = range1.isConnected(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Cut<Locale.Category> cut0 = range0.lowerBound;
      Range<Locale.Category> range1 = Range.create(cut0, cut0);
      boolean boolean0 = range0.isConnected(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2255);
      Range<Integer> range0 = Range.lessThan(integer0);
      BoundType boundType0 = BoundType.CLOSED;
      Range<Integer> range1 = Range.downTo(integer0, boundType0);
      Range<Integer> range2 = range0.gap(range1);
      boolean boolean0 = range1.encloses(range2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2924));
      Integer integer1 = new Integer((-807));
      Integer integer2 = new Integer((-2924));
      ImmutableSet<Integer> immutableSet0 = ImmutableSet.of(integer0, integer1, integer2, integer2);
      Range<Integer> range0 = Range.encloseAll((Iterable<Integer>) immutableSet0);
      assertTrue(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.atMost(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      Integer integer1 = Integer.getInteger("", 3959);
      Integer integer2 = new Integer(0);
      // Undeclared exception!
      try { 
        regularContiguousSet0.subSetImpl(integer1, false, integer2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: (3959..0)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      BoundType boundType0 = BoundType.OPEN;
      BoundType boundType1 = BoundType.CLOSED;
      Range<Integer> range0 = Range.range(integer0, boundType0, integer0, boundType1);
      assertTrue(range0.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Locale.Category locale_Category1 = range0.upperEndpoint();
      assertSame(locale_Category1, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(629);
      Range<Integer> range0 = Range.lessThan(integer0);
      BoundType boundType0 = range0.upperBoundType();
      assertEquals(BoundType.OPEN, boundType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.Category> range1 = Range.all();
      Range<Locale.Category> range2 = range1.span(range0);
      assertSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(134);
      Integer integer1 = new Integer(0);
      Range<Integer> range0 = Range.open(integer1, integer0);
      assertTrue(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1458);
      Range<Integer> range0 = Range.closedOpen(integer0, integer0);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.lessThan(locale_FilteringMode0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.greaterThan(integer0);
      Range<Integer> range1 = range0.intersection(range0);
      assertSame(range0, range1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.lessThan(locale_FilteringMode0);
      Range<Locale.FilteringMode> range1 = range0.intersection(range0);
      assertSame(range0, range1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-2671));
      Range<Integer> range0 = Range.closedOpen(integer0, integer0);
      boolean boolean0 = range0.hasUpperBound();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Range<Integer> range0 = Range.lessThan(integer0);
      boolean boolean0 = range0.hasLowerBound();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      int int0 = Range.compareOrThrow(locale_FilteringMode0, locale_FilteringMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      BoundType boundType0 = range0.lowerBoundType();
      assertEquals(BoundType.CLOSED, boundType0);
      
      Integer integer0 = new Integer((-1));
      Range<Integer> range1 = Range.range(integer0, boundType0, integer0, boundType0);
      boolean boolean0 = range1.apply(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      // Undeclared exception!
      try { 
        Range.upTo((Integer) null, boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.lessThan(locale_Category0);
      // Undeclared exception!
      try { 
        range0.span((Range<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.singleton((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(968);
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        Range.range(integer0, boundType0, (Integer) null, boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1258);
      // Undeclared exception!
      try { 
        Range.openClosed(integer0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Range.openClosed(locale_FilteringMode0, locale_FilteringMode1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: (MAP_EXTENDED_RANGES..AUTOSELECT_FILTERING]
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-1559));
      // Undeclared exception!
      try { 
        Range.open(integer0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range<Integer> range0 = Range.all();
      // Undeclared exception!
      try { 
        range0.lowerEndpoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // range unbounded on this side
         //
         verifyException("com.google.common.collect.Cut$BelowAll", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.lessThan((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(9);
      Range<Integer> range0 = Range.closedOpen(integer0, integer0);
      // Undeclared exception!
      try { 
        range0.intersection((Range<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Range<Integer> range0 = Range.openClosed(integer0, integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Range<Integer> range1 = range0.canonical(discreteDomain0);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: [18..17]
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.greaterThan((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.singleton(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        range0.gap((Range<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.openClosed(locale_FilteringMode0, locale_FilteringMode0);
      Range<Locale.FilteringMode> range1 = Range.greaterThan(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        range0.gap(range1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range<Locale.FilteringMode> range0 = Range.all();
      // Undeclared exception!
      try { 
        range0.encloses((Range<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.encloseAll((Iterable<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-2671));
      Range<Integer> range0 = Range.closedOpen(integer0, integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      // Undeclared exception!
      try { 
        Range.encloseAll((Iterable<Integer>) regularContiguousSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: [-2671..-2672]
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) discreteDomain0;
      RegularImmutableSet<Integer> regularImmutableSet0 = new RegularImmutableSet<Integer>(objectArray0, 4, objectArray0, 1);
      ImmutableList<Integer> immutableList0 = regularImmutableSet0.createAsList();
      // Undeclared exception!
      try { 
        Range.encloseAll((Iterable<Integer>) immutableList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.DiscreteDomain$IntegerDomain cannot be cast to java.lang.Comparable
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        Range.downTo((Integer) null, boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.create((Cut<Locale.FilteringMode>) null, (Cut<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ImmutableSortedSet<Locale.FilteringMode> immutableSortedSet0 = ImmutableSortedSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Range<Locale.FilteringMode> range0 = Range.encloseAll((Iterable<Locale.FilteringMode>) immutableSortedSet0);
      Cut<Locale.FilteringMode> cut0 = range0.upperBound;
      Cut<Locale.FilteringMode> cut1 = range0.lowerBound;
      // Undeclared exception!
      try { 
        Range.create(cut0, cut1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: (MAP_EXTENDED_RANGES..MAP_EXTENDED_RANGES)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.lessThan(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        range0.containsAll((Iterable<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Range.compareOrThrow(locale_FilteringMode0, boundType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer((-3533));
      // Undeclared exception!
      try { 
        Range.closedOpen(integer0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        Range.closedOpen(locale_Category0, locale_Category1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: [FORMAT..DISPLAY)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(10);
      // Undeclared exception!
      try { 
        Range.closed((Integer) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        Range.closed(locale_Category1, locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: [FORMAT..DISPLAY]
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.atLeast(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        range0.canonical((DiscreteDomain<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.lessThan(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      DiscreteDomain<Locale.Category> discreteDomain0 = (DiscreteDomain<Locale.Category>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      doReturn(locale_Category1).when(discreteDomain0).minValue();
      // Undeclared exception!
      try { 
        range0.canonical(discreteDomain0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: [FORMAT..DISPLAY)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.atMost((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.atLeast((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.FilteringMode> range1 = Range.closed(locale_FilteringMode0, locale_FilteringMode0);
      Range range2 = (Range)range1.readResolve();
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertTrue(range2.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(65);
      Range<Integer> range0 = Range.greaterThan(integer0);
      Integer integer1 = new Integer(1421);
      boolean boolean0 = range0.contains(integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(18);
      Range<Integer> range0 = Range.closedOpen(integer0, integer0);
      boolean boolean0 = range0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.openClosed(locale_Category0, locale_Category0);
      DiscreteDomain<Locale.Category> discreteDomain0 = (DiscreteDomain<Locale.Category>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null, (Comparable) null).when(discreteDomain0).next(any(java.util.Locale.Category.class));
      // Undeclared exception!
      try { 
        range0.canonical(discreteDomain0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(92);
      Range<Integer> range0 = Range.atMost(integer0);
      Range range1 = (Range)range0.readResolve();
      assertTrue(range1.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range<Locale.Category> range0 = Range.all();
      Range range1 = (Range)range0.readResolve();
      assertFalse(range1.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.lessThan(locale_FilteringMode0);
      boolean boolean0 = range0.equals(locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(46);
      BoundType boundType0 = BoundType.CLOSED;
      Range<Integer> range0 = Range.downTo(integer0, boundType0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Range<Integer> range1 = range0.canonical(discreteDomain0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(3722);
      Range<Integer> range0 = Range.closed(integer0, integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Range<Integer> range1 = range0.canonical(discreteDomain0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.upTo(locale_FilteringMode0, boundType0);
      Range<Locale.FilteringMode> range1 = Range.openClosed(locale_FilteringMode0, locale_FilteringMode0);
      Range<Locale.FilteringMode> range2 = range1.span(range0);
      assertSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.Category> range1 = Range.lessThan(locale_Category0);
      Range<Locale.Category> range2 = range1.span(range0);
      assertFalse(range2.hasLowerBound());
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.Category> range1 = range0.span(range0);
      assertTrue(range1.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.Category> range1 = Range.lessThan(locale_Category0);
      Range<Locale.Category> range2 = range0.span(range1);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer(134);
      Range<Integer> range0 = Range.openClosed(integer0, integer0);
      Range<Integer> range1 = range0.gap(range0);
      assertTrue(range1.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.upTo(locale_FilteringMode0, boundType0);
      Range<Locale.FilteringMode> range1 = Range.openClosed(locale_FilteringMode0, locale_FilteringMode0);
      Range<Locale.FilteringMode> range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Integer> range0 = Range.lessThan(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      ContiguousSet<Integer> contiguousSet0 = regularContiguousSet0.tailSet(integer0, false);
      assertEquals(0, contiguousSet0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer(14);
      BoundType boundType0 = BoundType.OPEN;
      Range<Integer> range0 = Range.downTo(integer0, boundType0);
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, (DiscreteDomain<Integer>) null);
      regularContiguousSet0.headSet(integer0, false);
      assertFalse(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.Category> range1 = Range.lessThan(locale_Category0);
      boolean boolean0 = range1.encloses(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      boolean boolean0 = range0.encloses(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range<Locale.Category> range1 = Range.lessThan(locale_Category0);
      boolean boolean0 = range0.encloses(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      SingletonImmutableSet<Locale.FilteringMode> singletonImmutableSet0 = new SingletonImmutableSet<Locale.FilteringMode>(locale_FilteringMode0);
      Range<Locale.FilteringMode> range0 = Range.all();
      boolean boolean0 = range0.containsAll(singletonImmutableSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.downTo(locale_FilteringMode0, boundType0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      boolean boolean0 = range0.containsAll(serviceLoader0);
      assertTrue(boolean0);
      assertFalse(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.lessThan(locale_FilteringMode0);
      SingletonImmutableSet<Locale.FilteringMode> singletonImmutableSet0 = new SingletonImmutableSet<Locale.FilteringMode>(locale_FilteringMode0);
      boolean boolean0 = range0.containsAll(singletonImmutableSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.downTo(locale_FilteringMode0, boundType0);
      boolean boolean0 = range0.contains(locale_FilteringMode0);
      assertFalse(range0.hasUpperBound());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer(65);
      Range<Integer> range0 = Range.greaterThan(integer0);
      boolean boolean0 = range0.hasUpperBound();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer(8202);
      Range<Integer> range0 = Range.greaterThan(integer0);
      boolean boolean0 = range0.hasLowerBound();
      assertTrue(boolean0);
      assertFalse(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Integer> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Integer>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeMultiset<Locale.FilteringMode> treeMultiset0 = TreeMultiset.create((Comparator<? super Locale.FilteringMode>) comparator1);
      NavigableSet<Locale.FilteringMode> navigableSet0 = treeMultiset0.createElementSet();
      // Undeclared exception!
      try { 
        Range.encloseAll((Iterable<Locale.FilteringMode>) navigableSet0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeMultiset$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        Range.encloseAll((Iterable<Integer>) treeSet0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      BoundType boundType0 = BoundType.OPEN;
      // Undeclared exception!
      try { 
        Range.range(integer0, boundType0, integer0, boundType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: (-1..-1)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.singleton(locale_Category0);
      Range.LowerBoundFn range_LowerBoundFn0 = new Range.LowerBoundFn();
      Cut cut0 = range_LowerBoundFn0.apply(range0);
      assertNotNull(cut0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range.UpperBoundFn range_UpperBoundFn0 = new Range.UpperBoundFn();
      Range<Integer> range0 = Range.atLeast(integer0);
      range_UpperBoundFn0.apply(range0);
      assertFalse(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.lessThan(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        range0.lowerBoundType();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Cut$BelowAll", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.atLeast(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        range0.upperEndpoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // range unbounded on this side
         //
         verifyException("com.google.common.collect.Cut$AboveAll", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Function<Range<Integer>, Cut<Integer>> function0 = Range.upperBoundFn();
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.greaterThan(integer0);
      range0.hashCode();
      assertFalse(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range<Integer> range0 = Range.all();
      // Undeclared exception!
      try { 
        range0.upperBoundType();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Cut$AboveAll", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Function<Range<Comparable<Object>>, Cut<Comparable<Object>>> function0 = Range.lowerBoundFn();
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      BoundType boundType0 = BoundType.OPEN;
      Range<Locale.FilteringMode> range0 = Range.downTo(locale_FilteringMode0, boundType0);
      range0.lowerEndpoint();
      assertFalse(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Range<Locale.Category> range0 = Range.closedOpen(locale_Category0, locale_Category0);
      boolean boolean0 = range0.apply(locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Range<Locale.Category> range0 = Range.all();
      String string0 = range0.toString();
      assertEquals("(-\u221E..+\u221E)", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Ordering<Range<Integer>> ordering0 = Range.rangeLexOrdering();
      assertNotNull(ordering0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Integer integer0 = new Integer(1259);
      // Undeclared exception!
      try { 
        Range.open(integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range: (1259..1259)
         //
         verifyException("com.google.common.collect.Range", e);
      }
  }
}
