/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:25:22 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.Multiset;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinkedListMultimap_ESTest extends LinkedListMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      ImmutableListMultimap<BoundType, Comparable<Object>> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, comparable0, boundType0, comparable0);
      LinkedListMultimap<BoundType, Comparable<Object>> linkedListMultimap0 = LinkedListMultimap.create((Multimap<? extends BoundType, ? extends Comparable<Object>>) immutableListMultimap0);
      assertFalse(linkedListMultimap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedListMultimap<LinkedList<BoundType>, BoundType> linkedListMultimap0 = LinkedListMultimap.create();
      linkedListMultimap0.clear();
      LinkedListMultimap<Object, BoundType> linkedListMultimap1 = LinkedListMultimap.create((Multimap<?, ? extends BoundType>) linkedListMultimap0);
      assertEquals(0, linkedListMultimap1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedListMultimap<Object, BoundType> linkedListMultimap0 = LinkedListMultimap.create(1016);
      linkedListMultimap0.clear();
      Spliterator<BoundType> spliterator0 = linkedListMultimap0.valueSpliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedListMultimap<BoundType, BoundType> linkedListMultimap0 = new LinkedListMultimap<BoundType, BoundType>();
      List<BoundType> list0 = linkedListMultimap0.createValues();
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedListMultimap<Object, Integer> linkedListMultimap0 = LinkedListMultimap.create();
      Set<Object> set0 = linkedListMultimap0.createKeySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedListMultimap<BoundType, BoundType> linkedListMultimap0 = new LinkedListMultimap<BoundType, BoundType>();
      List<Map.Entry<BoundType, BoundType>> list0 = (List<Map.Entry<BoundType, BoundType>>)linkedListMultimap0.createEntries();
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedListMultimap<Object, BoundType> linkedListMultimap0 = LinkedListMultimap.create(1016);
      int int0 = linkedListMultimap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinkedListMultimap.create((Multimap<? extends LinkedList<Object>, ? extends LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.LinkedListMultimap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinkedListMultimap.create((-106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -106
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedListMultimap<BoundType, BoundType> linkedListMultimap0 = LinkedListMultimap.create(1);
      List<BoundType> list0 = linkedListMultimap0.values();
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedListMultimap<BoundType, Object> linkedListMultimap0 = LinkedListMultimap.create(2);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedListMultimap0.forEach(biConsumer0);
      assertEquals(0, linkedListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedListMultimap<Object, Comparable<Object>> linkedListMultimap0 = LinkedListMultimap.create(0);
      Object object0 = new Object();
      boolean boolean0 = linkedListMultimap0.containsKey(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedListMultimap<BoundType, Object> linkedListMultimap0 = LinkedListMultimap.create(2);
      boolean boolean0 = linkedListMultimap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedListMultimap<AbstractMap.SimpleImmutableEntry<Object, Object>, BoundType> linkedListMultimap0 = new LinkedListMultimap<AbstractMap.SimpleImmutableEntry<Object, Object>, BoundType>();
      Object object0 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object0, object0);
      BoundType boundType0 = BoundType.OPEN;
      ImmutableList<BoundType> immutableList0 = ImmutableList.of(boundType0, boundType0, boundType0, boundType0, boundType0, boundType0);
      linkedListMultimap0.replaceValues(abstractMap_SimpleImmutableEntry0, immutableList0);
      assertEquals(6, linkedListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedListMultimap<Object, Map.Entry<BoundType, Object>> linkedListMultimap0 = LinkedListMultimap.create(2);
      Object object0 = new Object();
      List<Map.Entry<BoundType, Object>> list0 = linkedListMultimap0.get(object0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedListMultimap<Comparable<Object>, Object> linkedListMultimap0 = LinkedListMultimap.create(1);
      Map<Comparable<Object>, Collection<Object>> map0 = linkedListMultimap0.createAsMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedListMultimap<BoundType, Comparable<Object>> linkedListMultimap0 = LinkedListMultimap.create(527);
      assertEquals(0, linkedListMultimap0.size());
      
      Object object0 = new Object();
      boolean boolean0 = linkedListMultimap0.containsValue(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedListMultimap<BoundType, BoundType> linkedListMultimap0 = LinkedListMultimap.create(1);
      Multiset<BoundType> multiset0 = linkedListMultimap0.createKeys();
      List<BoundType> list0 = linkedListMultimap0.removeAll(multiset0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      ImmutableListMultimap<Comparable<Object>, Comparable<Object>> immutableListMultimap0 = ImmutableListMultimap.of(comparable0, comparable0, comparable0, comparable0);
      LinkedListMultimap<Comparable<Object>, Comparable<Object>> linkedListMultimap0 = LinkedListMultimap.create((Multimap<? extends Comparable<Object>, ? extends Comparable<Object>>) immutableListMultimap0);
      // Undeclared exception!
      try { 
        linkedListMultimap0.entryIterator();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // should never be called
         //
      }
  }
}
