* EvoSuite 1.2.0
* Going to generate test cases for class: com.google.common.collect.Ordering
* Starting Client-0
* Connecting to master process on port 10255
* Analyzing classpath: 
  - /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar
  - t/dependency/checker-qual-3.12.0.jar
  - t/dependency/error_prone_annotations-2.7.1.jar
  - t/dependency/failureaccess-1.0.1.jar
  - t/dependency/j2objc-annotations-1.3.jar
  - t/dependency/jsr305-3.0.2.jar
  - t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
* Finished analyzing classpath
* Generating tests for class com.google.common.collect.Ordering
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 700
* Using seed 1729697808321
* Starting evolution
* Initial Number of Goals in DynaMOSA = 270 / 700
[MASTER] 04:36:50.666 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.ByFunctionOrdering<F, T> for wildcard ? extends T
[MASTER] 04:36:50.677 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.ByFunctionOrdering<F, T> for wildcard ? extends T
[MASTER] 04:36:53.575 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.UnmodifiableSortedMultiset<E> for wildcard ? extends E
[MASTER] 04:36:56.936 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Multisets.UnmodifiableMultiset<E> for wildcard ? extends E
[MASTER] 04:36:57.710 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.Multisets.UnmodifiableMultiset<E> : Type points to itself
[MASTER] 04:36:57.710 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 04:36:57.710 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.ByFunctionOrdering<F, T> : Type points to itself
[MASTER] 04:37:00.141 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.UnmodifiableSortedMultiset<E> for wildcard ? extends E
[MASTER] 04:37:00.777 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.ByFunctionOrdering<F, T> for wildcard ? extends T
[MASTER] 04:37:00.808 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.ByFunctionOrdering<F, T> for wildcard ? extends T
[MASTER] 04:37:00.836 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.ByFunctionOrdering<F, T> for wildcard ? extends T
[MASTER] 04:37:06.027 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Multisets.UnmodifiableMultiset<E> for wildcard ? extends E
[MASTER] 04:37:06.959 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.ByFunctionOrdering<F, T> for wildcard ? extends T
[MASTER] 04:37:08.924 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Comparable<T> : Type points to itself
[MASTER] 04:37:10.940 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Multisets.UnmodifiableMultiset<E> for wildcard ? extends E
[MASTER] 04:37:12.916 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<java.lang.Object, java.lang.Comparable<java.lang.Object>> : Type points to itself
[MASTER] 04:37:15.331 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Collection<java.util.Comparator<java.lang.Object>> : Type points to itself
[MASTER] 04:37:25.821 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.UnmodifiableSortedMultiset<E> for wildcard ? extends E
[MASTER] 04:37:26.468 [logback-1] WARN  CastClassManager - Nothing is assignable after adding class java.lang.Integer for type Variable U with bounds [java.lang.Comparable<? super U>] of declaration Comparator#comparing. The owner var map is {T=class java.lang.Integer, T=java.util.AbstractMap<java.lang.Integer, com.google.common.collect.UnmodifiableSortedMultiset<E>>.SimpleImmutableEntry<com.google.common.collect.UnmodifiableSortedMultiset<E>, com.google.common.collect.UnmodifiableSortedMultiset<E>>}
[MASTER] 04:37:30.208 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Iterable<com.google.common.collect.AllEqualOrdering> : Type points to itself
[MASTER] 04:37:40.456 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Iterable<java.util.AbstractMap<org.evosuite.runtime.mock.java.io.MockFile, org.evosuite.runtime.mock.java.io.MockFile>.SimpleImmutableEntry<org.evosuite.runtime.mock.java.io.MockFile, org.evosuite.runtime.mock.java.io.MockFile>> : Type points to itself
[MASTER] 04:37:44.465 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.ImmutableMultiset<E>.ElementSet<E> : Type points to itself
[MASTER] 04:37:46.888 [logback-1] WARN  TestCluster - Failed to check cache for java.lang.Iterable<com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering> : Type points to itself
[MASTER] 04:37:49.295 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Ordering<T>.ArbitraryOrdering for wildcard ? super E
[MASTER] 04:37:49.302 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.RegularImmutableSortedMultiset<E> for type Variable F with bounds [class java.lang.Object] of declaration ByFunctionOrdering. The owner var map is {E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering}
[MASTER] 04:37:49.308 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.FilteredEntrySetMultimap<K, V> for type Variable F with bounds [class java.lang.Object] of declaration ByFunctionOrdering. The owner var map is {E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering}
[MASTER] 04:37:49.313 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.JdkBackedImmutableSet<E> for type Variable T with bounds [class java.lang.Object] of declaration Ordering. The owner var map is {E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering}
[MASTER] 04:37:49.318 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.hash.BloomFilter<T> for type Variable T with bounds [class java.lang.Object] of declaration Ordering. The owner var map is {E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering, E=com.google.common.collect.Ordering<java.nio.CharBuffer>.ArbitraryOrdering}
[MASTER] 04:37:52.458 [logback-1] WARN  CastClassManager - Nothing is assignable after adding com.google.common.collect.Multisets.UnmodifiableMultiset<E> for wildcard ? extends E
[Progress:==============================100%] [Cov:>                                  0%][MASTER] 04:37:53.356 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[Progress:==============================100%] [Cov:========>                          25%]
* Search finished after 63s and 0 generations, 170 statements, best individual has fitness: 574.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 47%
* Total number of goals: 120
* Number of covered goals: 56
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 83
* Number of covered goals: 39
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 44%
* Total number of goals: 244
* Number of covered goals: 107
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 15%
* Total number of goals: 92
* Number of covered goals: 14
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 51%
* Total number of goals: 39
* Number of covered goals: 20
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 46%
* Total number of goals: 39
* Number of covered goals: 18
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 83
* Number of covered goals: 35
* Generated 16 tests with total length 84
* Resulting test suite's coverage: 26% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 04:37:57.318 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_0_1729697877009/com/google/common/collect/Ordering_0_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_0_1729697877009/com/google/common/collect/Ordering_0_tmp__ESTest_scaffolding.java]]
[MASTER] 04:37:57.318 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:t/dependency/checker-qual-3.12.0.jar:t/dependency/error_prone_annotations-2.7.1.jar:t/dependency/failureaccess-1.0.1.jar:t/dependency/j2objc-annotations-1.3.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:37:57.318 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:37:57.320 [logback-2] ERROR JUnitAnalyzer - Diagnostic: no suitable method found for greatestOf(java.lang.Iterable<java.util.AbstractMap.SimpleImmutableEntry<org.evosuite.runtime.mock.java.io.MockFile,org.evosuite.runtime.mock.java.io.MockFile>>,int)
    method com.google.common.collect.Ordering.<E>greatestOf(java.lang.Iterable<E>,int) is not applicable
      (inference variable E has incompatible bounds
        equality constraints: java.util.AbstractMap.SimpleImmutableEntry<org.evosuite.runtime.mock.java.io.MockFile,org.evosuite.runtime.mock.java.io.MockFile>
        upper bounds: com.google.common.collect.ByFunctionOrdering<org.evosuite.runtime.mock.java.io.MockFile,org.evosuite.runtime.mock.java.io.MockFile>)
    method com.google.common.collect.Ordering.<E>greatestOf(java.util.Iterator<E>,int) is not applicable
      (cannot infer type-variable(s) E
        (argument mismatch; java.lang.Iterable<java.util.AbstractMap.SimpleImmutableEntry<org.evosuite.runtime.mock.java.io.MockFile,org.evosuite.runtime.mock.java.io.MockFile>> cannot be converted to java.util.Iterator<E>)): 29
[MASTER] 04:37:57.320 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_0_1729697877009/com/google/common/collect/Ordering_0_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Oct 23 15:37:57 GMT 2024
4:  */
5: 
6: package com.google.common.collect;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ByFunctionOrdering;
12: import com.google.common.collect.NullsFirstOrdering;
13: import com.google.common.collect.Ordering;
14: import java.util.AbstractMap;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.mock.java.io.MockFile;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Ordering_0_tmp__ESTest extends Ordering_0_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Ordering<Object> ordering0 = Ordering.allEqual();
26:       NullsFirstOrdering<ByFunctionOrdering<MockFile, MockFile>> nullsFirstOrdering0 = new NullsFirstOrdering<ByFunctionOrdering<MockFile, MockFile>>(ordering0);
27:       // Undeclared exception!
28:       try { 
29:         nullsFirstOrdering0.greatestOf((Iterable<AbstractMap.SimpleImmutableEntry<MockFile, MockFile>>) null, 0);
30:         fail("Expecting exception: NullPointerException");
31:       
32:       } catch(NullPointerException e) {
33:          //
34:          // no message in exception (getMessage() returned null)
35:          //
36:          verifyException("com.google.common.collect.Ordering", e);
37:       }
38:   }
39: }
RegularFileObject[/tmp/EvoSuite_0_1729697877009/com/google/common/collect/Ordering_0_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Oct 23 15:37:57 GMT 2024
5:  */
6: 
7: package com.google.common.collect;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Ordering_0_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.collect.Ordering"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Ordering_0_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.AllEqualOrdering",
82:       "com.google.common.collect.ImmutableSet$SetBuilderImpl",
83:       "com.google.common.collect.Hashing",
84:       "com.google.common.collect.ImmutableList$SubList",
85:       "com.google.common.base.FunctionalEquivalence",
86:       "com.google.common.collect.Lists$RandomAccessPartition",
87:       "com.google.common.collect.RegularImmutableSortedMultiset",
88:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper",
89:       "com.google.common.collect.PeekingIterator",
90:       "com.google.common.collect.ImmutableSet$Indexed",
91:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
92:       "com.google.common.collect.RegularImmutableList",
93:       "com.google.common.collect.SortedMultiset",
94:       "com.google.common.math.IntMath",
95:       "com.google.common.collect.MapMakerInternalMap$InternalEntryHelper",
96:       "com.google.common.collect.Multisets$FilteredMultiset",
97:       "com.google.common.collect.Lists$TransformingRandomAccessList",
98:       "com.google.common.collect.Iterators$ArrayItr",
99:       "com.google.common.collect.RegularImmutableMap$KeySet",
100:       "com.google.common.collect.MapMakerInternalMap$StrongValueEntry",
101:       "com.google.common.collect.DescendingImmutableSortedMultiset",
102:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry",
103:       "com.google.common.collect.NullsLastOrdering",
104:       "com.google.common.collect.Platform",
105:       "com.google.common.collect.RegularImmutableMultiset",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.Multisets",
108:       "com.google.common.collect.ByFunctionOrdering",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.AbstractSortedMultiset",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.common.collect.Iterators$10",
113:       "com.google.common.collect.Multisets$DecreasingCount",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.common.collect.LexicographicalOrdering",
118:       "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry",
119:       "com.google.common.collect.TopKSelector",
120:       "com.google.common.collect.ImmutableMultiset$ElementSet",
121:       "com.google.common.collect.GeneralRange",
122:       "com.google.common.collect.Iterables",
123:       "com.google.common.collect.NullsFirstOrdering",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet",
126:       "com.google.common.collect.ImmutableSet$Builder",
127:       "com.google.common.collect.ImmutableSet$CachingAsList",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.common.collect.SingletonImmutableSet",
130:       "com.google.common.collect.ImmutableMapEntrySet",
131:       "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry",
132:       "com.google.common.collect.Lists$Partition",
133:       "com.google.common.collect.Lists",
134:       "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl",
135:       "com.google.common.math.MathPreconditions",
136:       "com.google.common.collect.ImmutableMultiset",
137:       "com.google.common.collect.Multisets$ImmutableEntry",
138:       "com.google.common.collect.UsingToStringOrdering",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.common.collect.TreeMultiset$1",
141:       "com.google.common.collect.Multisets$AbstractEntry",
142:       "com.google.common.collect.TreeMultiset$AvlNode",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.common.collect.Multisets$ViewMultiset",
145:       "com.google.common.collect.TreeMultiset$2",
146:       "com.google.common.collect.ImmutableSortedSet",
147:       "com.google.common.primitives.IntsMethodsForWeb",
148:       "com.google.common.collect.MapMakerInternalMap$Strength",
149:       "com.google.common.collect.Maps$BiMapConverter",
150:       "com.google.common.collect.MapMakerInternalMap$Segment",
151:       "com.google.common.collect.AbstractIterator",
152:       "com.google.common.base.MoreObjects",
153:       "com.google.common.collect.IndexedImmutableSet$1",
154:       "com.google.common.collect.UnmodifiableSortedMultiset",
155:       "com.google.common.base.Equivalence$Equals",
156:       "com.google.common.collect.ImmutableList$1",
157:       "com.google.common.collect.MapDifference",
158:       "com.google.common.collect.SortedIterable",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.common.collect.AbstractMultiset$EntrySet",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
166:       "com.google.common.collect.ImmutableSortedMultiset",
167:       "com.google.common.collect.MapMaker",
168:       "com.google.common.collect.MapMakerInternalMap$InternalEntry",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.collect.Ordering$ArbitraryOrderingHolder",
171:       "com.google.common.collect.TreeMultiset$Aggregate",
172:       "com.google.common.collect.ImmutableCollection",
173:       "com.google.common.collect.ImmutableEnumMap",
174:       "com.google.common.collect.ForwardingMultiset",
175:       "com.google.common.collect.Lists$RandomAccessListWrapper",
176:       "com.google.common.collect.TreeMultiset",
177:       "com.google.common.collect.ImmutableMultiset$EntrySet",
178:       "com.google.common.collect.Lists$OnePlusArrayList",
179:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
180:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
181:       "com.google.common.collect.MapMakerInternalMap$WeakValueReference",
182:       "com.google.common.collect.SingletonImmutableList",
183:       "com.google.common.collect.ImmutableCollection$Builder",
184:       "com.google.errorprone.annotations.DoNotMock",
185:       "com.google.common.base.Converter",
186:       "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl",
187:       "com.google.common.collect.Maps$8",
188:       "com.google.common.collect.BiMap",
189:       "com.google.common.collect.IndexedImmutableSet",
190:       "com.google.common.base.Function",
191:       "com.google.common.collect.ImmutableSet",
192:       "com.google.common.collect.Iterators$9",
193:       "com.google.common.collect.Lists$AbstractListWrapper",
194:       "com.google.common.collect.ImmutableMap",
195:       "com.google.common.collect.ImmutableMapEntry",
196:       "com.google.common.collect.ComparatorOrdering",
197:       "com.google.common.collect.AbstractIndexedListIterator",
198:       "com.google.common.collect.ImmutableSortedAsList",
199:       "com.google.common.collect.MapMakerInternalMap$Strength$2",
200:       "com.google.common.collect.MapMakerInternalMap$Strength$1",
201:       "com.google.common.collect.CollectPreconditions",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Multiset$Entry",
204:       "com.google.common.primitives.Ints$IntConverter",
205:       "com.google.common.collect.Iterators$4",
206:       "com.google.common.collect.Iterators$5",
207:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
208:       "com.google.common.collect.ExplicitOrdering",
209:       "com.google.common.collect.BoundType",
210:       "com.google.common.collect.Multisets$ElementSet",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.common.collect.TreeMultiset$Reference",
214:       "com.google.common.collect.Ordering$ArbitraryOrdering",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.ImmutableMap$1",
217:       "com.google.common.collect.Lists$1",
218:       "com.google.common.base.Equivalence$Identity",
219:       "com.google.common.collect.ForwardingObject",
220:       "com.google.common.collect.Multiset",
221:       "com.google.common.collect.AbstractMultiset",
222:       "com.google.common.collect.ImmutableSortedMultisetFauxverideShim",
223:       "com.google.common.collect.CompoundOrdering",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Multisets$UnmodifiableMultiset",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.common.collect.ImmutableMultiset$Builder",
228:       "com.google.common.collect.ImmutableList",
229:       "com.google.common.collect.ReverseOrdering",
230:       "com.google.common.collect.Multisets$EntrySet",
231:       "com.google.common.base.PairwiseEquivalence",
232:       "com.google.common.collect.Ordering$IncomparableValueException",
233:       "com.google.common.collect.ImmutableMultiset$1",
234:       "com.google.common.collect.ForwardingCollection",
235:       "com.google.common.collect.ImmutableBiMapFauxverideShim",
236:       "com.google.common.collect.MapMakerInternalMap$1",
237:       "com.google.common.collect.NullnessCasts",
238:       "com.google.common.collect.SortedMultisetBridge",
239:       "com.google.common.base.Equivalence",
240:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment",
241:       "com.google.common.collect.ReverseNaturalOrdering",
242:       "com.google.common.primitives.Ints",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.ImmutableMap$Builder",
245:       "com.google.common.collect.ImmutableSet$SerializedForm",
246:       "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.common.collect.Ordering",
249:       "com.google.common.collect.NaturalOrdering",
250:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
251:       "com.google.common.collect.Iterators$MergingIterator",
252:       "com.google.common.collect.RegularImmutableMap$Values",
253:       "com.google.common.collect.MapMakerInternalMap",
254:       "com.google.common.collect.RegularImmutableSortedSet",
255:       "com.google.common.collect.TreeMultiset$Aggregate$2",
256:       "com.google.common.collect.TreeMultiset$Aggregate$1"
257:     );
258:   } 
259: 
260:   private static void resetClasses() {
261:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Ordering_0_tmp__ESTest_scaffolding.class.getClassLoader()); 
262: 
263:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
264:       "com.google.common.collect.Ordering",
265:       "com.google.common.collect.Ordering$ArbitraryOrdering",
266:       "com.google.common.collect.AllEqualOrdering",
267:       "com.google.common.collect.ReverseNaturalOrdering",
268:       "com.google.common.collect.UsingToStringOrdering",
269:       "com.google.common.collect.NaturalOrdering",
270:       "com.google.common.collect.MapMaker",
271:       "com.google.common.collect.Platform",
272:       "com.google.common.collect.MapMakerInternalMap$Strength",
273:       "com.google.common.base.Preconditions",
274:       "com.google.common.collect.MapMakerInternalMap$1",
275:       "com.google.common.collect.MapMakerInternalMap",
276:       "com.google.common.base.MoreObjects",
277:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper",
278:       "com.google.common.base.Equivalence",
279:       "com.google.common.base.Equivalence$Identity",
280:       "com.google.common.collect.MapMakerInternalMap$Segment",
281:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment",
282:       "com.google.common.collect.Ordering$ArbitraryOrderingHolder",
283:       "com.google.common.collect.Maps$EntryFunction",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.ImmutableList",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.NullsLastOrdering",
288:       "com.google.common.collect.ReverseOrdering",
289:       "com.google.common.collect.ImmutableSet",
290:       "com.google.common.collect.ImmutableSet$CachingAsList",
291:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
292:       "com.google.common.collect.ImmutableSortedSet",
293:       "com.google.common.collect.ContiguousSet",
294:       "com.google.common.collect.RangeGwtSerializationDependencies",
295:       "com.google.common.collect.Cut",
296:       "com.google.common.collect.Cut$BelowAll",
297:       "com.google.common.collect.Cut$AboveAll",
298:       "com.google.common.collect.Range",
299:       "com.google.common.collect.Cut$BelowValue",
300:       "com.google.common.collect.Cut$AboveValue",
301:       "com.google.common.collect.DiscreteDomain",
302:       "com.google.common.collect.DiscreteDomain$IntegerDomain",
303:       "com.google.common.collect.RegularContiguousSet",
304:       "com.google.common.collect.UnmodifiableIterator",
305:       "com.google.common.collect.AbstractSequentialIterator",
306:       "com.google.common.collect.RegularContiguousSet$1",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableSortedMapFauxverideShim",
309:       "com.google.common.collect.RegularImmutableSortedSet",
310:       "com.google.common.collect.ImmutableSortedMap",
311:       "com.google.common.collect.ExplicitOrdering",
312:       "com.google.common.collect.Iterators",
313:       "com.google.common.collect.UnmodifiableListIterator",
314:       "com.google.common.collect.AbstractIndexedListIterator",
315:       "com.google.common.collect.Iterators$ArrayItr",
316:       "com.google.common.base.Converter",
317:       "com.google.common.base.Converter$IdentityConverter",
318:       "com.google.common.base.Converter$FunctionBasedConverter",
319:       "com.google.common.collect.ByFunctionOrdering",
320:       "com.google.common.collect.NullsFirstOrdering",
321:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
322:       "com.google.common.collect.ImmutableMultiset",
323:       "com.google.common.collect.ImmutableSortedMultisetFauxverideShim",
324:       "com.google.common.collect.ImmutableSortedMultiset",
325:       "com.google.common.collect.Lists",
326:       "com.google.common.collect.AbstractMultiset",
327:       "com.google.common.collect.AbstractSortedMultiset",
328:       "com.google.common.collect.TreeMultiset",
329:       "com.google.common.collect.GeneralRange",
330:       "com.google.common.collect.BoundType",
331:       "com.google.common.collect.TreeMultiset$AvlNode",
332:       "com.google.common.collect.TreeMultiset$Reference",
333:       "com.google.common.collect.Iterables",
334:       "com.google.common.collect.Multisets",
335:       "com.google.common.collect.CollectPreconditions",
336:       "com.google.common.collect.NullnessCasts",
337:       "com.google.common.collect.Sets$ImprovedAbstractSet",
338:       "com.google.common.collect.Multisets$EntrySet",
339:       "com.google.common.collect.AbstractMultiset$EntrySet",
340:       "com.google.common.collect.TreeMultiset$Aggregate",
341:       "com.google.common.primitives.IntsMethodsForWeb",
342:       "com.google.common.primitives.Ints",
343:       "com.google.common.collect.ImmutableCollection$Builder",
344:       "com.google.common.collect.ImmutableList$Builder",
345:       "com.google.common.collect.TreeMultiset$2",
346:       "com.google.common.collect.Multisets$AbstractEntry",
347:       "com.google.common.collect.TreeMultiset$1",
348:       "com.google.common.collect.RegularImmutableSortedMultiset",
349:       "com.google.common.collect.IndexedImmutableSet",
350:       "com.google.common.collect.ImmutableMultiset$EntrySet",
351:       "com.google.common.collect.ImmutableAsList",
352:       "com.google.common.collect.IndexedImmutableSet$1",
353:       "com.google.common.collect.ImmutableList$1",
354:       "com.google.common.collect.ImmutableMultiset$1",
355:       "com.google.common.collect.RegularImmutableAsList",
356:       "com.google.common.collect.ImmutableSortedAsList",
357:       "com.google.common.collect.Multisets$ImmutableEntry",
358:       "com.google.common.collect.RegularImmutableSet",
359:       "com.google.common.collect.Ordering$IncomparableValueException",
360:       "com.google.common.collect.Maps",
361:       "com.google.common.collect.ImmutableMap$Builder",
362:       "com.google.common.collect.RegularImmutableMap",
363:       "com.google.common.collect.RegularImmutableMap$KeySet",
364:       "com.google.common.collect.Lists$OnePlusArrayList",
365:       "com.google.common.math.IntMath",
366:       "com.google.common.collect.Hashing",
367:       "com.google.common.collect.AbstractMapEntry",
368:       "com.google.common.collect.ImmutableEntry",
369:       "com.google.common.collect.ImmutableMapEntry",
370:       "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
371:       "com.google.common.collect.AbstractMultimap",
372:       "com.google.common.collect.AbstractMapBasedMultimap",
373:       "com.google.common.collect.AbstractSetMultimap",
374:       "com.google.common.collect.AbstractSortedSetMultimap",
375:       "com.google.common.collect.AbstractSortedKeySortedSetMultimap",
376:       "com.google.common.collect.TreeMultimap",
377:       "com.google.common.collect.RegularImmutableMultiset",
378:       "com.google.common.collect.CompoundOrdering",
379:       "com.google.common.collect.ImmutableBiMapFauxverideShim",
380:       "com.google.common.collect.ImmutableBiMap",
381:       "com.google.common.collect.SingletonImmutableBiMap",
382:       "com.google.common.collect.SingletonImmutableSet",
383:       "com.google.common.collect.ConcurrentHashMultiset",
384:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
385:       "com.google.common.collect.AbstractIterator",
386:       "com.google.common.collect.ConcurrentHashMultiset$2",
387:       "com.google.common.collect.AbstractIterator$State",
388:       "com.google.common.collect.ForwardingObject",
389:       "com.google.common.collect.ForwardingIterator",
390:       "com.google.common.collect.ConcurrentHashMultiset$3",
391:       "com.google.common.collect.AbstractIterator$1",
392:       "com.google.common.collect.ComparatorOrdering",
393:       "com.google.common.collect.SingletonImmutableList",
394:       "com.google.common.collect.TopKSelector",
395:       "com.google.common.math.MathPreconditions",
396:       "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry",
397:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry"
398:     );
399:   }
400: }

[MASTER] 04:37:57.320 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Ordering<Object> ordering0 = Ordering.allEqual();
NullsFirstOrdering<ByFunctionOrdering<MockFile, MockFile>> nullsFirstOrdering0 = new NullsFirstOrdering<ByFunctionOrdering<MockFile, MockFile>>(ordering0);
nullsFirstOrdering0.greatestOf((Iterable<AbstractMap.SimpleImmutableEntry<MockFile, MockFile>>) null, 0);

[MASTER] 04:37:57.418 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_1_1729697877328/com/google/common/collect/Ordering_1_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_1_1729697877328/com/google/common/collect/Ordering_1_tmp__ESTest_scaffolding.java]]
[MASTER] 04:37:57.418 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:t/dependency/checker-qual-3.12.0.jar:t/dependency/error_prone_annotations-2.7.1.jar:t/dependency/failureaccess-1.0.1.jar:t/dependency/j2objc-annotations-1.3.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:37:57.418 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/checker-qual-3.12.0.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/error_prone_annotations-2.7.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/failureaccess-1.0.1.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/j2objc-annotations-1.3.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[MASTER] 04:37:57.419 [logback-2] ERROR JUnitAnalyzer - Diagnostic: no suitable method found for leastOf(java.util.Iterator<java.util.Locale.Category>,int)
    method com.google.common.collect.Ordering.<E>leastOf(java.lang.Iterable<E>,int) is not applicable
      (cannot infer type-variable(s) E
        (argument mismatch; java.util.Iterator<java.util.Locale.Category> cannot be converted to java.lang.Iterable<E>))
    method com.google.common.collect.Ordering.<E>leastOf(java.util.Iterator<E>,int) is not applicable
      (inference variable E has incompatible bounds
        equality constraints: java.util.Locale.Category
        upper bounds: com.google.common.collect.UnmodifiableSortedMultiset<java.lang.Integer>): 37
[MASTER] 04:37:57.419 [logback-2] ERROR JUnitAnalyzer - Diagnostic: no suitable method found for max(java.util.Locale.FilteringMode,java.util.Locale.FilteringMode)
    method com.google.common.collect.Ordering.<E>max(java.util.Iterator<E>) is not applicable
      (cannot infer type-variable(s) E
        (actual and formal argument lists differ in length))
    method com.google.common.collect.Ordering.<E>max(java.lang.Iterable<E>) is not applicable
      (cannot infer type-variable(s) E
        (actual and formal argument lists differ in length))
    method com.google.common.collect.Ordering.<E>max(E,E) is not applicable
      (inference variable E has incompatible bounds
        upper bounds: com.google.common.collect.Multisets.UnmodifiableMultiset<java.util.Locale.FilteringMode>
        lower bounds: java.util.Locale.FilteringMode)
    method com.google.common.collect.Ordering.<E>max(E,E,E,E...) is not applicable
      (cannot infer type-variable(s) E
        (actual and formal argument lists differ in length))
    method com.google.common.collect.ReverseOrdering.<E>max(E,E) is not applicable
      (inference variable E has incompatible bounds
        upper bounds: com.google.common.collect.Multisets.UnmodifiableMultiset<java.util.Locale.FilteringMode>
        lower bounds: java.util.Locale.FilteringMode)
    method com.google.common.collect.ReverseOrdering.<E>max(E,E,E,E...) is not applicable
      (cannot infer type-variable(s) E
        (actual and formal argument lists differ in length))
    method com.google.common.collect.ReverseOrdering.<E>max(java.util.Iterator<E>) is not applicable
      (cannot infer type-variable(s) E
        (actual and formal argument lists differ in length))
    method com.google.common.collect.ReverseOrdering.<E>max(java.lang.Iterable<E>) is not applicable
      (cannot infer type-variable(s) E
        (actual and formal argument lists differ in length)): 40
[MASTER] 04:37:57.419 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_1_1729697877328/com/google/common/collect/Ordering_1_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 04:37:57.419 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 04:37:57.419 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_1_1729697877328/com/google/common/collect/Ordering_1_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:37:57.419 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:37:57.420 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_1_1729697877328/com/google/common/collect/Ordering_1_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Oct 23 15:37:57 GMT 2024
4:  */
5: 
6: package com.google.common.collect;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import com.google.common.collect.ComparatorOrdering;
12: import com.google.common.collect.Multisets;
13: import com.google.common.collect.Ordering;
14: import com.google.common.collect.ReverseOrdering;
15: import com.google.common.collect.UnmodifiableSortedMultiset;
16: import java.util.Comparator;
17: import java.util.Iterator;
18: import java.util.List;
19: import java.util.Locale;
20: import java.util.function.ToDoubleFunction;
21: import org.evosuite.runtime.EvoRunner;
22: import org.evosuite.runtime.EvoRunnerParameters;
23: import org.evosuite.runtime.ViolatedAssumptionAnswer;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Ordering_1_tmp__ESTest extends Ordering_1_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       Ordering<Object> ordering0 = Ordering.allEqual();
32:       ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
33:       Comparator<UnmodifiableSortedMultiset<Integer>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super UnmodifiableSortedMultiset<Integer>>) toDoubleFunction0);
34:       ComparatorOrdering<UnmodifiableSortedMultiset<Integer>> comparatorOrdering0 = new ComparatorOrdering<UnmodifiableSortedMultiset<Integer>>(comparator0);
35:       Iterator<Locale.Category> iterator0 = (Iterator<Locale.Category>) mock(Iterator.class, new ViolatedAssumptionAnswer());
36:       doReturn(false).when(iterator0).hasNext();
37:       List<Locale.Category> list0 = comparatorOrdering0.leastOf(iterator0, 430);
38:       ReverseOrdering<Multisets.UnmodifiableMultiset<Locale.FilteringMode>> reverseOrdering0 = new ReverseOrdering<Multisets.UnmodifiableMultiset<Locale.FilteringMode>>(ordering0);
39:       Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
40:       Locale.FilteringMode locale_FilteringMode1 = reverseOrdering0.max(locale_FilteringMode0, locale_FilteringMode0);
41:       int int0 = ordering0.binarySearch(list0, locale_FilteringMode1);
42:       assertEquals((-1), int0);
43:   }
44: }
RegularFileObject[/tmp/EvoSuite_1_1729697877328/com/google/common/collect/Ordering_1_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Oct 23 15:37:57 GMT 2024
5:  */
6: 
7: package com.google.common.collect;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class Ordering_1_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.collect.Ordering"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Ordering_1_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "com.google.common.collect.AllEqualOrdering",
84:       "com.google.common.collect.ImmutableSet$SetBuilderImpl",
85:       "com.google.common.collect.Hashing",
86:       "com.google.common.collect.ImmutableList$SubList",
87:       "com.google.common.base.FunctionalEquivalence",
88:       "com.google.common.collect.Lists$RandomAccessPartition",
89:       "com.google.common.collect.RegularImmutableSortedMultiset",
90:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper",
91:       "com.google.common.collect.PeekingIterator",
92:       "com.google.common.collect.ImmutableSet$Indexed",
93:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
94:       "com.google.common.collect.RegularImmutableList",
95:       "com.google.common.collect.SortedMultiset",
96:       "com.google.common.math.IntMath",
97:       "com.google.common.collect.MapMakerInternalMap$InternalEntryHelper",
98:       "com.google.common.collect.Multisets$FilteredMultiset",
99:       "com.google.common.collect.Lists$TransformingRandomAccessList",
100:       "com.google.common.collect.Iterators$ArrayItr",
101:       "com.google.common.collect.RegularImmutableMap$KeySet",
102:       "com.google.common.collect.MapMakerInternalMap$StrongValueEntry",
103:       "com.google.common.collect.DescendingImmutableSortedMultiset",
104:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry",
105:       "com.google.common.collect.NullsLastOrdering",
106:       "com.google.common.collect.Platform",
107:       "com.google.common.collect.RegularImmutableMultiset",
108:       "com.google.common.collect.RegularImmutableMap",
109:       "com.google.common.collect.Multisets",
110:       "com.google.common.collect.ByFunctionOrdering",
111:       "com.google.common.collect.SortedMapDifference",
112:       "com.google.common.collect.AbstractSortedMultiset",
113:       "com.google.common.collect.RegularImmutableSet",
114:       "com.google.common.collect.Iterators$10",
115:       "com.google.common.collect.Multisets$DecreasingCount",
116:       "com.google.common.collect.AbstractMapEntry",
117:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
118:       "com.google.common.base.Predicate",
119:       "com.google.common.collect.LexicographicalOrdering",
120:       "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry",
121:       "com.google.common.collect.TopKSelector",
122:       "com.google.common.collect.ImmutableMultiset$ElementSet",
123:       "com.google.common.collect.GeneralRange",
124:       "com.google.common.collect.Iterables",
125:       "com.google.common.collect.NullsFirstOrdering",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet",
128:       "com.google.common.collect.ImmutableSet$Builder",
129:       "com.google.common.collect.ImmutableSet$CachingAsList",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.common.collect.SingletonImmutableSet",
132:       "com.google.common.collect.ImmutableMapEntrySet",
133:       "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry",
134:       "com.google.common.collect.Lists$Partition",
135:       "com.google.common.collect.Lists",
136:       "com.google.common.collect.ImmutableSet$EmptySetBuilderImpl",
137:       "com.google.common.math.MathPreconditions",
138:       "com.google.common.collect.ImmutableMultiset",
139:       "com.google.common.collect.Multisets$ImmutableEntry",
140:       "com.google.common.collect.UsingToStringOrdering",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.common.collect.TreeMultiset$1",
143:       "com.google.common.collect.Multisets$AbstractEntry",
144:       "com.google.common.collect.TreeMultiset$AvlNode",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.common.collect.Multisets$ViewMultiset",
147:       "com.google.common.collect.TreeMultiset$2",
148:       "com.google.common.collect.ImmutableSortedSet",
149:       "com.google.common.primitives.IntsMethodsForWeb",
150:       "com.google.common.collect.MapMakerInternalMap$Strength",
151:       "com.google.common.collect.Maps$BiMapConverter",
152:       "com.google.common.collect.MapMakerInternalMap$Segment",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.common.base.MoreObjects",
155:       "com.google.common.collect.IndexedImmutableSet$1",
156:       "com.google.common.collect.UnmodifiableSortedMultiset",
157:       "com.google.common.base.Equivalence$Equals",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.SortedIterable",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.common.collect.AbstractMultiset$EntrySet",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
168:       "com.google.common.collect.ImmutableSortedMultiset",
169:       "com.google.common.collect.MapMaker",
170:       "com.google.common.collect.MapMakerInternalMap$InternalEntry",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.collect.Ordering$ArbitraryOrderingHolder",
173:       "com.google.common.collect.TreeMultiset$Aggregate",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.common.collect.ForwardingMultiset",
177:       "com.google.common.collect.Lists$RandomAccessListWrapper",
178:       "com.google.common.collect.TreeMultiset",
179:       "com.google.common.collect.ImmutableMultiset$EntrySet",
180:       "com.google.common.collect.Lists$OnePlusArrayList",
181:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.common.collect.MapMakerInternalMap$WeakValueReference",
184:       "com.google.common.collect.SingletonImmutableList",
185:       "com.google.common.collect.ImmutableCollection$Builder",
186:       "com.google.errorprone.annotations.DoNotMock",
187:       "com.google.common.base.Converter",
188:       "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl",
189:       "com.google.common.collect.Maps$8",
190:       "com.google.common.collect.BiMap",
191:       "com.google.common.collect.IndexedImmutableSet",
192:       "com.google.common.base.Function",
193:       "com.google.common.collect.ImmutableSet",
194:       "com.google.common.collect.Iterators$9",
195:       "com.google.common.collect.Lists$AbstractListWrapper",
196:       "com.google.common.collect.ImmutableMap",
197:       "com.google.common.collect.ImmutableMapEntry",
198:       "com.google.common.collect.ComparatorOrdering",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.ImmutableSortedAsList",
201:       "com.google.common.collect.MapMakerInternalMap$Strength$2",
202:       "com.google.common.collect.MapMakerInternalMap$Strength$1",
203:       "com.google.common.collect.CollectPreconditions",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Multiset$Entry",
206:       "com.google.common.primitives.Ints$IntConverter",
207:       "com.google.common.collect.Iterators$4",
208:       "com.google.common.collect.Iterators$5",
209:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
210:       "com.google.common.collect.ExplicitOrdering",
211:       "com.google.common.collect.BoundType",
212:       "com.google.common.collect.Multisets$ElementSet",
213:       "com.google.common.collect.Lists$StringAsImmutableList",
214:       "com.google.common.collect.Lists$2",
215:       "com.google.common.collect.TreeMultiset$Reference",
216:       "com.google.common.collect.Ordering$ArbitraryOrdering",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.ImmutableMap$1",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.common.base.Equivalence$Identity",
221:       "com.google.common.collect.ForwardingObject",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultiset",
224:       "com.google.common.collect.ImmutableSortedMultisetFauxverideShim",
225:       "com.google.common.collect.CompoundOrdering",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Multisets$UnmodifiableMultiset",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.ImmutableMultiset$Builder",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.ReverseOrdering",
232:       "com.google.common.collect.Multisets$EntrySet",
233:       "com.google.common.base.PairwiseEquivalence",
234:       "com.google.common.collect.Ordering$IncomparableValueException",
235:       "com.google.common.collect.ImmutableMultiset$1",
236:       "com.google.common.collect.ForwardingCollection",
237:       "com.google.common.collect.ImmutableBiMapFauxverideShim",
238:       "com.google.common.collect.MapMakerInternalMap$1",
239:       "com.google.common.collect.NullnessCasts",
240:       "com.google.common.collect.SortedMultisetBridge",
241:       "com.google.common.base.Equivalence",
242:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment",
243:       "com.google.common.collect.ReverseNaturalOrdering",
244:       "com.google.common.primitives.Ints",
245:       "com.google.common.collect.Maps",
246:       "com.google.common.collect.ImmutableMap$Builder",
247:       "com.google.common.collect.ImmutableSet$SerializedForm",
248:       "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
249:       "com.google.common.collect.Maps$EntryTransformer",
250:       "com.google.common.collect.Ordering",
251:       "com.google.common.collect.NaturalOrdering",
252:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
253:       "com.google.common.collect.Iterators$MergingIterator",
254:       "com.google.common.collect.RegularImmutableMap$Values",
255:       "com.google.common.collect.MapMakerInternalMap",
256:       "com.google.common.collect.RegularImmutableSortedSet",
257:       "com.google.common.collect.TreeMultiset$Aggregate$2",
258:       "com.google.common.collect.TreeMultiset$Aggregate$1"
259:     );
260:   } 
261:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
262:     mock(Class.forName("java.util.Iterator", false, Ordering_1_tmp__ESTest_scaffolding.class.getClassLoader()));
263:     mock(Class.forName("java.util.function.ToDoubleFunction", false, Ordering_1_tmp__ESTest_scaffolding.class.getClassLoader()));
264:   }
265: 
266:   private static void resetClasses() {
267:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Ordering_1_tmp__ESTest_scaffolding.class.getClassLoader()); 
268: 
269:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
270:       "com.google.common.collect.Ordering",
271:       "com.google.common.collect.Ordering$ArbitraryOrdering",
272:       "com.google.common.collect.AllEqualOrdering",
273:       "com.google.common.collect.ReverseNaturalOrdering",
274:       "com.google.common.collect.UsingToStringOrdering",
275:       "com.google.common.collect.NaturalOrdering",
276:       "com.google.common.collect.MapMaker",
277:       "com.google.common.collect.Platform",
278:       "com.google.common.collect.MapMakerInternalMap$Strength",
279:       "com.google.common.base.Preconditions",
280:       "com.google.common.collect.MapMakerInternalMap$1",
281:       "com.google.common.collect.MapMakerInternalMap",
282:       "com.google.common.base.MoreObjects",
283:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper",
284:       "com.google.common.base.Equivalence",
285:       "com.google.common.base.Equivalence$Identity",
286:       "com.google.common.collect.MapMakerInternalMap$Segment",
287:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment",
288:       "com.google.common.collect.Ordering$ArbitraryOrderingHolder",
289:       "com.google.common.collect.Maps$EntryFunction",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.ImmutableList",
292:       "com.google.common.collect.RegularImmutableList",
293:       "com.google.common.collect.NullsLastOrdering",
294:       "com.google.common.collect.ReverseOrdering",
295:       "com.google.common.collect.ImmutableSet",
296:       "com.google.common.collect.ImmutableSet$CachingAsList",
297:       "com.google.common.collect.ImmutableSortedSetFauxverideShim",
298:       "com.google.common.collect.ImmutableSortedSet",
299:       "com.google.common.collect.ContiguousSet",
300:       "com.google.common.collect.RangeGwtSerializationDependencies",
301:       "com.google.common.collect.Cut",
302:       "com.google.common.collect.Cut$BelowAll",
303:       "com.google.common.collect.Cut$AboveAll",
304:       "com.google.common.collect.Range",
305:       "com.google.common.collect.Cut$BelowValue",
306:       "com.google.common.collect.Cut$AboveValue",
307:       "com.google.common.collect.DiscreteDomain",
308:       "com.google.common.collect.DiscreteDomain$IntegerDomain",
309:       "com.google.common.collect.RegularContiguousSet",
310:       "com.google.common.collect.UnmodifiableIterator",
311:       "com.google.common.collect.AbstractSequentialIterator",
312:       "com.google.common.collect.RegularContiguousSet$1",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableSortedMapFauxverideShim",
315:       "com.google.common.collect.RegularImmutableSortedSet",
316:       "com.google.common.collect.ImmutableSortedMap",
317:       "com.google.common.collect.ExplicitOrdering",
318:       "com.google.common.collect.Iterators",
319:       "com.google.common.collect.UnmodifiableListIterator",
320:       "com.google.common.collect.AbstractIndexedListIterator",
321:       "com.google.common.collect.Iterators$ArrayItr",
322:       "com.google.common.base.Converter",
323:       "com.google.common.base.Converter$IdentityConverter",
324:       "com.google.common.base.Converter$FunctionBasedConverter",
325:       "com.google.common.collect.ByFunctionOrdering",
326:       "com.google.common.collect.NullsFirstOrdering",
327:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
328:       "com.google.common.collect.ImmutableMultiset",
329:       "com.google.common.collect.ImmutableSortedMultisetFauxverideShim",
330:       "com.google.common.collect.ImmutableSortedMultiset",
331:       "com.google.common.collect.Lists",
332:       "com.google.common.collect.AbstractMultiset",
333:       "com.google.common.collect.AbstractSortedMultiset",
334:       "com.google.common.collect.TreeMultiset",
335:       "com.google.common.collect.GeneralRange",
336:       "com.google.common.collect.BoundType",
337:       "com.google.common.collect.TreeMultiset$AvlNode",
338:       "com.google.common.collect.TreeMultiset$Reference",
339:       "com.google.common.collect.Iterables",
340:       "com.google.common.collect.Multisets",
341:       "com.google.common.collect.CollectPreconditions",
342:       "com.google.common.collect.NullnessCasts",
343:       "com.google.common.collect.Sets$ImprovedAbstractSet",
344:       "com.google.common.collect.Multisets$EntrySet",
345:       "com.google.common.collect.AbstractMultiset$EntrySet",
346:       "com.google.common.collect.TreeMultiset$Aggregate",
347:       "com.google.common.primitives.IntsMethodsForWeb",
348:       "com.google.common.primitives.Ints",
349:       "com.google.common.collect.ImmutableCollection$Builder",
350:       "com.google.common.collect.ImmutableList$Builder",
351:       "com.google.common.collect.TreeMultiset$2",
352:       "com.google.common.collect.Multisets$AbstractEntry",
353:       "com.google.common.collect.TreeMultiset$1",
354:       "com.google.common.collect.RegularImmutableSortedMultiset",
355:       "com.google.common.collect.IndexedImmutableSet",
356:       "com.google.common.collect.ImmutableMultiset$EntrySet",
357:       "com.google.common.collect.ImmutableAsList",
358:       "com.google.common.collect.IndexedImmutableSet$1",
359:       "com.google.common.collect.ImmutableList$1",
360:       "com.google.common.collect.ImmutableMultiset$1",
361:       "com.google.common.collect.RegularImmutableAsList",
362:       "com.google.common.collect.ImmutableSortedAsList",
363:       "com.google.common.collect.Multisets$ImmutableEntry",
364:       "com.google.common.collect.RegularImmutableSet",
365:       "com.google.common.collect.Ordering$IncomparableValueException",
366:       "com.google.common.collect.Maps",
367:       "com.google.common.collect.ImmutableMap$Builder",
368:       "com.google.common.collect.RegularImmutableMap",
369:       "com.google.common.collect.RegularImmutableMap$KeySet",
370:       "com.google.common.collect.Lists$OnePlusArrayList",
371:       "com.google.common.math.IntMath",
372:       "com.google.common.collect.Hashing",
373:       "com.google.common.collect.AbstractMapEntry",
374:       "com.google.common.collect.ImmutableEntry",
375:       "com.google.common.collect.ImmutableMapEntry",
376:       "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
377:       "com.google.common.collect.AbstractMultimap",
378:       "com.google.common.collect.AbstractMapBasedMultimap",
379:       "com.google.common.collect.AbstractSetMultimap",
380:       "com.google.common.collect.AbstractSortedSetMultimap",
381:       "com.google.common.collect.AbstractSortedKeySortedSetMultimap",
382:       "com.google.common.collect.TreeMultimap",
383:       "com.google.common.collect.RegularImmutableMultiset",
384:       "com.google.common.collect.CompoundOrdering",
385:       "com.google.common.collect.ImmutableBiMapFauxverideShim",
386:       "com.google.common.collect.ImmutableBiMap",
387:       "com.google.common.collect.SingletonImmutableBiMap",
388:       "com.google.common.collect.SingletonImmutableSet",
389:       "com.google.common.collect.ConcurrentHashMultiset",
390:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
391:       "com.google.common.collect.AbstractIterator",
392:       "com.google.common.collect.ConcurrentHashMultiset$2",
393:       "com.google.common.collect.AbstractIterator$State",
394:       "com.google.common.collect.ForwardingObject",
395:       "com.google.common.collect.ForwardingIterator",
396:       "com.google.common.collect.ConcurrentHashMultiset$3",
397:       "com.google.common.collect.AbstractIterator$1",
398:       "com.google.common.collect.ComparatorOrdering",
399:       "com.google.common.collect.SingletonImmutableList",
400:       "com.google.common.collect.TopKSelector",
401:       "com.google.common.math.MathPreconditions",
402:       "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry",
403:       "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry"
404:     );
405:   }
406: }

[MASTER] 04:37:57.421 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Ordering<Object> ordering0 = Ordering.allEqual();
ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
Comparator<UnmodifiableSortedMultiset<Integer>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super UnmodifiableSortedMultiset<Integer>>) toDoubleFunction0);
ComparatorOrdering<UnmodifiableSortedMultiset<Integer>> comparatorOrdering0 = new ComparatorOrdering<UnmodifiableSortedMultiset<Integer>>(comparator0);
Iterator<Locale.Category> iterator0 = (Iterator<Locale.Category>) mock(Iterator.class, new ViolatedAssumptionAnswer());
doReturn(false).when(iterator0).hasNext();
List<Locale.Category> list0 = comparatorOrdering0.leastOf(iterator0, 430);
ReverseOrdering<Multisets.UnmodifiableMultiset<Locale.FilteringMode>> reverseOrdering0 = new ReverseOrdering<Multisets.UnmodifiableMultiset<Locale.FilteringMode>>(ordering0);
Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
Locale.FilteringMode locale_FilteringMode1 = reverseOrdering0.max(locale_FilteringMode0, locale_FilteringMode0);
int int0 = ordering0.binarySearch(list0, locale_FilteringMode1);
assertEquals((-1), int0);


[MASTER] 04:38:00.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: 0=1 and 0=0
[MASTER] 04:38:00.335 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Ordering.IncomparableValueException ordering_IncomparableValueException0 = new Ordering.IncomparableValueException(object0);
AllEqualOrdering allEqualOrdering0 = new AllEqualOrdering();
Integer integer0 = new Integer(0);
RegularImmutableSortedMultiset<Comparable<Integer>> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<Comparable<Integer>>(allEqualOrdering0);
ImmutableList<Comparable<Integer>> immutableList0 = regularImmutableSortedMultiset0.asList();
Ordering.explicit((List<Comparable<Integer>>) immutableList0);
Integer[] integerArray0 = new Integer[1];
integerArray0[0] = integer0;
Ordering<Integer> ordering0 = Ordering.explicit(integer0, integerArray0);
assertNotNull(ordering0);


* Writing tests to file
* Writing JUnit test case 'Ordering_ESTest' to evosuite-tests
* Done!

* Computation finished
