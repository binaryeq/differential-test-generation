/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:11:15 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.UndirectedGraphConnections;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UndirectedGraphConnections_ESTest extends UndirectedGraphConnections_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(valueGraphBuilder0);
      GraphBuilder<Integer> graphBuilder0 = GraphBuilder.from((Graph<Integer>) standardMutableGraph0);
      StandardMutableValueGraph<Integer, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Integer>(graphBuilder0);
      ElementOrder<Integer> elementOrder0 = standardMutableValueGraph0.incidentEdgeOrder();
      UndirectedGraphConnections<Integer, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer((-1254));
      undirectedGraphConnections0.removePredecessor(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElementOrder<Object> elementOrder0 = ElementOrder.unordered();
      UndirectedGraphConnections<Object, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(782);
      undirectedGraphConnections0.addPredecessor(elementOrder0, integer0);
      assertEquals(ElementOrder.Type.UNORDERED, elementOrder0.type());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<Integer, Integer> standardValueGraph0 = new StandardValueGraph<Integer, Integer>(valueGraphBuilder0);
      ValueGraphBuilder<Integer, Integer> valueGraphBuilder1 = ValueGraphBuilder.from((ValueGraph<Integer, Integer>) standardValueGraph0);
      StandardMutableValueGraph<Integer, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Integer>(valueGraphBuilder1);
      ElementOrder<Integer> elementOrder0 = standardMutableValueGraph0.incidentEdgeOrder();
      UndirectedGraphConnections<Integer, Object> undirectedGraphConnections0 = UndirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(1995);
      Object object0 = undirectedGraphConnections0.removeSuccessor(integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      UndirectedGraphConnections<Integer, Object> undirectedGraphConnections0 = UndirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(43);
      Object object0 = undirectedGraphConnections0.addSuccessor(integer0, elementOrder0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        UndirectedGraphConnections.ofImmutable((Map<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        UndirectedGraphConnections.of((ElementOrder<HashMap<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.UndirectedGraphConnections", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      UndirectedGraphConnections<Object, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<Object, Integer>) hashMap0);
      // Undeclared exception!
      try { 
        undirectedGraphConnections0.removeSuccessor(hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<NetworkBuilder<Integer, Integer>, NetworkBuilder<Integer, Integer>> hashMap0 = new HashMap<NetworkBuilder<Integer, Integer>, NetworkBuilder<Integer, Integer>>();
      UndirectedGraphConnections<NetworkBuilder<Integer, Integer>, NetworkBuilder<Integer, Integer>> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<NetworkBuilder<Integer, Integer>, NetworkBuilder<Integer, Integer>>) hashMap0);
      Set<NetworkBuilder<Integer, Integer>> set0 = undirectedGraphConnections0.adjacentNodes();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElementOrder<HashMap<Integer, Integer>> elementOrder0 = ElementOrder.insertion();
      // Undeclared exception!
      try { 
        UndirectedGraphConnections.of(elementOrder0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // INSERTION
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElementOrder<Object> elementOrder0 = ElementOrder.stable();
      Map<Object, Object> map0 = elementOrder0.createMap(573);
      UndirectedGraphConnections<Object, Object> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable(map0);
      // Undeclared exception!
      try { 
        undirectedGraphConnections0.addPredecessor(elementOrder0, map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      UndirectedGraphConnections<Object, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<Object, Integer>) hashMap0);
      Integer integer0 = undirectedGraphConnections0.value(hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      UndirectedGraphConnections<Integer, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<Integer, Integer>) hashMap0);
      Set<Integer> set0 = undirectedGraphConnections0.successors();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      UndirectedGraphConnections<Integer, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<Integer, Integer>) hashMap0);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        undirectedGraphConnections0.removePredecessor(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, HashMap<Integer, Integer>> hashMap0 = new HashMap<Object, HashMap<Integer, Integer>>();
      UndirectedGraphConnections<Object, HashMap<Integer, Integer>> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<Object, HashMap<Integer, Integer>>) hashMap0);
      Iterator<EndpointPair<Object>> iterator0 = undirectedGraphConnections0.incidentEdgeIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElementOrder<GraphConnections<Integer, Integer>> elementOrder0 = ElementOrder.stable();
      UndirectedGraphConnections<GraphConnections<Integer, Integer>, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.of(elementOrder0);
      Set<GraphConnections<Integer, Integer>> set0 = undirectedGraphConnections0.predecessors();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      UndirectedGraphConnections<Object, Object> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<Object, Object>) hashMap0);
      // Undeclared exception!
      try { 
        undirectedGraphConnections0.addSuccessor(hashMap0, hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
