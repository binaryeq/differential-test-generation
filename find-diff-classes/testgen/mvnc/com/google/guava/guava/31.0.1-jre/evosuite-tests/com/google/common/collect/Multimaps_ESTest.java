/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:29:19 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.BoundType;
import com.google.common.collect.EmptyImmutableListMultimap;
import com.google.common.collect.FilteredKeyListMultimap;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimaps;
import java.nio.CharBuffer;
import java.util.AbstractMap;
import java.util.Iterator;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.stream.Collector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Multimaps_ESTest extends Multimaps_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PriorityQueue<BoundType> priorityQueue0 = new PriorityQueue<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      priorityQueue0.add(boundType0);
      Iterator<BoundType> iterator0 = priorityQueue0.iterator();
      Converter<BoundType, BoundType> converter0 = Converter.identity();
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = Multimaps.index(iterator0, (Function<? super BoundType, BoundType>) converter0);
      assertEquals(1, immutableListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PriorityQueue<BoundType> priorityQueue0 = new PriorityQueue<BoundType>();
      Iterator<BoundType> iterator0 = priorityQueue0.iterator();
      Converter<BoundType, BoundType> converter0 = Converter.identity();
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = Multimaps.index(iterator0, (Function<? super BoundType, BoundType>) converter0);
      assertEquals(0, immutableListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Multimaps.index((Iterable<CharBuffer>) null, (Function<? super CharBuffer, EmptyImmutableListMultimap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Multimaps", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmptyImmutableListMultimap emptyImmutableListMultimap0 = EmptyImmutableListMultimap.INSTANCE;
      ImmutableListMultimap<EmptyImmutableListMultimap, EmptyImmutableListMultimap> immutableListMultimap0 = ImmutableListMultimap.of(emptyImmutableListMultimap0, emptyImmutableListMultimap0);
      Multimaps.AsMap<EmptyImmutableListMultimap, EmptyImmutableListMultimap> multimaps_AsMap0 = new Multimaps.AsMap<EmptyImmutableListMultimap, EmptyImmutableListMultimap>(immutableListMultimap0);
      Multimaps.AsMap.EntrySet multimaps_AsMap_EntrySet0 = multimaps_AsMap0.new EntrySet();
      ImmutableListMultimap<Comparable<FilteredKeyListMultimap<EmptyImmutableListMultimap, EmptyImmutableListMultimap>>, Collector.Characteristics> immutableListMultimap1 = ImmutableListMultimap.copyOf((Iterable<? extends Map.Entry<? extends Comparable<FilteredKeyListMultimap<EmptyImmutableListMultimap, EmptyImmutableListMultimap>>, ? extends Collector.Characteristics>>) multimaps_AsMap_EntrySet0);
      assertEquals(1, immutableListMultimap1.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EmptyImmutableListMultimap emptyImmutableListMultimap0 = EmptyImmutableListMultimap.INSTANCE;
      Map.Entry<EmptyImmutableListMultimap, EmptyImmutableListMultimap> map_Entry0 = ImmutableMap.entryOf(emptyImmutableListMultimap0, emptyImmutableListMultimap0);
      AbstractMap.SimpleImmutableEntry<EmptyImmutableListMultimap, EmptyImmutableListMultimap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<EmptyImmutableListMultimap, EmptyImmutableListMultimap>(map_Entry0);
      ImmutableListMultimap<Map.Entry<EmptyImmutableListMultimap, EmptyImmutableListMultimap>, EmptyImmutableListMultimap> immutableListMultimap0 = ImmutableListMultimap.of((Map.Entry<EmptyImmutableListMultimap, EmptyImmutableListMultimap>) abstractMap_SimpleImmutableEntry0, emptyImmutableListMultimap0);
      Multimaps.Keys<Map.Entry<EmptyImmutableListMultimap, EmptyImmutableListMultimap>, EmptyImmutableListMultimap> multimaps_Keys0 = new Multimaps.Keys<Map.Entry<EmptyImmutableListMultimap, EmptyImmutableListMultimap>, EmptyImmutableListMultimap>(immutableListMultimap0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EmptyImmutableListMultimap emptyImmutableListMultimap0 = EmptyImmutableListMultimap.INSTANCE;
      ImmutableListMultimap<EmptyImmutableListMultimap, EmptyImmutableListMultimap> immutableListMultimap0 = ImmutableListMultimap.of(emptyImmutableListMultimap0, emptyImmutableListMultimap0);
      Multimaps.AsMap<EmptyImmutableListMultimap, EmptyImmutableListMultimap> multimaps_AsMap0 = new Multimaps.AsMap<EmptyImmutableListMultimap, EmptyImmutableListMultimap>(immutableListMultimap0);
      Multimaps.AsMap.EntrySet multimaps_AsMap_EntrySet0 = multimaps_AsMap0.new EntrySet();
      // Undeclared exception!
      try { 
        multimaps_AsMap_EntrySet0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMultimap", e);
      }
  }
}
