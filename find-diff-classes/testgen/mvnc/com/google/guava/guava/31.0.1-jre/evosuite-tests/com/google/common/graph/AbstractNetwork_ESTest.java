/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:05:13 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableNetwork;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.NetworkConnections;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardNetwork;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractNetwork_ESTest extends AbstractNetwork_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<ImmutableNetwork<Integer, Integer>, Comparable<Integer>> standardMutableNetwork0 = new StandardMutableNetwork<ImmutableNetwork<Integer, Integer>, Comparable<Integer>>(networkBuilder0);
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork1 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork1.addNode(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.of((Network<?, ?>) standardMutableNetwork0, locale_Category1, locale_Category0);
      boolean boolean0 = standardMutableNetwork1.hasEdgeConnecting(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Integer, Integer> standardMutableNetwork0 = new StandardMutableNetwork<Integer, Integer>(networkBuilder0);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Integer, Integer>) standardMutableNetwork0);
      Integer integer0 = new Integer(0);
      EndpointPair<Integer> endpointPair0 = EndpointPair.of((Network<?, ?>) immutableNetwork0, integer0, integer0);
      immutableNetwork0.validateEndpoints(endpointPair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork0.addNode(locale_Category0);
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      Set<Object> set0 = standardMutableNetwork0.edgesConnecting(endpointPair0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      HashMap<Integer, NetworkConnections<Integer, Integer>> hashMap0 = new HashMap<Integer, NetworkConnections<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      StandardNetwork<Integer, Integer> standardNetwork0 = new StandardNetwork<Integer, Integer>(networkBuilder0, hashMap0, hashMap1);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Integer, Integer>) standardNetwork0);
      immutableNetwork0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Object, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Object>(networkBuilder0);
      ImmutableValueGraph<Object, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Object, Object>) standardMutableValueGraph0);
      ImmutableGraph<Object> immutableGraph0 = new ImmutableGraph<Object>(immutableValueGraph0);
      EndpointPair<Object> endpointPair0 = EndpointPair.of((Graph<?>) immutableGraph0, (Object) immutableValueGraph0, (Object) immutableValueGraph0);
      StandardMutableValueGraph<MockRandomAccessFile, ElementOrder<Object>> standardMutableValueGraph1 = new StandardMutableValueGraph<MockRandomAccessFile, ElementOrder<Object>>(networkBuilder0);
      ElementOrder<MockRandomAccessFile> elementOrder0 = standardMutableValueGraph1.incidentEdgeOrder();
      Map<MockRandomAccessFile, NetworkConnections<MockRandomAccessFile, MockRandomAccessFile>> map0 = elementOrder0.createMap(25);
      HashMap<MockRandomAccessFile, MockRandomAccessFile> hashMap0 = new HashMap<MockRandomAccessFile, MockRandomAccessFile>();
      StandardNetwork<MockRandomAccessFile, MockRandomAccessFile> standardNetwork0 = new StandardNetwork<MockRandomAccessFile, MockRandomAccessFile>(networkBuilder0, map0, hashMap0);
      boolean boolean0 = standardNetwork0.isOrderingCompatible(endpointPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      StandardNetwork<Comparable<Locale.Category>, Locale.Category> standardNetwork0 = new StandardNetwork<Comparable<Locale.Category>, Locale.Category>(networkBuilder0);
      boolean boolean0 = standardNetwork0.isOrderingCompatible(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork0.addNode(locale_Category0);
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      Object object0 = standardMutableNetwork0.edgeConnectingOrNull(endpointPair0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork0.addNode(locale_Category0);
      Optional<Object> optional0 = standardMutableNetwork0.edgeConnecting(locale_Category0, locale_Category0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork0.addNode(locale_Category0);
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      Optional<Object> optional0 = standardMutableNetwork0.edgeConnecting(endpointPair0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      standardMutableNetwork0.addNode(locale_Category0);
      int int0 = standardMutableNetwork0.degree(locale_Category0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<Comparable<Integer>, Integer> standardNetwork0 = new StandardNetwork<Comparable<Integer>, Integer>(networkBuilder0);
      Graph<Comparable<Integer>> graph0 = standardNetwork0.asGraph();
      assertNotNull(graph0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<NetworkBuilder<Object, Object>, Object> standardNetwork0 = new StandardNetwork<NetworkBuilder<Object, Object>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardNetwork0.validateEndpoints((EndpointPair<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Comparable<Integer>, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Integer>, Comparable<Object>>(networkBuilder0);
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork1 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      NetworkBuilder<Locale.Category, Object> networkBuilder1 = NetworkBuilder.from((Network<Locale.Category, Object>) standardMutableNetwork1);
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered((Object) networkBuilder0, (Object) networkBuilder1);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.validateEndpoints(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch: unordered endpoints cannot be used with directed graphs
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<NetworkBuilder<Locale.Category, Object>, NetworkBuilder<Object, Object>> standardNetwork0 = new StandardNetwork<NetworkBuilder<Locale.Category, Object>, NetworkBuilder<Object, Object>>(networkBuilder0);
      ImmutableNetwork<NetworkBuilder<Locale.Category, Object>, NetworkBuilder<Object, Object>> immutableNetwork0 = ImmutableNetwork.copyOf((Network<NetworkBuilder<Locale.Category, Object>, NetworkBuilder<Object, Object>>) standardNetwork0);
      // Undeclared exception!
      try { 
        immutableNetwork0.outDegree((NetworkBuilder<Locale.Category, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<Integer>, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Integer>, Comparable<Object>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.isOrderingCompatible((EndpointPair<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.AbstractNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      HashMap<Object, NetworkConnections<Object, Comparable<Integer>>> hashMap0 = new HashMap<Object, NetworkConnections<Object, Comparable<Integer>>>();
      HashMap<Comparable<Integer>, Object> hashMap1 = new HashMap<Comparable<Integer>, Object>();
      StandardNetwork<Object, Comparable<Integer>> standardNetwork0 = new StandardNetwork<Object, Comparable<Integer>>(networkBuilder0, hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        standardNetwork0.hasEdgeConnecting((Object) null, (Object) networkBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.hasEdgeConnecting((EndpointPair<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<Integer>, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Integer>, Comparable<Object>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgesConnecting((Comparable<Integer>) null, (Comparable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Comparable<Locale.Category>> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Comparable<Locale.Category>>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.ordered(locale_Category0, locale_Category0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgesConnecting(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node FORMAT is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<ImmutableValueGraph<Locale.Category, Object>, Object> standardMutableNetwork0 = new StandardMutableNetwork<ImmutableValueGraph<Locale.Category, Object>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgeConnectingOrNull((ImmutableValueGraph<Locale.Category, Object>) null, (ImmutableValueGraph<Locale.Category, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgeConnectingOrNull(locale_Category0, locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node FORMAT is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<Locale.Category>, Locale.Category> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Locale.Category>, Locale.Category>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgeConnectingOrNull((EndpointPair<Comparable<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Object, Comparable<Locale.Category>> standardMutableNetwork0 = new StandardMutableNetwork<Object, Comparable<Locale.Category>>(networkBuilder0);
      StandardValueGraph<Locale.Category, Object> standardValueGraph0 = new StandardValueGraph<Locale.Category, Object>(networkBuilder0);
      ImmutableValueGraph<Locale.Category, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Locale.Category, Object>) standardValueGraph0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgeConnecting((Object) null, (Object) immutableValueGraph0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<Integer>, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Integer>, Comparable<Object>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgeConnecting((EndpointPair<Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<ElementOrder<Object>, Comparable<Locale.Category>> standardMutableNetwork0 = new StandardMutableNetwork<ElementOrder<Object>, Comparable<Locale.Category>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.degree((ElementOrder<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<Integer>, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Integer>, Comparable<Object>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.adjacentEdges((Comparable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork0.addNode(locale_Category0);
      boolean boolean0 = standardMutableNetwork0.hasEdgeConnecting(locale_Category0, locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      HashMap<Object, NetworkConnections<Object, Comparable<Integer>>> hashMap0 = new HashMap<Object, NetworkConnections<Object, Comparable<Integer>>>();
      hashMap0.put(networkBuilder0, (NetworkConnections<Object, Comparable<Integer>>) null);
      HashMap<Comparable<Integer>, Object> hashMap1 = new HashMap<Comparable<Integer>, Object>();
      StandardNetwork<Object, Comparable<Integer>> standardNetwork0 = new StandardNetwork<Object, Comparable<Integer>>(networkBuilder0, hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        standardNetwork0.hasEdgeConnecting((Object) networkBuilder0, (Object) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node com.google.common.graph.NetworkBuilder@3 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<StandardMutableNetwork<Locale.Category, Object>, Locale.Category> standardMutableNetwork0 = new StandardMutableNetwork<StandardMutableNetwork<Locale.Category, Object>, Locale.Category>(networkBuilder0);
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork1 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgesConnecting(standardMutableNetwork1, standardMutableNetwork1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node isDirected: false, allowsParallelEdges: false, allowsSelfLoops: false, nodes: [], edges: {} is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Comparable<Object>, BoundType> standardNetwork0 = new StandardNetwork<Comparable<Object>, BoundType>(networkBuilder0);
      String string0 = standardNetwork0.toString();
      assertEquals("isDirected: true, allowsParallelEdges: false, allowsSelfLoops: false, nodes: [], edges: {}", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork0.addNode(locale_Category0);
      StandardMutableNetwork<NetworkBuilder<Object, Object>, Object> standardMutableNetwork1 = new StandardMutableNetwork<NetworkBuilder<Object, Object>, Object>(networkBuilder0);
      boolean boolean0 = standardMutableNetwork1.equals(standardMutableNetwork0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<NetworkBuilder<Object, Object>, Object> standardNetwork0 = new StandardNetwork<NetworkBuilder<Object, Object>, Object>(networkBuilder0);
      NetworkBuilder<Object, Object> networkBuilder1 = NetworkBuilder.directed();
      StandardMutableNetwork<NetworkBuilder<Object, Object>, Object> standardMutableNetwork0 = new StandardMutableNetwork<NetworkBuilder<Object, Object>, Object>(networkBuilder1);
      boolean boolean0 = standardMutableNetwork0.equals(standardNetwork0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<NetworkBuilder<Object, Object>, Object> standardMutableNetwork0 = new StandardMutableNetwork<NetworkBuilder<Object, Object>, Object>(networkBuilder0);
      boolean boolean0 = standardMutableNetwork0.equals(networkBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<Object>, Locale.Category> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Object>, Locale.Category>(networkBuilder0);
      ImmutableNetwork<Comparable<Object>, Locale.Category> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Comparable<Object>, Locale.Category>) standardMutableNetwork0);
      boolean boolean0 = immutableNetwork0.equals(immutableNetwork0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      StandardMutableNetwork<NetworkBuilder<Object, Object>, Object> standardMutableNetwork1 = new StandardMutableNetwork<NetworkBuilder<Object, Object>, Object>(networkBuilder0);
      boolean boolean0 = standardMutableNetwork1.equals(standardMutableNetwork0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      boolean boolean0 = standardMutableNetwork0.hasEdgeConnecting(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      StandardMutableNetwork<Locale.Category, NetworkBuilder<Object, Locale.Category>> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, NetworkBuilder<Object, Locale.Category>>(networkBuilder0);
      boolean boolean0 = standardMutableNetwork0.hasEdgeConnecting(locale_Category0, locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableNetwork0.addNode(locale_Category0);
      Object object0 = standardMutableNetwork0.edgeConnectingOrNull(locale_Category0, locale_Category0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<NetworkBuilder<Object, Object>, Object> standardNetwork0 = new StandardNetwork<NetworkBuilder<Object, Object>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardNetwork0.outDegree(networkBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node com.google.common.graph.NetworkBuilder@3 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<StandardMutableNetwork<Locale.Category, Locale.Category>, Object> standardNetwork0 = new StandardNetwork<StandardMutableNetwork<Locale.Category, Locale.Category>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardNetwork0.inDegree((StandardMutableNetwork<Locale.Category, Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<Integer>, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Integer>, Comparable<Object>>(networkBuilder0);
      StandardMutableNetwork<Object, Comparable<Locale.Category>> standardMutableNetwork1 = new StandardMutableNetwork<Object, Comparable<Locale.Category>>(networkBuilder0);
      ImmutableNetwork<Object, Comparable<Locale.Category>> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Object, Comparable<Locale.Category>>) standardMutableNetwork1);
      // Undeclared exception!
      try { 
        immutableNetwork0.inDegree(standardMutableNetwork0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node isDirected: false, allowsParallelEdges: false, allowsSelfLoops: false, nodes: [], edges: {} is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      StandardMutableNetwork<Comparable<Locale.Category>, Locale.Category> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Locale.Category>, Locale.Category>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.degree(locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node FORMAT is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, NetworkBuilder<Object, Locale.Category>> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, NetworkBuilder<Object, Locale.Category>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgesConnecting((EndpointPair<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      StandardNetwork<Comparable<Locale.Category>, Locale.Category> standardNetwork0 = new StandardNetwork<Comparable<Locale.Category>, Locale.Category>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardNetwork0.adjacentEdges(locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Edge DISPLAY is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      StandardMutableNetwork<Object, Locale.Category> standardMutableNetwork1 = new StandardMutableNetwork<Object, Locale.Category>(networkBuilder0);
      EndpointPair<Object> endpointPair0 = EndpointPair.ordered((Object) standardMutableNetwork1, (Object) standardMutableNetwork0);
      // Undeclared exception!
      try { 
        standardMutableNetwork1.edgeConnectingOrNull(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node isDirected: false, allowsParallelEdges: false, allowsSelfLoops: false, nodes: [], edges: {} is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgeConnecting(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node DISPLAY is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        standardMutableNetwork0.edgeConnecting(locale_Category0, locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node DISPLAY is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<MockRandomAccessFile, MockRandomAccessFile> standardMutableNetwork0 = new StandardMutableNetwork<MockRandomAccessFile, MockRandomAccessFile>(networkBuilder0);
      Graph<MockRandomAccessFile> graph0 = standardMutableNetwork0.asGraph();
      StandardMutableNetwork<Object, Locale.Category> standardMutableNetwork1 = new StandardMutableNetwork<Object, Locale.Category>(networkBuilder0);
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered((Object) graph0, (Object) graph0);
      // Undeclared exception!
      try { 
        standardMutableNetwork1.edgeConnectingOrNull(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node isDirected: false, allowsSelfLoops: false, nodes: [], edges: [] is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<MockRandomAccessFile, MockRandomAccessFile> standardMutableNetwork0 = new StandardMutableNetwork<MockRandomAccessFile, MockRandomAccessFile>(networkBuilder0);
      Graph<MockRandomAccessFile> graph0 = standardMutableNetwork0.asGraph();
      ImmutableGraph<MockRandomAccessFile> immutableGraph0 = ImmutableGraph.copyOf(graph0);
      assertNotNull(immutableGraph0);
  }
}
