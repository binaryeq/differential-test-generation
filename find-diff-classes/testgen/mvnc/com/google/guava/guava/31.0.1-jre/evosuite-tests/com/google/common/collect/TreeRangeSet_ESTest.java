/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:53:59 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.Cut;
import com.google.common.collect.ImmutableRangeSet;
import com.google.common.collect.Range;
import com.google.common.collect.RangeSet;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.TreeRangeSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeRangeSet_ESTest extends TreeRangeSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        TreeRangeSet.create((Iterable<Range<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.RangeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeRangeSet<Cut<Cut>> treeRangeSet0 = TreeRangeSet.create();
      assertNotNull(treeRangeSet0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.atMost(integer0);
      ImmutableRangeSet<Integer> immutableRangeSet0 = ImmutableRangeSet.of(range0);
      TreeRangeSet<Integer> treeRangeSet0 = TreeRangeSet.create((RangeSet<Integer>) immutableRangeSet0);
      boolean boolean0 = treeRangeSet0.encloses(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.atMost(integer0);
      ImmutableRangeSet<Integer> immutableRangeSet0 = ImmutableRangeSet.of(range0);
      TreeRangeSet<Integer> treeRangeSet0 = TreeRangeSet.create((RangeSet<Integer>) immutableRangeSet0);
      Range<Integer> range1 = treeRangeSet0.rangeContaining(integer0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedMultiset<BoundType> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<BoundType>(comparator0);
      RegularImmutableSortedSet<BoundType> regularImmutableSortedSet0 = regularImmutableSortedMultiset0.elementSet;
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      PriorityQueue<Range<Comparable<Integer>>> priorityQueue0 = new PriorityQueue<Range<Comparable<Integer>>>(comparator1);
      TreeRangeSet<Comparable<Integer>> treeRangeSet0 = TreeRangeSet.create((Iterable<Range<Comparable<Integer>>>) priorityQueue0);
      Set<Range<Comparable<Integer>>> set0 = treeRangeSet0.asDescendingSetOfRanges();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.atMost(integer0);
      ImmutableRangeSet<Integer> immutableRangeSet0 = ImmutableRangeSet.of(range0);
      TreeRangeSet<Integer> treeRangeSet0 = TreeRangeSet.create((RangeSet<Integer>) immutableRangeSet0);
      RangeSet<Integer> rangeSet0 = treeRangeSet0.subRangeSet(range0);
      assertNotNull(rangeSet0);
  }
}
