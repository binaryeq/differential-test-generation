/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:28:30 GMT 2024
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableList;
import com.google.common.io.ByteSource;
import com.google.common.io.CharSink;
import com.google.common.io.CharSource;
import com.google.common.io.LineProcessor;
import java.io.BufferedReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharSource_ESTest extends CharSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSet<ByteSource.AsCharSource> hashSet0 = new HashSet<ByteSource.AsCharSource>(3772, 3772);
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      hashSet0.add(byteSource_AsCharSource0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) hashSet0);
      long long0 = charSource0.length();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      CharSink charSink0 = mock(CharSink.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(charSink0).openStream();
      // Undeclared exception!
      try { 
        charSource0.copyTo(charSink0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.CharSource$StringCharSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      LineProcessor<ByteSource.AsCharSource> lineProcessor0 = (LineProcessor<ByteSource.AsCharSource>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lineProcessor0).getResult();
      doReturn(false).when(lineProcessor0).processLine(anyString());
      ByteSource.AsCharSource byteSource_AsCharSource1 = byteSource_AsCharSource0.readLines(lineProcessor0);
      assertNull(byteSource_AsCharSource1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      CharSink charSink0 = mock(CharSink.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(charSink0).openStream();
      // Undeclared exception!
      try { 
        charSource0.copyTo(charSink0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      MockFile mockFile0 = new MockFile((File) null, "', '");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charset0);
      long long0 = byteSource_AsCharSource0.copyTo((Appendable) outputStreamWriter0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(24);
      CharSink charSink0 = mock(CharSink.class, new ViolatedAssumptionAnswer());
      doReturn(charArrayWriter0).when(charSink0).openStream();
      long long0 = charSource0.copyTo(charSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("1P'iis#8zX8!", true);
      CharSink charSink0 = mock(CharSink.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileWriter0).when(charSink0).openStream();
      long long0 = byteSource_AsCharSource0.copyTo(charSink0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      CharSource[] charSourceArray0 = new CharSource[1];
      charSourceArray0[0] = charSource0;
      CharSource charSource1 = CharSource.concat(charSourceArray0);
      assertFalse(charSource1.equals((Object)charSource0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSource.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<ByteSource.AsCharSource> linkedHashSet0 = new LinkedHashSet<ByteSource.AsCharSource>();
      linkedHashSet0.add((ByteSource.AsCharSource) null);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) linkedHashSet0);
      // Undeclared exception!
      try { 
        charSource0.lengthIfKnown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.CharSource$ConcatenatedCharSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      CharBuffer charBuffer0 = CharBuffer.allocate(65533);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 65533, 65533);
      // Undeclared exception!
      try { 
        charSource0.copyTo((Appendable) charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      // Undeclared exception!
      try { 
        charSource0.copyTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.CharSource$StringCharSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashSet<CharSource> hashSet0 = new HashSet<CharSource>();
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) hashSet0);
      // Undeclared exception!
      try { 
        charSource0.copyTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharSource[] charSourceArray0 = new CharSource[8];
      // Undeclared exception!
      try { 
        CharSource.concat(charSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSource.concat((Iterable<? extends CharSource>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<CharSource> linkedHashSet0 = new LinkedHashSet<CharSource>();
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) linkedHashSet0);
      // Undeclared exception!
      try { 
        charSource0.asByteSource((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      Stream<String> stream0 = byteSource_AsCharSource0.lines();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      Optional<Long> optional0 = byteSource_AsCharSource0.lengthIfKnown();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteSource byteSource0 = ByteSource.empty();
      LinkedHashSet<ByteSource.AsCharSource> linkedHashSet0 = new LinkedHashSet<ByteSource.AsCharSource>();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      linkedHashSet0.add(byteSource_AsCharSource0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) linkedHashSet0);
      long long0 = charSource0.length();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteSource byteSource0 = ByteSource.empty();
      LinkedHashSet<ByteSource.AsCharSource> linkedHashSet0 = new LinkedHashSet<ByteSource.AsCharSource>();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      linkedHashSet0.add(byteSource_AsCharSource0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) linkedHashSet0);
      Optional<Long> optional0 = charSource0.lengthIfKnown();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashSet<ByteSource.AsCharSource> hashSet0 = new HashSet<ByteSource.AsCharSource>();
      Iterator<ByteSource.AsCharSource> iterator0 = hashSet0.iterator();
      CharSource charSource0 = CharSource.concat(iterator0);
      Optional<Long> optional0 = charSource0.lengthIfKnown();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<ByteSource.AsCharSource> linkedHashSet0 = new LinkedHashSet<ByteSource.AsCharSource>();
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      linkedHashSet0.add(byteSource_AsCharSource0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) linkedHashSet0);
      boolean boolean0 = charSource0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteSource byteSource0 = ByteSource.empty();
      LinkedHashSet<ByteSource.AsCharSource> linkedHashSet0 = new LinkedHashSet<ByteSource.AsCharSource>();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      linkedHashSet0.add(byteSource_AsCharSource0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) linkedHashSet0);
      boolean boolean0 = charSource0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      LineProcessor<StringWriter> lineProcessor0 = (LineProcessor<StringWriter>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lineProcessor0).getResult();
      doReturn(false).when(lineProcessor0).processLine(anyString());
      StringWriter stringWriter0 = charSource0.readLines(lineProcessor0);
      assertNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      StringWriter stringWriter0 = new StringWriter(2);
      LineProcessor<StringWriter> lineProcessor0 = (LineProcessor<StringWriter>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      doReturn(stringWriter0).when(lineProcessor0).getResult();
      doReturn(false).when(lineProcessor0).processLine(anyString());
      StringWriter stringWriter1 = charSource0.readLines(lineProcessor0);
      assertSame(stringWriter0, stringWriter1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      // Undeclared exception!
      try { 
        charSource0.readLines((LineProcessor<StringWriter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.CharSource$CharSequenceCharSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      // Undeclared exception!
      try { 
        charSource0.readLines((LineProcessor<StringWriter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.CharSource$CharSequenceCharSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      String string0 = charSource0.readFirstLine();
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      String string0 = charSource0.readFirstLine();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      ImmutableList<String> immutableList0 = charSource0.readLines();
      assertEquals(1, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      boolean boolean0 = charSource0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      boolean boolean0 = charSource0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      boolean boolean0 = byteSource_AsCharSource0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      ImmutableList<String> immutableList0 = byteSource_AsCharSource0.readLines();
      assertEquals(1, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PriorityQueue<CharSource> priorityQueue0 = new PriorityQueue<CharSource>();
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) priorityQueue0);
      ImmutableList<String> immutableList0 = charSource0.readLines();
      assertEquals(0, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      long long0 = byteSource_AsCharSource0.length();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharSource charSource0 = CharSource.wrap("");
      assertNotNull(charSource0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      MockFileWriter mockFileWriter0 = new MockFileWriter("b<T)", true);
      long long0 = charSource0.copyTo((Appendable) mockFileWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      BufferedReader bufferedReader0 = charSource0.openBufferedStream();
      assertNotNull(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PriorityQueue<CharSource> priorityQueue0 = new PriorityQueue<CharSource>();
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) priorityQueue0);
      Stream.Builder<Object> stream_Builder0 = Stream.builder();
      charSource0.forEachLine(stream_Builder0);
      assertFalse(priorityQueue0.contains(charSource0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PriorityQueue<CharSource> priorityQueue0 = new PriorityQueue<CharSource>();
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) priorityQueue0);
      // Undeclared exception!
      try { 
        charSource0.readLines((LineProcessor<Stream<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      boolean boolean0 = byteSource_AsCharSource0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSource.concat((Iterator<? extends CharSource>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        byteSource_AsCharSource0.copyTo((Appendable) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSource.concat((CharSource[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashSet<CharSource> linkedHashSet0 = new LinkedHashSet<CharSource>();
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) linkedHashSet0);
      String string0 = charSource0.readFirstLine();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource byteSource0 = charSource0.asByteSource(charset0);
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      Reader reader0 = byteSource_AsCharSource0.openStream();
      assertNotNull(reader0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      String string0 = charSource0.read();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      long long0 = charSource0.length();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      Optional<Long> optional0 = charSource0.lengthIfKnown();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharSource charSource0 = CharSource.wrap(charBuffer0);
      Reader reader0 = charSource0.openStream();
      assertTrue(reader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Stream.Builder<Object> stream_Builder0 = Stream.builder();
      CharSource charSource0 = CharSource.empty();
      charSource0.forEachLine(stream_Builder0);
  }
}
