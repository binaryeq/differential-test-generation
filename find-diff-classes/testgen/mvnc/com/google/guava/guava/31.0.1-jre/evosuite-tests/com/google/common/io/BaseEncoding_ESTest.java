/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:21:10 GMT 2024
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.io.BaseEncoding;
import com.google.common.io.ByteSink;
import com.google.common.io.ByteSource;
import com.google.common.io.CharSink;
import com.google.common.io.CharSource;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.SQLTransientException;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseEncoding_ESTest extends BaseEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 133);
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding1 = null;
      try {
        baseEncoding_SeparatedBaseEncoding1 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding_SeparatedBaseEncoding0, ">CVoA{I$9v3s", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add a separator after every java.lang.Integer@0000000003 chars
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputStream outputStream0 = baseEncoding0.encodingStream(charArrayWriter0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(outputStream0);
      // Undeclared exception!
      try { 
        BaseEncoding.separatingWriter(outputStreamWriter0, "Unrecognized character: 0x", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 8);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      String string0 = baseEncoding_SeparatedBaseEncoding0.encode(byteArray0);
      assertEquals("AA8AAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 8);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      String string0 = baseEncoding_SeparatedBaseEncoding0.encode(byteArray0);
      assertEquals("owAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      String string0 = baseEncoding0.encode(byteArray0);
      assertEquals("AAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = null;
      try {
        baseEncoding_Base16Encoding0 = new BaseEncoding.Base16Encoding("ZZda&vOp5aW", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      String string0 = baseEncoding0.encode(byteArray0);
      assertEquals("ABg=", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      byte[] byteArray0 = new byte[5];
      String string0 = baseEncoding0.encode(byteArray0);
      assertEquals("00000000", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unrecognized character: 0x");
      // Undeclared exception!
      try { 
        baseEncoding0.decode(charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unrecognized character: 0x20
         //
         verifyException("com.google.common.io.BaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      boolean boolean0 = baseEncoding0.canDecode("9+ _M$wDlXf>Ch");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      // Undeclared exception!
      try { 
        baseEncoding0.withSeparator("\u0000\u05BE\u05D0\u05F3\u0600f\u0E00\u1E00\u2100\uFB50\uFE70\uFF61", 8202);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Separator (java.lang.String@0000000001) cannot contain alphabet characters
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = (BaseEncoding.Base16Encoding)BaseEncoding.base16();
      String string0 = (String)baseEncoding_Base16Encoding0.trimTrailingPadding("]$");
      assertEquals("]$", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding baseEncoding1 = baseEncoding0.lowerCase();
      assertFalse(baseEncoding1.equals((Object)baseEncoding0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = (BaseEncoding.Base16Encoding)BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding_Base16Encoding0, "", 14);
      byte[] byteArray0 = baseEncoding_SeparatedBaseEncoding0.decodeChecked("");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        baseEncoding_Base16Encoding0.encodeChunkTo(stringWriter0, byteArray0, 3716, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000002 (java.lang.Integer@0000000003) must not be greater than size (java.lang.Integer@0000000004)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BaseEncoding.StandardBaseEncoding baseEncoding_StandardBaseEncoding0 = (BaseEncoding.StandardBaseEncoding)BaseEncoding.base32Hex();
      byte[] byteArray0 = new byte[1];
      int int0 = baseEncoding_StandardBaseEncoding0.decodeTo(byteArray0, "FS======");
      assertArrayEquals(new byte[] {(byte)127}, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "s", 14);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.withSeparator("s", 14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Already have a separator
         //
         verifyException("com.google.common.io.BaseEncoding$SeparatedBaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 133);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.withPadChar('R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Padding character java.lang.Character@0000000003 was already in alphabet
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "9+ _M$wDlXf>Ch", 9995);
      CharSequence charSequence0 = baseEncoding_SeparatedBaseEncoding0.trimTrailingPadding("9+ _M$wDlXf>Ch");
      assertEquals("9+ _M$wDlXf>Ch", charSequence0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, " ", 14);
      BaseEncoding baseEncoding1 = baseEncoding_SeparatedBaseEncoding0.omitPadding();
      assertNotSame(baseEncoding_SeparatedBaseEncoding0, baseEncoding1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 14);
      int int0 = baseEncoding_SeparatedBaseEncoding0.maxEncodedSize(14);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 133);
      BaseEncoding baseEncoding1 = baseEncoding_SeparatedBaseEncoding0.lowerCase();
      assertNotSame(baseEncoding_SeparatedBaseEncoding0, baseEncoding1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 14);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputStream outputStream0 = baseEncoding_SeparatedBaseEncoding0.encodingStream(charArrayWriter0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      StringReader stringReader0 = new StringReader("iO%o.37&|Y:E");
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 133);
      InputStream inputStream0 = baseEncoding_SeparatedBaseEncoding0.decodingStream(stringReader0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 133);
      byte[] byteArray0 = new byte[7];
      int int0 = baseEncoding_SeparatedBaseEncoding0.decodeTo(byteArray0, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "_0E}~3U[dg1Kwy", 64);
      boolean boolean0 = baseEncoding_SeparatedBaseEncoding0.canDecode("_0E}~3U[dg1Kwy");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BaseEncoding.DecodingException baseEncoding_DecodingException0 = new BaseEncoding.DecodingException("a");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BaseEncoding.Base64Encoding baseEncoding_Base64Encoding0 = (BaseEncoding.Base64Encoding)BaseEncoding.base64Url();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        baseEncoding_Base64Encoding0.encodeTo((Appendable) null, byteArray0, 87855567, (-1620));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = (BaseEncoding.Base16Encoding)BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding_Base16Encoding0, " ", 14);
      byte[] byteArray0 = baseEncoding_SeparatedBaseEncoding0.decodeChecked(" ");
      try { 
        baseEncoding_Base16Encoding0.decodeTo(byteArray0, ",8Oo'O$?r~MLb");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid input length 13
         //
         verifyException("com.google.common.io.BaseEncoding$Base16Encoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = null;
      try {
        baseEncoding_Base16Encoding0 = new BaseEncoding.Base16Encoding(",8Oo'O$?r~MLb", "com.google.common.io.ByteSource$AsCharSource");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal alphabet length 44
         //
         verifyException("com.google.common.io.BaseEncoding$Alphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "~", 14);
      byte[] byteArray0 = new byte[17];
      String string0 = baseEncoding_SeparatedBaseEncoding0.encode(byteArray0);
      assertEquals("00000000000000~00000000000000~000000", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = (BaseEncoding.Base16Encoding)BaseEncoding.base16();
      StringWriter stringWriter0 = new StringWriter(3954);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = (StringBuffer)baseEncoding_Base16Encoding0.trimTrailingPadding(stringBuffer0);
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BaseEncoding.StandardBaseEncoding baseEncoding_StandardBaseEncoding0 = (BaseEncoding.StandardBaseEncoding)BaseEncoding.base32Hex();
      String string0 = (String)baseEncoding_StandardBaseEncoding0.trimTrailingPadding("9+ _M$wDlXf>Ch");
      assertEquals("9+ _M$wDlXf>Ch", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      Appendable appendable0 = BaseEncoding.separatingAppendable(mockPrintWriter0, " ", 128);
      assertNotNull(appendable0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      byte[] byteArray0 = new byte[9];
      String string0 = baseEncoding0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      assertEquals("AAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "com.google.common.io.BaseEncoding$Alphabet", 65534);
      byte[] byteArray0 = new byte[6];
      String string0 = baseEncoding_SeparatedBaseEncoding0.encode(byteArray0, (int) (byte)6, (int) (byte)0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      StringWriter stringWriter0 = new StringWriter(3954);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      byte[] byteArray0 = baseEncoding0.decode(stringBuffer0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      // Undeclared exception!
      try { 
        baseEncoding0.withSeparator((String) null, 3047);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.BaseEncoding$StandardBaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "9+ _M$wDlXf>Ch", 9995);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.upperCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Separator (java.lang.String@0000000002) cannot contain alphabet characters
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = (BaseEncoding.Base16Encoding)BaseEncoding.base16();
      // Undeclared exception!
      try { 
        baseEncoding_Base16Encoding0.trimTrailingPadding((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseEncoding.separatingAppendable((Appendable) null, "com.google.common.io.BaseEncoding$5", 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        BaseEncoding.separatingAppendable(charArrayWriter0, "8$<-,@zfgB+ERb", (-5160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "0NY_Wt@[2,$&p", 22);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.lowerCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Separator (java.lang.String@0000000002) cannot contain alphabet characters
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        baseEncoding0.encode(byteArray0, 13, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be greater than size (java.lang.Integer@0000000003)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "com.google.common.io.BaseEncoding$Alphabet", 65536);
      CharBuffer charBuffer0 = CharBuffer.allocate(65536);
      // Undeclared exception!
      baseEncoding_SeparatedBaseEncoding0.decodeChecked(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BaseEncoding.StandardBaseEncoding baseEncoding_StandardBaseEncoding0 = (BaseEncoding.StandardBaseEncoding)BaseEncoding.base32Hex();
      // Undeclared exception!
      try { 
        baseEncoding_StandardBaseEncoding0.decodeChecked((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      // Undeclared exception!
      try { 
        baseEncoding0.decode((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "com.google.common.io.BaseEncoding$Alphabet", 65536);
      CharBuffer charBuffer0 = CharBuffer.allocate(65536);
      // Undeclared exception!
      baseEncoding_SeparatedBaseEncoding0.canDecode(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "com.google.common.io.BaseEncoding$Alphabet", 65536);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.canDecode((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      // Undeclared exception!
      try { 
        baseEncoding0.canDecode((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Character character0 = new Character('!');
      BaseEncoding.Base64Encoding baseEncoding_Base64Encoding0 = new BaseEncoding.Base64Encoding("~", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", character0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "KW EU", 65534);
      try { 
        baseEncoding_SeparatedBaseEncoding0.decodeChecked("9+ _M$wDlXf>Ch");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character: 0x7f
         //
         verifyException("com.google.common.io.BaseEncoding$Alphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 4211);
      boolean boolean0 = baseEncoding_SeparatedBaseEncoding0.canDecode("~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "~", 14);
      boolean boolean0 = baseEncoding_SeparatedBaseEncoding0.canDecode("~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      // Undeclared exception!
      try { 
        baseEncoding0.withSeparator("~", (-395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add a separator after every java.lang.Integer@0000000002 chars
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      byte[] byteArray0 = baseEncoding0.decode("AAA=");
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BaseEncoding.Base64Encoding baseEncoding_Base64Encoding0 = (BaseEncoding.Base64Encoding)BaseEncoding.base64();
      byte[] byteArray0 = baseEncoding_Base64Encoding0.decodeChecked("000000000000000000");
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BaseEncoding.Base64Encoding baseEncoding_Base64Encoding0 = (BaseEncoding.Base64Encoding)BaseEncoding.base64();
      try { 
        baseEncoding_Base64Encoding0.decodeChecked("s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid input length 1
         //
         verifyException("com.google.common.io.BaseEncoding$Base64Encoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      byte[] byteArray0 = new byte[0];
      String string0 = baseEncoding0.encode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = null;
      try {
        baseEncoding_Base16Encoding0 = new BaseEncoding.Base16Encoding(":C", ":C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding baseEncoding1 = baseEncoding0.withPadChar('+');
      boolean boolean0 = ((BaseEncoding.StandardBaseEncoding) baseEncoding0).equals(baseEncoding1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      Object object0 = new Object();
      boolean boolean0 = ((BaseEncoding.StandardBaseEncoding) baseEncoding0).equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      BaseEncoding baseEncoding1 = baseEncoding0.omitPadding();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding1, ",0MZDu", 8);
      String string0 = baseEncoding_SeparatedBaseEncoding0.toString();
      assertEquals("BaseEncoding.base64Url().omitPadding().withSeparator(\",0MZDu\", 8)", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      String string0 = ((BaseEncoding.StandardBaseEncoding) baseEncoding0).toString();
      assertEquals("BaseEncoding.base64().withPadChar('=')", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding baseEncoding1 = baseEncoding0.lowerCase();
      boolean boolean0 = ((BaseEncoding.StandardBaseEncoding) baseEncoding1).equals(baseEncoding0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      BaseEncoding baseEncoding1 = baseEncoding0.withSeparator("", 64);
      assertNotNull(baseEncoding1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      BaseEncoding baseEncoding1 = baseEncoding0.withPadChar('=');
      assertSame(baseEncoding1, baseEncoding0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      BaseEncoding baseEncoding1 = baseEncoding0.omitPadding();
      // Undeclared exception!
      try { 
        baseEncoding1.withPadChar('q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Padding character java.lang.Character@0000000003 was already in alphabet
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BaseEncoding.StandardBaseEncoding baseEncoding_StandardBaseEncoding0 = (BaseEncoding.StandardBaseEncoding)BaseEncoding.base32Hex();
      try { 
        baseEncoding_StandardBaseEncoding0.decodeChecked("W");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid input length 1
         //
         verifyException("com.google.common.io.BaseEncoding$StandardBaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      boolean boolean0 = baseEncoding0.canDecode("00000000000000000000====");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      BaseEncoding baseEncoding1 = baseEncoding0.omitPadding();
      byte[] byteArray0 = new byte[2];
      String string0 = baseEncoding1.encode(byteArray0);
      assertEquals("AAA", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      byte[] byteArray0 = new byte[12];
      String string0 = baseEncoding0.encode(byteArray0);
      assertEquals("00000000000000000000====", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      boolean boolean0 = ((BaseEncoding.StandardBaseEncoding) baseEncoding0).equals(baseEncoding0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BaseEncoding.StandardBaseEncoding baseEncoding_StandardBaseEncoding0 = new BaseEncoding.StandardBaseEncoding("0:23456789ABCDE(", "0:23456789ABCDE(", (Character) null);
      BaseEncoding baseEncoding0 = baseEncoding_StandardBaseEncoding0.upperCase();
      assertSame(baseEncoding0, baseEncoding_StandardBaseEncoding0);
      assertNotNull(baseEncoding0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BaseEncoding.Base64Encoding baseEncoding_Base64Encoding0 = (BaseEncoding.Base64Encoding)BaseEncoding.base64();
      try { 
        baseEncoding_Base64Encoding0.decodeChecked("DOTo<$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character: <
         //
         verifyException("com.google.common.io.BaseEncoding$Alphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = new BaseEncoding.Base16Encoding("0123456789ABCDEF", "0123456789ABCDEF");
      byte[] byteArray0 = baseEncoding_Base16Encoding0.decodeChecked("0123456789ABCDEF");
      assertArrayEquals(new byte[] {(byte)1, (byte)35, (byte)69, (byte)103, (byte) (-119), (byte) (-85), (byte) (-51), (byte) (-17)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      // Undeclared exception!
      try { 
        baseEncoding0.decode("\u05BE\u05F3\u0600f\u1E00\uFB50\uFE70\uFF61");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unrecognized character: 0x5be
         //
         verifyException("com.google.common.io.BaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = (BaseEncoding.Base16Encoding)BaseEncoding.base16();
      try { 
        baseEncoding_Base16Encoding0.decodeChecked("\u0000\u05BE\u05D0\u05F3\u0600\u0750\u0E00\u1E00\u2100\uFB50\uFE70\uFF61");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character: 0x0
         //
         verifyException("com.google.common.io.BaseEncoding$Alphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64();
      boolean boolean0 = baseEncoding0.canDecode("\u05BE\u05F3\u0600f\u1E00\uFE70\uFF61");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = null;
      try {
        baseEncoding_Base16Encoding0 = new BaseEncoding.Base16Encoding("_[R/ZkZ>", "_[R/ZkZ>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate character: java.lang.Character@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BaseEncoding.StandardBaseEncoding baseEncoding_StandardBaseEncoding0 = null;
      try {
        baseEncoding_StandardBaseEncoding0 = new BaseEncoding.StandardBaseEncoding("\u0000\u05BE\u05D0\u0600\u0E00\u1E00\u2100\uFF61", "\u0000\u05BE\u05D0\u0600\u0E00\u1E00\u2100\uFF61", (Character) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-ASCII character: java.lang.Character@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = null;
      try {
        baseEncoding_Base16Encoding0 = new BaseEncoding.Base16Encoding("W", "W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal alphabet W
         //
         verifyException("com.google.common.io.BaseEncoding$Alphabet", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Writer writer0 = BaseEncoding.separatingWriter(charArrayWriter0, "p", 104);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      CharSource charSource0 = CharSource.wrap("~");
      ByteSource byteSource0 = baseEncoding0.decodingSource(charSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      Reader reader0 = byteSource_AsCharSource0.openStream();
      assertNotNull(reader0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      Iterator<ByteSource> iterator0 = (Iterator<ByteSource>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      CharSink charSink0 = mock(CharSink.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(charSink0).openStream();
      ByteSink byteSink0 = baseEncoding0.encodingSink(charSink0);
      // Undeclared exception!
      try { 
        byteSource0.copyTo(byteSink0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("Padding character %s was already in alphabet", "");
      BaseEncoding.DecodingException baseEncoding_DecodingException0 = new BaseEncoding.DecodingException(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      BaseEncoding baseEncoding1 = baseEncoding0.omitPadding();
      assertNotSame(baseEncoding1, baseEncoding0);
      assertFalse(baseEncoding1.equals((Object)baseEncoding0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BaseEncoding.StandardBaseEncoding baseEncoding_StandardBaseEncoding0 = new BaseEncoding.StandardBaseEncoding("0:23456789ABCDE(", "0:23456789ABCDE(", (Character) null);
      BaseEncoding baseEncoding0 = baseEncoding_StandardBaseEncoding0.lowerCase();
      assertNotNull(baseEncoding0);
      
      BaseEncoding baseEncoding1 = baseEncoding0.upperCase();
      assertNotSame(baseEncoding1, baseEncoding0);
      assertTrue(baseEncoding1.equals((Object)baseEncoding_StandardBaseEncoding0));
      assertNotNull(baseEncoding1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "%mxz1'9C|", 51);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.omitPadding();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Separator (java.lang.String@0000000003) cannot contain alphabet characters
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "com.google.common.io.BaseEncoding$Alphabet", 316227);
      String string0 = baseEncoding_SeparatedBaseEncoding0.toString();
      assertEquals("BaseEncoding.base16().withSeparator(\"com.google.common.io.BaseEncoding$Alphabet\", 316227)", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 30);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.withSeparator("=/iamQT9`-fY", 30);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Already have a separator
         //
         verifyException("com.google.common.io.BaseEncoding$SeparatedBaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 14);
      BaseEncoding baseEncoding1 = baseEncoding_SeparatedBaseEncoding0.withPadChar('9');
      assertNotSame(baseEncoding_SeparatedBaseEncoding0, baseEncoding1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "_0E}~3U[dg1Kwy", 64);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.decodingStream((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      PipedReader pipedReader0 = new PipedReader(362880);
      InputStream inputStream0 = baseEncoding0.decodingStream(pipedReader0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base16();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "f", 9);
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding1 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding_SeparatedBaseEncoding0, "f", 21);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding1.encode(byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.BaseEncoding$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Later in 2020, we will remove GWT-RPC support for Guava types. You are seeing this warning because you are sending a Guava type over GWT-RPC, which will break. You can identify which type by looking at the class name in the attached stack trace.");
      Reader reader0 = BaseEncoding.ignoringReader(stringReader0, "wHTZbBtzn");
      assertNotNull(reader0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      // Undeclared exception!
      try { 
        baseEncoding0.encode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.BaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseEncoding.separatingWriter((Writer) null, "8eNS", 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      // Undeclared exception!
      try { 
        baseEncoding0.encodingSink((CharSink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32Hex();
      // Undeclared exception!
      try { 
        baseEncoding0.encode((byte[]) null, 32, 720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.BaseEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseEncoding.ignoringReader((Reader) null, "*/zEu!KR/T!Yw2I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      // Undeclared exception!
      try { 
        baseEncoding0.decodingSource((CharSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base32();
      BaseEncoding.SeparatedBaseEncoding baseEncoding_SeparatedBaseEncoding0 = new BaseEncoding.SeparatedBaseEncoding(baseEncoding0, "", 99);
      // Undeclared exception!
      try { 
        baseEncoding_SeparatedBaseEncoding0.encodingStream((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BaseEncoding.Base16Encoding baseEncoding_Base16Encoding0 = new BaseEncoding.Base16Encoding("0:23456789ABCDE(", "0:23456789ABCDE(");
      BaseEncoding baseEncoding0 = baseEncoding_Base16Encoding0.lowerCase();
      assertNotSame(baseEncoding0, baseEncoding_Base16Encoding0);
      assertFalse(baseEncoding0.equals((Object)baseEncoding_Base16Encoding0));
      assertNotNull(baseEncoding0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BaseEncoding baseEncoding0 = BaseEncoding.base64Url();
      BaseEncoding baseEncoding1 = baseEncoding0.withPadChar('\u0080');
      assertNotSame(baseEncoding1, baseEncoding0);
      assertFalse(baseEncoding1.equals((Object)baseEncoding0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Character character0 = new Character('\'');
      BaseEncoding.Base64Encoding baseEncoding_Base64Encoding0 = null;
      try {
        baseEncoding_Base64Encoding0 = new BaseEncoding.Base64Encoding("d4tw:__$A$mMEXU", "M>", character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
