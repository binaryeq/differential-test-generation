/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:06:32 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.GeneralRange;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Range;
import com.google.common.collect.RegularImmutableSortedSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeneralRange_ESTest extends GeneralRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(":", ":", "J~ih$k[Vgd", "J~ih$k[Vgd", ":").when(comparator0).toString();
      doReturn(39, 39, 39, 39, (-1943)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange.upTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.upTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      GeneralRange<BoundType> generalRange1 = GeneralRange.all((Comparator<? super BoundType>) comparator1);
      GeneralRange.upTo((Comparator<? super Comparable<BoundType>>) comparator1, (Comparable<BoundType>) boundType0, boundType0);
      GeneralRange<Object> generalRange2 = GeneralRange.upTo((Comparator<? super Object>) comparator1, (Object) generalRange0, boundType0);
      Object object0 = generalRange1.getLowerEndpoint();
      boolean boolean0 = generalRange2.tooHigh(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn((-1422)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.OPEN;
      GeneralRange<BoundType> generalRange0 = GeneralRange.upTo((Comparator<? super BoundType>) comparator1, boundType0, boundType0);
      boolean boolean0 = generalRange0.tooLow(boundType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any(com.google.common.collect.BoundType.class) , any(com.google.common.collect.BoundType.class));
      BoundType boundType0 = BoundType.OPEN;
      GeneralRange<BoundType> generalRange0 = GeneralRange.upTo((Comparator<? super BoundType>) comparator0, boundType0, boundType0);
      GeneralRange<BoundType> generalRange1 = generalRange0.reverse();
      boolean boolean0 = generalRange1.tooHigh(boundType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" \"}/zas4<n)*^<I").when(comparator0).toString();
      doReturn(4339).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<BoundType> generalRange0 = GeneralRange.upTo((Comparator<? super BoundType>) comparator1, boundType0, boundType0);
      boolean boolean0 = generalRange0.hasUpperBound();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.collect.AbstractMapBasedMultimap$WrappedList").when(comparator0).toString();
      doReturn(44).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<BoundType> generalRange0 = GeneralRange.downTo((Comparator<? super BoundType>) comparator1, boundType0, boundType0);
      boolean boolean0 = generalRange0.hasUpperBound();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      GeneralRange<Object> generalRange0 = GeneralRange.all((Comparator<? super Object>) comparator0);
      ImmutableList<GeneralRange<Object>> immutableList0 = ImmutableList.of(generalRange0, generalRange0, generalRange0, generalRange0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      doReturn(0).when(comparator1).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = new RegularImmutableSortedSet<GeneralRange<Object>>(immutableList0, comparator1);
      Comparator<Object> comparator2 = regularImmutableSortedSet0.unsafeComparator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<Locale.FilteringMode> generalRange1 = GeneralRange.downTo((Comparator<? super Locale.FilteringMode>) comparator2, locale_FilteringMode0, boundType0);
      boolean boolean0 = generalRange1.hasLowerBound();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.all((Comparator<? super Locale.FilteringMode>) comparator1);
      boolean boolean0 = generalRange0.hasLowerBound();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      GeneralRange<BoundType> generalRange0 = GeneralRange.all((Comparator<? super BoundType>) comparator1);
      Object object0 = generalRange0.getUpperEndpoint();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<BoundType> generalRange0 = GeneralRange.range((Comparator<? super BoundType>) comparator1, boundType0, boundType0, boundType0, boundType0);
      GeneralRange<GeneralRange<BoundType>> generalRange1 = GeneralRange.upTo((Comparator<? super GeneralRange<BoundType>>) comparator1, generalRange0, boundType0);
      Object object0 = generalRange1.getUpperEndpoint();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.forBoolean(true);
      GeneralRange<Object> generalRange0 = GeneralRange.downTo((Comparator<? super Object>) comparator1, (Object) boundType0, boundType0);
      Object object0 = generalRange0.getLowerEndpoint();
      assertSame(boundType0, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("mlFo(]]2TY+YbBO").when(comparator0).toString();
      doReturn(1196).when(comparator0).compare(any(com.google.common.collect.BoundType.class) , any(com.google.common.collect.BoundType.class));
      BoundType boundType0 = BoundType.OPEN;
      GeneralRange<BoundType> generalRange0 = GeneralRange.downTo((Comparator<? super BoundType>) comparator0, boundType0, boundType0);
      BoundType boundType1 = generalRange0.getLowerBoundType();
      assertEquals(BoundType.OPEN, boundType1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        GeneralRange.upTo((Comparator<? super BoundType>) null, boundType0, boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        GeneralRange.range((Comparator<? super BoundType>) null, boundType0, boundType0, boundType0, boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      GeneralRange<Object> generalRange0 = GeneralRange.all((Comparator<? super Object>) comparator0);
      // Undeclared exception!
      try { 
        generalRange0.intersect((GeneralRange<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.singleton(boundType0);
      GeneralRange<BoundType> generalRange0 = GeneralRange.from(range0);
      GeneralRange<BoundType> generalRange1 = generalRange0.reverse();
      // Undeclared exception!
      try { 
        generalRange0.intersect(generalRange1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralRange.from((Range<BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.GeneralRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        GeneralRange.downTo((Comparator<? super BoundType>) null, boundType0, boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeneralRange.all((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.OPEN;
      GeneralRange<Object> generalRange0 = GeneralRange.upTo((Comparator<? super Object>) comparator1, (Object) null, boundType0);
      String string0 = generalRange0.toString();
      assertEquals("null:(-\u221E,null)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      GeneralRange<BoundType> generalRange0 = GeneralRange.all((Comparator<? super BoundType>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator1);
      Comparator<Object> comparator2 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<GeneralRange<BoundType>> generalRange1 = GeneralRange.range((Comparator<? super GeneralRange<BoundType>>) comparator2, generalRange0, boundType0, generalRange0, boundType0);
      String string0 = generalRange1.toString();
      assertEquals("null:[null:(-\u221E,\u221E),null:(-\u221E,\u221E)]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.atMost(boundType0);
      GeneralRange<BoundType> generalRange0 = GeneralRange.from(range0);
      GeneralRange<BoundType> generalRange1 = generalRange0.reverse();
      String string0 = generalRange1.toString();
      assertEquals("Ordering.natural().reverse():[OPEN,\u221E)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.singleton(boundType0);
      GeneralRange<BoundType> generalRange0 = GeneralRange.from(range0);
      generalRange0.reverse();
      GeneralRange<BoundType> generalRange1 = generalRange0.reverse();
      assertNotSame(generalRange1, generalRange0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "60&Pk3*4o2Tjw#", (String) null, (String) null).when(comparator0).toString();
      doReturn((-1422), (-1422), 150, (-1422)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.downTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      GeneralRange<GeneralRange<Locale.FilteringMode>> generalRange1 = GeneralRange.range((Comparator<? super GeneralRange<Locale.FilteringMode>>) comparator1, generalRange0, boundType0, generalRange0, boundType0);
      boolean boolean0 = generalRange1.equals(generalRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      BoundType boundType1 = BoundType.CLOSED;
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.downTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType1);
      GeneralRange<Locale.FilteringMode> generalRange1 = GeneralRange.range((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0, locale_FilteringMode0, boundType1);
      GeneralRange<Locale.FilteringMode> generalRange2 = generalRange0.intersect(generalRange1);
      assertTrue(generalRange2.equals((Object)generalRange1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.atMost(boundType0);
      GeneralRange<BoundType> generalRange0 = GeneralRange.from(range0);
      GeneralRange<BoundType> generalRange1 = generalRange0.intersect(generalRange0);
      assertTrue(generalRange1.equals((Object)generalRange0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("otherConverter", "otherConverter", "otherConverter").when(comparator0).toString();
      doReturn(403, 403).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.OPEN;
      GeneralRange<BoundType> generalRange0 = GeneralRange.upTo((Comparator<? super BoundType>) comparator1, boundType0, boundType0);
      GeneralRange<BoundType> generalRange1 = GeneralRange.all((Comparator<? super BoundType>) comparator1);
      GeneralRange<BoundType> generalRange2 = generalRange0.intersect(generalRange1);
      assertTrue(generalRange2.equals((Object)generalRange0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.collect.AbstractMapBasedMultimap$WrappedList", "").when(comparator0).toString();
      doReturn(44, (-462), (-462), 44, (-1)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      Spliterator<GeneralRange<Object>> spliterator0 = regularImmutableSortedSet0.spliterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      GeneralRange<Object> generalRange0 = GeneralRange.range((Comparator<? super Object>) comparator1, (Object) spliterator0, boundType0, (Object) locale_FilteringMode0, boundType0);
      GeneralRange<Object> generalRange1 = generalRange0.intersect(generalRange0);
      assertNotSame(generalRange0, generalRange1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      GeneralRange<Object> generalRange0 = GeneralRange.all((Comparator<? super Object>) comparator0);
      ImmutableList<GeneralRange<Object>> immutableList0 = ImmutableList.of(generalRange0, generalRange0, generalRange0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = new RegularImmutableSortedSet<GeneralRange<Object>>(immutableList0, comparator1);
      Comparator<Object> comparator2 = regularImmutableSortedSet0.unsafeComparator();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<Comparable<Object>> generalRange1 = GeneralRange.downTo((Comparator<? super Comparable<Object>>) comparator2, comparable0, boundType0);
      GeneralRange<Comparable<Object>> generalRange2 = generalRange1.intersect(generalRange1);
      assertNotSame(generalRange1, generalRange2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      GeneralRange<Object> generalRange0 = GeneralRange.all((Comparator<? super Object>) comparator0);
      ImmutableList<GeneralRange<Object>> immutableList0 = ImmutableList.of(generalRange0, generalRange0, generalRange0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = new RegularImmutableSortedSet<GeneralRange<Object>>(immutableList0, comparator1);
      Comparator<Object> comparator2 = regularImmutableSortedSet0.unsafeComparator();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<Comparable<Object>> generalRange1 = GeneralRange.downTo((Comparator<? super Comparable<Object>>) comparator2, comparable0, boundType0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable1).toString();
      GeneralRange<Comparable<Object>> generalRange2 = GeneralRange.upTo((Comparator<? super Comparable<Object>>) comparator2, comparable1, boundType0);
      GeneralRange<Comparable<Object>> generalRange3 = generalRange1.intersect(generalRange2);
      assertFalse(generalRange3.equals((Object)generalRange1));
      assertFalse(generalRange3.equals((Object)generalRange2));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "", (String) null, (String) null).when(comparator0).toString();
      doReturn((-1189), 461845907).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.all((Comparator<? super Locale.FilteringMode>) comparator1);
      GeneralRange<GeneralRange<Locale.FilteringMode>> generalRange1 = GeneralRange.downTo((Comparator<? super GeneralRange<Locale.FilteringMode>>) comparator1, generalRange0, boundType0);
      boolean boolean0 = generalRange1.contains(generalRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(":", ":", "J~ih$k[Vgd", "J~ih$k[Vgd", ":").when(comparator0).toString();
      doReturn(39, 39, 39, 39, (-1943)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange.upTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.upTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      GeneralRange.upTo((Comparator<? super Comparable<BoundType>>) comparator1, (Comparable<BoundType>) boundType0, boundType0);
      GeneralRange<GeneralRange<Locale.FilteringMode>> generalRange1 = GeneralRange.downTo((Comparator<? super GeneralRange<Locale.FilteringMode>>) comparator1, generalRange0, boundType0);
      boolean boolean0 = generalRange1.contains(generalRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn((-876), 93).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.OPEN;
      GeneralRange<Object> generalRange0 = GeneralRange.upTo((Comparator<? super Object>) comparator1, (Object) regularImmutableSortedSet0, boundType0);
      boolean boolean0 = generalRange0.tooHigh(regularImmutableSortedSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("4 4cq?M61~rhng", "4 4cq?M61~rhng").when(comparator0).toString();
      doReturn(91, (-1279), 461845907).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange.downTo((Comparator<? super BoundType>) comparator1, boundType0, boundType0);
      Object object0 = new Object();
      GeneralRange<Object> generalRange0 = GeneralRange.upTo((Comparator<? super Object>) comparator1, object0, boundType0);
      boolean boolean0 = generalRange0.contains(boundType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.collect.AbstractMapBasedMultimap$WrappedList").when(comparator0).toString();
      doReturn(44, (-462)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      GeneralRange<BoundType> generalRange0 = GeneralRange.downTo((Comparator<? super BoundType>) comparator1, boundType0, boundType1);
      boolean boolean0 = generalRange0.tooLow(boundType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.atMost(boundType0);
      GeneralRange<BoundType> generalRange0 = GeneralRange.from(range0);
      boolean boolean0 = generalRange0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn((-1189), 461845907).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      GeneralRange<Object> generalRange0 = GeneralRange.upTo((Comparator<? super Object>) comparator1, (Object) regularImmutableSortedSet0, boundType0);
      GeneralRange<Object> generalRange1 = generalRange0.reverse();
      assertNotNull(generalRange1);
      
      boolean boolean0 = generalRange1.isEmpty();
      assertFalse(boolean0);
      assertNotSame(generalRange1, generalRange0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        GeneralRange.range((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0, locale_FilteringMode0, boundType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(4339, 4339, 0).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Comparator<Locale.FilteringMode> comparator2 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator2).toString();
      doReturn(0).when(comparator2).compare(any(java.util.Locale.FilteringMode.class) , any(java.util.Locale.FilteringMode.class));
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.upTo((Comparator<? super Locale.FilteringMode>) comparator2, locale_FilteringMode0, boundType0);
      BoundType boundType1 = generalRange0.getUpperBoundType();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      GeneralRange<Object> generalRange1 = GeneralRange.range((Comparator<? super Object>) comparator1, (Object) locale_FilteringMode1, boundType1, (Object) boundType1, boundType1);
      assertFalse(regularImmutableSortedSet0.contains(generalRange1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Range<Locale.FilteringMode> range0 = Range.atLeast(locale_FilteringMode0);
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.from(range0);
      assertNotNull(generalRange0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.singleton(boundType0);
      GeneralRange<BoundType> generalRange0 = GeneralRange.from(range0);
      boolean boolean0 = generalRange0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "60&Pk3*4o2Tjw#", "60&Pk3*4o2Tjw#", "60&Pk3*4o2Tjw#").when(comparator0).toString();
      doReturn((-1422), (-1422), 150, (-1422)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.OPEN;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.downTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      GeneralRange<GeneralRange<Locale.FilteringMode>> generalRange1 = GeneralRange.range((Comparator<? super GeneralRange<Locale.FilteringMode>>) comparator1, generalRange0, boundType0, generalRange0, boundType0);
      boolean boolean0 = generalRange1.equals(boundType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.collect.AbstractMapBasedMultimap$WrappedList").when(comparator0).toString();
      doReturn(44).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.CLOSED;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.upTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      generalRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(comparator0).toString();
      doReturn((-1422), (-1422), 150).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<GeneralRange<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super GeneralRange<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BoundType boundType0 = BoundType.OPEN;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      GeneralRange<Locale.FilteringMode> generalRange0 = GeneralRange.downTo((Comparator<? super Locale.FilteringMode>) comparator1, locale_FilteringMode0, boundType0);
      GeneralRange<Locale.FilteringMode> generalRange1 = generalRange0.intersect(generalRange0);
      assertTrue(generalRange1.equals((Object)generalRange0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.atMost(boundType0);
      GeneralRange<BoundType> generalRange0 = GeneralRange.from(range0);
      Comparator<? super BoundType> comparator0 = generalRange0.comparator();
      assertNotNull(comparator0);
  }
}
