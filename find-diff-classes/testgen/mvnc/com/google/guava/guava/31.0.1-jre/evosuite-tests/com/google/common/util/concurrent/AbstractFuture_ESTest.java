/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:14:42 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.SortedMultiset;
import com.google.common.util.concurrent.AggregateFuture;
import com.google.common.util.concurrent.AsyncCallable;
import com.google.common.util.concurrent.CombinedFuture;
import com.google.common.util.concurrent.FluentFuture;
import com.google.common.util.concurrent.ForwardingFluentFuture;
import com.google.common.util.concurrent.ImmediateFuture;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListenableFutureTask;
import com.google.common.util.concurrent.SettableFuture;
import com.google.common.util.concurrent.TimeoutFuture;
import com.google.common.util.concurrent.TrustedListenableFutureTask;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.Stack;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.FutureTask;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractFuture_ESTest extends AbstractFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(asyncCallable0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Class<Throwable> class0 = Throwable.class;
      Converter<Throwable, Throwable> converter0 = Converter.identity();
      Converter<Throwable, Throwable> converter1 = converter0.reverse();
      Converter<Throwable, Throwable> converter2 = converter0.andThen(converter1);
      Converter<Throwable, Throwable> converter3 = Converter.from((Function<? super Throwable, ? extends Throwable>) converter2, (Function<? super Throwable, ? extends Throwable>) converter1);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Function<Object, Throwable> function0 = (Function<Object, Throwable>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Throwable, Object> converter4 = Converter.from((Function<? super Throwable, ?>) converter1, (Function<? super Object, ? extends Throwable>) function0);
      Converter<Object, Object> converter5 = Converter.identity();
      Converter<Object, Object> converter6 = converter5.reverse();
      Converter<Throwable, Object> converter7 = converter4.andThen(converter6);
      converter2.andThen(converter7);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(38, threadPoolExecutor_DiscardPolicy0);
      trustedListenableFutureTask0.catching(class0, (Function<? super Throwable, ? extends Throwable>) converter3, (Executor) scheduledThreadPoolExecutor0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TrustedListenableFutureTask<Object> trustedListenableFutureTask1 = TrustedListenableFutureTask.create(callable0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(trustedListenableFutureTask1, scheduledThreadPoolExecutor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(38, threadPoolExecutor_CallerRunsPolicy0);
      trustedListenableFutureTask0.withTimeout((-758L), timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor1);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask2 = TrustedListenableFutureTask.create(callable1);
      trustedListenableFutureTask0.maybePropagateCancellationTo(trustedListenableFutureTask2);
      ForwardingFluentFuture<Object> forwardingFluentFuture0 = new ForwardingFluentFuture<Object>(trustedListenableFutureTask1);
      forwardingFluentFuture0.isCancelled();
      Executor executor0 = null;
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask3 = null;
      try {
        trustedListenableFutureTask3 = new TrustedListenableFutureTask<Throwable>((Callable<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(asyncCallable0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Class<Throwable> class0 = Throwable.class;
      SQLDataException sQLDataException0 = new SQLDataException("com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture", "com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture", (-32));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L,?wz/~", "L,?wz/~", 38, sQLDataException0);
      trustedListenableFutureTask0.setException(sQLInvalidAuthorizationSpecException0);
      Converter<Throwable, Throwable> converter0 = Converter.identity();
      Converter<Throwable, Throwable> converter1 = converter0.reverse();
      Converter<Throwable, Throwable> converter2 = converter0.andThen(converter1);
      Converter<Throwable, Throwable> converter3 = Converter.from((Function<? super Throwable, ? extends Throwable>) converter2, (Function<? super Throwable, ? extends Throwable>) converter1);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(38, threadPoolExecutor_DiscardPolicy0);
      trustedListenableFutureTask0.catching(class0, (Function<? super Throwable, ? extends Throwable>) converter3, (Executor) scheduledThreadPoolExecutor0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(callable0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(38, threadPoolExecutor_CallerRunsPolicy0);
      FluentFuture<Throwable> fluentFuture0 = trustedListenableFutureTask0.withTimeout((-758L), timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor1);
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(trustedListenableFutureTask0, scheduledThreadPoolExecutor1);
      fluentFuture0.cancel(true);
      fluentFuture0.tryInternalFastPathGetFailure();
      trustedListenableFutureTask0.afterDone();
      fluentFuture0.wasInterrupted();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncCallable<TrustedListenableFutureTask<Delayed>> asyncCallable0 = (AsyncCallable<TrustedListenableFutureTask<Delayed>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<TrustedListenableFutureTask<Delayed>> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("wC'wn|\" ", "]D/IX`be;ef8,b", 2143, mockThrowable0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wC'wn|\" ", sQLTimeoutException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLTransientConnectionException0);
      trustedListenableFutureTask0.setException(sQLFeatureNotSupportedException0);
      Callable<Throwable> callable0 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask1 = TrustedListenableFutureTask.create(callable0);
      AsyncCallable<Object> asyncCallable1 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask2 = new TrustedListenableFutureTask<Object>(asyncCallable1);
      trustedListenableFutureTask1.isCancelled();
      trustedListenableFutureTask2.toString();
      ForwardingFluentFuture<Object> forwardingFluentFuture0 = new ForwardingFluentFuture<Object>(trustedListenableFutureTask2);
      forwardingFluentFuture0.toString();
      forwardingFluentFuture0.toString();
      SettableFuture<Object> settableFuture0 = SettableFuture.create();
      settableFuture0.toString();
      settableFuture0.cancel(true);
      settableFuture0.setFuture(trustedListenableFutureTask1);
      trustedListenableFutureTask1.maybePropagateCancellationTo(trustedListenableFutureTask2);
      forwardingFluentFuture0.isCancelled();
      // Undeclared exception!
      try { 
        trustedListenableFutureTask1.addListener(trustedListenableFutureTask0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Executor was null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SettableFuture<Throwable> settableFuture0 = SettableFuture.create();
      settableFuture0.afterDone();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[LoN qPyrprc");
      settableFuture0.set(sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "[LoN qPyrprc", 21);
      Throwable throwable0 = sQLTimeoutException0.initCause(sQLTransactionRollbackException0);
      settableFuture0.setException(sQLTimeoutException0);
      settableFuture0.toString();
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Delayed> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(callable0);
      TrustedListenableFutureTask<TrustedListenableFutureTask<Delayed>> trustedListenableFutureTask1 = TrustedListenableFutureTask.create((Runnable) trustedListenableFutureTask0, trustedListenableFutureTask0);
      trustedListenableFutureTask1.setException(throwable0);
      Callable<Throwable> callable1 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask2 = TrustedListenableFutureTask.create(callable1);
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask3 = new TrustedListenableFutureTask<Object>(asyncCallable0);
      trustedListenableFutureTask2.isCancelled();
      trustedListenableFutureTask3.toString();
      ForwardingFluentFuture<Object> forwardingFluentFuture0 = new ForwardingFluentFuture<Object>(trustedListenableFutureTask3);
      forwardingFluentFuture0.toString();
      forwardingFluentFuture0.toString();
      SettableFuture<Object> settableFuture1 = SettableFuture.create();
      settableFuture1.cancel(false);
      settableFuture1.setFuture(trustedListenableFutureTask3);
      trustedListenableFutureTask2.maybePropagateCancellationTo(trustedListenableFutureTask1);
      forwardingFluentFuture0.isCancelled();
      // Undeclared exception!
      try { 
        trustedListenableFutureTask2.addListener(trustedListenableFutureTask1, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Executor was null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.cancel(false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        trustedListenableFutureTask0.get((-3278L), timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // Task was cancelled.
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncCallable<Comparable<Throwable>> asyncCallable0 = (AsyncCallable<Comparable<Throwable>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Comparable<Throwable>> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.pendingToString();
      TextStyle textStyle0 = TextStyle.FULL;
      trustedListenableFutureTask0.isDone();
      Callable<ChronoLocalDate> callable0 = (Callable<ChronoLocalDate>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ChronoLocalDate> trustedListenableFutureTask1 = TrustedListenableFutureTask.create(callable0);
      trustedListenableFutureTask1.isDone();
      SQLWarning sQLWarning0 = new SQLWarning("task=[running=[NOT STARTED YET], com.google.common.util.concurrent.AsyncCallable$MockitoMock$184670902@0000000003]", "Runnable was null.");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      try { 
        trustedListenableFutureTask1.get((-2196L), timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // Waited -2196 days (plus 2196 days delay) for TrustedListenableFutureTask@4[status=PENDING, info=[task=[running=[NOT STARTED YET], org.evosuite.shaded.org.mockito.codegen.Callable$MockitoMock$1803642338@0000000006]]]
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Callable<Throwable> callable0 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(callable0);
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(asyncCallable0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      SQLWarning sQLWarning0 = new SQLWarning("com.google.common.util.concurrent.com.google.common.util.concurrent.TrustedListenableFutureTask", "com.google.common.util.concurrent.com.google.common.util.concurrent.TrustedListenableFutureTask");
      sQLWarning0.getLocalizedMessage();
      try { 
        trustedListenableFutureTask0.get((-758L), timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // Waited -758 minutes (plus 758 minutes delay) for TrustedListenableFutureTask@3[status=PENDING, info=[task=[running=[NOT STARTED YET], com.google.common.util.concurrent.AsyncCallable$MockitoMock$989900342@0000000005]]]
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(asyncCallable0);
      Class<Throwable> class0 = Throwable.class;
      int[] intArray0 = new int[8];
      intArray0[0] = 5760;
      intArray0[1] = 21;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 21;
      intArray0[5] = (-2591);
      intArray0[6] = 57;
      intArray0[7] = 477;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "IY=i=WFE-:", (-2623));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLTimeoutException0);
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask1 = TrustedListenableFutureTask.create((Runnable) trustedListenableFutureTask0, (Throwable) batchUpdateException0);
      trustedListenableFutureTask0.setFuture(trustedListenableFutureTask1);
      Converter.identity();
      int int0 = 1;
      int int1 = (-1137);
      long long0 = 1107L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      RejectedExecutionHandler rejectedExecutionHandler0 = null;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SettableFuture<Throwable> settableFuture0 = SettableFuture.create();
      settableFuture0.afterDone();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[LoN qPyrprc");
      settableFuture0.set(sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "[LoN qPyrprc", 21);
      sQLTimeoutException0.initCause(sQLTransactionRollbackException0);
      settableFuture0.setException(sQLTimeoutException0);
      settableFuture0.toString();
      ListenableFutureTask<Object> listenableFutureTask0 = null;
      try {
        listenableFutureTask0 = new ListenableFutureTask<Object>((Runnable) null, "[LoN qPyrprc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.Executors", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SettableFuture<ChronoField> settableFuture0 = SettableFuture.create();
      settableFuture0.pendingToString();
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      int int0 = 774;
      trustedListenableFutureTask0.cancel(true);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      int int1 = 148;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-12931), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Callable<Throwable> callable0 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(callable0);
      SQLWarning sQLWarning0 = new SQLWarning();
      trustedListenableFutureTask0.isDone();
      sQLWarning0.getLocalizedMessage();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      try { 
        trustedListenableFutureTask0.get(0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // Waited 0 microseconds for TrustedListenableFutureTask@1[status=PENDING, info=[task=[running=[NOT STARTED YET], org.evosuite.shaded.org.mockito.codegen.Callable$MockitoMock$1803642338@0000000003]]]
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SettableFuture<Object> settableFuture0 = SettableFuture.create();
      FluentFuture<Object> fluentFuture0 = FluentFuture.from((ListenableFuture<Object>) settableFuture0);
      fluentFuture0.afterDone();
      fluentFuture0.isCancelled();
      SettableFuture<Comparable<Throwable>> settableFuture1 = SettableFuture.create();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLWarning0);
      settableFuture1.setException(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncCallable<TrustedListenableFutureTask<Delayed>> asyncCallable0 = (AsyncCallable<TrustedListenableFutureTask<Delayed>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<TrustedListenableFutureTask<Delayed>> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("wC'wn|\" ", "]D/IX`be;ef8,b", 2143, mockThrowable0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wC'wn|\" ", sQLTimeoutException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLTransientConnectionException0);
      trustedListenableFutureTask0.setException(sQLFeatureNotSupportedException0);
      Callable<Throwable> callable0 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask1 = TrustedListenableFutureTask.create(callable0);
      AsyncCallable<Object> asyncCallable1 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask2 = new TrustedListenableFutureTask<Object>(asyncCallable1);
      trustedListenableFutureTask1.isCancelled();
      trustedListenableFutureTask2.toString();
      ForwardingFluentFuture<Object> forwardingFluentFuture0 = new ForwardingFluentFuture<Object>(trustedListenableFutureTask2);
      forwardingFluentFuture0.toString();
      forwardingFluentFuture0.toString();
      SettableFuture<Object> settableFuture0 = SettableFuture.create();
      settableFuture0.cancel(true);
      settableFuture0.setFuture(trustedListenableFutureTask1);
      trustedListenableFutureTask1.maybePropagateCancellationTo(trustedListenableFutureTask2);
      forwardingFluentFuture0.isCancelled();
      // Undeclared exception!
      try { 
        trustedListenableFutureTask1.addListener(trustedListenableFutureTask0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Executor was null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Callable<Comparable<Throwable>> callable0 = (Callable<Comparable<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<Comparable<Throwable>> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      FluentFuture<Comparable<Throwable>> fluentFuture0 = FluentFuture.from((ListenableFuture<Comparable<Throwable>>) listenableFutureTask0);
      fluentFuture0.isCancelled();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, listenableFutureTask0, "a]%4=6u", (-1892L));
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>(false);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(730, 794, 0L, timeUnit0, synchronousQueue0, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor0.isTerminated();
      listenableFutureTask0.addListener(mockThread0, threadPoolExecutor0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(12288);
      TimeUnit timeUnit2 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.getKeepAliveTime(timeUnit2);
      fluentFuture0.withTimeout((-1830L), timeUnit1, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      SettableFuture<Throwable> settableFuture0 = SettableFuture.create();
      settableFuture0.addListener(mockThread0, threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Throwable> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Throwable>();
      Callable<Throwable> callable0 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<ChronoUnit> callable1 = (Callable<ChronoUnit>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      ListenableFutureTask<ChronoUnit> listenableFutureTask0 = new ListenableFutureTask<ChronoUnit>(callable1);
      MockThread mockThread0 = new MockThread((ThreadGroup) null, listenableFutureTask0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      DataTruncation dataTruncation0 = new DataTruncation(5, false, true, 1, 1, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1", "com.google.common.util.concurrent.AggregateFutureState", 5, dataTruncation0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("C3aU;h6B-x#!4R5 Ng", " dataLength: ", 5, longArray0, sQLNonTransientConnectionException0);
      FutureTask<Throwable> futureTask0 = new FutureTask<Throwable>(mockThread0, batchUpdateException0);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_AbortPolicy0);
      immediateFuture_ImmediateCancelledFuture0.addListener(futureTask0, scheduledThreadPoolExecutor0);
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(callable0);
      immediateFuture_ImmediateCancelledFuture0.setFuture(trustedListenableFutureTask0);
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(asyncCallable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.cancel(false);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SettableFuture<ChronoField> settableFuture0 = SettableFuture.create();
      settableFuture0.pendingToString();
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(asyncCallable0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(774, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SettableFuture<ChronoField> settableFuture0 = SettableFuture.create();
      settableFuture0.pendingToString();
      long long0 = 64L;
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(asyncCallable0);
      int int0 = 774;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(774, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(774, (-12931), 2787L, timeUnit0, blockingQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Comparable<Throwable>> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Comparable<Throwable>>();
      immediateFuture_ImmediateCancelledFuture0.afterDone();
      Comparable<Throwable> comparable0 = (Comparable<Throwable>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      immediateFuture_ImmediateCancelledFuture0.set(comparable0);
      immediateFuture_ImmediateCancelledFuture0.isDone();
      ForwardingFluentFuture<Comparable<Throwable>> forwardingFluentFuture0 = new ForwardingFluentFuture<Comparable<Throwable>>(immediateFuture_ImmediateCancelledFuture0);
      Callable<Throwable> callable0 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(callable0);
      Stack<ListenableFuture<Throwable>> stack0 = new Stack<ListenableFuture<Throwable>>();
      ImmutableSortedMultiset<ListenableFuture<Throwable>> immutableSortedMultiset0 = ImmutableSortedMultiset.copyOf((Iterable<? extends ListenableFuture<Throwable>>) stack0);
      ImmutableSortedMultiset<ListenableFuture<Throwable>> immutableSortedMultiset1 = ImmutableSortedMultiset.copyOfSorted((SortedMultiset<ListenableFuture<Throwable>>) immutableSortedMultiset0);
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        immutableSortedMultiset1.subMultiset(trustedListenableFutureTask0, boundType0, trustedListenableFutureTask0, boundType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.common.util.concurrent.TrustedListenableFutureTask cannot be cast to java.lang.Comparable
         //
         verifyException("com.google.common.collect.NaturalOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AsyncCallable<Comparable<Throwable>> asyncCallable0 = (AsyncCallable<Comparable<Throwable>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Comparable<Throwable>> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.pendingToString();
      TextStyle textStyle0 = TextStyle.FULL;
      TrustedListenableFutureTask<Comparable<TextStyle>> trustedListenableFutureTask1 = TrustedListenableFutureTask.create((Runnable) trustedListenableFutureTask0, (Comparable<TextStyle>) textStyle0);
      ForwardingFluentFuture<Comparable<TextStyle>> forwardingFluentFuture0 = new ForwardingFluentFuture<Comparable<TextStyle>>(trustedListenableFutureTask1);
      ForwardingFluentFuture<Comparable<TextStyle>> forwardingFluentFuture1 = new ForwardingFluentFuture<Comparable<TextStyle>>(forwardingFluentFuture0);
      trustedListenableFutureTask0.isDone();
      Callable<ChronoLocalDate> callable0 = (Callable<ChronoLocalDate>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ChronoLocalDate> trustedListenableFutureTask2 = TrustedListenableFutureTask.create(callable0);
      trustedListenableFutureTask2.isDone();
      String string0 = "Runnable was null.";
      SQLWarning sQLWarning0 = new SQLWarning("task=[running=[NOT STARTED YET], com.google.common.util.concurrent.AsyncCallable$MockitoMock$184670902@0000000003]", "Runnable was null.");
      ImmediateFuture.ImmediateFailedFuture<Throwable> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Throwable>(sQLWarning0);
      immediateFuture_ImmediateFailedFuture0.setException(sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Runnable was null.", "Runnable was null.", 0, sQLWarning0);
      sQLWarning0.setNextException(sQLRecoverableException0);
      immediateFuture_ImmediateFailedFuture0.isDone();
      try { 
        immediateFuture_ImmediateFailedFuture0.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // java.sql.SQLWarning: task=[running=[NOT STARTED YET], com.google.common.util.concurrent.AsyncCallable$MockitoMock$184670902@0000000003]
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.cancel(false);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(callable0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2188, threadPoolExecutor_CallerRunsPolicy0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy1 = new ThreadPoolExecutor.CallerRunsPolicy();
      // Undeclared exception!
      try { 
        trustedListenableFutureTask0.get();
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // Task was cancelled.
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 3128;
      longArray0[1] = (long) 3128;
      longArray0[2] = (long) 3128;
      longArray0[3] = (long) 3128;
      int[] intArray0 = new int[6];
      intArray0[0] = 3128;
      intArray0[1] = 3128;
      intArray0[2] = 3128;
      intArray0[3] = 3128;
      intArray0[4] = 3128;
      intArray0[5] = 3128;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("N\"}EGQ)R+", intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("N\"}EGQ)R+", "IEZfXU5ZED3^", 3128, longArray0, batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException1);
      ImmediateFuture.ImmediateFailedFuture<TrustedListenableFutureTask<Throwable>> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<TrustedListenableFutureTask<Throwable>>(sQLTransactionRollbackException0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      try { 
        immediateFuture_ImmediateFailedFuture0.get((-1143L), timeUnit0);
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException: N\"}EGQ)R+
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AsyncCallable<Comparable<Throwable>> asyncCallable0 = (AsyncCallable<Comparable<Throwable>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Comparable<Throwable>> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.pendingToString();
      TextStyle textStyle0 = TextStyle.FULL;
      TrustedListenableFutureTask<Comparable<TextStyle>> trustedListenableFutureTask1 = TrustedListenableFutureTask.create((Runnable) trustedListenableFutureTask0, (Comparable<TextStyle>) textStyle0);
      ForwardingFluentFuture<Comparable<TextStyle>> forwardingFluentFuture0 = new ForwardingFluentFuture<Comparable<TextStyle>>(trustedListenableFutureTask1);
      ForwardingFluentFuture<Comparable<TextStyle>> forwardingFluentFuture1 = new ForwardingFluentFuture<Comparable<TextStyle>>(forwardingFluentFuture0);
      trustedListenableFutureTask0.isDone();
      Callable<ChronoLocalDate> callable0 = (Callable<ChronoLocalDate>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ChronoLocalDate> trustedListenableFutureTask2 = TrustedListenableFutureTask.create(callable0);
      trustedListenableFutureTask2.isDone();
      SQLWarning sQLWarning0 = new SQLWarning("task=[running=[NOT STARTED YET], com.google.common.util.concurrent.AsyncCallable$MockitoMock$184670902@0000000003]", "Runnable was null.");
      ImmediateFuture.ImmediateFailedFuture<Throwable> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Throwable>(sQLWarning0);
      immediateFuture_ImmediateFailedFuture0.setException(sQLWarning0);
      int int0 = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Runnable was null.", "Runnable was null.", 0, sQLWarning0);
      sQLWarning0.setNextException(sQLRecoverableException0);
      immediateFuture_ImmediateFailedFuture0.isDone();
      try { 
        immediateFuture_ImmediateFailedFuture0.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // java.sql.SQLWarning: task=[running=[NOT STARTED YET], com.google.common.util.concurrent.AsyncCallable$MockitoMock$184670902@0000000003]
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Comparable<Object>> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Comparable<Object>>();
      boolean boolean0 = false;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        immediateFuture_ImmediateCancelledFuture0.get(2196L, timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // Task was cancelled.
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("com.google.common.collect.ImmutableMultimap$Keys", "com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper", 1901);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.google.common.util.concurrent.AbstractFuture$1", "com.google.common.util.concurrent.AbstractFuture$1", 25, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.google.common.util.concurrent.AbstractFuture$1", sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLSyntaxErrorException0);
      ImmediateFuture.ImmediateFailedFuture<Throwable> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Throwable>(sQLNonTransientException0);
      immediateFuture_ImmediateFailedFuture0.setException(sQLDataException0);
      ImmediateFuture.ImmediateFailedFuture<Comparable<Throwable>> immediateFuture_ImmediateFailedFuture1 = new ImmediateFuture.ImmediateFailedFuture<Comparable<Throwable>>(sQLNonTransientException0);
      immediateFuture_ImmediateFailedFuture1.interruptTask();
      ImmediateFuture.ImmediateCancelledFuture<BoundType> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<BoundType>();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        immediateFuture_ImmediateCancelledFuture0.get(1330L, timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // Task was cancelled.
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<ChronoUnit> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<ChronoUnit>();
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(asyncCallable0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.cancel(false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(148, threadFactory0);
      TimeoutFuture.create((ListenableFuture<Throwable>) trustedListenableFutureTask0, 1457L, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.cancel(false);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(callable0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2188, threadPoolExecutor_CallerRunsPolicy0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      trustedListenableFutureTask0.withTimeout(1457L, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(trustedListenableFutureTask0, scheduledThreadPoolExecutor0);
      trustedListenableFutureTask0.cancel(true);
      Callable<Throwable> callable1 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask1 = TrustedListenableFutureTask.create(callable1);
      trustedListenableFutureTask1.tryInternalFastPathGetFailure();
      ForwardingFluentFuture<Throwable> forwardingFluentFuture0 = new ForwardingFluentFuture<Throwable>(trustedListenableFutureTask1);
      forwardingFluentFuture0.isDone();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Comparable<Object>> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Comparable<Object>>();
      immediateFuture_ImmediateCancelledFuture0.cancel(false);
      immediateFuture_ImmediateCancelledFuture0.isCancelled();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Callable<Throwable> callable0 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<Throwable> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(21, threadFactory0);
      ListenableFuture<Throwable> listenableFuture0 = TimeoutFuture.create((ListenableFuture<Throwable>) listenableFutureTask0, 0L, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      ImmutableMultiset<ListenableFuture<Throwable>> immutableMultiset0 = ImmutableMultiset.of(listenableFuture0, listenableFuture0, (ListenableFuture<Throwable>) listenableFutureTask0, (ListenableFuture<Throwable>) listenableFutureTask0, (ListenableFuture<Throwable>) listenableFutureTask0);
      Callable<ListenableFuture<Throwable>> callable1 = (Callable<ListenableFuture<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Throwable>> combinedFuture0 = new CombinedFuture<ListenableFuture<Throwable>>(immutableMultiset0, false, scheduledThreadPoolExecutor0, callable1);
      AggregateFuture.ReleaseResourcesReason aggregateFuture_ReleaseResourcesReason0 = AggregateFuture.ReleaseResourcesReason.ALL_INPUT_FUTURES_PROCESSED;
      combinedFuture0.releaseResources(aggregateFuture_ReleaseResourcesReason0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SettableFuture.create();
      SQLWarning sQLWarning0 = new SQLWarning("", "com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper");
      ImmediateFuture.ImmediateFailedFuture<Throwable> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Throwable>(sQLWarning0);
      Thread thread0 = MockThread.currentThread();
      ListenableFutureTask<Throwable> listenableFutureTask0 = ListenableFutureTask.create((Runnable) thread0, (Throwable) sQLWarning0);
      immediateFuture_ImmediateFailedFuture0.setFuture(listenableFutureTask0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncCallable0).call();
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(asyncCallable0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Class<Throwable> class0 = Throwable.class;
      Converter<Throwable, Throwable> converter0 = Converter.identity();
      Converter<Throwable, Throwable> converter1 = converter0.reverse();
      Converter<Throwable, Throwable> converter2 = converter0.andThen(converter1);
      Converter<Throwable, Throwable> converter3 = Converter.from((Function<? super Throwable, ? extends Throwable>) converter2, (Function<? super Throwable, ? extends Throwable>) converter1);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(38, threadPoolExecutor_DiscardPolicy0);
      trustedListenableFutureTask0.catching(class0, (Function<? super Throwable, ? extends Throwable>) converter3, (Executor) scheduledThreadPoolExecutor0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask.create(callable0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(38, threadPoolExecutor_CallerRunsPolicy0);
      FluentFuture<Throwable> fluentFuture0 = trustedListenableFutureTask0.withTimeout((-758L), timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor1);
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(trustedListenableFutureTask0, scheduledThreadPoolExecutor1);
      fluentFuture0.cancel(true);
      Throwable throwable0 = fluentFuture0.tryInternalFastPathGetFailure();
      //  // Unstable assertion: assertNull(throwable0);
  }
}
