/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:34:59 GMT 2024
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.io.ByteSource;
import com.google.common.io.CharSource;
import com.google.common.io.LineProcessor;
import com.google.common.io.Resources;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Resources_ESTest extends Resources_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      URL uRL0 = Resources.getResource(class0, "");
      File file0 = MockFile.createTempFile("2,0:2Q<OaJ? G", "BJ+XDPEt5");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Resources.copy(uRL0, mockPrintStream0);
      assertNull(uRL0.getQuery());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "}0u':r63a*i/hph");
      Charset charset0 = Charset.defaultCharset();
      String string0 = Resources.toString(uRL0, charset0);
      assertEquals("}0u':r63a*i/hph", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      URL uRL0 = Resources.getResource(class0, "");
      Charset charset0 = Charset.defaultCharset();
      String string0 = Resources.toString(uRL0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      URL uRL0 = Resources.getResource(class0, "");
      Charset charset0 = Charset.defaultCharset();
      LineProcessor<ClassLoader> lineProcessor0 = (LineProcessor<ClassLoader>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lineProcessor0).getResult();
      ClassLoader classLoader0 = Resources.readLines(uRL0, charset0, lineProcessor0);
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      URL uRL0 = Resources.getResource(class0, "");
      Charset charset0 = Charset.defaultCharset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LineProcessor<ClassLoader> lineProcessor0 = (LineProcessor<ClassLoader>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      doReturn(classLoader0).when(lineProcessor0).getResult();
      ClassLoader classLoader1 = Resources.readLines(uRL0, charset0, lineProcessor0);
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      URL uRL0 = Resources.getResource(class0, "");
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = Resources.readLines(uRL0, charset0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      CharSource charSource0 = Resources.asCharSource(uRL0, charset0);
      assertNotNull(charSource0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ByteSource byteSource0 = Resources.asByteSource(uRL0);
      assertNotNull(byteSource0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Resources.toString(uRL0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Resources.toByteArray((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        Resources.toByteArray(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      LineProcessor<ClassLoader> lineProcessor0 = (LineProcessor<ClassLoader>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      try { 
        Resources.readLines(uRL0, charset0, lineProcessor0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        Resources.readLines(uRL0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Resources.getResource((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Resources.getResource("\u0000\u00AD\u0600\u061C\u06DD\u070F\u08E2\u1680\u180E\u2000\u2028\u205F\u2066\u3000\uD800\uFEFF\uFFF9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MALFORMED
         //
         verifyException("java.util.zip.ZipCoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      // Undeclared exception!
      try { 
        Resources.getResource(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Resources.getResource(class0, "\u0000\u00AD\u0600\u061C\u06DD\u070F\u08E2\u1680\u180E\u2000\u2028\u205F\u2066\u3000\uD800\uFEFF\uFFF9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MALFORMED
         //
         verifyException("java.util.zip.ZipCoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        Resources.copy(uRL0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Resources.asByteSource((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        Resources.asCharSource(uRL0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Resources.readLines(uRL0, charset0, (LineProcessor<ClassLoader>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Resources.getResource(class0, "com.google.common.base.Enums$StringConverter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // resource java.lang.String@0000000001 relative to java.lang.String@0000000002 not found.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Resources.getResource("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // resource java.lang.String@0000000001 not found.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "}0u':r63a*i/hph");
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = Resources.readLines(uRL0, charset0);
      assertTrue(list0.contains("}0u':r63a*i/hph"));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        Resources.readLines(uRL0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      URL uRL0 = Resources.getResource(class0, "");
      byte[] byteArray0 = Resources.toByteArray(uRL0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        Resources.copy(uRL0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        Resources.toString(uRL0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
