/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:50:28 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.Cut;
import com.google.common.collect.DiscreteDomain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cut_ESTest extends Cut_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      Cut<Integer> cut1 = Cut.belowValue(integer0);
      int int0 = cut0.compareTo(cut1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      Integer integer1 = new Integer((-1375));
      Cut<Integer> cut1 = Cut.belowValue(integer1);
      boolean boolean0 = cut1.equals(cut0);
      assertFalse(boolean0);
      assertFalse(cut0.equals((Object)cut1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Cut<Integer> cut0 = Cut.belowValue(integer0);
      // Undeclared exception!
      try { 
        cut0.compareTo((Cut<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Cut", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Cut.belowValue((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Cut.aboveValue((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cut<Integer> cut0 = Cut.belowAll();
      int int0 = cut0.compareTo((Cut<Integer>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cut<Integer> cut0 = Cut.aboveAll();
      boolean boolean0 = cut0.equals(cut0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Cut<Integer> cut1 = cut0.canonical(discreteDomain0);
      int int0 = cut1.compareTo(cut0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cut<Integer> cut0 = Cut.belowAll();
      boolean boolean0 = cut0.equals(cut0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2543);
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      boolean boolean0 = cut0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(2543);
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Cut<Integer> cut1 = cut0.canonical(discreteDomain0);
      int int0 = cut1.compareTo(cut0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cut<Integer> cut0 = Cut.aboveAll();
      Integer integer0 = new Integer(13);
      Cut<Integer> cut1 = Cut.belowValue(integer0);
      boolean boolean0 = cut1.equals(cut0);
      assertFalse(cut0.equals((Object)cut1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cut<Integer> cut0 = Cut.belowAll();
      Integer integer0 = new Integer((-1));
      Cut<Integer> cut1 = Cut.aboveValue(integer0);
      boolean boolean0 = cut1.equals(cut0);
      assertFalse(cut0.equals((Object)cut1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cut<Integer> cut0 = Cut.aboveAll();
      // Undeclared exception!
      try { 
        cut0.endpoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // range unbounded on this side
         //
         verifyException("com.google.common.collect.Cut$AboveAll", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cut<Integer> cut0 = Cut.belowAll();
      // Undeclared exception!
      try { 
        cut0.canonical((DiscreteDomain<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Cut$BelowAll", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cut<Integer> cut0 = Cut.belowAll();
      // Undeclared exception!
      try { 
        cut0.endpoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // range unbounded on this side
         //
         verifyException("com.google.common.collect.Cut$BelowAll", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(2543);
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Cut<Integer> cut1 = cut0.canonical(discreteDomain0);
      Cut<Integer> cut2 = cut1.canonical(discreteDomain0);
      assertFalse(cut2.equals((Object)cut0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(2543);
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      Integer integer1 = cut0.endpoint();
      assertEquals(2543, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(2543);
      Cut<Integer> cut0 = Cut.aboveValue(integer0);
      int int0 = cut0.compareTo(cut0);
      assertEquals(0, int0);
  }
}
