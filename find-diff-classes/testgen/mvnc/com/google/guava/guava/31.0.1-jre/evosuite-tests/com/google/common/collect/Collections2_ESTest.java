/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:41:04 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.BoundType;
import com.google.common.collect.Collections2;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.Range;
import com.google.common.collect.RegularImmutableList;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnel;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Collections2_ESTest extends Collections2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(15);
      Range<Integer> range0 = Range.openClosed(integer0, integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      ContiguousSet<Integer> contiguousSet0 = ContiguousSet.create(range0, discreteDomain0);
      Collections2.FilteredCollection<Integer> collections2_FilteredCollection0 = new Collections2.FilteredCollection<Integer>(contiguousSet0, (Predicate<? super Integer>) null);
      // Undeclared exception!
      try { 
        collections2_FilteredCollection0.createCombined(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 8L);
      Collections2.FilteredCollection<Collections2.FilteredCollection<Integer>> collections2_FilteredCollection0 = new Collections2.FilteredCollection<Collections2.FilteredCollection<Integer>>((Collection<Collections2.FilteredCollection<Integer>>) null, bloomFilter0);
      // Undeclared exception!
      try { 
        collections2_FilteredCollection0.addAll((Collection<? extends Collections2.FilteredCollection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Collections2$FilteredCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmutableList<Object> immutableList0 = RegularImmutableList.EMPTY;
      // Undeclared exception!
      try { 
        Collections2.safeRemove(immutableList0, immutableList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      Collections2.FilteredCollection<Object> collections2_FilteredCollection0 = new Collections2.FilteredCollection<Object>(priorityQueue0, bloomFilter0);
      priorityQueue0.add(collections2_FilteredCollection0);
      int int0 = collections2_FilteredCollection0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ImmutableSortedMultiset<Locale.FilteringMode> immutableSortedMultiset0 = ImmutableSortedMultiset.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1);
      Range<Locale.FilteringMode> range0 = Range.atLeast(locale_FilteringMode1);
      Collections2.FilteredCollection<Locale.FilteringMode> collections2_FilteredCollection0 = new Collections2.FilteredCollection<Locale.FilteringMode>(immutableSortedMultiset0, range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collections2_FilteredCollection0.forEach(consumer0);
      assertTrue(collections2_FilteredCollection0.contains(locale_FilteringMode1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 781L);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(22);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integerArray0[1];
      integerArray0[3] = integerArray0[1];
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integerArray0[4];
      integerArray0[7] = integerArray0[2];
      integerArray0[8] = integerArray0[0];
      ImmutableList<Integer> immutableList0 = ImmutableList.copyOf(integerArray0);
      Collections2.FilteredCollection<Integer> collections2_FilteredCollection0 = new Collections2.FilteredCollection<Integer>(immutableList0, bloomFilter0);
      boolean boolean0 = collections2_FilteredCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Collections2.FilteredCollection<Integer> collections2_FilteredCollection0 = new Collections2.FilteredCollection<Integer>(arrayDeque0, bloomFilter0);
      // Undeclared exception!
      try { 
        collections2_FilteredCollection0.add((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      Collections2.FilteredCollection<Object> collections2_FilteredCollection0 = new Collections2.FilteredCollection<Object>(priorityQueue0, bloomFilter0);
      Collections2.FilteredCollection<Object> collections2_FilteredCollection1 = collections2_FilteredCollection0.createCombined(bloomFilter0);
      assertNotSame(collections2_FilteredCollection0, collections2_FilteredCollection1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Collections2.transform((Collection<Comparable<Object>>) null, (Function<? super Comparable<Object>, Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Collections2.safeRemove((Collection<?>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>(0);
      String string0 = Collections2.toStringImpl(linkedHashSet0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Function<Object, Collections2.FilteredCollection<Integer>> function0 = (Function<Object, Collections2.FilteredCollection<Integer>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Integer, Collections2.FilteredCollection<Integer>> converter0 = Converter.from((Function<? super Integer, ? extends Collections2.FilteredCollection<Integer>>) function0, (Function<? super Collections2.FilteredCollection<Integer>, ? extends Integer>) function1);
      Collections2.TransformedCollection<Integer, Collections2.FilteredCollection<Integer>> collections2_TransformedCollection0 = null;
      try {
        collections2_TransformedCollection0 = new Collections2.TransformedCollection<Integer, Collections2.FilteredCollection<Integer>>((Collection<Integer>) null, converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
