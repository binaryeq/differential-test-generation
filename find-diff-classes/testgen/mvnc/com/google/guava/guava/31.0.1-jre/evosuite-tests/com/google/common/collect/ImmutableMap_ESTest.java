/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:10:38 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMapEntry;
import com.google.common.collect.ImmutableSortedMap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.SingletonImmutableSet;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmutableMap_ESTest extends ImmutableMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Integer> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Integer>) comparator0);
      Integer integer0 = new Integer((-300));
      SingletonImmutableSet<Integer> singletonImmutableSet0 = new SingletonImmutableSet<Integer>(integer0);
      ImmutableList<Integer> immutableList0 = singletonImmutableSet0.asList();
      ImmutableSortedMap<Integer, Integer> immutableSortedMap0 = new ImmutableSortedMap<Integer, Integer>(regularImmutableSortedSet0, immutableList0);
      boolean boolean0 = immutableSortedMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Map.Entry<Locale.Category, Integer>[] map_EntryArray0 = (Map.Entry<Locale.Category, Integer>[]) Array.newInstance(Map.Entry.class, 9);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Integer integer0 = new Integer(65535);
      ImmutableMapEntry<Locale.Category, Integer> immutableMapEntry0 = new ImmutableMapEntry<Locale.Category, Integer>(locale_Category0, integer0);
      ImmutableMapEntry.NonTerminalImmutableMapEntry<Locale.Category, Integer> immutableMapEntry_NonTerminalImmutableMapEntry0 = new ImmutableMapEntry.NonTerminalImmutableMapEntry<Locale.Category, Integer>(locale_Category0, integer0, immutableMapEntry0);
      map_EntryArray0[0] = (Map.Entry<Locale.Category, Integer>) immutableMapEntry_NonTerminalImmutableMapEntry0;
      AbstractMap.SimpleImmutableEntry<Locale.Category, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Locale.Category, Integer>(locale_Category0, integer0);
      map_EntryArray0[1] = (Map.Entry<Locale.Category, Integer>) abstractMap_SimpleImmutableEntry0;
      // Undeclared exception!
      try { 
        ImmutableMap.ofEntries((Map.Entry<? extends Locale.Category, ? extends Integer>[]) map_EntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: DISPLAY=65535 and DISPLAY=65535
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmutableSortedMap<Locale.Category, RegularContiguousSet<Locale.Category>> immutableSortedMap0 = ImmutableSortedMap.of();
      Map.Entry<Locale.Category, RegularContiguousSet<Locale.Category>> map_Entry0 = immutableSortedMap0.firstEntry();
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImmutableMap.Builder<Comparable<BoundType>, Integer> immutableMap_Builder0 = new ImmutableMap.Builder<Comparable<BoundType>, Integer>();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImmutableMap.Builder<Object, Integer> immutableMap_Builder0 = new ImmutableMap.Builder<Object, Integer>(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Integer integer0 = new Integer(1620);
      // Undeclared exception!
      try { 
        ImmutableMap.of(locale_Category0, integer0, locale_Category0, integer0, locale_Category0, integer0, locale_Category0, integer0, locale_Category0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: DISPLAY=1620 and DISPLAY=1620
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImmutableMap<Map.Entry<Integer, Integer>, BoundType> immutableMap0 = ImmutableMap.of();
      Object object0 = immutableMap0.writeReplace();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ImmutableMap.of(integer0, (Comparable<Integer>) integer0, integer0, (Comparable<Integer>) integer0, integer0, (Comparable<Integer>) integer0, integer0, (Comparable<Integer>) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: 0=0 and 0=0
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImmutableMap<Integer, Integer> immutableMap0 = ImmutableMap.of();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        immutableMap0.replace(integer0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImmutableMap<Map.Entry<Integer, Integer>, BoundType> immutableMap0 = ImmutableMap.of();
      Spliterator<Map.Entry<Integer, Integer>> spliterator0 = immutableMap0.keySpliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableSortedMap<Locale.FilteringMode, Integer> immutableSortedMap0 = ImmutableSortedMap.emptyMap((Comparator<? super Locale.FilteringMode>) comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        immutableSortedMap0.compute(locale_FilteringMode0, biFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Integer integer0 = new Integer(0);
      BoundType boundType1 = BoundType.CLOSED;
      ImmutableMap<BoundType, Integer> immutableMap0 = ImmutableMap.of(boundType0, integer0, boundType1, integer0);
      assertEquals(2, immutableMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableMap.toImmutableMap((Function<? super Integer, ?>) null, (Function<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Integer integer0 = new Integer(65536);
      // Undeclared exception!
      try { 
        ImmutableMap.of(locale_FilteringMode0, integer0, locale_FilteringMode0, integer0, locale_FilteringMode0, integer0, locale_FilteringMode0, integer0, locale_FilteringMode0, integer0, locale_FilteringMode0, integer0, locale_FilteringMode0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: REJECT_EXTENDED_RANGES=65536 and REJECT_EXTENDED_RANGES=65536
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
