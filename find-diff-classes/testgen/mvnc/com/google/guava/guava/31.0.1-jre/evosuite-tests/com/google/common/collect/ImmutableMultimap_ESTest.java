/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:12:05 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyContiguousSet;
import com.google.common.collect.EmptyImmutableSetMultimap;
import com.google.common.collect.EnumMultiset;
import com.google.common.collect.ImmutableCollection;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.LinkedHashMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.Multisets;
import com.google.common.collect.Range;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.UnmodifiableIterator;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmutableMultimap_ESTest extends ImmutableMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ImmutableMultimap<Locale.Category, Locale.Category> immutableMultimap0 = ImmutableMultimap.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      ImmutableMultimap.Keys immutableMultimap_Keys0 = immutableMultimap0.new Keys();
      ImmutableMultimap.Keys immutableMultimap_Keys1 = immutableMultimap0.new Keys();
      // Undeclared exception!
      try { 
        ImmutableMultimap.of(immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys1, immutableMultimap_Keys1, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: [DISPLAY x 4]=[com.google.common.collect.ImmutableMultimap$Keys@0000000006] and [DISPLAY x 4]=[com.google.common.collect.ImmutableMultimap$Keys@0000000006]
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      ImmutableMultimap<Locale.Category, Locale.Category> immutableMultimap0 = ImmutableMultimap.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1, locale_Category0, locale_Category1);
      assertEquals(3, immutableMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      ImmutableMultimap<Locale.Category, Locale.Category> immutableMultimap0 = ImmutableMultimap.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1, locale_Category0, locale_Category0);
      assertEquals(3, immutableMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableSetMultimap.copyOf((Iterable<? extends Map.Entry<? extends BoundType, ? extends BoundType>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMultimap$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, boundType0, boundType0, boundType0, boundType0, boundType0);
      immutableListMultimap0.get(boundType0);
      assertEquals(3, immutableListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImmutableMultimap<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode> immutableMultimap0 = ImmutableMultimap.of();
      UnmodifiableIterator<Map.Entry<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode>> unmodifiableIterator0 = (UnmodifiableIterator<Map.Entry<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode>>)immutableMultimap0.entryIterator();
      assertNotNull(unmodifiableIterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashMultimap<ImmutableMultimap.Keys, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> linkedHashMultimap0 = LinkedHashMultimap.create();
      ImmutableListMultimap<ImmutableMultimap.Keys, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> immutableListMultimap0 = ImmutableListMultimap.copyOf((Multimap<? extends ImmutableMultimap.Keys, ? extends Multisets.UnmodifiableMultiset<Locale.FilteringMode>>) linkedHashMultimap0);
      ImmutableCollection<Map.Entry<ImmutableMultimap.Keys, Multisets.UnmodifiableMultiset<Locale.FilteringMode>>> immutableCollection0 = (ImmutableCollection<Map.Entry<ImmutableMultimap.Keys, Multisets.UnmodifiableMultiset<Locale.FilteringMode>>>)immutableListMultimap0.createEntries();
      assertNotNull(immutableCollection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, boundType0, boundType0, boundType0, boundType0, boundType0);
      ImmutableMultimap.Keys immutableMultimap_Keys0 = immutableListMultimap0.new Keys();
      LinkedHashMultimap<ImmutableMultimap.Keys, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> linkedHashMultimap0 = LinkedHashMultimap.create();
      ImmutableListMultimap<ImmutableMultimap.Keys, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> immutableListMultimap1 = ImmutableListMultimap.copyOf((Multimap<? extends ImmutableMultimap.Keys, ? extends Multisets.UnmodifiableMultiset<Locale.FilteringMode>>) linkedHashMultimap0);
      // Undeclared exception!
      try { 
        immutableListMultimap1.removeAll(immutableMultimap_Keys0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableListMultimap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableMultimap_Builder0 = new ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType>();
      ImmutableListMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableListMultimap_Builder0 = ImmutableListMultimap.builder();
      ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableMultimap_Builder1 = immutableMultimap_Builder0.combine(immutableListMultimap_Builder0);
      assertNotNull(immutableMultimap_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableListMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableListMultimap_Builder0 = ImmutableListMultimap.builder();
      Range<BoundType> range0 = Range.lessThan(boundType0);
      DiscreteDomain<BoundType> discreteDomain0 = (DiscreteDomain<BoundType>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      RegularContiguousSet<BoundType> regularContiguousSet0 = new RegularContiguousSet<BoundType>(range0, discreteDomain0);
      DiscreteDomain<BoundType> discreteDomain1 = regularContiguousSet0.domain;
      EmptyContiguousSet<BoundType> emptyContiguousSet0 = new EmptyContiguousSet<BoundType>(discreteDomain1);
      BoundType[] boundTypeArray0 = new BoundType[7];
      boundTypeArray0[0] = boundType0;
      boundTypeArray0[1] = boundType0;
      boundTypeArray0[2] = boundType0;
      boundTypeArray0[3] = boundType0;
      boundTypeArray0[4] = boundType0;
      boundTypeArray0[5] = boundType0;
      boundTypeArray0[6] = boundType0;
      ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableMultimap_Builder0 = immutableListMultimap_Builder0.putAll(emptyContiguousSet0, boundTypeArray0);
      assertNotNull(immutableMultimap_Builder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableMultimap_Builder0 = new ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType>();
      Range<BoundType> range0 = Range.lessThan(boundType0);
      DiscreteDomain<BoundType> discreteDomain0 = (DiscreteDomain<BoundType>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      RegularContiguousSet<BoundType> regularContiguousSet0 = new RegularContiguousSet<BoundType>(range0, discreteDomain0);
      DiscreteDomain<BoundType> discreteDomain1 = regularContiguousSet0.domain;
      EmptyContiguousSet<BoundType> emptyContiguousSet0 = new EmptyContiguousSet<BoundType>(discreteDomain1);
      ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableMultimap_Builder1 = immutableMultimap_Builder0.putAll(emptyContiguousSet0, (Iterable<? extends BoundType>) emptyContiguousSet0);
      assertNotNull(immutableMultimap_Builder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      Iterator<BoundType> iterator0 = enumMultiset0.iterator();
      ImmutableSortedMultiset<BoundType> immutableSortedMultiset0 = ImmutableSortedMultiset.copyOf((Iterator<? extends BoundType>) iterator0);
      UnmodifiableSortedMultiset<BoundType> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<BoundType>(immutableSortedMultiset0);
      BoundType boundType0 = BoundType.CLOSED;
      ImmutableMultimap<UnmodifiableSortedMultiset<BoundType>, BoundType> immutableMultimap0 = ImmutableMultimap.of(unmodifiableSortedMultiset0, boundType0);
      assertEquals(1, immutableMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImmutableMultimap.Builder<ImmutableMultimap.Keys, Comparable<ImmutableMultimap.Keys>> immutableMultimap_Builder0 = ImmutableMultimap.builder();
      assertNotNull(immutableMultimap_Builder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      boolean boolean0 = emptyImmutableSetMultimap0.isPartialView();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmutableMultimap<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode> immutableMultimap0 = ImmutableMultimap.of();
      // Undeclared exception!
      try { 
        immutableMultimap0.createAsMap();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // should never be called
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, boundType0, boundType0, boundType0, boundType0, boundType0);
      ImmutableMultimap.Keys immutableMultimap_Keys0 = immutableListMultimap0.new Keys();
      immutableMultimap_Keys0.writeReplace();
      assertEquals(3, immutableMultimap_Keys0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImmutableMultimap<ImmutableMultimap.Keys, Object> immutableMultimap0 = ImmutableMultimap.of();
      Object object0 = new Object();
      ImmutableSetMultimap<Object, Object> immutableSetMultimap0 = ImmutableSetMultimap.of(object0, (Object) immutableMultimap0, (Object) immutableMultimap0, object0);
      ImmutableSetMultimap<Object, Object> immutableSetMultimap1 = immutableSetMultimap0.inverse();
      assertEquals(2, immutableSetMultimap1.size());
      assertTrue(immutableSetMultimap1.equals((Object)immutableSetMultimap0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImmutableListMultimap<Map.Entry<ImmutableMultimap.Keys, ImmutableMultimap.Keys>, ImmutableMultimap.Keys> immutableListMultimap0 = ImmutableListMultimap.of();
      ImmutableMultimap.Keys immutableMultimap_Keys0 = immutableListMultimap0.new Keys();
      ImmutableMultimap<ImmutableMultimap.Keys, ImmutableMultimap.Keys> immutableMultimap0 = ImmutableMultimap.of(immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0, immutableMultimap_Keys0);
      immutableMultimap0.entries();
      assertEquals(5, immutableMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType> immutableMultimap_Builder0 = new ImmutableMultimap.Builder<EmptyContiguousSet<BoundType>, BoundType>();
      // Undeclared exception!
      try { 
        immutableMultimap_Builder0.put((Map.Entry<? extends EmptyContiguousSet<BoundType>, ? extends BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMultimap$Builder", e);
      }
  }
}
