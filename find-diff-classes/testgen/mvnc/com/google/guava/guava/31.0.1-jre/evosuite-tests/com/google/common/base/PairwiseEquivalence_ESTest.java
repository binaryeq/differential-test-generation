/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:09:56 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Equivalence;
import com.google.common.base.PairwiseEquivalence;
import com.google.common.collect.BoundType;
import java.io.FileDescriptor;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PairwiseEquivalence_ESTest extends PairwiseEquivalence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Equivalence.Identity equivalence_Identity0 = new Equivalence.Identity();
      PairwiseEquivalence<Object, Object> pairwiseEquivalence0 = new PairwiseEquivalence<Object, Object>(equivalence_Identity0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(equivalence_Identity0);
      int int0 = pairwiseEquivalence0.doHash(linkedHashSet0);
      assertEquals(1963537904, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.identity();
      PairwiseEquivalence<Object, Equivalence<Object>> pairwiseEquivalence0 = new PairwiseEquivalence<Object, Equivalence<Object>>(equivalence0);
      // Undeclared exception!
      try { 
        pairwiseEquivalence0.doHash((Iterable<Equivalence<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.PairwiseEquivalence", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.identity();
      PairwiseEquivalence<Object, Equivalence.Equals> pairwiseEquivalence0 = new PairwiseEquivalence<Object, Equivalence.Equals>(equivalence0);
      // Undeclared exception!
      try { 
        pairwiseEquivalence0.doEquivalent((Iterable<Equivalence.Equals>) null, (Iterable<Equivalence.Equals>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.PairwiseEquivalence", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.identity();
      PairwiseEquivalence<Object, FileDescriptor> pairwiseEquivalence0 = new PairwiseEquivalence<Object, FileDescriptor>(equivalence0);
      PairwiseEquivalence<Object, HashMap<Object, BoundType>> pairwiseEquivalence1 = new PairwiseEquivalence<Object, HashMap<Object, BoundType>>(equivalence0);
      boolean boolean0 = pairwiseEquivalence1.equals((Object) pairwiseEquivalence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      LinkedList<FileDescriptor> linkedList0 = new LinkedList<FileDescriptor>();
      PairwiseEquivalence<Object, HashMap<Object, BoundType>> pairwiseEquivalence0 = new PairwiseEquivalence<Object, HashMap<Object, BoundType>>(equivalence_Equals0);
      boolean boolean0 = pairwiseEquivalence0.equals((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      HashMap<EnumSet<Locale.FilteringMode>, Equivalence.Equals> hashMap0 = new HashMap<EnumSet<Locale.FilteringMode>, Equivalence.Equals>();
      Set<EnumSet<Locale.FilteringMode>> set0 = hashMap0.keySet();
      hashMap0.put((EnumSet<Locale.FilteringMode>) null, equivalence_Equals0);
      PairwiseEquivalence<Object, EnumSet<Locale.FilteringMode>> pairwiseEquivalence0 = new PairwiseEquivalence<Object, EnumSet<Locale.FilteringMode>>(equivalence_Equals0);
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      boolean boolean0 = pairwiseEquivalence0.doEquivalent(arrayList0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      PairwiseEquivalence<Object, Object> pairwiseEquivalence0 = new PairwiseEquivalence<Object, Object>(equivalence_Equals0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      linkedList0.add((Object) arrayList0);
      arrayList0.add((Object) null);
      boolean boolean0 = pairwiseEquivalence0.doEquivalent(arrayList0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      HashMap<EnumSet<Locale.FilteringMode>, Equivalence.Equals> hashMap0 = new HashMap<EnumSet<Locale.FilteringMode>, Equivalence.Equals>();
      Set<EnumSet<Locale.FilteringMode>> set0 = hashMap0.keySet();
      hashMap0.put((EnumSet<Locale.FilteringMode>) null, equivalence_Equals0);
      PairwiseEquivalence<Object, EnumSet<Locale.FilteringMode>> pairwiseEquivalence0 = new PairwiseEquivalence<Object, EnumSet<Locale.FilteringMode>>(equivalence_Equals0);
      HashSet<EnumSet<Locale.FilteringMode>> hashSet0 = new HashSet<EnumSet<Locale.FilteringMode>>();
      boolean boolean0 = pairwiseEquivalence0.doEquivalent(set0, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      HashMap<EnumSet<Locale.FilteringMode>, Equivalence.Equals> hashMap0 = new HashMap<EnumSet<Locale.FilteringMode>, Equivalence.Equals>();
      Set<EnumSet<Locale.FilteringMode>> set0 = hashMap0.keySet();
      hashMap0.put((EnumSet<Locale.FilteringMode>) null, equivalence_Equals0);
      PairwiseEquivalence<Object, EnumSet<Locale.FilteringMode>> pairwiseEquivalence0 = new PairwiseEquivalence<Object, EnumSet<Locale.FilteringMode>>(equivalence_Equals0);
      boolean boolean0 = pairwiseEquivalence0.doEquivalent(set0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.identity();
      PairwiseEquivalence<Object, BoundType> pairwiseEquivalence0 = new PairwiseEquivalence<Object, BoundType>(equivalence0);
      pairwiseEquivalence0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      PairwiseEquivalence<Object, Object> pairwiseEquivalence0 = new PairwiseEquivalence<Object, Object>(equivalence_Equals0);
      String string0 = pairwiseEquivalence0.toString();
      assertNotNull(string0);
  }
}
