/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:16:52 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.AbstractScheduledService;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractScheduledService_ESTest extends AbstractScheduledService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        AbstractScheduledService.Scheduler.newFixedRateSchedule(0L, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be > 0, found java.lang.Long@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      Duration duration0 = Duration.of(1548L, chronoUnit0);
      Duration duration1 = Duration.ofNanos(1548L);
      AbstractScheduledService.Scheduler abstractScheduledService_Scheduler0 = AbstractScheduledService.Scheduler.newFixedRateSchedule(duration1, duration0);
      assertNotNull(abstractScheduledService_Scheduler0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      AbstractScheduledService.Scheduler abstractScheduledService_Scheduler0 = AbstractScheduledService.Scheduler.newFixedDelaySchedule(0L, 1L, timeUnit0);
      assertNotNull(abstractScheduledService_Scheduler0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(0L);
      // Undeclared exception!
      try { 
        AbstractScheduledService.Scheduler.newFixedDelaySchedule(duration0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delay must be > 0, found java.lang.Long@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      AbstractScheduledService.Scheduler abstractScheduledService_Scheduler0 = AbstractScheduledService.Scheduler.newFixedRateSchedule(1L, 2317L, timeUnit0);
      assertNotNull(abstractScheduledService_Scheduler0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        AbstractScheduledService.Scheduler.newFixedRateSchedule((-2044L), (-2044L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be > 0, found java.lang.Long@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(1548000000000L, 0L);
      Duration duration1 = Duration.ofNanos((-3474L));
      // Undeclared exception!
      try { 
        AbstractScheduledService.Scheduler.newFixedDelaySchedule(duration0, duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delay must be > 0, found java.lang.Long@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      AbstractScheduledService.CustomScheduler.Schedule abstractScheduledService_CustomScheduler_Schedule0 = new AbstractScheduledService.CustomScheduler.Schedule(2657L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(1548000000000L, 0L);
      AbstractScheduledService.Scheduler abstractScheduledService_Scheduler0 = AbstractScheduledService.Scheduler.newFixedDelaySchedule(duration0, duration0);
      assertNotNull(abstractScheduledService_Scheduler0);
  }
}
