/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:48:37 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.HashBasedTable;
import com.google.common.collect.ImmutableMapValues;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.StandardTable;
import com.google.common.collect.Table;
import com.google.common.collect.Tables;
import com.google.common.collect.TreeBasedTable;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardTable_ESTest extends StandardTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashBasedTable<Object, Integer, Integer> hashBasedTable0 = HashBasedTable.create();
      StandardTable.RowMap standardTable_RowMap0 = hashBasedTable0.new RowMap();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedMultiset<Object> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<Object>(comparator0);
      HashBasedTable<Comparable<Object>, Comparable<Integer>, Integer> hashBasedTable0 = HashBasedTable.create(1465, 431);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      StandardTable.Row standardTable_Row0 = hashBasedTable0.new Row(comparable0);
      Object object0 = standardTable_Row0.get(regularImmutableSortedMultiset0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashBasedTable<ImmutableMapValues<Integer, Object>, Tables.UnmodifiableRowSortedMap<Integer, Integer, Integer>, Object> hashBasedTable0 = HashBasedTable.create();
      Iterator<Table.Cell<ImmutableMapValues<Integer, Object>, Tables.UnmodifiableRowSortedMap<Integer, Integer, Integer>, Object>> iterator0 = (Iterator<Table.Cell<ImmutableMapValues<Integer, Object>, Tables.UnmodifiableRowSortedMap<Integer, Integer, Integer>, Object>>)hashBasedTable0.cellIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashBasedTable<Object, Object, Integer> hashBasedTable0 = HashBasedTable.create(23, 65);
      hashBasedTable0.clear();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TreeBasedTable<BoundType, Integer, Integer> treeBasedTable0 = TreeBasedTable.create();
      Collection<Integer> collection0 = treeBasedTable0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeBasedTable<HashMap<Integer, Object>, Object, Object> treeBasedTable0 = TreeBasedTable.create((Comparator<? super HashMap<Integer, Object>>) comparator1, (Comparator<? super Object>) comparator1);
      Spliterator<Table.Cell<HashMap<Integer, Object>, Object, Object>> spliterator0 = (Spliterator<Table.Cell<HashMap<Integer, Object>, Object, Object>>)treeBasedTable0.cellSpliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashBasedTable<Object, Object, Integer> hashBasedTable0 = HashBasedTable.create(23, 65);
      Set<Table.Cell<Object, Object, Integer>> set0 = (Set<Table.Cell<Object, Object, Integer>>)hashBasedTable0.cellSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashBasedTable<ImmutableMapValues<Integer, Object>, Tables.UnmodifiableRowSortedMap<Integer, Integer, Integer>, Object> hashBasedTable0 = HashBasedTable.create();
      Set<ImmutableMapValues<Integer, Object>> set0 = hashBasedTable0.rowKeySet();
      assertEquals(0, set0.size());
  }
}
