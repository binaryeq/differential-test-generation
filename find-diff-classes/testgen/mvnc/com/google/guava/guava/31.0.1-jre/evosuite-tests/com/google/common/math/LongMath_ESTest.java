/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:38:10 GMT 2024
 */

package com.google.common.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.math.LongMath;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongMath_ESTest extends LongMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      double double0 = LongMath.roundToDouble(0, roundingMode0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      double double0 = LongMath.roundToDouble(0, roundingMode0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      double double0 = LongMath.roundToDouble((-6L), roundingMode0);
      assertEquals((-6.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.roundToDouble((-9223372036854775805L), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(289L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(66L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(2L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = LongMath.fitsInInt((-3037000499L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = LongMath.binomial(64, 31);
      assertEquals(1777090076065542336L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = LongMath.binomial(2146631471, 1812);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = LongMath.binomial(21, 5);
      assertEquals(20349L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = LongMath.factorial(21);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-2L), 50);
      assertEquals(1125899906842624L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-2L), 2082408385);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = LongMath.saturatedMultiply(3037000507L, 3037000507L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = LongMath.saturatedMultiply((-9223372036854775808L), (-9223372036854775808L));
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = LongMath.saturatedSubtract(9223372036854775807L, (-316L));
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = LongMath.saturatedSubtract(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = LongMath.saturatedAdd((-9223372036854775808L), (-9223372036854775808L));
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = LongMath.saturatedAdd((-2297L), 136L);
      assertEquals((-2161L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = LongMath.checkedPow((-2L), 28);
      assertEquals(268435456L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedPow(2L, 1012);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(2, 1012)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedMultiply(9223372036854775807L, (-2L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedMultiply(9223372036854775807, -2)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = LongMath.checkedSubtract(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = LongMath.checkedAdd(725270293939359937L, 36L);
      assertEquals(725270293939359973L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = LongMath.mod(126401071349994536L, 49);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.mod(83L, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus must be positive
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.divide((-2052L), 1159L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = LongMath.pow((-2L), 2137109330);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = LongMath.pow(2L, 66);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = LongMath.log2(4611686018427387904L, roundingMode0);
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      int int0 = LongMath.log2(3037000499L, roundingMode0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      int int0 = LongMath.log2(4503599627370496L, roundingMode0);
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = LongMath.isPowerOfTwo(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = LongMath.floorPowerOfTwo(9223372036854775807L);
      assertEquals(4611686018427387904L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      long long0 = LongMath.sqrt(0, roundingMode0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = LongMath.saturatedSubtract((-3882L), (-3882L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = LongMath.saturatedAdd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      double double0 = LongMath.roundToDouble(0L, roundingMode0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = LongMath.multiplyFraction(1L, 1448L, 1L);
      assertEquals(1448L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = LongMath.multiplyFraction(2048L, (-1884L), 2218L);
      assertEquals((-1024L), long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = LongMath.mod((-1L), 399);
      assertEquals(398, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = LongMath.mean(1L, (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = LongMath.mean((-3284L), (-1401L));
      assertEquals((-2343L), long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = LongMath.log10Floor(3L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = LongMath.log10Floor(1961L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = LongMath.log10(1L, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = LongMath.lessThanBranchFree(1263739024124850375L, 2712L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = LongMath.lessThanBranchFree((-2L), 195L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = LongMath.gcd(0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = LongMath.fitsInInt(66L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = LongMath.fitsInInt(2432902008176640000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = LongMath.checkedSubtract(0L, (-2250L));
      assertEquals(2250L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = LongMath.checkedSubtract(0L, 87178291200L);
      assertEquals((-87178291200L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = LongMath.checkedAdd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = LongMath.checkedAdd(636L, (-2714L));
      assertEquals((-2078L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = LongMath.ceilingPowerOfTwo(186635894390467037L);
      assertEquals(288230376151711744L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.sqrt(1033L, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      // Undeclared exception!
      try { 
        LongMath.sqrt((-1L), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.saturatedPow((-20), (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-20) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.roundToDouble((-3186L), (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.pow((-1726), (-1726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1726) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.multiplyFraction((-29L), (-29L), (-29L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a (-29) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.multiplyFraction(0L, 0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      // Undeclared exception!
      try { 
        LongMath.log2((-284L), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-284) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.log10Floor((-9223372036854775808L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.log10(472L, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.log10(0L, roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.isPrime((-2644L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n (-2644) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.gcd((-1063L), (-1063L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a (-1063) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.floorPowerOfTwo((-1114L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1114) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.factorial((-2723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n (-2723) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.divide(11585L, 11585L, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      // Undeclared exception!
      try { 
        LongMath.divide(0, 0, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedPow((-2), (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-2) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.ceilingPowerOfTwo((-1128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1128) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = LongMath.saturatedMultiply(2358953347L, 2358953347L);
      assertEquals(5564660893322502409L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = LongMath.saturatedMultiply(4855, (-9223372036854775808L));
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = LongMath.saturatedMultiply(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = LongMath.checkedMultiply((-1L), 9223372036854775807L);
      assertEquals((-9223372036854775807L), long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedMultiply(1000000000000000000L, 1000000000000000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedMultiply(1000000000000000000, 1000000000000000000)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = LongMath.checkedMultiply(1545L, 1545L);
      assertEquals(2387025L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = LongMath.gcd(156L, 358L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = LongMath.mod(3037000499L, 3037000499L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.mod((-400L), (-400L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus must be positive
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      double double0 = LongMath.roundToDouble(10000000000000025L, roundingMode0);
      assertEquals(1.0000000000000024E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      double double0 = LongMath.roundToDouble(10000000000000025L, roundingMode0);
      assertEquals(1.0000000000000024E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      double double0 = LongMath.roundToDouble(9223372036854775799L, roundingMode0);
      assertEquals(9.223372036854776E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      double double0 = LongMath.roundToDouble((-2L), roundingMode0);
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      double double0 = LongMath.roundToDouble(9223372036854775807L, roundingMode0);
      assertEquals(9.223372036854776E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      double double0 = LongMath.roundToDouble(3569819667048198375L, roundingMode0);
      assertEquals(3.5698196670481987E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      double double0 = LongMath.roundToDouble((-1063L), roundingMode0);
      assertEquals((-1063.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      double double0 = LongMath.roundToDouble(31622776600299481L, roundingMode0);
      assertEquals(3.162277660029948E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      double double0 = LongMath.roundToDouble(9223372036854775807L, roundingMode0);
      assertEquals(9.2233720368547748E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      double double0 = LongMath.roundToDouble((-9223372036854775806L), roundingMode0);
      assertEquals((-9.2233720368547748E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      double double0 = LongMath.roundToDouble(9223372036854775807L, roundingMode0);
      assertEquals(9.2233720368547748E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      double double0 = LongMath.roundToDouble(1160L, roundingMode0);
      assertEquals(1160.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      double double0 = LongMath.roundToDouble(126401071349994536L, roundingMode0);
      assertEquals(1.26401071349994544E17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      double double0 = LongMath.roundToDouble(55, roundingMode0);
      assertEquals(55.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      double double0 = LongMath.roundToDouble((-1152921497034900757L), roundingMode0);
      assertEquals((-1.15292149703490086E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      double double0 = LongMath.roundToDouble(9233062284813009L, roundingMode0);
      assertEquals(9.233062284813008E15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      double double0 = LongMath.roundToDouble((-9223372036854775793L), roundingMode0);
      assertEquals((-9.2233720368547748E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.roundToDouble(9223372036854775807L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      double double0 = LongMath.roundToDouble(9223372036854775807L, roundingMode0);
      assertEquals(9.223372036854776E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      double double0 = LongMath.roundToDouble(10000000000000007L, roundingMode0);
      assertEquals(1.0000000000000008E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      LongMath.isPrime(9223372036854775783L);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(1864669308036832217L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(67L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(4611686018427387913L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(1727L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(119L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(3L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(15L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = LongMath.binomial(64, 24);
      assertEquals(250649105469666120L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = LongMath.binomial(65, 30);
      assertEquals(3009106305270645216L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = LongMath.binomial(2145547233, 5);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = LongMath.binomial(2087, 34);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = LongMath.binomial(67, 1);
      assertEquals(67L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = LongMath.binomial(29, 29);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = LongMath.binomial(8, 6);
      assertEquals(28L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.binomial(39, 639);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k (java.lang.Integer@0000000001) > n (java.lang.Integer@0000000002)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = LongMath.factorial(5);
      assertEquals(120L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = LongMath.factorial(64);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = LongMath.saturatedPow(9, 9);
      assertEquals(387420489L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-427L), 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-2L), 55);
      assertEquals((-36028797018963968L), long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = LongMath.saturatedPow(2L, 55);
      assertEquals(36028797018963968L, long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-1L), 19);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = LongMath.saturatedPow(0, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = LongMath.saturatedPow(1, 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = LongMath.saturatedPow(0, 2130024431);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-1L), 56);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-2L), 64);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = LongMath.saturatedPow(2L, 64);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = LongMath.saturatedPow((-9223372036854775808L), 59);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = LongMath.saturatedMultiply((-9223372036854775808L), (-1L));
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = LongMath.saturatedPow(142L, 16175);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = LongMath.saturatedMultiply(0, 4611686018427387904L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = LongMath.saturatedSubtract(9223372036854775807L, 27L);
      assertEquals(9223372036854775780L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = LongMath.saturatedSubtract((-9223372036854775808L), 9223372036854775807L);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = LongMath.saturatedAdd(2158L, 4503599627370495L);
      assertEquals(4503599627372653L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = LongMath.saturatedAdd(4611686018427387904L, 4611686018427387904L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = LongMath.checkedPow(3132L, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedPow((-2L), 65);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(-2, 65)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedPow(2L, 63);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(2, 63)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = LongMath.checkedPow((-1L), 6);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = LongMath.checkedPow(0, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = LongMath.checkedPow(1, 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = LongMath.checkedPow(0L, 6);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = LongMath.checkedPow((-1L), 41);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = LongMath.checkedPow((-2L), 1);
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = LongMath.checkedPow(2L, 55);
      assertEquals(36028797018963968L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = LongMath.checkedMultiply(0, (-9223372036854775805L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedPow((-9223372036854775789L), 375);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(-9223372036854775789, 187)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedMultiply((-3037000499L), 4294967295L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedMultiply(-3037000499, 4294967295)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedPow(751, 751);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedMultiply(423564751, 318097128001)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = LongMath.checkedPow(6L, 22);
      assertEquals(131621703842267136L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedPow(232, 232);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(8392742123471896576, 14)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = LongMath.checkedSubtract(289L, 289L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedSubtract(39, (-9223372036854775773L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedSubtract(39, -9223372036854775773)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = LongMath.checkedAdd(1655, (-1439L));
      assertEquals(216L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.checkedAdd(9223372036854775798L, 9223372036854775798L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedAdd(9223372036854775798, 9223372036854775798)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = LongMath.gcd(4611686018427387904L, 0);
      assertEquals(4611686018427387904L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long long0 = LongMath.multiplyFraction(0L, 0L, 3188L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long long0 = LongMath.binomial(64, 32);
      assertEquals(1832624140942590534L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long long0 = LongMath.mod((-2L), 2709L);
      assertEquals(2707L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      long long0 = LongMath.divide(725270292965400625L, 1998L, roundingMode0);
      assertEquals(362998144627328L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      long long0 = LongMath.divide(2L, (-1748L), roundingMode0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      long long0 = LongMath.divide((-1872L), 4611686018427387904L, roundingMode0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      long long0 = LongMath.divide((-289L), (-5402926248376769404L), roundingMode0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      long long0 = LongMath.divide(2209L, 2L, roundingMode0);
      assertEquals(1104L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      long long0 = LongMath.divide(135L, 18, roundingMode0);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      long long0 = LongMath.divide(947L, (-289L), roundingMode0);
      assertEquals((-3L), long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      long long0 = LongMath.divide(3031L, 2L, roundingMode0);
      assertEquals(1516L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      long long0 = LongMath.divide(161L, 3037000499L, roundingMode0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      long long0 = LongMath.divide(66L, 9L, roundingMode0);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.divide(3031L, 2L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      long long0 = LongMath.divide(0, 1361L, roundingMode0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      long long0 = LongMath.divide(3409L, 2L, roundingMode0);
      assertEquals(1705L, long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      long long0 = LongMath.sqrt(725270292965400625L, roundingMode0);
      assertEquals(851628025L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      long long0 = LongMath.sqrt(6402373705728012L, roundingMode0);
      assertEquals(80014834L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      long long0 = LongMath.sqrt(4503599627370496L, roundingMode0);
      assertEquals(67108864L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      long long0 = LongMath.sqrt(722865708377213479L, roundingMode0);
      assertEquals(850215096L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      long long0 = LongMath.sqrt(725270292965400625L, roundingMode0);
      assertEquals(851628025L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      long long0 = LongMath.sqrt(10000000000L, roundingMode0);
      assertEquals(100000L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      long long0 = LongMath.sqrt(9999999987L, roundingMode0);
      assertEquals(99999L, long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.sqrt(9223372036854775798L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      long long0 = LongMath.sqrt(722865708377213479L, roundingMode0);
      assertEquals(850215095L, long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long long0 = LongMath.pow(1174L, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long long0 = LongMath.pow((-2L), 50);
      assertEquals(1125899906842624L, long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long long0 = LongMath.pow((-2L), 64);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long long0 = LongMath.pow(2, 2);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long long0 = LongMath.pow((-1L), 400);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long long0 = LongMath.pow(0, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long long0 = LongMath.pow(1L, 15);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long long0 = LongMath.pow(0L, 400);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long long0 = LongMath.pow((-1L), 1297);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      long long0 = LongMath.pow((-2L), 27);
      assertEquals((-134217728L), long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long long0 = LongMath.pow(2L, 64);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long long0 = LongMath.pow(1689, 1689);
      assertEquals(1864669308036832217L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long long0 = LongMath.pow((-305L), 3680);
      assertEquals(4755320238567744001L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.log10(797L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = LongMath.log10(1000000000L, roundingMode0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = LongMath.log10(722865708377213479L, roundingMode0);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = LongMath.log10(463L, roundingMode0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      int int0 = LongMath.log10(50L, roundingMode0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = LongMath.log10(289L, roundingMode0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = LongMath.log10(3692421776469459634L, roundingMode0);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      int int0 = LongMath.log10(1000000000L, roundingMode0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = LongMath.log2(3037000499L, roundingMode0);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = LongMath.log2(28L, roundingMode0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = LongMath.log2(676L, roundingMode0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = LongMath.log2(2761L, roundingMode0);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = LongMath.log2(1L, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        LongMath.log2(1246L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = LongMath.isPowerOfTwo(2L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = LongMath.isPowerOfTwo((-3037000499L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongMath.ceilingPowerOfTwo(9223372036854775802L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(9223372036854775802) is not representable as a long
         //
         verifyException("com.google.common.math.LongMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = LongMath.isPrime(1301L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = LongMath.mean(4503599627370495L, 4503599627370495L);
      assertEquals(4503599627370495L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = LongMath.mod(362880L, 8);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      int int0 = LongMath.log10(61792931025L, roundingMode0);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      int int0 = LongMath.log2(3037000522L, roundingMode0);
      assertEquals(32, int0);
  }
}
