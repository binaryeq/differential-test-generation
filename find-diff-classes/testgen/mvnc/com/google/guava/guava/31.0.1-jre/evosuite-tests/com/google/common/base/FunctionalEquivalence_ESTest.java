/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:07:42 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Equivalence;
import com.google.common.base.Function;
import com.google.common.base.FunctionalEquivalence;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnel;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionalEquivalence_ESTest extends FunctionalEquivalence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence.Identity equivalence_Identity0 = new Equivalence.Identity();
      FunctionalEquivalence<Object, Object> functionalEquivalence0 = new FunctionalEquivalence<Object, Object>(converter0, equivalence_Identity0);
      FunctionalEquivalence<Equivalence.Equals, Object> functionalEquivalence1 = new FunctionalEquivalence<Equivalence.Equals, Object>(converter0, functionalEquivalence0);
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      int int0 = functionalEquivalence1.doHash(equivalence_Equals0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      FunctionalEquivalence<PriorityQueue<Object>, Object> functionalEquivalence0 = new FunctionalEquivalence<PriorityQueue<Object>, Object>(converter0, equivalence_Equals0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      boolean boolean0 = functionalEquivalence0.doEquivalent(priorityQueue0, priorityQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence.Equals equivalence_Equals0 = new Equivalence.Equals();
      FunctionalEquivalence<Object, Object> functionalEquivalence0 = new FunctionalEquivalence<Object, Object>(converter0, equivalence_Equals0);
      Object object0 = new Object();
      boolean boolean0 = functionalEquivalence0.doEquivalent(object0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.equals();
      Converter<Object, Object> converter0 = Converter.identity();
      FunctionalEquivalence<Equivalence.Equals, Object> functionalEquivalence0 = new FunctionalEquivalence<Equivalence.Equals, Object>(converter0, equivalence0);
      Function<Object, Equivalence.Equals> function0 = (Function<Object, Equivalence.Equals>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Equivalence.Equals> converter1 = Converter.from((Function<? super Object, ? extends Equivalence.Equals>) function0, (Function<? super Equivalence.Equals, ?>) converter0);
      FunctionalEquivalence<BloomFilter<Object>, Equivalence.Equals> functionalEquivalence1 = new FunctionalEquivalence<BloomFilter<Object>, Equivalence.Equals>(converter1, functionalEquivalence0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, (long) 0);
      // Undeclared exception!
      try { 
        functionalEquivalence1.doHash(bloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      FunctionalEquivalence<PriorityQueue<Object>, Object> functionalEquivalence0 = null;
      try {
        functionalEquivalence0 = new FunctionalEquivalence<PriorityQueue<Object>, Object>(converter0, (Equivalence<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      FunctionalEquivalence<Equivalence.Equals, Object> functionalEquivalence0 = new FunctionalEquivalence<Equivalence.Equals, Object>(converter0, equivalence0);
      boolean boolean0 = functionalEquivalence0.equals((Object) converter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.equals();
      Converter<Object, Object> converter0 = Converter.identity();
      FunctionalEquivalence<Object, Object> functionalEquivalence0 = new FunctionalEquivalence<Object, Object>(converter0, equivalence0);
      FunctionalEquivalence<Equivalence.Equals, Object> functionalEquivalence1 = new FunctionalEquivalence<Equivalence.Equals, Object>(converter0, equivalence0);
      boolean boolean0 = functionalEquivalence0.equals((Object) functionalEquivalence1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Converter<Object, Object> converter1 = Converter.from((Function<? super Object, ?>) converter0, (Function<? super Object, ?>) converter0);
      Equivalence<Object> equivalence0 = Equivalence.equals();
      FunctionalEquivalence<PriorityQueue<Object>, Object> functionalEquivalence0 = new FunctionalEquivalence<PriorityQueue<Object>, Object>(converter1, equivalence0);
      FunctionalEquivalence<Object, Object> functionalEquivalence1 = new FunctionalEquivalence<Object, Object>(converter1, equivalence0);
      FunctionalEquivalence<Object, Object> functionalEquivalence2 = new FunctionalEquivalence<Object, Object>(converter0, functionalEquivalence1);
      boolean boolean0 = functionalEquivalence2.equals((Object) functionalEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      FunctionalEquivalence<Equivalence.Equals, Object> functionalEquivalence0 = new FunctionalEquivalence<Equivalence.Equals, Object>(converter0, equivalence0);
      boolean boolean0 = functionalEquivalence0.equals((Object) functionalEquivalence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.equals();
      Converter<Object, Object> converter0 = Converter.identity();
      FunctionalEquivalence<Object, Object> functionalEquivalence0 = new FunctionalEquivalence<Object, Object>(converter0, equivalence0);
      FunctionalEquivalence<BloomFilter<Object>, Object> functionalEquivalence1 = new FunctionalEquivalence<BloomFilter<Object>, Object>(converter0, functionalEquivalence0);
      boolean boolean0 = functionalEquivalence1.equals((Object) functionalEquivalence0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Equivalence<Object> equivalence0 = Equivalence.equals();
      Converter<Object, Object> converter0 = Converter.identity();
      FunctionalEquivalence<Equivalence.Equals, Object> functionalEquivalence0 = new FunctionalEquivalence<Equivalence.Equals, Object>(converter0, equivalence0);
      int int0 = functionalEquivalence0.doHash((Equivalence.Equals) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      FunctionalEquivalence<Object, Object> functionalEquivalence0 = new FunctionalEquivalence<Object, Object>(converter0, equivalence0);
      String string0 = functionalEquivalence0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      FunctionalEquivalence<PriorityQueue<Object>, Object> functionalEquivalence0 = new FunctionalEquivalence<PriorityQueue<Object>, Object>(converter0, equivalence0);
      FunctionalEquivalence<Object, Object> functionalEquivalence1 = new FunctionalEquivalence<Object, Object>(converter0, equivalence0);
      Function<Object, PriorityQueue<Object>> function0 = (Function<Object, PriorityQueue<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, PriorityQueue<Object>> converter1 = Converter.from((Function<? super Object, ? extends PriorityQueue<Object>>) function0, (Function<? super PriorityQueue<Object>, ?>) converter0);
      FunctionalEquivalence<FunctionalEquivalence<Object, Object>, PriorityQueue<Object>> functionalEquivalence2 = new FunctionalEquivalence<FunctionalEquivalence<Object, Object>, PriorityQueue<Object>>(converter1, functionalEquivalence0);
      // Undeclared exception!
      try { 
        functionalEquivalence2.doEquivalent(functionalEquivalence1, functionalEquivalence1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Equivalence<Object> equivalence0 = Equivalence.equals();
      FunctionalEquivalence<PriorityQueue<Object>, Object> functionalEquivalence0 = new FunctionalEquivalence<PriorityQueue<Object>, Object>(converter0, equivalence0);
      functionalEquivalence0.hashCode();
  }
}
