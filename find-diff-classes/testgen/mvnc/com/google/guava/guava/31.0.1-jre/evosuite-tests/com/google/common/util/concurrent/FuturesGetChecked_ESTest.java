/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:40:34 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.FuturesGetChecked;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FuturesGetChecked_ESTest extends FuturesGetChecked_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      boolean boolean0 = FuturesGetChecked.isCheckedException(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompletableFuture<Delayed> completableFuture0 = CompletableFuture.completedFuture((Delayed) null);
      Class<Exception> class0 = Exception.class;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Delayed delayed0 = FuturesGetChecked.getChecked((Future<Delayed>) completableFuture0, class0, 1L, timeUnit0);
      assertNull(delayed0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator futuresGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator0 = FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator.INSTANCE;
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(21, threadFactory0);
      Callable<Exception> callable0 = (Callable<Exception>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ScheduledFuture<Exception> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 21, timeUnit0);
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(scheduledFuture0).when(callable1).call();
      ForkJoinTask<Delayed> forkJoinTask0 = forkJoinPool0.submit(callable1);
      Class<Exception> class0 = Exception.class;
      Delayed delayed0 = FuturesGetChecked.getChecked((FuturesGetChecked.GetCheckedTypeValidator) futuresGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator0, (Future<Delayed>) forkJoinTask0, class0);
      assertNotNull(delayed0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompletableFuture<Delayed> completableFuture0 = new CompletableFuture<Delayed>();
      Class<Exception> class0 = Exception.class;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      try { 
        FuturesGetChecked.getChecked((Future<Delayed>) completableFuture0, class0, 1L, timeUnit0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      try { 
        FuturesGetChecked.getChecked((Future<Exception>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.FuturesGetChecked", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      FuturesGetChecked.GetCheckedTypeValidator futuresGetChecked_GetCheckedTypeValidator0 = FuturesGetChecked.GetCheckedTypeValidatorHolder.getBestValidator();
      try { 
        FuturesGetChecked.getChecked(futuresGetChecked_GetCheckedTypeValidator0, (Future<Exception>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.FuturesGetChecked", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FuturesGetChecked.checkExceptionClassValidity((Class<? extends Exception>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      FuturesGetChecked.checkExceptionClassValidity(class0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FuturesGetChecked.GetCheckedTypeValidatorHolder futuresGetChecked_GetCheckedTypeValidatorHolder0 = new FuturesGetChecked.GetCheckedTypeValidatorHolder();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      try { 
        FuturesGetChecked.getChecked((Future<Object>) null, class0, 1L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.FuturesGetChecked", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "g<F+IHoST]Rj&9IG12");
      ForkJoinTask<Exception> forkJoinTask0 = ForkJoinTask.adapt((Runnable) mockThread0, (Exception) null);
      ForkJoinTask<Exception> forkJoinTask1 = forkJoinTask0.fork();
      Exception exception0 = FuturesGetChecked.getChecked((Future<Exception>) forkJoinTask1, class0);
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FuturesGetChecked.GetCheckedTypeValidator futuresGetChecked_GetCheckedTypeValidator0 = FuturesGetChecked.classValueValidator();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Delayed> forkJoinTask0 = forkJoinPool0.submit(callable0);
      Class<Exception> class0 = Exception.class;
      Delayed delayed0 = FuturesGetChecked.getChecked(futuresGetChecked_GetCheckedTypeValidator0, (Future<Delayed>) forkJoinTask0, class0);
      assertNull(delayed0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FuturesGetChecked.weakSetValidator();
  }
}
