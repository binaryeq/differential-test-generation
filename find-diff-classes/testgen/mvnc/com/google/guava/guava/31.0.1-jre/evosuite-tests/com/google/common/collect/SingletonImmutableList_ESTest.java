/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:46:05 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.SingletonImmutableList;
import com.google.common.collect.UnmodifiableIterator;
import java.util.Locale;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SingletonImmutableList_ESTest extends SingletonImmutableList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SingletonImmutableList<Object> singletonImmutableList0 = new SingletonImmutableList<Object>("[java.lang.Integer@0000000004]");
      int int0 = singletonImmutableList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SingletonImmutableList<Object> singletonImmutableList0 = new SingletonImmutableList<Object>("[java.lang.Integer@0000000004]");
      UnmodifiableIterator<Object> unmodifiableIterator0 = singletonImmutableList0.iterator();
      assertNotNull(unmodifiableIterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      SingletonImmutableList<Comparable<Object>> singletonImmutableList0 = new SingletonImmutableList<Comparable<Object>>(comparable0);
      Comparable<Object> comparable1 = singletonImmutableList0.get(0);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonImmutableList<Locale.Category> singletonImmutableList0 = new SingletonImmutableList<Locale.Category>(locale_Category0);
      SingletonImmutableList<Object> singletonImmutableList1 = new SingletonImmutableList<Object>(singletonImmutableList0);
      // Undeclared exception!
      try { 
        singletonImmutableList1.subList(461845907, (-1754));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000003 (java.lang.Integer@0000000004) must not be greater than size (java.lang.Integer@0000000005)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SingletonImmutableList<Object> singletonImmutableList0 = null;
      try {
        singletonImmutableList0 = new SingletonImmutableList<Object>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonImmutableList<Locale.Category> singletonImmutableList0 = new SingletonImmutableList<Locale.Category>(locale_Category0);
      ImmutableList<Locale.Category> immutableList0 = singletonImmutableList0.subList(0, 0);
      assertFalse(immutableList0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonImmutableList<Locale.Category> singletonImmutableList0 = new SingletonImmutableList<Locale.Category>(locale_Category0);
      ImmutableList<Locale.Category> immutableList0 = singletonImmutableList0.subList(0, 1);
      assertTrue(immutableList0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      SingletonImmutableList<Comparable<Integer>> singletonImmutableList0 = new SingletonImmutableList<Comparable<Integer>>(integer0);
      String string0 = singletonImmutableList0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SingletonImmutableList<Object> singletonImmutableList0 = new SingletonImmutableList<Object>("[java.lang.Integer@0000000004]");
      // Undeclared exception!
      try { 
        singletonImmutableList0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000002 (java.lang.Integer@0000000003) must be less than size (java.lang.Integer@0000000003)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      SingletonImmutableList<Integer> singletonImmutableList0 = new SingletonImmutableList<Integer>(integer0);
      boolean boolean0 = singletonImmutableList0.isPartialView();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonImmutableList<Locale.Category> singletonImmutableList0 = new SingletonImmutableList<Locale.Category>(locale_Category0);
      Spliterator<Locale.Category> spliterator0 = singletonImmutableList0.spliterator();
      assertNotNull(spliterator0);
  }
}
