/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:13:49 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.base.Optional;
import com.google.common.base.Present;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Present_ESTest extends Present_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Present<Integer> present0 = new Present<Integer>(integer0);
      Present<Integer> present1 = new Present<Integer>(integer0);
      boolean boolean0 = present0.equals(present1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Present<TimeUnit> present0 = new Present<TimeUnit>(timeUnit0);
      Converter<TimeUnit, TimeUnit> converter0 = Converter.identity();
      Optional<TimeUnit> optional0 = present0.transform((Function<? super TimeUnit, TimeUnit>) converter0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Present<Object> present0 = new Present<Object>(object0);
      Present<Present<Object>> present1 = new Present<Present<Object>>(present0);
      Present<Object> present2 = present1.orNull();
      assertSame(present2, present0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2934);
      Present<Integer> present0 = new Present<Integer>(integer0);
      Present<Object> present1 = new Present<Object>((Object) null);
      Object object0 = present1.or((Object) present0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Present<Object> present0 = new Present<Object>(timeUnit0);
      Present<Present<Object>> present1 = new Present<Present<Object>>(present0);
      Present<Object> present2 = present1.or(present0);
      assertSame(present0, present2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      Supplier<SQLTransientConnectionException> supplier0 = (Supplier<SQLTransientConnectionException>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Suppliers.NonSerializableMemoizingSupplier<SQLTransientConnectionException> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<SQLTransientConnectionException>(supplier0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Suppliers.ExpiringMemoizingSupplier<SQLTransientConnectionException> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<SQLTransientConnectionException>(suppliers_NonSerializableMemoizingSupplier0, 3806L, timeUnit0);
      Suppliers.MemoizingSupplier<SQLTransientConnectionException> suppliers_MemoizingSupplier0 = new Suppliers.MemoizingSupplier<SQLTransientConnectionException>(suppliers_ExpiringMemoizingSupplier0);
      SQLTransientConnectionException sQLTransientConnectionException0 = present0.or((Supplier<? extends SQLTransientConnectionException>) suppliers_MemoizingSupplier0);
      assertNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("J!\"a9j>sUe", "", 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(")", sQLDataException0);
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Supplier<SQLTransientConnectionException> supplier0 = (Supplier<SQLTransientConnectionException>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Suppliers.ExpiringMemoizingSupplier<SQLTransientConnectionException> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<SQLTransientConnectionException>(supplier0, 440L, timeUnit0);
      Suppliers.NonSerializableMemoizingSupplier<SQLTransientConnectionException> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<SQLTransientConnectionException>(suppliers_ExpiringMemoizingSupplier0);
      Suppliers.MemoizingSupplier<SQLTransientConnectionException> suppliers_MemoizingSupplier0 = new Suppliers.MemoizingSupplier<SQLTransientConnectionException>(suppliers_NonSerializableMemoizingSupplier0);
      SQLTransientConnectionException sQLTransientConnectionException1 = present0.or((Supplier<? extends SQLTransientConnectionException>) suppliers_MemoizingSupplier0);
      assertEquals("java.sql.SQLTransientConnectionException: )", sQLTransientConnectionException1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1809));
      Present<Integer> present0 = new Present<Integer>(integer0);
      Optional<Integer> optional0 = present0.or((Optional<? extends Integer>) present0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Present<Object> present0 = new Present<Object>((Object) null);
      Object object0 = present0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Present<TimeUnit> present0 = new Present<TimeUnit>(timeUnit0);
      TimeUnit timeUnit1 = present0.get();
      assertSame(timeUnit0, timeUnit1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      Converter<Object, Object> converter0 = Converter.identity();
      // Undeclared exception!
      try { 
        present0.transform((Function<? super SQLTransientConnectionException, Object>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the Function passed to Optional.transform() must not return null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Present<Integer> present0 = new Present<Integer>((Integer) null);
      // Undeclared exception!
      try { 
        present0.equals(present0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Present", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Integer integer0 = new Integer((-1809));
      Present<Object> present0 = new Present<Object>(timeUnit0);
      boolean boolean0 = present0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      // Undeclared exception!
      try { 
        present0.transform((Function<? super SQLTransientConnectionException, Present<SQLTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Present", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Present<Integer> present0 = new Present<Integer>(integer0);
      String string0 = present0.toString();
      assertEquals("Optional.of(0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      Set<SQLTransientConnectionException> set0 = present0.asSet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      // Undeclared exception!
      try { 
        present0.or((Supplier<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      // Undeclared exception!
      try { 
        present0.or((Optional<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Present<Object> present0 = new Present<Object>((Object) null);
      // Undeclared exception!
      try { 
        present0.or((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // use Optional.orNull() instead of Optional.or(null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Present<Integer> present0 = new Present<Integer>((Integer) null);
      Object object0 = present0.orNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Present<TimeUnit> present0 = new Present<TimeUnit>(timeUnit0);
      present0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Present<SQLTransientConnectionException> present0 = new Present<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      boolean boolean0 = present0.isPresent();
      assertTrue(boolean0);
  }
}
