/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 23 17:24:53 GMT 2024
 */

package com.google.common.util.concurrent;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class CycleDetectingLockFactory_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.google.common.util.concurrent.CycleDetectingLockFactory"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CycleDetectingLockFactory_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.collect.ImmutableSet$SetBuilderImpl",
      "com.google.common.math.IntMath$1",
      "com.google.common.collect.Hashing",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock",
      "com.google.common.base.FunctionalEquivalence",
      "com.google.common.collect.MapMakerInternalMap$EntrySet",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$1",
      "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper",
      "com.google.common.math.IntMath",
      "com.google.common.collect.MapMakerInternalMap$InternalEntryHelper",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "com.google.common.collect.Sets$2",
      "com.google.common.collect.MapMakerInternalMap$StrongValueEntry",
      "com.google.common.collect.Sets$3",
      "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry",
      "com.google.common.collect.Sets$1",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock",
      "com.google.common.collect.SortedMapDifference",
      "com.google.common.collect.RegularImmutableSet",
      "com.google.common.collect.AbstractMapEntry",
      "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace",
      "com.google.common.base.Predicate",
      "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.collect.Sets$SetView",
      "com.google.common.collect.ImmutableSet$CachingAsList",
      "com.google.common.collect.RegularImmutableAsList",
      "com.google.common.collect.SingletonImmutableSet",
      "com.google.common.base.Strings",
      "com.google.common.collect.Lists$Partition",
      "com.google.common.collect.Lists",
      "com.google.common.collect.MapMakerInternalMap$HashIterator",
      "com.google.common.math.MathPreconditions",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "com.google.common.primitives.IntsMethodsForWeb",
      "com.google.common.collect.Sets$4",
      "com.google.common.collect.MapMakerInternalMap$Strength",
      "com.google.common.collect.Maps$BiMapConverter",
      "com.google.common.collect.MapMakerInternalMap$Segment",
      "com.google.common.base.MoreObjects",
      "com.google.common.base.Equivalence$Equals",
      "com.google.common.collect.MapDifference",
      "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.collect.MapMaker",
      "com.google.common.collect.MapMakerInternalMap$InternalEntry",
      "com.google.common.collect.MapMakerInternalMap$EntryIterator",
      "com.google.common.util.concurrent.CycleDetectingLockFactory",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableEnumMap",
      "com.google.common.collect.MapMakerInternalMap$KeyIterator",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "com.google.common.collect.ImmutableEnumSet",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock",
      "com.google.common.collect.MapMakerInternalMap$WeakValueReference",
      "com.google.common.util.concurrent.ElementTypesAreNonnullByDefault",
      "com.google.common.base.Converter",
      "com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl",
      "com.google.common.collect.Maps$8",
      "com.google.common.collect.BiMap",
      "com.google.common.base.Function",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "com.google.common.collect.ImmutableMap",
      "com.google.common.collect.MapMakerInternalMap$Strength$2",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1",
      "com.google.common.collect.MapMakerInternalMap$Strength$1",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2",
      "com.google.common.primitives.Ints$IntConverter",
      "com.google.common.collect.Sets",
      "com.google.common.collect.MapMakerInternalMap$KeySet",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$Policy",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.collect.Lists$2",
      "com.google.common.collect.Lists$1",
      "com.google.common.collect.MapMakerInternalMap$SafeToArraySet",
      "com.google.common.base.Equivalence$Identity",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode",
      "com.google.common.collect.ImmutableList",
      "com.google.common.base.PairwiseEquivalence",
      "com.google.common.collect.MapMakerInternalMap$1",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock",
      "com.google.common.base.Equivalence",
      "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment",
      "com.google.common.primitives.Ints",
      "com.google.common.collect.Maps",
      "com.google.common.collect.Maps$EntryTransformer",
      "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
      "com.google.common.collect.MapMakerInternalMap"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CycleDetectingLockFactory_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.common.collect.MapMaker",
      "com.google.common.collect.MapMakerInternalMap$Strength",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.MapMakerInternalMap$1",
      "com.google.common.collect.MapMakerInternalMap",
      "com.google.common.base.MoreObjects",
      "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper",
      "com.google.common.base.Equivalence",
      "com.google.common.base.Equivalence$Identity",
      "com.google.common.collect.MapMakerInternalMap$Segment",
      "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$1",
      "com.google.common.util.concurrent.CycleDetectingLockFactory",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.ImmutableSet$SetBuilderImpl",
      "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
      "com.google.common.math.IntMath",
      "com.google.common.math.MathPreconditions",
      "com.google.common.math.IntMath$1",
      "com.google.common.collect.Hashing",
      "com.google.common.collect.ImmutableSet$CachingAsList",
      "com.google.common.collect.RegularImmutableSet",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering",
      "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies",
      "com.google.common.collect.Maps",
      "com.google.common.collect.Lists",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.collect.MapMakerInternalMap$SafeToArraySet",
      "com.google.common.collect.MapMakerInternalMap$KeySet",
      "com.google.common.collect.MapMakerInternalMap$HashIterator",
      "com.google.common.collect.MapMakerInternalMap$KeyIterator",
      "com.google.common.primitives.IntsMethodsForWeb",
      "com.google.common.primitives.Ints",
      "com.google.common.collect.Sets",
      "com.google.common.collect.MapMakerInternalMap$EntrySet",
      "com.google.common.collect.MapMakerInternalMap$EntryIterator",
      "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry",
      "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry",
      "com.google.common.collect.AbstractMapEntry",
      "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry",
      "com.google.common.base.Strings"
    );
  }
}
