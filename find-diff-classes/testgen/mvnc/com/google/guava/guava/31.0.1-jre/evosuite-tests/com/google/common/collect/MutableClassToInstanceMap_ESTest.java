/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:32:07 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMapEntry;
import com.google.common.collect.MutableClassToInstanceMap;
import com.google.common.collect.RegularImmutableBiMap;
import com.google.common.collect.RegularImmutableMap;
import java.lang.reflect.Array;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MutableClassToInstanceMap_ESTest extends MutableClassToInstanceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableClassToInstanceMap<BoundType> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      Class<BoundType> class0 = BoundType.class;
      BoundType boundType0 = BoundType.OPEN;
      BoundType boundType1 = mutableClassToInstanceMap0.putInstance(class0, boundType0);
      BoundType boundType2 = mutableClassToInstanceMap0.putInstance(class0, boundType1);
      assertSame(boundType0, boundType2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableClassToInstanceMap<Object> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      Map<Class<?>, Object> map0 = mutableClassToInstanceMap0.delegate();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableClassToInstanceMap<Object> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      Class<Integer> class0 = Integer.class;
      mutableClassToInstanceMap0.putInstance(class0, (Integer) null);
      Map<Class<?>, Object> map0 = mutableClassToInstanceMap0.delegate();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutableClassToInstanceMap<Object> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      Map.Entry<Class<Integer>, BoundType>[] map_EntryArray0 = (Map.Entry<Class<Integer>, BoundType>[]) Array.newInstance(Map.Entry.class, 4);
      Class<Integer> class0 = Integer.class;
      BoundType boundType0 = BoundType.CLOSED;
      ImmutableMapEntry<Class<Integer>, BoundType> immutableMapEntry0 = RegularImmutableMap.makeImmutable((Map.Entry<Class<Integer>, BoundType>) null, class0, boundType0);
      map_EntryArray0[0] = (Map.Entry<Class<Integer>, BoundType>) immutableMapEntry0;
      ImmutableBiMap<Class<Integer>, BoundType> immutableBiMap0 = RegularImmutableBiMap.fromEntryArray(1, (Map.Entry<Class<Integer>, BoundType>[]) map_EntryArray0);
      // Undeclared exception!
      try { 
        mutableClassToInstanceMap0.putAll(immutableBiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableClassToInstanceMap<Object> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      MutableClassToInstanceMap<BoundType> mutableClassToInstanceMap1 = MutableClassToInstanceMap.create();
      Class<BoundType> class0 = BoundType.class;
      BoundType boundType0 = BoundType.OPEN;
      mutableClassToInstanceMap1.putInstance(class0, boundType0);
      mutableClassToInstanceMap0.putAll(mutableClassToInstanceMap1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableClassToInstanceMap<Object> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      Class<Object> class0 = Object.class;
      Object object0 = mutableClassToInstanceMap0.getInstance(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableClassToInstanceMap<BoundType> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      Class<BoundType> class0 = BoundType.class;
      BoundType boundType0 = BoundType.OPEN;
      mutableClassToInstanceMap0.putInstance(class0, boundType0);
      BoundType boundType1 = mutableClassToInstanceMap0.getInstance(class0);
      assertSame(boundType1, boundType0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableClassToInstanceMap<Object> mutableClassToInstanceMap0 = MutableClassToInstanceMap.create();
      boolean boolean0 = mutableClassToInstanceMap0.standardIsEmpty();
      assertTrue(boolean0);
  }
}
