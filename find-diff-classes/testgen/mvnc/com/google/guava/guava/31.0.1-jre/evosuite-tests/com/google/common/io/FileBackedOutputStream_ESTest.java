/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:30:46 GMT 2024
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.io.ByteSource;
import com.google.common.io.FileBackedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileBackedOutputStream_ESTest extends FileBackedOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(0);
      byte[] byteArray0 = new byte[8];
      fileBackedOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      File file0 = fileBackedOutputStream0.getFile();
      assertEquals(18L, file0.length());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/FileBackedOutputStream0.tmp");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertTrue(boolean0);
      
      File file0 = fileBackedOutputStream0.getFile();
      assertEquals(18L, file0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream((-1630));
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        fileBackedOutputStream0.write(byteArray0, (-1630), (-1630));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(377);
      byte[] byteArray0 = new byte[1];
      fileBackedOutputStream0.write(377);
      // Undeclared exception!
      try { 
        fileBackedOutputStream0.write(byteArray0, (-3535), 1328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(0);
      byte[] byteArray0 = new byte[0];
      try { 
        fileBackedOutputStream0.write(byteArray0, 0, 1280);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/FileBackedOutputStream0.tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(377);
      byte[] byteArray0 = new byte[1];
      try { 
        fileBackedOutputStream0.write(byteArray0, (-3535), 1328);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream((-1667));
      // Undeclared exception!
      try { 
        fileBackedOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.FileBackedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream((-1572));
      byte[] byteArray0 = new byte[9];
      try { 
        fileBackedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/FileBackedOutputStream0.tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      try { 
        fileBackedOutputStream0.write(byteArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/FileBackedOutputStream0.tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[10];
      fileBackedOutputStream0.write(byteArray0);
      try { 
        fileBackedOutputStream0.write(1038);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        fileBackedOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(0);
      // Undeclared exception!
      try { 
        fileBackedOutputStream0.write((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/FileBackedOutputStream0.tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        fileBackedOutputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not delete: /tmp/FileBackedOutputStream0.tmp
         //
         verifyException("com.google.common.io.FileBackedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/FileBackedOutputStream0.tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      try { 
        fileBackedOutputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not delete: /tmp/FileBackedOutputStream0.tmp
         //
         verifyException("com.google.common.io.FileBackedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        fileBackedOutputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      fileBackedOutputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream((-3301), true);
      try { 
        fileBackedOutputStream0.write((-3301));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      fileBackedOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      File file0 = fileBackedOutputStream0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      ByteSource byteSource0 = fileBackedOutputStream0.asByteSource();
      assertNotNull(byteSource0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      byte[] byteArray0 = new byte[9];
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.write(byteArray0);
      fileBackedOutputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileBackedOutputStream fileBackedOutputStream0 = new FileBackedOutputStream(10);
      fileBackedOutputStream0.flush();
  }
}
