* EvoSuite 1.2.0
* Going to generate test cases for class: com.google.common.base.CharMatcher
* Starting Client-0
* Connecting to master process on port 14451
* Analyzing classpath: 
  - /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar
  - t/dependency/checker-qual-3.12.0.jar
  - t/dependency/error_prone_annotations-2.7.1.jar
  - t/dependency/failureaccess-1.0.1.jar
  - t/dependency/j2objc-annotations-1.3.jar
  - t/dependency/jsr305-3.0.2.jar
  - t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
* Finished analyzing classpath
* Generating tests for class com.google.common.base.CharMatcher
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2318
* Using seed 1729691687695
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 1050 / 2318
[Progress:>                             1%] [Cov:=================>                 49%][Progress:=>                            6%] [Cov:===================>               56%][Progress:===>                          10%] [Cov:====================>              59%][Progress:===>                          11%] [Cov:=====================>             60%][Progress:====>                         15%] [Cov:======================>            63%][Progress:====>                         16%] [Cov:======================>            64%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           67%][Progress:======>                       23%] [Cov:=======================>           67%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           67%][Progress:========>                     28%] [Cov:=======================>           67%][Progress:=========>                    31%] [Cov:=======================>           67%][Progress:=========>                    33%] [Cov:=======================>           68%][Progress:=========>                    33%] [Cov:=======================>           68%][Progress:==========>                   35%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 43%] [Cov:=======================>           67%][Progress:============>                 43%] [Cov:=======================>           67%][Progress:=============>                45%] [Cov:=======================>           67%][Progress:=============>                46%] [Cov:=======================>           67%][Progress:==============>               48%] [Cov:=======================>           67%][Progress:==============>               48%] [Cov:=======================>           67%][Progress:===============>              50%] [Cov:=======================>           68%][Progress:===============>              51%] [Cov:=======================>           68%][Progress:===============>              53%] [Cov:=======================>           68%][Progress:================>             55%] [Cov:=======================>           68%][Progress:=================>            58%] [Cov:=======================>           68%][Progress:=================>            58%] [Cov:=======================>           67%][Progress:==================>           60%] [Cov:=======================>           67%][Progress:==================>           61%] [Cov:=======================>           67%][Progress:==================>           61%] [Cov:=======================>           68%][Progress:==================>           63%] [Cov:=======================>           68%][Progress:==================>           63%] [Cov:=======================>           68%][Progress:===================>          65%] [Cov:=======================>           68%][Progress:===================>          66%] [Cov:=======================>           68%][Progress:===================>          66%] [Cov:=======================>           68%][Progress:====================>         68%] [Cov:=======================>           68%][Progress:====================>         68%] [Cov:=======================>           68%][Progress:=====================>        70%] [Cov:=======================>           68%][Progress:=====================>        70%] [Cov:=======================>           68%][Progress:=====================>        71%] [Cov:=======================>           68%][Progress:=====================>        73%] [Cov:=======================>           68%][Progress:=====================>        73%] [Cov:=======================>           68%][Progress:======================>       75%] [Cov:=======================>           68%][Progress:======================>       75%] [Cov:=======================>           68%][Progress:======================>       76%] [Cov:=======================>           68%][Progress:=======================>      78%] [Cov:=======================>           68%][Progress:========================>     80%] [Cov:=======================>           68%][Progress:========================>     80%] [Cov:=======================>           68%][Progress:========================>     83%] [Cov:=======================>           68%][Progress:========================>     83%] [Cov:=======================>           68%][Progress:=========================>    85%] [Cov:=======================>           68%][Progress:=========================>    85%] [Cov:=======================>           68%][Progress:=========================>    86%] [Cov:=======================>           68%][Progress:=========================>    86%] [Cov:=======================>           68%][Progress:==========================>   88%] [Cov:=======================>           68%][Progress:==========================>   88%] [Cov:=======================>           68%][Progress:===========================>  90%] [Cov:=======================>           68%][Progress:===========================>  90%] [Cov:=======================>           68%][Progress:===========================>  91%] [Cov:=======================>           68%][Progress:===========================>  93%] [Cov:=======================>           68%][Progress:============================> 95%] [Cov:=======================>           68%][Progress:============================> 95%] [Cov:=======================>           68%][Progress:============================> 95%] [Cov:=======================>           68%][Progress:============================> 96%] [Cov:========================>          69%][Progress:=============================>98%] [Cov:=======================>           68%][Progress:==============================100%] [Cov:=======================>           68%][Progress:==============================100%] [Cov:=======================>           68%]
* Search finished after 62s and 72 generations, 43987 statements, best individual has fitness: 452.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 412
* Number of covered goals: 370
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 346
* Number of covered goals: 324
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 830
* Number of covered goals: 724
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 64%
* Total number of goals: 102
* Number of covered goals: 65
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 38%
* Total number of goals: 141
* Number of covered goals: 54
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 38%
* Total number of goals: 141
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 346
* Number of covered goals: 323
* Generated 170 tests with total length 468
* Resulting test suite's coverage: 69% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 56%
* Compiling and checking tests
[MASTER] 02:57:09.094 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.google.common.base.CharMatcher$1 cannot be cast to com.google.common.base.SmallCharMatcher
[MASTER] 02:57:09.095 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = (CharMatcher.NegatedFastMatcher)charMatcher_Whitespace0.negate();
SmallCharMatcher smallCharMatcher0 = (SmallCharMatcher)charMatcher_NegatedFastMatcher0.precomputedInternal();
assertNotNull(smallCharMatcher0);


[MASTER] 02:57:11.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: com.google.common.base.CharMatcher$BitSetMatcher cannot be cast to com.google.common.base.SmallCharMatcher
[MASTER] 02:57:11.658 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CharMatcher charMatcher0 = CharMatcher.inRange('\u0000', 'k');
SmallCharMatcher smallCharMatcher0 = (SmallCharMatcher)charMatcher0.precomputedInternal();
SmallCharMatcher smallCharMatcher1 = (SmallCharMatcher)smallCharMatcher0.precomputedInternal();
assertFalse(smallCharMatcher1.equals((Object)charMatcher0));


* Writing tests to file
* Writing JUnit test case 'CharMatcher_ESTest' to evosuite-tests
* Done!

* Computation finished
