/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:52:59 GMT 2024
 */

package com.google.zxing.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.oned.Code128Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Code128Writer_ESTest extends Code128Writer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      boolean[] booleanArray0 = code128Writer0.encode("degrees must be a multiple of 0, 90, 180, or 270");
      assertEquals(563, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      boolean[] booleanArray0 = code128Writer0.encode("?^IxW9HGzio_>");
      assertEquals(178, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      boolean[] booleanArray0 = code128Writer0.encode("");
      assertEquals(24, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<int[]> linkedList0 = new LinkedList<int[]>();
      boolean[] booleanArray0 = Code128Writer.produceResult(linkedList0, 55);
      assertEquals(24, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<int[]> linkedList0 = new LinkedList<int[]>();
      int[] intArray0 = new int[5];
      intArray0[0] = 2585;
      intArray0[1] = 2585;
      intArray0[2] = 2585;
      intArray0[4] = 2585;
      linkedList0.add(intArray0);
      // Undeclared exception!
      Code128Writer.produceResult(linkedList0, 2585);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<int[], Object> hashMap0 = new HashMap<int[], Object>();
      Set<int[]> set0 = hashMap0.keySet();
      // Undeclared exception!
      try { 
        Code128Writer.produceResult(set0, 104);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Code128Writer.produceResult((Collection<int[]>) null, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.zxing.oned.Code128Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<int[]> linkedList0 = new LinkedList<int[]>();
      int[] intArray0 = new int[1];
      intArray0[0] = (-194);
      linkedList0.add(intArray0);
      // Undeclared exception!
      try { 
        Code128Writer.produceResult(linkedList0, 100);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.zxing.oned.Code128Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<int[]> linkedList0 = new LinkedList<int[]>();
      int[] intArray0 = new int[5];
      intArray0[1] = (-601);
      intArray0[2] = 2060;
      linkedList0.add(intArray0);
      // Undeclared exception!
      try { 
        Code128Writer.produceResult(linkedList0, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      HashMap<EncodeHintType, Object> hashMap0 = new HashMap<EncodeHintType, Object>();
      // Undeclared exception!
      try { 
        code128Writer0.encode((String) null, (Map<EncodeHintType, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.zxing.oned.Code128Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      // Undeclared exception!
      try { 
        code128Writer0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.zxing.oned.Code128Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      boolean[] booleanArray0 = code128Writer0.encode("1`w\"E-k-}ebrOBDh", (Map<EncodeHintType, ?>) null);
      assertEquals(211, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      boolean[] booleanArray0 = code128Writer0.encode(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyl{|}~vG");
      assertEquals(1058, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      boolean[] booleanArray0 = code128Writer0.encode("J05434}_'6su{n!");
      assertEquals(211, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      HashMap<EncodeHintType, EncodeHintType> hashMap0 = new HashMap<EncodeHintType, EncodeHintType>();
      boolean[] booleanArray0 = code128Writer0.encode("PDF_417", (Map<EncodeHintType, ?>) hashMap0);
      assertEquals(112, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<int[]> linkedList0 = new LinkedList<int[]>();
      // Undeclared exception!
      try { 
        Code128Writer.produceResult(linkedList0, (-2194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to compute a valid input checksum
         //
         verifyException("com.google.zxing.oned.Code128Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      HashMap<EncodeHintType, EncodeHintType> hashMap0 = new HashMap<EncodeHintType, EncodeHintType>();
      boolean[] booleanArray0 = code128Writer0.encode("\n", (Map<EncodeHintType, ?>) hashMap0);
      assertEquals(46, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      boolean[] booleanArray0 = code128Writer0.encode("84Z:mOS84gq");
      assertEquals(156, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      // Undeclared exception!
      try { 
        code128Writer0.encode(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\u00FF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad character in input: ASCII value=255
         //
         verifyException("com.google.zxing.oned.Code128Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      HashMap<EncodeHintType, EncodeHintType> hashMap0 = new HashMap<EncodeHintType, EncodeHintType>();
      EncodeHintType encodeHintType0 = EncodeHintType.FORCE_CODE_SET;
      hashMap0.put(encodeHintType0, encodeHintType0);
      // Undeclared exception!
      try { 
        code128Writer0.encode("Bad character in input: ASCII value=", (Map<EncodeHintType, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported code set hint: com.google.zxing.EncodeHintType@0000000002
         //
         verifyException("com.google.zxing.oned.Code128Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      EncodeHintType encodeHintType0 = EncodeHintType.CODE128_COMPACT;
      HashMap<EncodeHintType, EncodeHintType> hashMap0 = new HashMap<EncodeHintType, EncodeHintType>();
      hashMap0.put(encodeHintType0, encodeHintType0);
      boolean[] booleanArray0 = code128Writer0.encode("<a{SfKL?h%xHm#(>_", (Map<EncodeHintType, ?>) hashMap0);
      assertEquals(222, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Code128Writer code128Writer0 = new Code128Writer();
      Collection<BarcodeFormat> collection0 = code128Writer0.getSupportedWriteFormats();
      assertNotNull(collection0);
  }
}
