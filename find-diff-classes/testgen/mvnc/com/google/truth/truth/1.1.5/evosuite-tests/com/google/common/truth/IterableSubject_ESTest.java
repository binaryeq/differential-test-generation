/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:11:02 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.truth.Correspondence;
import com.google.common.truth.FailureMetadata;
import com.google.common.truth.IterableSubject;
import com.google.common.truth.Ordered;
import java.lang.reflect.Array;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IterableSubject_ESTest extends IterableSubject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "java.sql.SQLNonTransientConnectionException@b", (-1531));
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      IterableSubject.UsingCorrespondence<Comparable<SQLFeatureNotSupportedException>, SQLFeatureNotSupportedException> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Comparable<SQLFeatureNotSupportedException>, ? super SQLFeatureNotSupportedException>) correspondence0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("java.sql.SQLNonTransientConnectionException@b");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsNoneOf(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("expectedSize", "rvJpS C>whSTKR\"`Sa:", 677);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(correspondence_BinaryPredicate0).apply(any(java.sql.SQLNonTransientConnectionException.class) , any());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "Pqdu![O/y\"9fTD!GAZ");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rvJpS C>whSTKR\"`Sa:", "rvJpS C>whSTKR\"`Sa:", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.contains(sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("expected to be empty", "com.google.common.truth.IterableSubject$ElementFactGrouping");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.truth.IterableSubject$ElementFactGrouping", sQLTransactionRollbackException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
      Function<Object, SQLFeatureNotSupportedException> function0 = (Function<Object, SQLFeatureNotSupportedException>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Object, Object> converter0 = Converter.from((Function<? super Object, ?>) function0, (Function<? super Object, ?>) function0);
      Converter<Object, Object> converter1 = converter0.reverse();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter1, (Function<? super SQLNonTransientConnectionException, ?>) converter0);
      assertNotSame(iterableSubject_UsingCorrespondence1, iterableSubject_UsingCorrespondence0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.hasSize(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("expectedSize", "rvJpS C>whSTKR\"`Sa:", 677);
      Function<Object, SQLTransientException> function0 = (Function<Object, SQLTransientException>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<SQLTransientException, SQLNonTransientConnectionException> function1 = (Function<SQLTransientException, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<SQLNonTransientConnectionException, SQLTransientException> converter0 = Converter.from((Function<? super SQLNonTransientConnectionException, ? extends SQLTransientException>) function0, (Function<? super SQLTransientException, ? extends SQLNonTransientConnectionException>) function1);
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.transforming((Function<SQLNonTransientConnectionException, ?>) converter0, "java.util.concurrent.ConcurrentSkipListMap$Values@5");
      TreeMap<SQLNonTransientConnectionException, Comparable<SQLNonTransientConnectionException>> treeMap0 = new TreeMap<SQLNonTransientConnectionException, Comparable<SQLNonTransientConnectionException>>();
      NavigableSet<SQLNonTransientConnectionException> navigableSet0 = treeMap0.descendingKeySet();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      iterableSubject_UsingCorrespondence0.containsNoneIn((Iterable<? extends SQLNonTransientConnectionException>) navigableSet0);
      assertEquals(0, navigableSet0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", (-1));
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<Comparable<SQLFeatureNotSupportedException>, SQLFeatureNotSupportedException> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Comparable<SQLFeatureNotSupportedException>, ? super SQLFeatureNotSupportedException>) correspondence0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      iterableSubject_UsingCorrespondence0.containsNoneOf(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0, sQLFeatureNotSupportedExceptionArray0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", (-1));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", sQLIntegrityConstraintViolationException0);
      Function<Object, SQLNonTransientConnectionException> function0 = (Function<Object, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0).when(function0).apply(any());
      Converter<Object, SQLNonTransientConnectionException> converter0 = Converter.from((Function<? super Object, ? extends SQLNonTransientConnectionException>) function0, (Function<? super SQLNonTransientConnectionException, ?>) function0);
      Correspondence<Object, Object> correspondence0 = Correspondence.transforming((Function<Object, ?>) converter0, (Function<Object, ?>) converter0, "<Mb");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      IterableSubject.UsingCorrespondence<ImmutableSortedMultiset<SQLNonTransientConnectionException>, Comparable<SQLNonTransientConnectionException>> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<ImmutableSortedMultiset<SQLNonTransientConnectionException>, Comparable<SQLNonTransientConnectionException>>(iterableSubject0, correspondence0);
      Comparable<SQLNonTransientConnectionException>[] comparableArray0 = (Comparable<SQLNonTransientConnectionException>[]) Array.newInstance(Comparable.class, 5);
      Comparable<SQLNonTransientConnectionException> comparable0 = (Comparable<SQLNonTransientConnectionException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      comparableArray0[0] = comparable0;
      iterableSubject_UsingCorrespondence0.containsAnyIn(comparableArray0);
      assertEquals(5, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>(12, 12);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConcurrentSkipListMap<Object, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Object>(comparator0);
      Object[] objectArray0 = new Object[1];
      iterableSubject0.containsNoneOf("com.google.common.colle5t.RegularImmutableMultiset@5", concurrentSkipListMap0, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "java.sql.SQLFeatureNotSupportedException@0000000011", 554);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) sQLFeatureNotSupportedException0;
      iterableSubject0.containsAnyIn(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLClientInfoException0);
      String string0 = iterableSubject0.actualCustomStringRepresentation();
      assertEquals("java.sql.SQLClientInfoException", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterable", "java.util.Stack@3", (-5), sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      iterableSubject0.isNotIn(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.isNotIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      // Undeclared exception!
      try { 
        iterableSubject0.isInStrictOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneOf(object0, object0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "java.sql.SQLNonTransientConnectionException@b", (-1531));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneOf(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iterableSubject0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneIn(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.hashCode() is not supported.
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("JP{q 1", "JP{q 1", (-2599));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLTransientException0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) iterableSubject0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      Object[] objectArray0 = new Object[2];
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) iterableSubject0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeast("predicate", concurrentSkipListMap0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("expected to be empty", "com.google.common.truth.IterableSubject$ElementFactGrouping");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.truth.IterableSubject$ElementFactGrouping", sQLTransactionRollbackException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      IterableSubject iterableSubject1 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      // Undeclared exception!
      try { 
        iterableSubject1.contains(iterableSubject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConcurrentSkipListMap<SQLTransientException, IterableSubject.ElementFactGrouping> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLTransientException, IterableSubject.ElementFactGrouping>();
      NavigableSet<SQLTransientException> navigableSet0 = concurrentSkipListMap0.navigableKeySet();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLTransientException0);
      // Undeclared exception!
      try { 
        iterableSubject0.contains(navigableSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.comparingElementsUsing((Correspondence<? super Comparable<SQLNonTransientConnectionException>, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      iterableSubject0.containsNoneIn((Iterable<?>) sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("EcNjxX^j[cF", "@>K,U\"z4zlr", (-1531));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("l9pQ3]Om))57aKT", "com.google.common.collect.RegularImmutableMultiset@5", sQLTransientException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      iterableSubject0.containsAnyIn((Iterable<?>) sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyIn((Iterable<?>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iterableSubject0.isInOrder(comparator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iterableSubject0.isInStrictOrder(comparator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("expected to be empty", "com.google.common.truth.IterableSubject$ElementFactGrouping");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.truth.IterableSubject$ElementFactGrouping", sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.truth.IterableSubject$ElementFactGrouping", "", 2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("expected to be empty", "com.google.common.truth.IterableSubject$ElementFactGrouping", sQLFeatureNotSupportedException0);
      linkedList0.add(sQLNonTransientConnectionException1);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
      Function<Object, SQLFeatureNotSupportedException> function0 = (Function<Object, SQLFeatureNotSupportedException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Converter<Object, Object> converter0 = Converter.from((Function<? super Object, ?>) function0, (Function<? super Object, ?>) function0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence1.containsAnyIn((Iterable<? extends SQLNonTransientConnectionException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Converter<Object, Object> converter0 = Converter.identity();
      Correspondence<Object, Object> correspondence0 = Correspondence.transforming((Function<Object, ?>) converter0, (Function<Object, ?>) converter0, "java.util.concurrent.ConcurrentSkipListMap$Values@0000000003");
      IterableSubject.UsingCorrespondence<Comparable<SQLNonTransientConnectionException>, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Comparable<SQLNonTransientConnectionException>, ? super Object>) correspondence0);
      Object[] objectArray0 = new Object[0];
      iterableSubject_UsingCorrespondence0.containsNoneIn(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("expected to be empty", "com.google.common.truth.IterableSubject$ElementFactGrouping");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.truth.IterableSubject$ElementFactGrouping", sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.truth.IterableSubject$ElementFactGrouping", "", 2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("expected to be empty", "com.google.common.truth.IterableSubject$ElementFactGrouping", sQLFeatureNotSupportedException0);
      linkedList0.add(sQLNonTransientConnectionException1);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
      Function<Object, SQLFeatureNotSupportedException> function0 = (Function<Object, SQLFeatureNotSupportedException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(sQLFeatureNotSupportedException0, (Object) null, (Object) null).when(function0).apply(any());
      Converter<Object, Object> converter0 = Converter.from((Function<? super Object, ?>) function0, (Function<? super Object, ?>) function0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence1.containsAnyIn((Iterable<? extends SQLNonTransientConnectionException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", (-1));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", sQLIntegrityConstraintViolationException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      linkedList0.add(sQLNonTransientConnectionException0);
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(correspondence_BinaryPredicate0).apply(any(java.sql.SQLNonTransientConnectionException.class) , any());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "}2MMG");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsAnyIn((Iterable<? extends SQLNonTransientConnectionException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.collect.RegularImmutableMultiset@5", "com.google.common.collect.RegularImmutableMultiset@5", sQLFeatureNotSupportedException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      linkedList0.add(sQLNonTransientConnectionException0);
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(correspondence_BinaryPredicate0).apply(any(java.sql.SQLNonTransientConnectionException.class) , any());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "Pqdu![O/y\"9fTD!GAZ");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsAnyIn((Iterable<? extends SQLNonTransientConnectionException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("<S)#", "com.google.common.base.Functions$ConstantFunction", (-1531));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("<S)#", "jav.sql.SQLNonTransientConnectionExceptin@b", sQLFeatureNotSupportedException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsAtLeast(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableYultiset@5", "", (-1531));
      SQLTransientException sQLTransientException0 = new SQLTransientException("EcNjxX^j[cF", ">ZR8PL", (-1531));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.collect.RegularImmutableYultiset@5", "(Gb?", sQLTransientException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Converter<Object, Object> converter0 = Converter.identity();
      Correspondence<Object, Object> correspondence0 = Correspondence.transforming((Function<Object, ?>) converter0, (Function<Object, ?>) converter0, "$Xn5^)77.ZcWEnmE");
      IterableSubject.UsingCorrespondence<Comparable<SQLTransientException>, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Comparable<SQLTransientException>, ? super Object>) correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsAtLeastElementsIn((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      concurrentSkipListMap0.values();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", (-1));
      SQLTransientException sQLTransientException0 = new SQLTransientException("rvJpS C>whSTKR\"`Sa:", "txU3&r*dyUk", 677);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", sQLIntegrityConstraintViolationException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      linkedList0.add(sQLNonTransientConnectionException0);
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(correspondence_BinaryPredicate0).apply(any(java.sql.SQLNonTransientConnectionException.class) , any());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "}2MMG");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactly(sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 1);
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(correspondence_BinaryPredicate0).apply(any(java.sql.SQLNonTransientConnectionException.class) , any());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "!b");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLTransientException0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactly((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" occurrences to a count of ", " occurrences to a count of ", 200);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<Object, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super Object, ? super Object>) correspondence_DiffFormatter0);
      Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsExactlyElementsIn((Iterable<?>) sQLFeatureNotSupportedException0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("expectedSize", "rvJpS C>whSTKR\"`Sa:", 677);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactly(sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      Converter<Object, Object> converter0 = Converter.identity();
      Correspondence<Object, Object> correspondence0 = Correspondence.transforming((Function<Object, ?>) converter0, (Function<Object, ?>) converter0, "java.util.concurrent.ConcurrentSkipListMap$Values@0000000003");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
      IterableSubject.UsingCorrespondence<Comparable<SQLFeatureNotSupportedException>, Comparable<Object>> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<Comparable<SQLFeatureNotSupportedException>, Comparable<Object>>(iterableSubject0, correspondence0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      iterableSubject_UsingCorrespondence0.doesNotContain(comparable0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.collect.RegularImmutableMultiset@5", "com.google.common.collect.RegularImmutableMultiset@5", sQLFeatureNotSupportedException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      linkedList0.add(sQLNonTransientConnectionException0);
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(correspondence_BinaryPredicate0).apply(any(java.sql.SQLNonTransientConnectionException.class) , any());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "Pqdu![O/y\"9fTD!GAZ");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      iterableSubject_UsingCorrespondence0.contains(sQLNonTransientConnectionException0);
      assertTrue(linkedList0.contains(sQLNonTransientConnectionException0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      iterableSubject0.isNotIn(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("expectedSize", "expectedSize", 677);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        iterableSubject0.isNotIn(sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.google.common.base.Suppliers$NonSerializableMemoizingSupplier", "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier", 677);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLTransientException0);
      iterableSubject0.isInStrictOrder();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "java.sql.SQLNonTransientConnectionException@b", (-1531));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) sQLFeatureNotSupportedException0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("<S)#", "com.google.common.base.Functions$ConstantFunction", (-1531));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2X", "com.google.common.truth.IterableSubject$ElementFactGrouping");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.truth.IterableSubject$ElementFactGrouping", sQLTransactionRollbackException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2X", "com.google.common.truth.IterableSubject$ElementFactGrouping");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.truth.IterableSubject$ElementFactGrouping", sQLTransactionRollbackException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("+(X0N3C", "+(X0N3C");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+(X0N3C", sQLFeatureNotSupportedException0);
      priorityQueue0.add(sQLNonTransientConnectionException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
      Ordered ordered0 = iterableSubject0.containsExactlyElementsIn((Iterable<?>) priorityQueue0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("jav.sql.SQLNonTransientConnectionExceptin@b", "jav.sql.SQLNonTransientConnectionExceptin@b", (-551));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Object[] objectArray0 = new Object[0];
      Ordered ordered0 = iterableSubject0.containsExactlyElementsIn(objectArray0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactly(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>(0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactly((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactly(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("EcNjxX^j[cF", "EcNjxX^j[cF", (-1531));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.collect.RegularImmutableYultiset@5", "(Gb?", sQLTransientException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn((Iterable<?>) sQLTransientException0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyOf((Object) null, sQLFeatureNotSupportedException1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "java.sql.SQLNonTransientConnectionException@b", (-1531));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) sQLFeatureNotSupportedException0;
      ConcurrentSkipListMap<Object, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Object>();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "java.util.PriorityQueue@0000000007", (-176));
      iterableSubject0.containsAnyOf(concurrentSkipListMap0, sQLDataException0, objectArray0);
      assertNull(sQLDataException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("EcNjxX^j[cF", ":,=3McRNBv`# ;`9tF}", (-1531));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.google.common.collect.RegularImmutableMultiset@5", "(Gb?", sQLTransientException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      iterableSubject0.containsNoDuplicates();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLClientInfoException0);
      ConcurrentSkipListMap<SQLTransactionRollbackException, SQLTransactionRollbackException> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLTransactionRollbackException, SQLTransactionRollbackException>();
      iterableSubject0.doesNotContain(concurrentSkipListMap0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "java.sql.SQLNonTransientConnectionException@b", (-1531));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      iterableSubject0.contains(sQLFeatureNotSupportedException0);
      assertEquals((-1531), sQLFeatureNotSupportedException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.hasSize(256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.hasSize((-602));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize(java.lang.Integer@0000000002) must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      // Undeclared exception!
      try { 
        iterableSubject0.isNotEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", (-1));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rvJpS C>whSTKR\"`Sa:", "JP{q 1", sQLIntegrityConstraintViolationException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      linkedList0.add(sQLNonTransientConnectionException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      iterableSubject0.isNotEmpty();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.google.common.base.Suppliers$NonSerializableMemoizingSupplier", "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier", 677);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLTransientException0);
      // Undeclared exception!
      try { 
        iterableSubject0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      iterableSubject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      TreeMap<SQLNonTransientConnectionException, Comparable<SQLNonTransientConnectionException>> treeMap0 = new TreeMap<SQLNonTransientConnectionException, Comparable<SQLNonTransientConnectionException>>();
      NavigableSet<SQLNonTransientConnectionException> navigableSet0 = treeMap0.descendingKeySet();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, navigableSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.isEqualTo(concurrentSkipListMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      // Undeclared exception!
      try { 
        iterableSubject0.isEqualTo(concurrentSkipListMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      iterableSubject0.isEqualTo(collection0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      Converter<Object, Object> converter0 = Converter.identity();
      Correspondence<Object, Object> correspondence0 = Correspondence.transforming((Function<Object, ?>) converter0, (Function<Object, ?>) converter0, "T6E~u6/j'ge");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      IterableSubject.UsingCorrespondence<Comparable<SQLNonTransientConnectionException>, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Comparable<SQLNonTransientConnectionException>, ? super Object>) correspondence0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) iterableSubject_UsingCorrespondence0;
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsNoneIn(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.hashCode() is not supported.
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("expectedSize", "rvJpS C>whSTKR\"`Sa:", 677);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsAtLeastElementsIn(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "w~1P");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.sql.SQLFeatureNotSupportedException@b", "rvJpS C>whSTKR\"`Sa:", 4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "it does not contain any matches by key, either", sQLFeatureNotSupportedException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLIntegrityConstraintViolationException0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject0.contains(iterableSubject_UsingCorrespondence0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.equals() is not supported. Did you mean to call containsExactlyElementsIn(expected) instead of equals(expected)?
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "}2MMG");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedList0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactlyElementsIn(sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      Correspondence<SQLNonTransientConnectionException, Object> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<SQLNonTransientConnectionException, Object>) correspondence_BinaryPredicate0, "!b");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject0.contains(iterableSubject_UsingCorrespondence0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Converter<Object, Object> converter0 = Converter.identity();
      // Undeclared exception!
      try { 
        iterableSubject0.isNoneOf(converter0, concurrentSkipListMap0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      Object[] objectArray0 = new Object[0];
      Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn(objectArray0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeast("predicate", concurrentSkipListMap0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "com.google.common.collect.RegularImmutableMultiset@5", (-1531));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneIn((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.google.common.collect.RegularImmutableMultiset@5", "java.sql.SQLNonTransientConnectionException@b", (-1531));
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneOf(iterableSubject0, sQLFeatureNotSupportedException0, (Object[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.hashCode() is not supported.
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<ImmutableSortedMultiset<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>();
      Collection<SQLNonTransientConnectionException> collection0 = concurrentSkipListMap0.values();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, collection0);
      iterableSubject0.isInOrder();
  }
}
