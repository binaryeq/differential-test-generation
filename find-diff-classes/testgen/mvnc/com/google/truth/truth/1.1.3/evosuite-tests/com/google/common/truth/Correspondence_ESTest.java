/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 02:55:23 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.truth.Correspondence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Correspondence_ESTest extends Correspondence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Correspondence.ExceptionStore correspondence_ExceptionStore0 = Correspondence.ExceptionStore.forMapValues();
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(1070.493);
      Short short0 = new Short((short)0);
      Double double0 = Double.valueOf(1070.493);
      boolean boolean0 = correspondence0.safeCompare(double0, short0, correspondence_ExceptionStore0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Correspondence.BinaryPredicate<Number, Number> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Number, Number>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(correspondence_BinaryPredicate0).apply(any(java.lang.Number.class) , any(java.lang.Number.class));
      Correspondence<Number, Number> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Number, Number>) correspondence_BinaryPredicate0, " for pairing");
      Float float0 = new Float((-1.0F));
      Integer integer0 = Integer.getInteger(" for pairing", 133);
      boolean boolean0 = correspondence0.compare(float0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Correspondence.ExceptionStore correspondence_ExceptionStore0 = Correspondence.ExceptionStore.forMapValues();
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(0.0);
      Double double0 = new Double(0.0);
      Correspondence.DiffFormatter<Object, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      doReturn("<evosuite>").when(correspondence_DiffFormatter0).formatDiff(any() , any());
      Correspondence<Number, Number> correspondence1 = correspondence0.formattingDiffsUsing(correspondence_DiffFormatter0);
      String string0 = correspondence1.safeFormatDiff(double0, double0, correspondence_ExceptionStore0);
      assertEquals("<evosuite>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Correspondence.ExceptionStore correspondence_ExceptionStore0 = Correspondence.ExceptionStore.forMapValues();
      Converter<Integer, Integer> converter0 = Converter.identity();
      Correspondence<Integer, Integer> correspondence0 = Correspondence.transforming((Function<Integer, ?>) converter0, (Function<Integer, ?>) converter0, (String) null);
      Correspondence.DiffFormatter<Integer, Object> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Integer, Object>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(correspondence_DiffFormatter0).formatDiff(anyInt() , any());
      Correspondence<Integer, Integer> correspondence1 = correspondence0.formattingDiffsUsing(correspondence_DiffFormatter0);
      Integer integer0 = new Integer(2351);
      String string0 = correspondence1.safeFormatDiff(integer0, integer0, correspondence_ExceptionStore0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Correspondence<Integer, Integer> correspondence0 = Correspondence.equality();
      boolean boolean0 = correspondence0.isEquality();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter<Integer, Integer> converter0 = Converter.identity();
      Correspondence<Integer, Integer> correspondence0 = Correspondence.transforming((Function<Integer, ? extends Integer>) converter0, "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList");
      boolean boolean0 = correspondence0.isEquality();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      Object object0 = new Object();
      boolean boolean0 = correspondence0.compare(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Correspondence.tolerance(Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tolerance cannot be POSITIVE_INFINITY
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(334.7884760787496);
      // Undeclared exception!
      try { 
        correspondence0.safeCompare((Number) null, (Number) null, (Correspondence.ExceptionStore) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.Correspondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Correspondence<Integer, Integer> correspondence0 = Correspondence.equality();
      // Undeclared exception!
      try { 
        correspondence0.formattingDiffsUsing((Correspondence.DiffFormatter<? super Integer, ? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Correspondence<Object, Object> correspondence0 = Correspondence.transforming((Function<Object, ?>) null, "0RkY,N");
      // Undeclared exception!
      try { 
        correspondence0.compare("0RkY,N", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.Correspondence$Transforming", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(157.49106100101636);
      // Undeclared exception!
      try { 
        correspondence0.compare((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Correspondence.ExceptionStore correspondence_ExceptionStore0 = Correspondence.ExceptionStore.forMapValues();
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      String string0 = correspondence0.formatDiff(correspondence_ExceptionStore0, correspondence_ExceptionStore0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(1070.493);
      Correspondence<Comparable<Integer>, Integer> correspondence1 = Correspondence.transforming((Function<Comparable<Integer>, ? extends Integer>) null, (String) null);
      // Undeclared exception!
      try { 
        correspondence1.equals(correspondence0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Correspondence.equals(object) is not supported. If you meant to compare objects, use .compare(actual, expected) instead.
         //
         verifyException("com.google.common.truth.Correspondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Correspondence.ExceptionStore correspondence_ExceptionStore0 = Correspondence.ExceptionStore.forMapValues();
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(157.49106100101636);
      correspondence0.safeCompare((Number) null, (Number) null, correspondence_ExceptionStore0);
      boolean boolean0 = correspondence0.safeCompare((Number) null, (Number) null, correspondence_ExceptionStore0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Correspondence.BinaryPredicate<Integer, Correspondence<Object, Integer>> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Integer, Correspondence<Object, Integer>>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      Correspondence<Integer, Correspondence<Object, Integer>> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Integer, Correspondence<Object, Integer>>) correspondence_BinaryPredicate0, "");
      String string0 = correspondence0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Correspondence<Comparable<Integer>, Integer> correspondence0 = Correspondence.transforming((Function<Comparable<Integer>, ? extends Integer>) null, (String) null);
      Correspondence.DiffFormatter<Object, Integer> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Object, Integer>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      Correspondence<Comparable<Integer>, Integer> correspondence1 = correspondence0.formattingDiffsUsing(correspondence_DiffFormatter0);
      String string0 = correspondence1.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Correspondence.ExceptionStore correspondence_ExceptionStore0 = Correspondence.ExceptionStore.forMapValues();
      Correspondence<Integer, Integer> correspondence0 = Correspondence.equality();
      Correspondence.DiffFormatter<Integer, Integer> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Integer, Integer>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(correspondence_DiffFormatter0).formatDiff(anyInt() , anyInt());
      Correspondence<Integer, Integer> correspondence1 = correspondence0.formattingDiffsUsing(correspondence_DiffFormatter0);
      Integer integer0 = new Integer(0);
      String string0 = correspondence1.safeFormatDiff((Integer) null, integer0, correspondence_ExceptionStore0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Correspondence<Integer, Integer> correspondence0 = Correspondence.equality();
      String string0 = correspondence0.toString();
      assertEquals("is equal to", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Correspondence<Integer, Integer> correspondence0 = Correspondence.equality();
      // Undeclared exception!
      try { 
        correspondence0.hashCode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Correspondence.hashCode() is not supported.
         //
         verifyException("com.google.common.truth.Correspondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(2014.7060084377808);
      Correspondence<Object, Object> correspondence1 = Correspondence.equality();
      Integer integer0 = new Integer((-1557));
      // Undeclared exception!
      try { 
        correspondence1.compare(correspondence0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Correspondence.equals(object) is not supported. If you meant to compare objects, use .compare(actual, expected) instead.
         //
         verifyException("com.google.common.truth.Correspondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Correspondence<Integer, Integer> correspondence0 = Correspondence.equality();
      Correspondence.DiffFormatter<Integer, Integer> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<Integer, Integer>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      Correspondence<Integer, Integer> correspondence1 = correspondence0.formattingDiffsUsing(correspondence_DiffFormatter0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = correspondence1.compare((Integer) null, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Correspondence.BinaryPredicate<Integer, Integer> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Integer, Integer>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Correspondence.from((Correspondence.BinaryPredicate<Integer, Integer>) correspondence_BinaryPredicate0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Correspondence.ExceptionStore correspondence_ExceptionStore0 = Correspondence.ExceptionStore.forMapValues();
      Correspondence<Number, Number> correspondence0 = Correspondence.tolerance(4810.0);
      Double double0 = Double.valueOf((-732.09040873));
      boolean boolean0 = correspondence0.safeCompare(double0, (Number) null, correspondence_ExceptionStore0);
      assertFalse(boolean0);
  }
}
