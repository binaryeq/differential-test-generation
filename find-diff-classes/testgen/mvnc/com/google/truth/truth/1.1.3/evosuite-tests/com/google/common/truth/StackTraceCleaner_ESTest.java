/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:03:37 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.truth.StackTraceCleaner;
import java.sql.BatchUpdateException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLWarning;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StackTraceCleaner_ESTest extends StackTraceCleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        StackTraceCleaner.cleanStackTrace((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.StackTraceCleaner", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.google.common.util.concurrent", "com.google.common.util.concurrent", "com.google.common.util.concurrent", (-281));
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      StackTraceCleaner.cleanStackTrace(mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = new StackTraceElement("Test", "Test", "Test", (-340026039));
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      StackTraceCleaner.cleanStackTrace(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.google.common.collect.Iterators$9", "java.lang.reflect", "com.google.common.collect.Iterators$9", (-1633));
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      StackTraceCleaner.cleanStackTrace(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      sQLWarning0.addSuppressed(batchUpdateException0);
      StackTraceCleaner.cleanStackTrace(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("jdk.internal.reflect.sun.reflect.GeneratedConstructorAccessor53", "comgoogle.comon.colect.ImmutableList$SubList", "jdk.internal.reflect.sun.reflect.GeneratedConstructorAccessor53", (-2753));
      stackTraceElementArray0[0] = stackTraceElement0;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      StackTraceCleaner.cleanStackTrace(mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.google.common.truth.DoubleSubject", "com.google.common.truth.DoubleSubject", "com.google.common.truth.DoubleSubject", 1692);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      StackTraceCleaner.cleanStackTrace(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLInvalidAuthorizationSpecException0);
      StackTraceCleaner.cleanStackTrace(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.junit.runner.Runner", "com.google.common.truth.PrimitiveDoubleArraySubject", "org.junit.runner.Runner", 3);
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      StackTraceCleaner.cleanStackTrace(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }
}
