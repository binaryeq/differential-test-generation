/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 02:50:39 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.truth.ActualValueInference;
import com.google.common.truth.AutoValue_ActualValueInference_DescribedEntry;
import com.google.common.truth.AutoValue_ActualValueInference_InferredType;
import com.google.common.truth.AutoValue_ActualValueInference_OpaqueEntry;
import com.google.common.truth.AutoValue_ActualValueInference_SubjectEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActualValueInference_ESTest extends ActualValueInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = new AutoValue_ActualValueInference_InferredType("x");
      // Undeclared exception!
      try { 
        autoValue_ActualValueInference_InferredType0.getElementTypeIfArrayOrThrow();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This type com.google.common.truth.AutoValue_ActualValueInference_InferredType@0000000001 is not an array.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.BYTE;
      AutoValue_ActualValueInference_DescribedEntry autoValue_ActualValueInference_DescribedEntry0 = new AutoValue_ActualValueInference_DescribedEntry(autoValue_ActualValueInference_InferredType0, "7|nJp38\"f");
      boolean boolean0 = autoValue_ActualValueInference_DescribedEntry0.isSubject();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActualValueInference.Invocation.Builder actualValueInference_Invocation_Builder0 = ActualValueInference.Invocation.builder("v C$=Ai(A4z6`[");
      assertNotNull(actualValueInference_Invocation_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.BOOLEAN;
      boolean boolean0 = autoValue_ActualValueInference_InferredType0.isUninitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActualValueInference.describeActualValue("com.google.common.collect.ImmutableSortedSet", "UNINIT@Z", 1560);
      // Undeclared exception!
      ActualValueInference.describeActualValue("com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ImmutableSortedSet", 32767);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ActualValueInference.describeActualValue((String) null, (String) null, (-792));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.ActualValueInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ActualValueInference.describeActualValue("3c_o(#`", "{q0_<HBZ", 4096);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.DOUBLE;
      boolean boolean0 = autoValue_ActualValueInference_InferredType0.isCategory2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.create("L");
      boolean boolean0 = autoValue_ActualValueInference_InferredType0.isCategory2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.LONG;
      boolean boolean0 = autoValue_ActualValueInference_InferredType0.isCategory2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ActualValueInference.InferredType.create("access$100");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid descriptor: access$100
         //
         verifyException("com.google.common.truth.ActualValueInference$InferredType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("UNINITIALIZED_THIS");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("NULL");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("TOP");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("Z");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("J");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.create("F");
      // Undeclared exception!
      try { 
        autoValue_ActualValueInference_InferredType0.getElementTypeIfArrayOrThrow();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This type com.google.common.truth.AutoValue_ActualValueInference_InferredType@0000000001 is not an array.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("D");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("B");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.create("[I");
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType1 = (AutoValue_ActualValueInference_InferredType)autoValue_ActualValueInference_InferredType0.getElementTypeIfArrayOrThrow();
      assertFalse(autoValue_ActualValueInference_InferredType1.equals((Object)autoValue_ActualValueInference_InferredType0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("UNINIT@");
      assertNotNull(actualValueInference_InferredType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = ActualValueInference.describeActualValue("com.google.common.truth.ActualValueInference", "access$300", 25);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.DOUBLE;
      AutoValue_ActualValueInference_OpaqueEntry autoValue_ActualValueInference_OpaqueEntry0 = new AutoValue_ActualValueInference_OpaqueEntry(autoValue_ActualValueInference_InferredType0);
      // Undeclared exception!
      try { 
        autoValue_ActualValueInference_OpaqueEntry0.actualValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.common.truth.AutoValue_ActualValueInference_OpaqueEntry
         //
         verifyException("com.google.common.truth.ActualValueInference$StackEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.FLOAT;
      AutoValue_ActualValueInference_OpaqueEntry autoValue_ActualValueInference_OpaqueEntry0 = new AutoValue_ActualValueInference_OpaqueEntry(autoValue_ActualValueInference_InferredType0);
      String string0 = autoValue_ActualValueInference_OpaqueEntry0.description();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("L");
      AutoValue_ActualValueInference_DescribedEntry autoValue_ActualValueInference_DescribedEntry0 = new AutoValue_ActualValueInference_DescribedEntry(actualValueInference_InferredType0, "L");
      AutoValue_ActualValueInference_SubjectEntry autoValue_ActualValueInference_SubjectEntry0 = new AutoValue_ActualValueInference_SubjectEntry(actualValueInference_InferredType0, autoValue_ActualValueInference_DescribedEntry0);
      boolean boolean0 = autoValue_ActualValueInference_SubjectEntry0.isSubject();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AutoValue_ActualValueInference_InferredType autoValue_ActualValueInference_InferredType0 = (AutoValue_ActualValueInference_InferredType)ActualValueInference.InferredType.INT;
      AutoValue_ActualValueInference_DescribedEntry autoValue_ActualValueInference_DescribedEntry0 = new AutoValue_ActualValueInference_DescribedEntry(autoValue_ActualValueInference_InferredType0, "4ur");
      AutoValue_ActualValueInference_SubjectEntry autoValue_ActualValueInference_SubjectEntry0 = new AutoValue_ActualValueInference_SubjectEntry(autoValue_ActualValueInference_InferredType0, autoValue_ActualValueInference_DescribedEntry0);
      String string0 = autoValue_ActualValueInference_SubjectEntry0.toString();
      assertEquals("subjectFor(4ur)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("L");
      AutoValue_ActualValueInference_OpaqueEntry autoValue_ActualValueInference_OpaqueEntry0 = new AutoValue_ActualValueInference_OpaqueEntry(actualValueInference_InferredType0);
      String string0 = autoValue_ActualValueInference_OpaqueEntry0.toString();
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ActualValueInference.describeActualValue("com.google.common.truth.ActualValueInference", "access$500", 25);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ActualValueInference.InferredType actualValueInference_InferredType0 = ActualValueInference.InferredType.create("L");
      String string0 = actualValueInference_InferredType0.toString();
      assertEquals("L", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ActualValueInference.describeActualValue("com.google.common.truth.ActualValueInference", "opaque", 25);
      assertNull(string0);
  }
}
