/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Nov 08 02:57:51 GMT 2024
 */

package com.google.common.truth;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class Expect_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.Expect"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.1.3"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Expect_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.truth.PrimitiveDoubleArraySubject",
      "com.google.common.truth.MultisetSubject",
      "com.google.common.truth.Expect$1",
      "com.google.common.truth.AbstractArraySubject",
      "com.google.common.collect.ImmutableList$Itr",
      "com.google.common.collect.ImmutableList$SubList",
      "com.google.common.base.Java8Usage",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.truth.ErrorWithFacts",
      "com.google.common.truth.LongSubject",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.truth.IterableSubject",
      "com.google.common.base.Optional",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.IntegerSubject",
      "com.google.common.truth.Truth$SimpleAssertionError",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.truth.CustomSubjectBuilder",
      "com.google.common.truth.SimpleSubjectBuilder",
      "com.google.common.truth.Subject",
      "com.google.common.truth.ClassSubject",
      "com.google.common.truth.TableSubject",
      "com.google.common.truth.PrimitiveByteArraySubject",
      "com.google.common.truth.MapSubject",
      "com.google.common.truth.PrimitiveBooleanArraySubject",
      "com.google.common.truth.PrimitiveIntArraySubject",
      "com.google.common.truth.MultimapSubject",
      "com.google.common.truth.PrimitiveCharArraySubject",
      "com.google.common.truth.BigDecimalSubject",
      "com.google.common.truth.Expect$TestPhase",
      "com.google.common.truth.Subject$Factory",
      "com.google.common.truth.FloatSubject",
      "com.google.common.collect.Multiset",
      "com.google.common.truth.PrimitiveLongArraySubject",
      "com.google.common.truth.PrimitiveShortArraySubject",
      "com.google.common.collect.Multimap",
      "com.google.common.truth.AssertionErrorWithFacts",
      "com.google.common.collect.ImmutableList",
      "com.google.common.truth.Expect$ExpectationGatherer",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.truth.ComparableSubject",
      "com.google.common.truth.GuavaOptionalSubject",
      "com.google.common.truth.PrimitiveFloatArraySubject",
      "com.google.common.truth.FailureMetadata",
      "com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Expect",
      "com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.CustomSubjectBuilder$Factory",
      "com.google.common.truth.StandardSubjectBuilder",
      "com.google.common.truth.StringSubject",
      "com.google.common.truth.DoubleSubject",
      "com.google.common.truth.FailureStrategy",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.truth.StandardSubjectBuilder$1",
      "com.google.common.collect.Table"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Expect_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.common.truth.StandardSubjectBuilder",
      "com.google.common.truth.Expect",
      "com.google.common.truth.Expect$ExpectationGatherer",
      "com.google.common.truth.Expect$TestPhase",
      "com.google.common.truth.Expect$1",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.collect.ImmutableList$Itr",
      "com.google.common.collect.ImmutableList",
      "org.checkerframework.framework.qual.TypeUseLocation",
      "org.checkerframework.framework.qual.LiteralKind",
      "org.checkerframework.checker.units.qual.Prefix",
      "org.checkerframework.framework.qual.TypeKind",
      "autovalue.shaded.org.checkerframework$.framework.qual.$LiteralKind",
      "autovalue.shaded.org.checkerframework$.framework.qual.$TypeUseLocation",
      "autovalue.shaded.org.checkerframework$.framework.qual.$TypeKind",
      "com.google.common.truth.FailureMetadata",
      "com.google.common.collect.AbstractMultiset",
      "com.google.common.collect.AbstractMapBasedMultiset",
      "com.google.common.collect.HashMultiset",
      "com.google.common.collect.ObjectCountHashMap",
      "com.google.common.base.Java8Usage",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.Hashing",
      "com.google.common.base.Optional",
      "com.google.common.base.Present",
      "com.google.common.base.Absent",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
      "com.google.common.collect.ImmutableMultiset",
      "com.google.common.collect.ImmutableSortedMultisetFauxverideShim",
      "com.google.common.collect.ImmutableSortedMultiset",
      "com.google.common.collect.Ordering",
      "com.google.common.collect.NaturalOrdering",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.ImmutableSortedSetFauxverideShim",
      "com.google.common.collect.ImmutableSortedSet",
      "com.google.common.collect.RegularImmutableSortedSet",
      "com.google.common.collect.RegularImmutableSortedMultiset",
      "com.google.common.collect.RegularImmutableList"
    );
  }
}
