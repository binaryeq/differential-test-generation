/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:09:02 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.truth.FailureMetadata;
import com.google.common.truth.FailureStrategy;
import com.google.common.truth.ThrowableSubject;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThrowableSubject_ESTest extends ThrowableSubject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      SQLDataException sQLDataException0 = new SQLDataException("com.google.common.truth.StandardSubjectBuilder");
      ThrowableSubject throwableSubject0 = new ThrowableSubject(failureMetadata0, sQLDataException0);
      ThrowableSubject throwableSubject1 = throwableSubject0.hasCauseThat();
      // Undeclared exception!
      try { 
        throwableSubject1.hasMessageThat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.ThrowableSubject", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      ThrowableSubject throwableSubject0 = new ThrowableSubject(failureMetadata1, (Throwable) null, "~Rb %lW/DOG'SuM^7");
      // Undeclared exception!
      try { 
        throwableSubject0.hasCauseThat();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException("X*jKaow", "X*jKaow", 0, sQLIntegrityConstraintViolationException0);
      ThrowableSubject throwableSubject0 = null;
      try {
        throwableSubject0 = new ThrowableSubject((FailureMetadata) null, sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      SQLDataException sQLDataException0 = new SQLDataException("com.google.common.truth.StandardSubjectBuilder");
      ThrowableSubject throwableSubject0 = new ThrowableSubject(failureMetadata0, sQLDataException0);
      ThrowableSubject throwableSubject1 = throwableSubject0.hasCauseThat();
      ThrowableSubject throwableSubject2 = throwableSubject1.hasCauseThat();
      assertNotSame(throwableSubject2, throwableSubject0);
  }
}
