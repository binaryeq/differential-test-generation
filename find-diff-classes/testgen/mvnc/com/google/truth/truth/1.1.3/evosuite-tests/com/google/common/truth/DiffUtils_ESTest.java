/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 02:56:43 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.truth.DiffUtils;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiffUtils_ESTest extends DiffUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("[(6V&g)");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) treeSet0);
      List<String> list1 = DiffUtils.generateUnifiedDiff(list0, arrayList0, 3749);
      List<String> list2 = DiffUtils.generateUnifiedDiff(list1, arrayList0, 3749);
      List<String> list3 = DiffUtils.generateUnifiedDiff(list1, list2, 3749);
      assertEquals(6, list3.size());
      assertEquals(4, list2.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiffUtils diffUtils0 = new DiffUtils();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        DiffUtils.generateUnifiedDiff((List<String>) null, (List<String>) null, 7499);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.DiffUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        DiffUtils.generateUnifiedDiff(arrayList0, arrayList0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-1)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("@@ -1,0 +1,1 @@");
      arrayList0.add("@@ -1,0 +1,1 @@");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("@@ -1,0 +1,1 @@");
      // Undeclared exception!
      DiffUtils.generateUnifiedDiff(stack0, arrayList0, 2147483623);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("@@ -1,0 +1,1 @@");
      arrayList0.add("@@ -1,0 +1,1 @@");
      Stack<String> stack0 = new Stack<String>();
      stack0.add("@@ -1,0 +1,1 @@");
      List<String> list0 = DiffUtils.generateUnifiedDiff(arrayList0, stack0, 1202);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("JsQ=~jySa]VC.![(w");
      Stack<String> stack1 = new Stack<String>();
      List<String> list0 = DiffUtils.generateUnifiedDiff(stack1, stack0, 0);
      List<String> list1 = DiffUtils.generateUnifiedDiff(list0, stack0, 0);
      List<String> list2 = DiffUtils.generateUnifiedDiff(list0, list1, 0);
      assertEquals(5, list2.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("JsQ=~jySa]VC.![(w");
      List<String> list0 = DiffUtils.generateUnifiedDiff(stack0, stack0, 0);
      List<String> list1 = DiffUtils.generateUnifiedDiff(stack0, list0, 43);
      List<String> list2 = DiffUtils.generateUnifiedDiff(list1, stack0, 0);
      List<String> list3 = DiffUtils.generateUnifiedDiff(list1, list2, 0);
      List<String> list4 = DiffUtils.generateUnifiedDiff(list2, list3, 0);
      assertEquals(9, list4.size());
      assertEquals(4, list2.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("JsQ=~jySa]VC.![(w");
      List<String> list0 = DiffUtils.generateUnifiedDiff(stack0, stack0, 43);
      assertEquals(0, list0.size());
  }
}
