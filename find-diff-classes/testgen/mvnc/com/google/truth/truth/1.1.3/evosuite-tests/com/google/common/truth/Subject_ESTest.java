/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:06:31 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.truth.Fact;
import com.google.common.truth.FailureMetadata;
import com.google.common.truth.FailureStrategy;
import com.google.common.truth.StandardSubjectBuilder;
import com.google.common.truth.Subject;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_ESTest extends Subject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.failEqualityCheckForEqualsWithoutDescription(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Byte byte0 = new Byte((byte)122);
      Subject subject0 = new Subject(failureMetadata0, byte0);
      Byte byte1 = new Byte((byte) (-55));
      subject0.isNotEqualTo(byte1);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.failWithoutSubject("H|2");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Converter<String, String> converter0 = Converter.identity();
      Subject subject0 = new Subject(failureMetadata0, converter0);
      Fact fact0 = Fact.simpleFact("2P6ODAyLz{80+'");
      Fact[] factArray0 = new Fact[8];
      factArray0[0] = fact0;
      factArray0[1] = fact0;
      factArray0[2] = fact0;
      factArray0[3] = fact0;
      factArray0[4] = fact0;
      factArray0[5] = fact0;
      factArray0[6] = fact0;
      factArray0[7] = fact0;
      subject0.failWithoutActual(fact0, factArray0);
      assertEquals(8, factArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.failWithActual("XaY^&YL+NGDa`~jd3", (Object) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Object object0 = new Object();
      Fact fact0 = Fact.fact("]jU-oT)BoZ", failureMetadata0);
      Subject subject0 = new Subject(failureMetadata0, object0, "]jU-oT)BoZ");
      Fact[] factArray0 = new Fact[0];
      subject0.failWithActual(fact0, factArray0);
      assertEquals(0, factArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0, "but was an empty string");
      Object[] objectArray0 = new Object[6];
      subject0.fail("com.google.common.truth.Subject$EqualityCheck", objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      String string0 = subject0.typeDescription();
      assertNotNull(string0);
      assertEquals("object", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Object object0 = new Object();
      Subject subject0 = new Subject(failureMetadata0, object0);
      Object[] objectArray0 = new Object[0];
      StandardSubjectBuilder standardSubjectBuilder0 = subject0.checkNoNeedToDisplayBothValues("05QHc?*F?", objectArray0);
      assertNotNull(standardSubjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "wR\"g\"uPR6K8$LNDRp7");
      String string0 = subject0.actualCustomStringRepresentationForPackageMembersToCall();
      assertEquals("wR\"g\"uPR6K8$LNDRp7", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0, "t4Oo4uU1=U$jS");
      String string0 = subject0.actualCustomStringRepresentation();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "", "");
      String string0 = subject0.actualCustomStringRepresentation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      Object object0 = subject0.actual();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      // Undeclared exception!
      try { 
        subject1.isSameInstanceAs(failureMetadata0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.equals() is not supported. Did you mean to call assertThat(actual).isEqualTo(expected) instead of assertThat(actual).equals(expected)?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Object object0 = new Object();
      Subject subject0 = new Subject(failureMetadata1, object0);
      // Undeclared exception!
      try { 
        subject0.isSameInstanceAs(failureMetadata1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      // Undeclared exception!
      try { 
        subject1.isNull();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata.OldAndNewValuesAreSimilar failureMetadata_OldAndNewValuesAreSimilar0 = FailureMetadata.OldAndNewValuesAreSimilar.DIFFERENT;
      Converter<String, String> converter0 = Converter.identity();
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall(failureMetadata_OldAndNewValuesAreSimilar0, converter0);
      Object object0 = new Object();
      Subject subject0 = new Subject(failureMetadata1, object0);
      // Undeclared exception!
      try { 
        subject0.isNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Object object0 = new Object();
      Subject subject0 = new Subject(failureMetadata1, object0);
      // Undeclared exception!
      try { 
        subject0.isNotSameInstanceAs(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        subject1.isNotInstanceOf(class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        subject0.isNotInstanceOf(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, ">");
      Subject subject1 = new Subject(failureMetadata0, subject0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Byte byte0 = new Byte((byte)98);
      priorityQueue0.add(byte0);
      // Undeclared exception!
      try { 
        subject1.isNotIn(priorityQueue0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.equals() is not supported. Did you mean to call assertThat(actual).isEqualTo(expected) instead of assertThat(actual).equals(expected)?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      // Undeclared exception!
      try { 
        subject0.isNotIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      // Undeclared exception!
      try { 
        subject0.isNotEqualTo(failureMetadata1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) subject0;
      // Undeclared exception!
      try { 
        subject0.isNoneOf(failureMetadata0, object0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata.OldAndNewValuesAreSimilar failureMetadata_OldAndNewValuesAreSimilar0 = FailureMetadata.OldAndNewValuesAreSimilar.SIMILAR;
      Converter<String, String> converter0 = Converter.identity();
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall(failureMetadata_OldAndNewValuesAreSimilar0, converter0);
      Subject subject0 = new Subject(failureMetadata1, converter0);
      Object object0 = subject0.actual();
      // Undeclared exception!
      try { 
        subject0.isNoneOf(object0, converter0, (Object[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        subject1.isInstanceOf(class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        subject0.isInstanceOf(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.isIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      // Undeclared exception!
      try { 
        subject0.isIn(priorityQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      // Undeclared exception!
      try { 
        subject1.isEqualTo("Optional.get() cannot be called on an absent value");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.equals() is not supported. Did you mean to call assertThat(actual).isEqualTo(expected) instead of assertThat(actual).equals(expected)?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, "62", "com.google.common.truth.FailureMetadata@5");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        subject0.isEqualTo(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) subject0;
      // Undeclared exception!
      try { 
        subject0.isAnyOf("B+Nk", "B+Nk", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      Byte byte0 = new Byte((byte)24);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        subject0.isAnyOf(byte0, failureMetadata0, objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      // Undeclared exception!
      try { 
        subject0.failWithoutSubject("-103");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      // Undeclared exception!
      try { 
        subject0.failWithoutActual("om.google.common.tuth.FailureMetadata@5");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.failWithoutActual((Iterable<Fact>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      TreeSet<Fact> treeSet0 = new TreeSet<Fact>();
      // Undeclared exception!
      try { 
        subject0.failWithoutActual(treeSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Fact fact0 = subject0.butWas();
      // Undeclared exception!
      try { 
        subject0.failWithoutActual(fact0, (Fact[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      Fact fact0 = Fact.simpleFact("re0");
      Fact[] factArray0 = new Fact[9];
      factArray0[0] = fact0;
      factArray0[1] = fact0;
      factArray0[2] = fact0;
      factArray0[3] = fact0;
      factArray0[4] = fact0;
      factArray0[5] = fact0;
      factArray0[6] = fact0;
      factArray0[7] = fact0;
      factArray0[8] = fact0;
      // Undeclared exception!
      try { 
        subject0.failWithoutActual(fact0, factArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      // Undeclared exception!
      try { 
        subject0.failWithCustomSubject("com.google.common.truth.FailureMetadata@5", "com.google.common.truth.FailureMetadata@5", failureMetadata1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      // Undeclared exception!
      try { 
        subject0.failWithBadResults((String) null, failureMetadata1, "java.lang.Object@25859a02", "java.lang.Object@25859a02");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0, "-");
      // Undeclared exception!
      try { 
        subject1.failWithActual("ys^R.g$J", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.failWithActual((String) null, failureMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, "");
      // Undeclared exception!
      try { 
        subject0.failWithActual(">", failureMetadata0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Class<Byte> class0 = Byte.TYPE;
      Subject subject0 = new Subject(failureMetadata0, class0);
      // Undeclared exception!
      try { 
        subject0.failWithActual((Iterable<Fact>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      Vector<Fact> vector0 = new Vector<Fact>();
      // Undeclared exception!
      try { 
        subject0.failWithActual(vector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Fact fact0 = subject0.butWas();
      // Undeclared exception!
      try { 
        subject0.failWithActual(fact0, (Fact[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Fact[] factArray0 = new Fact[2];
      // Undeclared exception!
      try { 
        subject0.failWithActual((Fact) null, factArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Object object0 = new Object();
      Subject subject0 = new Subject(failureMetadata1, object0);
      Fact fact0 = subject0.butWas();
      Fact[] factArray0 = new Fact[1];
      factArray0[0] = fact0;
      // Undeclared exception!
      try { 
        subject0.failWithActual(fact0, factArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.failEqualityCheckForEqualsWithoutDescription(subject0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.failEqualityCheckForEqualsWithoutDescription(failureMetadata1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) subject0;
      // Undeclared exception!
      try { 
        subject0.fail("110", objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.fail("c9kvmKRz!7<H<Em", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Object object0 = new Object();
      Subject subject0 = new Subject(failureMetadata1, object0, "iakti_^?R>i");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        subject0.fail("iakti_^?R>i", objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      Subject subject1 = new Subject(failureMetadata0, subject0, "V6=9gj;3v{*");
      Fact fact0 = Fact.simpleFact("java.lang.Byte");
      // Undeclared exception!
      try { 
        subject1.fail("autovalue.shaded.com.google$.common.collect.$Cut$BelowAll", fact0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      // Undeclared exception!
      try { 
        subject0.fail("com.google.common.truth.FailureMetadata@5", "com.google.common.truth.FailureMetadata@5");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0, "aFU.Y");
      // Undeclared exception!
      try { 
        subject1.fail("aFU.Y");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      Subject subject0 = new Subject(failureMetadata1, failureMetadata1);
      // Undeclared exception!
      try { 
        subject0.fail("eUW");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "PS/lF-t2c+4<J");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        subject0.checkNoNeedToDisplayBothValues(" :#504]'$\"}9hSD", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect number of args (java.lang.Integer@0000000007) for the given placeholders (java.lang.Integer@0000000008) in string template:\"java.lang.String@0000000009\"
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.check("jVqF*[jG&&", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.LazyMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0, (String) null);
      // Undeclared exception!
      try { 
        subject1.butWas();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      // Undeclared exception!
      try { 
        subject1.actualCustomStringRepresentationForPackageMembersToCall();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      // Undeclared exception!
      try { 
        subject1.actualCustomStringRepresentation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Subject subject0 = null;
      try {
        subject0 = new Subject((FailureMetadata) null, (Object) null, "%R]sN0!7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Subject subject0 = null;
      try {
        subject0 = new Subject((FailureMetadata) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-127889619));
      subject0.isNotIn(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.equals(failureMetadata0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.equals() is not supported. Did you mean to call assertThat(actual).isEqualTo(expected) instead of assertThat(actual).equals(expected)?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "", "");
      // Undeclared exception!
      try { 
        subject0.toString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.failWithCustomSubject((String) null, (Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.failWithBadResults("qsedd", (Object) null, "wrong type", (Object) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "");
      subject0.failEqualityCheckForEqualsWithoutDescription("java.lang.Object@2361edba");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      subject0.failEqualityCheckForEqualsWithoutDescription(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Fact fact0 = Fact.simpleFact("jva.lang.ObjectK5bca18b0");
      Subject subject0 = new Subject(failureMetadata0, fact0);
      subject0.failEqualityCheckForEqualsWithoutDescription("jva.lang.ObjectK5bca18b0");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "`DS");
      subject0.failEqualityCheckForEqualsWithoutDescription("");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, " cannot be negative but was: ");
      subject0.failEqualityCheckForEqualsWithoutDescription(" cannot be negative but was: ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      subject0.failEqualityCheckForEqualsWithoutDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Byte byte0 = new Byte((byte)38);
      Subject subject0 = new Subject(failureMetadata0, byte0, "Ahcf'omi2Qj5");
      Object[] objectArray0 = new Object[0];
      subject0.isNoneOf("%m.TSpcE'S", failureMetadata0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Class<Byte> class0 = Byte.TYPE;
      subject0.isNotInstanceOf(class0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      Class<Object> class0 = Object.class;
      subject0.isNotInstanceOf(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.isNotInstanceOf((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clazz
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Class<Byte> class0 = Byte.class;
      subject0.isInstanceOf(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      Class<Object> class0 = Object.class;
      subject0.isInstanceOf(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.isInstanceOf((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clazz
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Byte byte0 = new Byte((byte)46);
      Subject subject0 = new Subject(failureMetadata0, byte0);
      Class<Byte> class0 = Byte.class;
      subject0.isInstanceOf(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.isNotSameInstanceAs(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Byte byte0 = new Byte((byte)122);
      Subject subject0 = new Subject(failureMetadata0, byte0);
      subject0.isNotSameInstanceAs(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.isSameInstanceAs(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Byte byte0 = new Byte((byte) (-28));
      Subject subject0 = new Subject(failureMetadata0, byte0);
      Byte byte1 = new Byte((byte) (-25));
      subject0.isNotEqualTo(byte1);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Byte byte0 = new Byte((byte)41);
      Subject subject0 = new Subject(failureMetadata0, byte0);
      subject0.isNotEqualTo(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Byte byte0 = new Byte((byte)9);
      Subject subject0 = new Subject(failureMetadata0, byte0);
      subject0.isNotEqualTo(byte0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      subject0.isNotEqualTo(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.isEqualTo(failureMetadata0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0, "autovalue.shaded.com.google$.common.collect.$Cut$BelowValue");
      Object[] objectArray0 = new Object[0];
      StandardSubjectBuilder standardSubjectBuilder0 = subject0.check("autovalue.shaded.com.google$.common.collect.$Cut$BelowValue", objectArray0);
      assertNotNull(standardSubjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      ArrayList<Fact> arrayList0 = new ArrayList<Fact>();
      subject0.failWithActual(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.fail("com.google.common.truth.Subject", "com.google.common.truth.Subject");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      StandardSubjectBuilder standardSubjectBuilder0 = subject0.ignoreCheck();
      assertNotNull(standardSubjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.failWithoutActual("com.google.common.truth.BooleanSubject");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Object object0 = new Object();
      Subject subject0 = new Subject(failureMetadata0, object0);
      Vector<Fact> vector0 = new Vector<Fact>();
      subject0.failWithoutActual(vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        subject0.check("(null reference)", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect number of args (java.lang.Integer@0000000007) for the given placeholders (java.lang.Integer@0000000008) in string template:\"java.lang.String@0000000009\"
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      StandardSubjectBuilder standardSubjectBuilder0 = subject0.check();
      assertNotNull(standardSubjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      subject0.fail("aFU.Y");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "jva.lang.ObjectK5bca18b0", "iQx&~");
      subject0.isNull();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Subject subject1 = new Subject(failureMetadata0, subject0);
      // Undeclared exception!
      try { 
        subject1.isNotEqualTo(failureMetadata0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.equals() is not supported. Did you mean to call assertThat(actual).isEqualTo(expected) instead of assertThat(actual).equals(expected)?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        subject0.checkNoNeedToDisplayBothValues((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.LazyMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      // Undeclared exception!
      try { 
        subject0.hashCode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.hashCode() is not supported.
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "", "");
      String string0 = subject0.actualCustomStringRepresentationForPackageMembersToCall();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, "jva.lang.ObjectK5bca18b0", "iQx&~");
      subject0.failEqualityCheckForEqualsWithoutDescription(", may or may not be an instance of ");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, failureMetadata0);
      Byte byte0 = new Byte((byte)24);
      Object[] objectArray0 = new Object[3];
      subject0.isAnyOf(byte0, failureMetadata0, objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      Subject subject0 = new Subject(failureMetadata0, (Object) null);
      subject0.isNotNull();
  }
}
