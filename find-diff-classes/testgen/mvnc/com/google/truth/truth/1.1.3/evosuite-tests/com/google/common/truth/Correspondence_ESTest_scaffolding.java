/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Nov 08 02:55:23 GMT 2024
 */

package com.google.common.truth;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class Correspondence_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.Correspondence"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.1.3"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Correspondence_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.base.Joiner$1",
      "com.google.common.base.Converter$ConverterComposition",
      "com.google.common.base.Joiner$2",
      "com.google.common.base.Java8Usage",
      "com.google.common.collect.ImmutableList$Itr",
      "com.google.common.collect.ImmutableList$SubList",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "com.google.common.base.Objects",
      "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
      "com.google.common.base.Converter",
      "com.google.errorprone.annotations.DoNotMock",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.base.Function",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.truth.Subject",
      "org.checkerframework.framework.qual.LiteralKind",
      "com.google.common.base.Converter$ReverseConverter",
      "com.google.common.base.ExtraObjectsMethodsForWeb",
      "com.google.common.base.Joiner",
      "com.google.common.collect.ImmutableList$Builder",
      "com.google.common.truth.Subject$2",
      "com.google.common.truth.Correspondence$BinaryPredicate",
      "com.google.common.truth.Subject$1",
      "com.google.common.truth.Correspondence$DiffFormatter",
      "com.google.common.truth.Correspondence$FromBinaryPredicate",
      "org.checkerframework.framework.qual.TypeUseLocation",
      "org.checkerframework.framework.qual.QualifierForLiterals",
      "com.google.common.base.Strings",
      "com.google.common.truth.Correspondence$Transforming",
      "com.google.common.collect.ImmutableList",
      "com.google.common.truth.Correspondence$TolerantNumericEquality",
      "com.google.common.truth.Correspondence$ExceptionStore",
      "com.google.common.collect.UnmodifiableListIterator",
      "autovalue.shaded.com.google$.common.collect.$BoundType",
      "com.google.common.truth.ComparableSubject",
      "com.google.common.truth.DoubleSubject$2",
      "com.google.common.truth.DoubleSubject$1",
      "com.google.common.truth.DoubleSubject$TolerantDoubleComparison",
      "com.google.common.base.Functions$IdentityFunction",
      "com.google.common.truth.Fact",
      "org.checkerframework.checker.nullness.qual.Nullable",
      "com.google.common.truth.MathUtil",
      "org.checkerframework.framework.qual.DefaultFor",
      "com.google.common.base.Functions",
      "com.google.common.collect.ObjectArrays",
      "com.google.common.truth.Correspondence$Equality",
      "com.google.common.truth.Correspondence$FormattingDiffs",
      "org.checkerframework.framework.qual.SubtypeOf",
      "org.checkerframework.framework.qual.TypeKind",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.truth.Correspondence",
      "org.checkerframework.checker.nullness.compatqual.NullableDecl",
      "com.google.common.truth.DoubleSubject",
      "com.google.common.truth.FailureStrategy",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.truth.Correspondence$StoredException"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.google.common.truth.Correspondence$BinaryPredicate", false, Correspondence_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.google.common.truth.Correspondence$DiffFormatter", false, Correspondence_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Correspondence_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.common.truth.Correspondence",
      "com.google.common.truth.Correspondence$FromBinaryPredicate",
      "com.google.common.truth.Correspondence$Transforming",
      "com.google.common.truth.Correspondence$TolerantNumericEquality",
      "com.google.common.truth.Correspondence$Equality",
      "com.google.common.truth.Correspondence$FormattingDiffs",
      "com.google.common.truth.Correspondence$ExceptionStore",
      "com.google.common.base.Joiner",
      "com.google.common.base.Java8Usage",
      "com.google.common.base.Preconditions",
      "com.google.common.base.Joiner$1",
      "com.google.common.truth.Correspondence$StoredException",
      "com.google.common.base.Functions$IdentityFunction",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.collect.ImmutableList$Itr",
      "com.google.common.collect.ImmutableList",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.base.Converter$ConverterComposition",
      "com.google.common.base.Converter$ReverseConverter",
      "com.google.common.base.Functions",
      "com.google.common.truth.Fact",
      "org.checkerframework.framework.qual.LiteralKind",
      "com.google.common.truth.Subject$1",
      "com.google.common.truth.Subject$2",
      "com.google.common.truth.Subject",
      "com.google.common.truth.ComparableSubject",
      "com.google.common.truth.DoubleSubject",
      "autovalue.shaded.com.google$.common.collect.$RangeGwtSerializationDependencies",
      "autovalue.shaded.com.google$.common.collect.$Cut",
      "autovalue.shaded.com.google$.common.collect.$Cut$BelowAll",
      "autovalue.shaded.com.google$.common.collect.$Cut$AboveAll",
      "autovalue.shaded.com.google$.common.base.$Preconditions",
      "autovalue.shaded.com.google$.common.collect.$Range",
      "autovalue.shaded.com.google$.common.collect.$Cut$AboveValue",
      "autovalue.shaded.com.google$.common.collect.$Cut$BelowValue",
      "autovalue.shaded.com.google$.common.primitives.$Booleans",
      "com.google.common.base.Strings",
      "autovalue.shaded.com.google$.common.collect.$Range$1",
      "com.google.common.base.Converter$1",
      "com.google.common.base.ExtraObjectsMethodsForWeb",
      "com.google.common.base.Objects",
      "com.google.common.truth.MathUtil",
      "autovalue.shaded.com.google$.common.collect.$DiscreteDomain",
      "autovalue.shaded.com.google$.common.collect.$DiscreteDomain$IntegerDomain",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.collect.ObjectArrays"
    );
  }
}
