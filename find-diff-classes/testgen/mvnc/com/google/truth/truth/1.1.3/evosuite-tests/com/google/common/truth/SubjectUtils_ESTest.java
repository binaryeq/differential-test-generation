/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:07:48 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.truth.SubjectUtils;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubjectUtils_ESTest extends SubjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SubjectUtils.objectToTypeName((Object) null);
      assertEquals("null type", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      String string0 = SubjectUtils.countDuplicates(priorityQueue0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.iterableToStringWithTypeInfo((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.iterableToList((Iterable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.iterableToCollection((Iterable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.hasMatchingToStringPair((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.countOf((LinkedList<Comparable>) null, (Iterable<LinkedList<Comparable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.SubjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.countDuplicatesAndMaybeAddTypeInfoReturnObject((Iterable<?>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.SubjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.countDuplicatesAndMaybeAddTypeInfoReturnObject((Iterable<?>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = arrayDeque0.clone();
      arrayDeque0.add(arrayDeque1);
      arrayDeque1.add(arrayDeque0);
      // Undeclared exception!
      try { 
        SubjectUtils.countDuplicatesAndAddTypeInfo(arrayDeque1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.countDuplicatesAndAddTypeInfo((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubjectUtils.countDuplicates((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.truth.SubjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      priorityQueue0.add(locale_Category0);
      String string0 = SubjectUtils.iterableToStringWithTypeInfo(priorityQueue0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      String string0 = SubjectUtils.iterableToStringWithTypeInfo(serviceLoader0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_CategoryArray0[1];
      List<Locale.Category> list0 = SubjectUtils.accumulate(locale_Category0, locale_Category0, locale_CategoryArray0);
      SubjectUtils.DuplicateGroupedAndTyped subjectUtils_DuplicateGroupedAndTyped0 = SubjectUtils.countDuplicatesAndMaybeAddTypeInfoReturnObject(list0, true);
      String string0 = subjectUtils_DuplicateGroupedAndTyped0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = new Object();
      arrayDeque0.add(object0);
      String string0 = SubjectUtils.countDuplicatesAndAddTypeInfo(arrayDeque0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      List<Locale.Category> list0 = SubjectUtils.accumulate(locale_Category0, locale_Category0, locale_CategoryArray0);
      SubjectUtils.DuplicateGroupedAndTyped subjectUtils_DuplicateGroupedAndTyped0 = SubjectUtils.countDuplicatesAndMaybeAddTypeInfoReturnObject(list0, true);
      subjectUtils_DuplicateGroupedAndTyped0.toString();
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      List<Locale.Category> list0 = SubjectUtils.accumulate(locale_Category0, locale_Category0, locale_CategoryArray0);
      SubjectUtils.DuplicateGroupedAndTyped subjectUtils_DuplicateGroupedAndTyped0 = SubjectUtils.countDuplicatesAndMaybeAddTypeInfoReturnObject(list0, true);
      boolean boolean0 = subjectUtils_DuplicateGroupedAndTyped0.isEmpty();
      assertEquals(6, list0.size());
      assertFalse(boolean0);
  }
}
