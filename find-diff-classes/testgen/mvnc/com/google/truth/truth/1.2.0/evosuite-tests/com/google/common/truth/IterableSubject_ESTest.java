/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:15:26 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.BoundType;
import com.google.common.truth.Correspondence;
import com.google.common.truth.Fact;
import com.google.common.truth.FailureMetadata;
import com.google.common.truth.IterableSubject;
import com.google.common.truth.Ordered;
import java.sql.BatchUpdateException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTransientConnectionException;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IterableSubject_ESTest extends IterableSubject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1rk");
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      Object object0 = new Object();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Object object1 = new Object();
      iterableSubject0.containsNoneOf(object0, object1, throwableArray0);
      assertEquals(0, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> treeMap0 = new TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>();
      ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Map<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) treeMap0);
      NavigableSet<SQLNonTransientConnectionException> navigableSet0 = concurrentSkipListMap0.keySet();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, navigableSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.hasSize(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>(2431, comparator0);
      Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsExactlyElementsIn((Iterable<? extends Locale.Category>) priorityQueue0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      linkedHashSet0.add("]zU(@TF1JK");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "]zU(@TF1JK";
      iterableSubject0.containsAnyIn(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.util.HashSet@3");
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Ordered ordered0 = iterableSubject0.containsExactlyElementsIn((Object[]) throwableArray0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      String string0 = iterableSubject0.actualCustomStringRepresentation();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      // Undeclared exception!
      try { 
        iterableSubject0.isNotIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) iterableSubject0;
      // Undeclared exception!
      try { 
        iterableSubject0.isNoneOf((Object) null, stack0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      linkedHashSet0.add("java.util.concurrent.ConcurrentSkipListMap$KeySet@0000000004");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.isInStrictOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
      stack0.add(fact0);
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      // Undeclared exception!
      try { 
        iterableSubject0.isInStrictOrder();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.common.truth.Fact cannot be cast to java.lang.Comparable
         //
         verifyException("com.google.common.collect.NaturalOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> treeMap0 = new TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>();
      ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Map<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) treeMap0);
      NavigableSet<SQLNonTransientConnectionException> navigableSet0 = concurrentSkipListMap0.keySet();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, navigableSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super Locale.Category, ? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Object>) correspondence0);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) iterableSubject_UsingCorrespondence0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneIn(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.hashCode() is not supported.
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "A'", 239, intArray0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn((Iterable<?>) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) iterableSubject0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("rW]gH@o+&ddE !|{f", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      iterableSubject0.containsAtLeastElementsIn((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeast((Object) null, sQLNonTransientConnectionException0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^h~?0Ts2X)M3>M,R9", "^h~?0Ts2X)M3>M,R9");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) iterableSubject0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyOf(sQLNonTransientConnectionException0, (Object) null, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      Object object0 = new Object();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyOf((Object) null, object0, throwableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) iterableSubject0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyIn(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.Subject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyIn((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<IterableSubject.ElementFactGrouping> linkedHashSet0 = new LinkedHashSet<IterableSubject.ElementFactGrouping>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.comparingElementsUsing((Correspondence<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
      HashSet<String> hashSet1 = new HashSet<String>();
      hashSet1.add("");
      iterableSubject0.containsNoneIn((Iterable<?>) hashSet1);
      assertTrue(hashSet1.contains(""));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(vector0);
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue1);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyIn((Iterable<?>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      iterableSubject0.containsAnyIn((Iterable<?>) stack0);
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1rk");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        iterableSubject0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iterableSubject0.isInOrder(comparator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iterableSubject0.isInStrictOrder(comparator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      Function<Object, SQLNonTransientConnectionException> function0 = (Function<Object, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, SQLNonTransientConnectionException> converter0 = Converter.from((Function<? super Object, ? extends SQLNonTransientConnectionException>) function0, (Function<? super SQLNonTransientConnectionException, ?>) function0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super String, ?>) converter0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence1.contains("java.sql.SQLNonTransientConnectionException@5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
      EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
      Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(correspondence_BinaryPredicate0).apply(any() , anyString());
      Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsNoneOf("N(u#=)]#-j!o{7r=R", "N(u#=)]#-j!o{7r=R", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Converter<Object, Object> converter0 = Converter.identity();
      Converter<Object, String> converter1 = Converter.from((Function<? super Object, ? extends String>) function0, (Function<? super String, ?>) converter0);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter1, (Function<? super Locale.Category, ?>) converter1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence1.containsAnyOf(locale_Category0, locale_Category0, locale_CategoryArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
      Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, "");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsAnyOf("1t^=fE*j", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<Object, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Object, ? super Object>) correspondence0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Object>) correspondence0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence1.containsAtLeast(iterableSubject_UsingCorrespondence0, object0, locale_CategoryArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("com.google.common.collect.LinkedListMultimap");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<IterableSubject.UsingCorrespondence<Object, Object>, Comparable<String>> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<IterableSubject.UsingCorrespondence<Object, Object>, Comparable<String>>(iterableSubject0, correspondence0);
      Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsAtLeastElementsIn((Iterable<? extends Comparable<String>>) linkedHashSet0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      stack0.add((Fact) null);
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactly(locale_CategoryArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
      Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
      EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
      Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(correspondence_BinaryPredicate0).apply(any() , anyString());
      Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.doesNotContain("b~V%=#)&yAS.>cy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super String>) correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.contains("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
      EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
      Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
      Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.contains(">+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      IterableSubject.ElementFactGrouping[] iterableSubject_ElementFactGroupingArray0 = IterableSubject.ElementFactGrouping.values();
      // Undeclared exception!
      try { 
        iterableSubject0.isNoneOf(linkedHashSet0, (Object) null, iterableSubject_ElementFactGroupingArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", stack0);
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      // Undeclared exception!
      try { 
        iterableSubject0.isNotIn(stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("O:h$*z");
      linkedHashSet0.add("java.util.concurrent.ConcurrentSkipListMap$KeySet@0000000004");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      iterableSubject0.isInStrictOrder();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      linkedHashSet0.add("](@TF1Ji");
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
      stack0.add(fact0);
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "A'", 239, intArray0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactlyElementsIn((Iterable<?>) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      stack0.add((Fact) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) correspondence0;
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactly(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Ordered ordered0 = iterableSubject0.containsExactlyElementsIn((Iterable<?>) linkedHashSet0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactly(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactly(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
      EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsExactly((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Object[] objectArray0 = new Object[0];
      Ordered ordered0 = iterableSubject0.containsExactly(objectArray0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn((Iterable<?>) stack0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyIn((Iterable<?>) sQLNonTransientConnectionException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "expected", (-1933786899));
      MockThrowable mockThrowable0 = new MockThrowable("expected", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("O:h$*z", "O:h$*z", mockThrowable0);
      MockException mockException0 = new MockException("java.util.HashSet@7", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockException0);
      priorityQueue0.add(sQLNonTransientConnectionException0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
      iterableSubject0.containsNoDuplicates();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      linkedHashSet0.add("8]a3M\">ZlY");
      // Undeclared exception!
      try { 
        iterableSubject0.doesNotContain("8]a3M\">ZlY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      iterableSubject0.doesNotContain((Object) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
      EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
      iterableSubject0.contains(iterableSubject_ElementFactGrouping0);
      assertTrue(enumSet0.contains(iterableSubject_ElementFactGrouping0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.hasSize(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.hasSize((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize(java.lang.Integer@0000000002) must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.isNotEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
      stack0.add(fact0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      iterableSubject0.isNotEmpty();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsExactly(locale_CategoryArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
      iterableSubject0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        iterableSubject0.isEqualTo("TY4AcU~hjs0~Y Ump");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      iterableSubject0.isEqualTo(stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      // Undeclared exception!
      try { 
        iterableSubject0.isEqualTo("O:h$*z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
      String[] stringArray0 = new String[7];
      iterableSubject_UsingCorrespondence0.containsNoneOf("java.util.Stack@2", "java.sql.SQLNonTransientConnectionException@0000000002", stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      IterableSubject iterableSubject1 = new IterableSubject((FailureMetadata) null, hashSet0);
      Correspondence.DiffFormatter<SQLNonTransientConnectionException, SQLNonTransientConnectionException> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
      // Undeclared exception!
      try { 
        iterableSubject1.doesNotContain(iterableSubject_UsingCorrespondence0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.hashCode() is not supported.
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<String, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<String, String>(iterableSubject0, correspondence0);
      IterableSubject.UsingCorrespondence<String, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super String, ? super Object>) correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeast(iterableSubject_UsingCorrespondence0, iterableSubject_UsingCorrespondence1, (Object[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.equals() is not supported. Did you mean to call containsExactlyElementsIn(expected) instead of equals(expected)?
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
      EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
      Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
      Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence0.containsAnyOf((String) null, "The actual value is an Iterable, and you've written a test that compares it to some objects that are not Iterables. Did you instead mean to check whether its *contents* match any of the *contents* of the given values? If so, call containsNoneOf(...)/containsNoneIn(...) instead. Non-iterables: %s", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
      iterableSubject0.containsAnyOf(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, throwableArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        iterableSubject0.containsAnyIn(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Object[] objectArray0 = new Object[0];
      Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn(objectArray0);
      assertNotNull(ordered0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
      Object[] objectArray0 = new Object[1];
      iterableSubject0.containsNoneIn(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<String, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<String, String>(iterableSubject0, correspondence0);
      IterableSubject.UsingCorrespondence<String, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super String, ? super Object>) correspondence0);
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeast(iterableSubject_UsingCorrespondence0, iterableSubject_UsingCorrespondence1, (Object[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UsingCorrespondence.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
         //
         verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("O:h$*z");
      // Undeclared exception!
      try { 
        iterableSubject0.containsAtLeastElementsIn((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      linkedHashSet0.add("]zU(@TF1JK");
      // Undeclared exception!
      try { 
        iterableSubject0.containsNoneIn((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
      iterableSubject0.isInOrder();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Stack<Fact> stack0 = new Stack<Fact>();
      stack0.add((Fact) null);
      IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
      Correspondence<Object, Object> correspondence0 = Correspondence.equality();
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super String>) correspondence0);
      Function<SQLNonTransientConnectionException, Locale.Category> function0 = (Function<SQLNonTransientConnectionException, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Locale.Category, SQLNonTransientConnectionException> function1 = (Function<Locale.Category, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<SQLNonTransientConnectionException, Locale.Category> converter0 = Converter.from((Function<? super SQLNonTransientConnectionException, ? extends Locale.Category>) function0, (Function<? super Locale.Category, ? extends SQLNonTransientConnectionException>) function1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Function<String, SQLNonTransientConnectionException> function2 = (Function<String, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(sQLNonTransientConnectionException0).when(function2).apply(anyString());
      IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter0, (Function<? super String, ?>) function2);
      // Undeclared exception!
      try { 
        iterableSubject_UsingCorrespondence1.contains("}.}$4[Hj*zz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
