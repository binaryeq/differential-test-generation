/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 03:17:45 GMT 2024
 */

package com.google.common.truth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.truth.FailureMetadata;
import com.google.common.truth.FailureStrategy;
import com.google.common.truth.ThrowableSubject;
import java.sql.BatchUpdateException;
import java.sql.SQLIntegrityConstraintViolationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThrowableSubject_ESTest extends ThrowableSubject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ThrowableSubject throwableSubject0 = new ThrowableSubject(failureMetadata0, batchUpdateException0, "c\"&|U7%5gQ");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ThrowableSubject throwableSubject0 = new ThrowableSubject(failureMetadata0, batchUpdateException0);
      ThrowableSubject throwableSubject1 = throwableSubject0.hasCauseThat();
      // Undeclared exception!
      try { 
        throwableSubject1.hasMessageThat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ThrowableSubject throwableSubject0 = new ThrowableSubject((FailureMetadata) null, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        throwableSubject0.hasCauseThat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      FailureMetadata failureMetadata1 = failureMetadata0.updateForCheckCall();
      ThrowableSubject throwableSubject0 = new ThrowableSubject(failureMetadata1, (Throwable) null);
      // Undeclared exception!
      try { 
        throwableSubject0.hasCauseThat();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FailureStrategy failureStrategy0 = mock(FailureStrategy.class, new ViolatedAssumptionAnswer());
      FailureMetadata failureMetadata0 = FailureMetadata.forFailureStrategy(failureStrategy0);
      ThrowableSubject throwableSubject0 = new ThrowableSubject(failureMetadata0, (Throwable) null);
      ThrowableSubject throwableSubject1 = throwableSubject0.hasCauseThat();
      assertNotSame(throwableSubject0, throwableSubject1);
  }
}
