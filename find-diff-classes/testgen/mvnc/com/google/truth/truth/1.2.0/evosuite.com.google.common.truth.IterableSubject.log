* EvoSuite 1.2.0
* Going to generate test cases for class: com.google.common.truth.IterableSubject
* Starting Client-0
* Connecting to master process on port 8505
* Analyzing classpath: 
  - /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar
  - t/dependency/asm-9.6.jar
  - t/dependency/auto-value-annotations-1.10.4.jar
  - t/dependency/checker-qual-3.42.0.jar
  - t/dependency/error_prone_annotations-2.23.0.jar
  - t/dependency/failureaccess-1.0.2.jar
  - t/dependency/guava-33.0.0-android.jar
  - t/dependency/guava-gwt-33.0.0-jre.jar
  - t/dependency/guava-testlib-33.0.0-android.jar
  - t/dependency/gwt-user-2.10.0.jar
  - t/dependency/hamcrest-core-1.3.jar
  - t/dependency/j2objc-annotations-2.8.jar
  - t/dependency/javax.servlet-api-3.1.0.jar
  - t/dependency/jsinterop-annotations-2.0.0.jar
  - t/dependency/jsr305-3.0.2.jar
  - t/dependency/junit-4.13.2.jar
  - t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
  - t/dependency/sac-1.3.jar
  - t/dependency/validation-api-1.0.0.GA.jar
  - t/dependency/validation-api-1.0.0.GA-sources.jar
* Finished analyzing classpath
* Generating tests for class com.google.common.truth.IterableSubject
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 2741
* Using seed 1731035616652
* Starting evolution
* Initial Number of Goals in DynaMOSA = 719 / 2741
[MASTER] 16:13:40.667 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.collect.ImmutableSortedMultiset<E> : Type points to itself
[Progress:==>                           8%] [Cov:=====>                             16%][MASTER] 16:13:46.375 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[Progress:===>                          11%] [Cov:=====>                             15%][Progress:====>                         15%] [Cov:=======>                           20%][Progress:====>                         16%] [Cov:========>                          24%][Progress:=====>                        18%] [Cov:========>                          24%][Progress:======>                       21%] [Cov:=========>                         26%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:===========>                       33%][Progress:=========>                    31%] [Cov:============>                      36%][Progress:==========>                   36%] [Cov:============>                      35%][Progress:============>                 40%] [Cov:============>                      37%][Progress:============>                 41%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:==============>                    40%][Progress:=============>                46%] [Cov:==============>                    40%][MASTER] 16:14:10.057 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.truth.IterableSubject.UsingCorrespondence<A, E> : Type points to itself
[MASTER] 16:14:10.212 [logback-1] WARN  TestCluster - Failed to check cache for com.google.common.base.Converter<A, B> : Type points to itself
[Progress:===============>              50%] [Cov:==============>                    41%][Progress:=================>            58%] [Cov:==============>                    41%][Progress:==================>           61%] [Cov:==============>                    41%][MASTER] 16:14:18.152 [logback-1] WARN  TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[Progress:===================>          65%] [Cov:==============>                    42%][Progress:===================>          65%] [Cov:==============>                    42%][Progress:===================>          66%] [Cov:===============>                   44%][Progress:=====================>        70%] [Cov:===============>                   44%][Progress:=====================>        71%] [Cov:===============>                   44%][Progress:======================>       75%] [Cov:===============>                   44%][Progress:======================>       76%] [Cov:===============>                   44%][Progress:=======================>      78%] [Cov:===============>                   45%][Progress:========================>     80%] [Cov:===============>                   44%][Progress:========================>     81%] [Cov:===============>                   44%][Progress:========================>     83%] [Cov:===============>                   44%][Progress:=========================>    86%] [Cov:===============>                   45%][Progress:==========================>   88%] [Cov:===============>                   45%][Progress:===========================>  90%] [Cov:================>                  46%][Progress:===========================>  93%] [Cov:================>                  47%][Progress:============================> 95%] [Cov:================>                  48%][Progress:=============================>98%] [Cov:=================>                 49%][Progress:==============================100%] [Cov:=================>                 50%]
* Search finished after 62s and 36 generations, 18588 statements, best individual has fitness: 1555.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 43%
* Total number of goals: 787
* Number of covered goals: 339
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 54%
* Total number of goals: 429
* Number of covered goals: 231
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 40%
* Total number of goals: 983
* Number of covered goals: 390
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 42%
* Total number of goals: 19
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 85%
* Total number of goals: 47
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 77%
* Total number of goals: 47
* Number of covered goals: 36
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 48%
* Total number of goals: 429
* Number of covered goals: 206
* Generated 90 tests with total length 471
* Resulting test suite's coverage: 50% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 16:14:58.753 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_16_1731035698690/com/google/common/truth/IterableSubject_16_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_16_1731035698690/com/google/common/truth/IterableSubject_16_tmp__ESTest_scaffolding.java]]
[MASTER] 16:14:58.753 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:14:58.753 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:14:58.758 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:14:58.758 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 26
[MASTER] 16:14:58.759 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkState
  location: class: 19
[MASTER] 16:14:58.759 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 20
[MASTER] 16:14:58.760 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 19
[MASTER] 16:14:58.761 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static lenientFormat
  location: class: 17
[MASTER] 16:14:58.761 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 18
[MASTER] 16:14:58.762 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 17
[MASTER] 16:14:58.763 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_16_1731035698690/com/google/common/truth/IterableSubject_16_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:14:58 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ConcurrentHashMultiset;
12: import com.google.common.truth.FailureMetadata;
13: import com.google.common.truth.IterableSubject;
14: import java.util.LinkedHashSet;
15: import java.util.ServiceLoader;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class IterableSubject_16_tmp__ESTest extends IterableSubject_16_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
26:       ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
27:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
28:       Class<Object> class0 = Object.class;
29:       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
30:       ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
31:       // Undeclared exception!
32:       try { 
33:         iterableSubject0.isEqualTo(serviceLoader0);
34:         fail("Expecting exception: NullPointerException");
35:       
36:       } catch(NullPointerException e) {
37:          //
38:          // no message in exception (getMessage() returned null)
39:          //
40:          verifyException("com.google.common.base.Preconditions", e);
41:       }
42:   }
43: }
RegularFileObject[/tmp/EvoSuite_16_1731035698690/com/google/common/truth/IterableSubject_16_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:14:58 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class IterableSubject_16_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_16_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
83:       "com.google.common.collect.Lists$RandomAccessPartition",
84:       "com.google.common.collect.Collections2",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
87:       "com.google.common.truth.SubjectUtils",
88:       "com.google.common.math.IntMath",
89:       "com.google.common.collect.LinkedHashMultiset",
90:       "com.google.common.truth.GraphMatching",
91:       "com.google.common.collect.AbstractMapBasedMultiset$2",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.Sets$1",
96:       "com.google.common.collect.NullsLastOrdering",
97:       "com.google.common.collect.Platform",
98:       "com.google.common.collect.RegularImmutableMap",
99:       "com.google.common.collect.RegularImmutableBiMap",
100:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
101:       "com.google.common.base.Converter$IdentityConverter",
102:       "com.google.common.collect.ImmutableMultimap$Values",
103:       "com.google.common.collect.HashBiMap$Inverse",
104:       "com.google.common.collect.ByFunctionOrdering",
105:       "com.google.common.collect.AbstractMapEntry",
106:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
107:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
108:       "com.google.common.collect.ImmutableBiMap$Builder",
109:       "com.google.common.base.Predicate",
110:       "com.google.common.base.Joiner",
111:       "com.google.common.collect.Iterators$ConcatenatedIterator",
112:       "com.google.common.collect.AbstractListMultimap",
113:       "com.google.common.collect.NullsFirstOrdering",
114:       "com.google.common.truth.Correspondence$BinaryPredicate",
115:       "org.checkerframework.framework.qual.QualifierForLiterals",
116:       "com.google.common.truth.AssertionErrorWithFacts",
117:       "com.google.common.base.Strings",
118:       "com.google.common.truth.IterableSubject$3",
119:       "com.google.common.collect.Lists$Partition",
120:       "com.google.common.collect.AbstractMapBasedMultimap",
121:       "com.google.common.collect.Lists",
122:       "com.google.common.truth.IterableSubject$1",
123:       "com.google.common.collect.Multisets$ImmutableEntry",
124:       "com.google.common.truth.IterableSubject$4",
125:       "com.google.common.collect.UnmodifiableListIterator",
126:       "com.google.common.collect.ImmutableMultimap",
127:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
128:       "com.google.common.collect.ImmutableSortedSet",
129:       "com.google.common.collect.Sets$4",
130:       "com.google.common.base.Absent",
131:       "com.google.common.collect.Maps$BiMapConverter",
132:       "com.google.common.base.Throwables",
133:       "org.checkerframework.framework.qual.SubtypeOf",
134:       "com.google.common.collect.ImmutableSortedSet$Builder",
135:       "com.google.common.base.Equivalence$Equals",
136:       "com.google.common.truth.Correspondence",
137:       "com.google.common.base.ElementTypesAreNonnullByDefault",
138:       "com.google.common.collect.AbstractMultiset$EntrySet",
139:       "com.google.common.base.Equivalence$Wrapper",
140:       "com.google.common.collect.Sets$ImprovedAbstractSet",
141:       "com.google.common.base.Preconditions",
142:       "com.google.common.truth.StandardSubjectBuilder$1",
143:       "com.google.common.collect.ImmutableEntry",
144:       "com.google.common.base.Joiner$1",
145:       "com.google.common.base.Converter$ConverterComposition",
146:       "com.google.common.base.Joiner$2",
147:       "com.google.common.collect.EmptyImmutableSetMultimap",
148:       "com.google.common.collect.HashBiMap$EntrySet",
149:       "com.google.common.collect.ImmutableList$Itr",
150:       "com.google.common.collect.ImmutableCollection",
151:       "com.google.common.collect.ImmutableEnumMap",
152:       "com.google.common.truth.Ordered",
153:       "com.google.common.collect.LinkedListMultimap$KeyList",
154:       "com.google.common.collect.Lists$OnePlusArrayList",
155:       "com.google.common.base.Objects",
156:       "com.google.common.collect.CompactHashMap$Itr",
157:       "com.google.common.collect.ImmutableSetMultimap",
158:       "com.google.common.collect.ImmutableCollection$Builder",
159:       "com.google.common.collect.Iterators$SingletonIterator",
160:       "com.google.common.collect.Iterators$6",
161:       "com.google.common.collect.BiMap",
162:       "com.google.common.collect.Iterators$9",
163:       "com.google.common.collect.ImmutableSet",
164:       "com.google.common.collect.Lists$AbstractListWrapper",
165:       "com.google.common.collect.AbstractMapBasedMultiset",
166:       "com.google.common.collect.Iterators$1",
167:       "com.google.common.collect.CompactHashMap",
168:       "com.google.common.collect.Iterators$4",
169:       "com.google.common.collect.Iterators$5",
170:       "com.google.common.collect.AbstractIterator$State",
171:       "com.google.common.base.Converter$ReverseConverter",
172:       "com.google.common.base.ExtraObjectsMethodsForWeb",
173:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
174:       "com.google.common.truth.Platform",
175:       "com.google.common.collect.Lists$StringAsImmutableList",
176:       "com.google.common.collect.Lists$2",
177:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
178:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
179:       "com.google.common.collect.CompactHashMap$EntrySetView",
180:       "com.google.common.truth.LazyMessage",
181:       "com.google.common.collect.Lists$1",
182:       "com.google.common.collect.ImmutableMultimap$Builder",
183:       "com.google.common.base.Equivalence$Identity",
184:       "com.google.common.truth.Subject$ComparisonResult",
185:       "com.google.common.collect.Multiset",
186:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
187:       "com.google.common.collect.AbstractMultimap",
188:       "com.google.common.base.Supplier",
189:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
190:       "com.google.common.collect.HashBiMap$View",
191:       "com.google.common.truth.IterableSubject$PairwiseChecker",
192:       "com.google.common.collect.ImmutableList",
193:       "com.google.common.collect.ReverseOrdering",
194:       "com.google.common.collect.FluentIterable$1",
195:       "com.google.common.collect.FluentIterable$2",
196:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
197:       "com.google.common.truth.Fact",
198:       "com.google.common.collect.FluentIterable$3",
199:       "org.checkerframework.checker.nullness.qual.Nullable",
200:       "com.google.common.collect.NullnessCasts",
201:       "org.checkerframework.framework.qual.DefaultFor",
202:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
203:       "com.google.common.collect.SortedMultisetBridge",
204:       "com.google.common.collect.ImmutableMap$Builder",
205:       "com.google.common.base.Converter$FunctionBasedConverter",
206:       "com.google.common.collect.HashBiMap",
207:       "com.google.common.collect.Maps$EntryTransformer",
208:       "com.google.common.collect.Ordering",
209:       "com.google.common.collect.FluentIterable$3$1",
210:       "com.google.common.collect.NaturalOrdering",
211:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
212:       "com.google.common.collect.LinkedListMultimap$Node",
213:       "com.google.common.collect.AllEqualOrdering",
214:       "com.google.common.collect.Hashing",
215:       "com.google.common.collect.ImmutableList$SubList",
216:       "com.google.common.collect.ListMultimap",
217:       "com.google.common.base.FunctionalEquivalence",
218:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
219:       "com.google.common.truth.ErrorWithFacts",
220:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
221:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
222:       "com.google.common.collect.RegularImmutableList",
223:       "com.google.common.collect.SortedMultiset",
224:       "com.google.common.truth.IterableSubject",
225:       "com.google.common.collect.FluentIterable",
226:       "com.google.common.base.Optional",
227:       "com.google.common.collect.Lists$TransformingRandomAccessList",
228:       "com.google.common.collect.Iterators$ArrayItr",
229:       "com.google.common.collect.RegularImmutableMap$KeySet",
230:       "com.google.common.collect.AbstractIterator$1",
231:       "com.google.common.collect.BaseImmutableMultimap",
232:       "com.google.common.collect.Multisets",
233:       "com.google.common.collect.CompactHashMap$MapEntry",
234:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
235:       "com.google.common.collect.SortedMapDifference",
236:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
237:       "com.google.common.collect.CompactHashMap$2",
238:       "com.google.common.collect.RegularImmutableSet",
239:       "com.google.common.truth.Subject$EqualityCheck",
240:       "com.google.common.collect.LexicographicalOrdering",
241:       "com.google.common.base.ParametricNullness",
242:       "com.google.common.collect.ImmutableListMultimap",
243:       "com.google.common.collect.ImmutableMultimap$1",
244:       "com.google.common.base.Present",
245:       "com.google.common.collect.ImmutableMultimap$2",
246:       "com.google.common.collect.Iterables",
247:       "com.google.common.collect.LinkedListMultimap$1",
248:       "com.google.common.collect.Sets$SetView",
249:       "com.google.common.collect.ImmutableSet$Builder",
250:       "com.google.common.truth.Correspondence$DiffFormatter",
251:       "com.google.common.collect.SingletonImmutableSet",
252:       "com.google.common.collect.ImmutableSetMultimap$Builder",
253:       "com.google.common.truth.Correspondence$Transforming",
254:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
255:       "com.google.common.collect.ImmutableMultiset",
256:       "com.google.common.truth.Correspondence$ExceptionStore",
257:       "com.google.common.collect.UsingToStringOrdering",
258:       "com.google.common.truth.ComparableSubject",
259:       "com.google.common.collect.Multisets$AbstractEntry",
260:       "com.google.common.collect.ImmutableMultimap$Keys",
261:       "com.google.common.truth.FailureMetadata",
262:       "com.google.common.collect.Lists$TransformingSequentialList",
263:       "com.google.common.primitives.IntsMethodsForWeb",
264:       "com.google.common.collect.ObjectArrays",
265:       "com.google.common.collect.ForwardingIterator",
266:       "com.google.common.collect.AbstractIterator",
267:       "com.google.common.truth.Correspondence$FormattingDiffs",
268:       "com.google.common.truth.Correspondence$Equality",
269:       "com.google.common.base.MoreObjects",
270:       "com.google.common.base.Suppliers$MemoizingSupplier",
271:       "com.google.common.collect.MapDifference",
272:       "com.google.common.collect.ObjectCountLinkedHashMap",
273:       "com.google.common.collect.ConcurrentHashMultiset$2",
274:       "com.google.common.collect.ConcurrentHashMultiset",
275:       "com.google.common.collect.SortedIterable",
276:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
277:       "com.google.common.collect.ConcurrentHashMultiset$3",
278:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
279:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
280:       "com.google.common.collect.UnmodifiableIterator",
281:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
282:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
283:       "com.google.common.collect.ImmutableEnumSet",
284:       "com.google.common.collect.Lists$RandomAccessListWrapper",
285:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
286:       "com.google.common.collect.HashBiMap$View$1",
287:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
288:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
289:       "com.google.common.base.Converter",
290:       "com.google.common.collect.LinkedListMultimap",
291:       "com.google.common.collect.Maps$8",
292:       "com.google.common.base.Function",
293:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
294:       "com.google.common.collect.ImmutableMap",
295:       "com.google.common.collect.ComparatorOrdering",
296:       "com.google.common.collect.AbstractIndexedListIterator",
297:       "com.google.common.collect.HashBiMap$EntryForKey",
298:       "com.google.common.collect.CollectPreconditions",
299:       "com.google.common.collect.Multiset$Entry",
300:       "com.google.common.truth.Subject",
301:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
302:       "com.google.common.collect.Sets",
303:       "com.google.common.collect.ObjectCountHashMap",
304:       "com.google.common.collect.BoundType",
305:       "com.google.common.collect.ExplicitOrdering",
306:       "com.google.common.collect.CompactHashSet",
307:       "com.google.common.collect.ImmutableList$Builder",
308:       "com.google.common.collect.ImmutableMap$1",
309:       "com.google.common.collect.Iterables$5",
310:       "com.google.common.collect.ForwardingObject",
311:       "com.google.common.collect.AbstractMultiset",
312:       "com.google.common.collect.Multimap",
313:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
314:       "com.google.common.collect.Iterators",
315:       "com.google.common.collect.CompoundOrdering",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
318:       "com.google.common.base.PairwiseEquivalence",
319:       "com.google.common.collect.Multisets$EntrySet",
320:       "com.google.common.collect.CompactHashing",
321:       "com.google.common.base.Suppliers",
322:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
323:       "com.google.common.collect.RegularImmutableMap$EntrySet",
324:       "com.google.common.base.Equivalence",
325:       "com.google.common.collect.ReverseNaturalOrdering",
326:       "com.google.common.truth.StandardSubjectBuilder",
327:       "com.google.common.primitives.Ints",
328:       "com.google.common.collect.Maps",
329:       "com.google.common.collect.SetMultimap",
330:       "com.google.common.collect.TransformedIterator",
331:       "com.google.common.truth.GraphMatching$HopcroftKarp",
332:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
333:       "com.google.common.collect.Iterators$MergingIterator",
334:       "com.google.common.truth.Correspondence$StoredException",
335:       "com.google.common.collect.RegularImmutableSortedSet"
336:     );
337:   } 
338: 
339:   private static void resetClasses() {
340:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_16_tmp__ESTest_scaffolding.class.getClassLoader()); 
341: 
342:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
343:       "com.google.common.truth.Subject",
344:       "com.google.common.truth.IterableSubject",
345:       "com.google.common.truth.IterableSubject$2",
346:       "com.google.common.truth.IterableSubject$1",
347:       "com.google.common.truth.IterableSubject$3",
348:       "com.google.common.truth.IterableSubject$4",
349:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
350:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
351:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
352:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
353:       "com.google.common.base.Optional",
354:       "com.google.common.base.Absent",
355:       "com.google.common.collect.ImmutableCollection",
356:       "com.google.common.collect.UnmodifiableIterator",
357:       "com.google.common.collect.UnmodifiableListIterator",
358:       "com.google.common.collect.AbstractIndexedListIterator",
359:       "com.google.common.collect.ImmutableList$Itr",
360:       "com.google.common.collect.ImmutableList",
361:       "com.google.common.collect.Ordering",
362:       "com.google.common.collect.NaturalOrdering",
363:       "com.google.common.truth.Correspondence",
364:       "com.google.common.truth.Correspondence$Equality",
365:       "com.google.common.truth.FailureMetadata",
366:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
367:       "com.google.common.collect.ImmutableMultiset",
368:       "com.google.common.collect.ImmutableSortedMultiset",
369:       "com.google.common.base.Preconditions",
370:       "com.google.common.collect.ImmutableCollection$Builder",
371:       "com.google.common.collect.ImmutableMultiset$Builder",
372:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
373:       "com.google.common.collect.ImmutableSet",
374:       "com.google.common.collect.ImmutableSortedSet",
375:       "com.google.common.collect.RegularImmutableSortedSet",
376:       "com.google.common.collect.RegularImmutableSortedMultiset",
377:       "com.google.common.base.Converter",
378:       "com.google.common.base.Converter$FunctionBasedConverter",
379:       "com.google.common.base.Converter$IdentityConverter",
380:       "com.google.common.base.Converter$ConverterComposition",
381:       "com.google.common.truth.Correspondence$Transforming",
382:       "com.google.common.base.Functions",
383:       "com.google.common.base.Functions$IdentityFunction",
384:       "com.google.common.truth.Correspondence$ExceptionStore",
385:       "com.google.common.truth.SubjectUtils",
386:       "com.google.common.collect.Lists",
387:       "com.google.common.collect.Iterables",
388:       "com.google.common.collect.AbstractMultimap",
389:       "com.google.common.collect.AbstractMapBasedMultimap",
390:       "com.google.common.collect.AbstractListMultimap",
391:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
392:       "com.google.common.collect.ArrayListMultimap",
393:       "com.google.common.collect.Platform",
394:       "com.google.common.collect.CompactHashMap",
395:       "com.google.common.primitives.IntsMethodsForWeb",
396:       "com.google.common.primitives.Ints",
397:       "com.google.common.collect.CollectPreconditions",
398:       "com.google.common.collect.CompactHashing",
399:       "com.google.common.collect.Hashing",
400:       "com.google.common.base.ExtraObjectsMethodsForWeb",
401:       "com.google.common.base.Objects",
402:       "com.google.common.truth.Fact",
403:       "com.google.common.collect.Collections2",
404:       "com.google.common.collect.AbstractMultiset",
405:       "com.google.common.collect.AbstractMapBasedMultiset",
406:       "com.google.common.collect.LinkedHashMultiset",
407:       "com.google.common.collect.ObjectCountHashMap",
408:       "com.google.common.collect.ObjectCountLinkedHashMap",
409:       "com.google.common.collect.AbstractSortedMultiset",
410:       "com.google.common.collect.TreeMultiset",
411:       "com.google.common.collect.GeneralRange",
412:       "com.google.common.collect.TreeMultiset$AvlNode",
413:       "com.google.common.collect.TreeMultiset$Reference",
414:       "com.google.common.collect.TreeMultiset$Aggregate",
415:       "com.google.common.collect.Multisets",
416:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
417:       "com.google.common.collect.Sets$ImprovedAbstractSet",
418:       "com.google.common.collect.Multisets$EntrySet",
419:       "com.google.common.collect.AbstractMultiset$EntrySet",
420:       "com.google.common.collect.TreeMultiset$2",
421:       "com.google.common.base.Suppliers",
422:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
423:       "com.google.common.truth.Platform",
424:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
425:       "com.google.common.collect.ImmutableList$Builder",
426:       "com.google.common.collect.ObjectArrays",
427:       "com.google.common.collect.Sets",
428:       "com.google.common.base.CharMatcher",
429:       "com.google.common.base.CharMatcher$FastMatcher",
430:       "com.google.common.base.CharMatcher$Is",
431:       "com.google.common.base.CharMatcher$InRange",
432:       "com.google.common.base.CaseFormat",
433:       "com.google.common.base.Ascii",
434:       "com.google.common.collect.ConcurrentHashMultiset",
435:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
436:       "com.google.common.collect.AbstractIterator",
437:       "com.google.common.collect.ConcurrentHashMultiset$2",
438:       "com.google.common.collect.AbstractIterator$State",
439:       "com.google.common.collect.ForwardingObject",
440:       "com.google.common.collect.ForwardingIterator",
441:       "com.google.common.collect.ConcurrentHashMultiset$3",
442:       "com.google.common.collect.AbstractIterator$1",
443:       "com.google.common.base.Strings",
444:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
445:       "com.google.common.collect.Maps",
446:       "com.google.common.truth.Correspondence$FormattingDiffs",
447:       "com.google.common.collect.Lists$OnePlusArrayList",
448:       "com.google.common.truth.LazyMessage",
449:       "com.google.common.truth.StandardSubjectBuilder",
450:       "com.google.common.collect.Iterators",
451:       "com.google.common.truth.Subject$ComparisonResult",
452:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
453:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
454:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
455:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
456:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
457:       "com.google.common.truth.ComparableSubject",
458:       "com.google.common.truth.DoubleSubject",
459:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
460:       "com.google.common.collect.AbstractMapBasedMultiset$2",
461:       "com.google.common.collect.BaseImmutableMultimap",
462:       "com.google.common.collect.ImmutableMultimap",
463:       "com.google.common.collect.ImmutableSetMultimap",
464:       "com.google.common.collect.ImmutableMultimap$Builder",
465:       "com.google.common.collect.ImmutableSetMultimap$Builder",
466:       "com.google.common.collect.CompactHashMap$EntrySetView",
467:       "com.google.common.collect.ImmutableMap",
468:       "com.google.common.collect.RegularImmutableMap",
469:       "com.google.common.collect.RegularImmutableSet",
470:       "com.google.common.collect.EmptyImmutableSetMultimap",
471:       "com.google.common.base.Joiner",
472:       "com.google.common.base.Joiner$1",
473:       "com.google.common.truth.Correspondence$StoredException",
474:       "com.google.common.collect.Multisets$AbstractEntry",
475:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
476:       "com.google.common.collect.RegularImmutableMultiset",
477:       "com.google.common.collect.IndexedImmutableSet",
478:       "com.google.common.collect.ImmutableMultiset$EntrySet",
479:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
480:       "com.google.common.collect.ImmutableMultimap$1",
481:       "com.google.common.collect.RegularImmutableMap$EntrySet",
482:       "com.google.common.collect.CompactHashSet",
483:       "com.google.common.collect.ImmutableMap$Builder",
484:       "com.google.common.collect.CompactHashMap$Itr",
485:       "com.google.common.collect.CompactHashMap$2",
486:       "com.google.common.collect.AbstractMapEntry",
487:       "com.google.common.collect.CompactHashMap$MapEntry",
488:       "com.google.common.collect.Multisets$ImmutableEntry",
489:       "com.google.common.collect.NullnessCasts",
490:       "com.google.common.base.Converter$1",
491:       "com.google.common.base.NullnessCasts",
492:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
493:       "com.google.common.base.Present",
494:       "com.google.common.base.Equivalence",
495:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
496:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
497:       "com.google.common.base.Equivalence$Wrapper",
498:       "com.google.common.collect.FluentIterable",
499:       "com.google.common.collect.Iterables$5",
500:       "com.google.common.collect.TransformedIterator",
501:       "com.google.common.collect.Iterators$6",
502:       "com.google.common.collect.HashMultiset",
503:       "com.google.common.base.Converter$ReverseConverter",
504:       "com.google.common.collect.SingletonImmutableSet",
505:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
506:       "com.google.common.collect.LinkedListMultimap",
507:       "com.google.common.collect.Multisets$ElementSet",
508:       "com.google.common.collect.SortedMultisets$ElementSet",
509:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
510:       "com.google.common.collect.LinkedListMultimap$Node",
511:       "com.google.common.collect.LinkedListMultimap$KeyList",
512:       "com.google.common.collect.RegularImmutableList",
513:       "com.google.common.base.Throwables",
514:       "com.google.common.math.IntMath",
515:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
516:       "com.google.common.collect.FluentIterable$3",
517:       "com.google.common.collect.FluentIterable$3$1",
518:       "com.google.common.collect.Iterators$ConcatenatedIterator",
519:       "com.google.common.collect.Iterators$ArrayItr",
520:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
521:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
522:       "com.google.common.truth.Subject$EqualityCheck",
523:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
524:       "com.google.common.collect.RegularImmutableMap$KeySet",
525:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
526:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
527:       "com.google.common.truth.GraphMatching",
528:       "com.google.common.truth.GraphMatching$HopcroftKarp",
529:       "com.google.common.collect.HashBiMap",
530:       "com.google.common.collect.ImmutableBiMap",
531:       "com.google.common.collect.HashBiMap$View",
532:       "com.google.common.collect.HashBiMap$EntrySet",
533:       "com.google.common.collect.ImmutableBiMap$Builder",
534:       "com.google.common.collect.HashBiMap$View$1",
535:       "com.google.common.collect.RegularImmutableBiMap",
536:       "com.google.common.collect.Iterators$SingletonIterator",
537:       "com.google.common.collect.ImmutableEntry",
538:       "com.google.common.base.MoreObjects",
539:       "com.google.common.collect.HashBiMap$EntryForKey",
540:       "com.google.common.collect.HashBiMap$Inverse",
541:       "com.google.common.collect.LinkedListMultimap$1",
542:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
543:     );
544:   }
545: }

[MASTER] 16:14:58.764 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
Class<Object> class0 = Object.class;
ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
iterableSubject0.isEqualTo(serviceLoader0);

[MASTER] 16:14:59.096 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_24_1731035699033/com/google/common/truth/IterableSubject_24_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_24_1731035699033/com/google/common/truth/IterableSubject_24_tmp__ESTest_scaffolding.java]]
[MASTER] 16:14:59.097 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:14:59.097 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:14:59.097 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:14:59.098 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 26
[MASTER] 16:14:59.098 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkState
  location: class: 19
[MASTER] 16:14:59.099 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 20
[MASTER] 16:14:59.099 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 19
[MASTER] 16:14:59.100 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static lenientFormat
  location: class: 17
[MASTER] 16:14:59.100 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 18
[MASTER] 16:14:59.101 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 17
[MASTER] 16:14:59.102 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_24_1731035699033/com/google/common/truth/IterableSubject_24_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:14:59 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ConcurrentHashMultiset;
12: import com.google.common.truth.FailureMetadata;
13: import com.google.common.truth.IterableSubject;
14: import java.util.LinkedHashSet;
15: import java.util.Locale;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class IterableSubject_24_tmp__ESTest extends IterableSubject_24_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
26:       ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
27:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
28:       Locale.Category locale_Category0 = Locale.Category.FORMAT;
29:       // Undeclared exception!
30:       try { 
31:         iterableSubject0.contains(locale_Category0);
32:         fail("Expecting exception: NullPointerException");
33:       
34:       } catch(NullPointerException e) {
35:          //
36:          // no message in exception (getMessage() returned null)
37:          //
38:          verifyException("com.google.common.base.Preconditions", e);
39:       }
40:   }
41: }
RegularFileObject[/tmp/EvoSuite_24_1731035699033/com/google/common/truth/IterableSubject_24_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:14:59 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class IterableSubject_24_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_24_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
83:       "com.google.common.collect.Lists$RandomAccessPartition",
84:       "com.google.common.collect.Collections2",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
87:       "com.google.common.truth.SubjectUtils",
88:       "com.google.common.math.IntMath",
89:       "com.google.common.collect.LinkedHashMultiset",
90:       "com.google.common.truth.GraphMatching",
91:       "com.google.common.collect.AbstractMapBasedMultiset$2",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.Sets$1",
96:       "com.google.common.collect.NullsLastOrdering",
97:       "com.google.common.collect.Platform",
98:       "com.google.common.collect.RegularImmutableMap",
99:       "com.google.common.collect.RegularImmutableBiMap",
100:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
101:       "com.google.common.base.Converter$IdentityConverter",
102:       "com.google.common.collect.ImmutableMultimap$Values",
103:       "com.google.common.collect.HashBiMap$Inverse",
104:       "com.google.common.collect.ByFunctionOrdering",
105:       "com.google.common.collect.AbstractMapEntry",
106:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
107:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
108:       "com.google.common.collect.ImmutableBiMap$Builder",
109:       "com.google.common.base.Predicate",
110:       "com.google.common.base.Joiner",
111:       "com.google.common.collect.Iterators$ConcatenatedIterator",
112:       "com.google.common.collect.AbstractListMultimap",
113:       "com.google.common.collect.NullsFirstOrdering",
114:       "com.google.common.truth.Correspondence$BinaryPredicate",
115:       "org.checkerframework.framework.qual.QualifierForLiterals",
116:       "com.google.common.truth.AssertionErrorWithFacts",
117:       "com.google.common.base.Strings",
118:       "com.google.common.truth.IterableSubject$3",
119:       "com.google.common.collect.Lists$Partition",
120:       "com.google.common.collect.AbstractMapBasedMultimap",
121:       "com.google.common.collect.Lists",
122:       "com.google.common.truth.IterableSubject$1",
123:       "com.google.common.collect.Multisets$ImmutableEntry",
124:       "com.google.common.truth.IterableSubject$4",
125:       "com.google.common.collect.UnmodifiableListIterator",
126:       "com.google.common.collect.ImmutableMultimap",
127:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
128:       "com.google.common.collect.ImmutableSortedSet",
129:       "com.google.common.collect.Sets$4",
130:       "com.google.common.base.Absent",
131:       "com.google.common.collect.Maps$BiMapConverter",
132:       "com.google.common.base.Throwables",
133:       "org.checkerframework.framework.qual.SubtypeOf",
134:       "com.google.common.collect.ImmutableSortedSet$Builder",
135:       "com.google.common.base.Equivalence$Equals",
136:       "com.google.common.truth.Correspondence",
137:       "com.google.common.base.ElementTypesAreNonnullByDefault",
138:       "com.google.common.collect.AbstractMultiset$EntrySet",
139:       "com.google.common.base.Equivalence$Wrapper",
140:       "com.google.common.collect.Sets$ImprovedAbstractSet",
141:       "com.google.common.base.Preconditions",
142:       "com.google.common.truth.StandardSubjectBuilder$1",
143:       "com.google.common.collect.ImmutableEntry",
144:       "com.google.common.base.Joiner$1",
145:       "com.google.common.base.Converter$ConverterComposition",
146:       "com.google.common.base.Joiner$2",
147:       "com.google.common.collect.EmptyImmutableSetMultimap",
148:       "com.google.common.collect.HashBiMap$EntrySet",
149:       "com.google.common.collect.ImmutableList$Itr",
150:       "com.google.common.collect.ImmutableCollection",
151:       "com.google.common.collect.ImmutableEnumMap",
152:       "com.google.common.truth.Ordered",
153:       "com.google.common.collect.LinkedListMultimap$KeyList",
154:       "com.google.common.collect.Lists$OnePlusArrayList",
155:       "com.google.common.base.Objects",
156:       "com.google.common.collect.CompactHashMap$Itr",
157:       "com.google.common.collect.ImmutableSetMultimap",
158:       "com.google.common.collect.ImmutableCollection$Builder",
159:       "com.google.common.collect.Iterators$SingletonIterator",
160:       "com.google.common.collect.Iterators$6",
161:       "com.google.common.collect.BiMap",
162:       "com.google.common.collect.Iterators$9",
163:       "com.google.common.collect.ImmutableSet",
164:       "com.google.common.collect.Lists$AbstractListWrapper",
165:       "com.google.common.collect.AbstractMapBasedMultiset",
166:       "com.google.common.collect.Iterators$1",
167:       "com.google.common.collect.CompactHashMap",
168:       "com.google.common.collect.Iterators$4",
169:       "com.google.common.collect.Iterators$5",
170:       "com.google.common.collect.AbstractIterator$State",
171:       "com.google.common.base.Converter$ReverseConverter",
172:       "com.google.common.base.ExtraObjectsMethodsForWeb",
173:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
174:       "com.google.common.truth.Platform",
175:       "com.google.common.collect.Lists$StringAsImmutableList",
176:       "com.google.common.collect.Lists$2",
177:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
178:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
179:       "com.google.common.collect.CompactHashMap$EntrySetView",
180:       "com.google.common.truth.LazyMessage",
181:       "com.google.common.collect.Lists$1",
182:       "com.google.common.collect.ImmutableMultimap$Builder",
183:       "com.google.common.base.Equivalence$Identity",
184:       "com.google.common.truth.Subject$ComparisonResult",
185:       "com.google.common.collect.Multiset",
186:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
187:       "com.google.common.collect.AbstractMultimap",
188:       "com.google.common.base.Supplier",
189:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
190:       "com.google.common.collect.HashBiMap$View",
191:       "com.google.common.truth.IterableSubject$PairwiseChecker",
192:       "com.google.common.collect.ImmutableList",
193:       "com.google.common.collect.ReverseOrdering",
194:       "com.google.common.collect.FluentIterable$1",
195:       "com.google.common.collect.FluentIterable$2",
196:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
197:       "com.google.common.truth.Fact",
198:       "com.google.common.collect.FluentIterable$3",
199:       "org.checkerframework.checker.nullness.qual.Nullable",
200:       "com.google.common.collect.NullnessCasts",
201:       "org.checkerframework.framework.qual.DefaultFor",
202:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
203:       "com.google.common.collect.SortedMultisetBridge",
204:       "com.google.common.collect.ImmutableMap$Builder",
205:       "com.google.common.base.Converter$FunctionBasedConverter",
206:       "com.google.common.collect.HashBiMap",
207:       "com.google.common.collect.Maps$EntryTransformer",
208:       "com.google.common.collect.Ordering",
209:       "com.google.common.collect.FluentIterable$3$1",
210:       "com.google.common.collect.NaturalOrdering",
211:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
212:       "com.google.common.collect.LinkedListMultimap$Node",
213:       "com.google.common.collect.AllEqualOrdering",
214:       "com.google.common.collect.Hashing",
215:       "com.google.common.collect.ImmutableList$SubList",
216:       "com.google.common.collect.ListMultimap",
217:       "com.google.common.base.FunctionalEquivalence",
218:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
219:       "com.google.common.truth.ErrorWithFacts",
220:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
221:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
222:       "com.google.common.collect.RegularImmutableList",
223:       "com.google.common.collect.SortedMultiset",
224:       "com.google.common.truth.IterableSubject",
225:       "com.google.common.collect.FluentIterable",
226:       "com.google.common.base.Optional",
227:       "com.google.common.collect.Lists$TransformingRandomAccessList",
228:       "com.google.common.collect.Iterators$ArrayItr",
229:       "com.google.common.collect.RegularImmutableMap$KeySet",
230:       "com.google.common.collect.AbstractIterator$1",
231:       "com.google.common.collect.BaseImmutableMultimap",
232:       "com.google.common.collect.Multisets",
233:       "com.google.common.collect.CompactHashMap$MapEntry",
234:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
235:       "com.google.common.collect.SortedMapDifference",
236:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
237:       "com.google.common.collect.CompactHashMap$2",
238:       "com.google.common.collect.RegularImmutableSet",
239:       "com.google.common.truth.Subject$EqualityCheck",
240:       "com.google.common.collect.LexicographicalOrdering",
241:       "com.google.common.base.ParametricNullness",
242:       "com.google.common.collect.ImmutableListMultimap",
243:       "com.google.common.collect.ImmutableMultimap$1",
244:       "com.google.common.base.Present",
245:       "com.google.common.collect.ImmutableMultimap$2",
246:       "com.google.common.collect.Iterables",
247:       "com.google.common.collect.LinkedListMultimap$1",
248:       "com.google.common.collect.Sets$SetView",
249:       "com.google.common.collect.ImmutableSet$Builder",
250:       "com.google.common.truth.Correspondence$DiffFormatter",
251:       "com.google.common.collect.SingletonImmutableSet",
252:       "com.google.common.collect.ImmutableSetMultimap$Builder",
253:       "com.google.common.truth.Correspondence$Transforming",
254:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
255:       "com.google.common.collect.ImmutableMultiset",
256:       "com.google.common.truth.Correspondence$ExceptionStore",
257:       "com.google.common.collect.UsingToStringOrdering",
258:       "com.google.common.truth.ComparableSubject",
259:       "com.google.common.collect.Multisets$AbstractEntry",
260:       "com.google.common.collect.ImmutableMultimap$Keys",
261:       "com.google.common.truth.FailureMetadata",
262:       "com.google.common.collect.Lists$TransformingSequentialList",
263:       "com.google.common.primitives.IntsMethodsForWeb",
264:       "com.google.common.collect.ObjectArrays",
265:       "com.google.common.collect.ForwardingIterator",
266:       "com.google.common.collect.AbstractIterator",
267:       "com.google.common.truth.Correspondence$FormattingDiffs",
268:       "com.google.common.truth.Correspondence$Equality",
269:       "com.google.common.base.MoreObjects",
270:       "com.google.common.base.Suppliers$MemoizingSupplier",
271:       "com.google.common.collect.MapDifference",
272:       "com.google.common.collect.ObjectCountLinkedHashMap",
273:       "com.google.common.collect.ConcurrentHashMultiset$2",
274:       "com.google.common.collect.ConcurrentHashMultiset",
275:       "com.google.common.collect.SortedIterable",
276:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
277:       "com.google.common.collect.ConcurrentHashMultiset$3",
278:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
279:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
280:       "com.google.common.collect.UnmodifiableIterator",
281:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
282:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
283:       "com.google.common.collect.ImmutableEnumSet",
284:       "com.google.common.collect.Lists$RandomAccessListWrapper",
285:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
286:       "com.google.common.collect.HashBiMap$View$1",
287:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
288:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
289:       "com.google.common.base.Converter",
290:       "com.google.common.collect.LinkedListMultimap",
291:       "com.google.common.collect.Maps$8",
292:       "com.google.common.base.Function",
293:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
294:       "com.google.common.collect.ImmutableMap",
295:       "com.google.common.collect.ComparatorOrdering",
296:       "com.google.common.collect.AbstractIndexedListIterator",
297:       "com.google.common.collect.HashBiMap$EntryForKey",
298:       "com.google.common.collect.CollectPreconditions",
299:       "com.google.common.collect.Multiset$Entry",
300:       "com.google.common.truth.Subject",
301:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
302:       "com.google.common.collect.Sets",
303:       "com.google.common.collect.ObjectCountHashMap",
304:       "com.google.common.collect.BoundType",
305:       "com.google.common.collect.ExplicitOrdering",
306:       "com.google.common.collect.CompactHashSet",
307:       "com.google.common.collect.ImmutableList$Builder",
308:       "com.google.common.collect.ImmutableMap$1",
309:       "com.google.common.collect.Iterables$5",
310:       "com.google.common.collect.ForwardingObject",
311:       "com.google.common.collect.AbstractMultiset",
312:       "com.google.common.collect.Multimap",
313:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
314:       "com.google.common.collect.Iterators",
315:       "com.google.common.collect.CompoundOrdering",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
318:       "com.google.common.base.PairwiseEquivalence",
319:       "com.google.common.collect.Multisets$EntrySet",
320:       "com.google.common.collect.CompactHashing",
321:       "com.google.common.base.Suppliers",
322:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
323:       "com.google.common.collect.RegularImmutableMap$EntrySet",
324:       "com.google.common.base.Equivalence",
325:       "com.google.common.collect.ReverseNaturalOrdering",
326:       "com.google.common.truth.StandardSubjectBuilder",
327:       "com.google.common.primitives.Ints",
328:       "com.google.common.collect.Maps",
329:       "com.google.common.collect.SetMultimap",
330:       "com.google.common.collect.TransformedIterator",
331:       "com.google.common.truth.GraphMatching$HopcroftKarp",
332:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
333:       "com.google.common.collect.Iterators$MergingIterator",
334:       "com.google.common.truth.Correspondence$StoredException",
335:       "com.google.common.collect.RegularImmutableSortedSet"
336:     );
337:   } 
338: 
339:   private static void resetClasses() {
340:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_24_tmp__ESTest_scaffolding.class.getClassLoader()); 
341: 
342:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
343:       "com.google.common.truth.Subject",
344:       "com.google.common.truth.IterableSubject",
345:       "com.google.common.truth.IterableSubject$2",
346:       "com.google.common.truth.IterableSubject$1",
347:       "com.google.common.truth.IterableSubject$3",
348:       "com.google.common.truth.IterableSubject$4",
349:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
350:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
351:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
352:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
353:       "com.google.common.base.Optional",
354:       "com.google.common.base.Absent",
355:       "com.google.common.collect.ImmutableCollection",
356:       "com.google.common.collect.UnmodifiableIterator",
357:       "com.google.common.collect.UnmodifiableListIterator",
358:       "com.google.common.collect.AbstractIndexedListIterator",
359:       "com.google.common.collect.ImmutableList$Itr",
360:       "com.google.common.collect.ImmutableList",
361:       "com.google.common.collect.Ordering",
362:       "com.google.common.collect.NaturalOrdering",
363:       "com.google.common.truth.Correspondence",
364:       "com.google.common.truth.Correspondence$Equality",
365:       "com.google.common.truth.FailureMetadata",
366:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
367:       "com.google.common.collect.ImmutableMultiset",
368:       "com.google.common.collect.ImmutableSortedMultiset",
369:       "com.google.common.base.Preconditions",
370:       "com.google.common.collect.ImmutableCollection$Builder",
371:       "com.google.common.collect.ImmutableMultiset$Builder",
372:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
373:       "com.google.common.collect.ImmutableSet",
374:       "com.google.common.collect.ImmutableSortedSet",
375:       "com.google.common.collect.RegularImmutableSortedSet",
376:       "com.google.common.collect.RegularImmutableSortedMultiset",
377:       "com.google.common.base.Converter",
378:       "com.google.common.base.Converter$FunctionBasedConverter",
379:       "com.google.common.base.Converter$IdentityConverter",
380:       "com.google.common.base.Converter$ConverterComposition",
381:       "com.google.common.truth.Correspondence$Transforming",
382:       "com.google.common.base.Functions",
383:       "com.google.common.base.Functions$IdentityFunction",
384:       "com.google.common.truth.Correspondence$ExceptionStore",
385:       "com.google.common.truth.SubjectUtils",
386:       "com.google.common.collect.Lists",
387:       "com.google.common.collect.Iterables",
388:       "com.google.common.collect.AbstractMultimap",
389:       "com.google.common.collect.AbstractMapBasedMultimap",
390:       "com.google.common.collect.AbstractListMultimap",
391:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
392:       "com.google.common.collect.ArrayListMultimap",
393:       "com.google.common.collect.Platform",
394:       "com.google.common.collect.CompactHashMap",
395:       "com.google.common.primitives.IntsMethodsForWeb",
396:       "com.google.common.primitives.Ints",
397:       "com.google.common.collect.CollectPreconditions",
398:       "com.google.common.collect.CompactHashing",
399:       "com.google.common.collect.Hashing",
400:       "com.google.common.base.ExtraObjectsMethodsForWeb",
401:       "com.google.common.base.Objects",
402:       "com.google.common.truth.Fact",
403:       "com.google.common.collect.Collections2",
404:       "com.google.common.collect.AbstractMultiset",
405:       "com.google.common.collect.AbstractMapBasedMultiset",
406:       "com.google.common.collect.LinkedHashMultiset",
407:       "com.google.common.collect.ObjectCountHashMap",
408:       "com.google.common.collect.ObjectCountLinkedHashMap",
409:       "com.google.common.collect.AbstractSortedMultiset",
410:       "com.google.common.collect.TreeMultiset",
411:       "com.google.common.collect.GeneralRange",
412:       "com.google.common.collect.TreeMultiset$AvlNode",
413:       "com.google.common.collect.TreeMultiset$Reference",
414:       "com.google.common.collect.TreeMultiset$Aggregate",
415:       "com.google.common.collect.Multisets",
416:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
417:       "com.google.common.collect.Sets$ImprovedAbstractSet",
418:       "com.google.common.collect.Multisets$EntrySet",
419:       "com.google.common.collect.AbstractMultiset$EntrySet",
420:       "com.google.common.collect.TreeMultiset$2",
421:       "com.google.common.base.Suppliers",
422:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
423:       "com.google.common.truth.Platform",
424:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
425:       "com.google.common.collect.ImmutableList$Builder",
426:       "com.google.common.collect.ObjectArrays",
427:       "com.google.common.collect.Sets",
428:       "com.google.common.base.CharMatcher",
429:       "com.google.common.base.CharMatcher$FastMatcher",
430:       "com.google.common.base.CharMatcher$Is",
431:       "com.google.common.base.CharMatcher$InRange",
432:       "com.google.common.base.CaseFormat",
433:       "com.google.common.base.Ascii",
434:       "com.google.common.collect.ConcurrentHashMultiset",
435:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
436:       "com.google.common.collect.AbstractIterator",
437:       "com.google.common.collect.ConcurrentHashMultiset$2",
438:       "com.google.common.collect.AbstractIterator$State",
439:       "com.google.common.collect.ForwardingObject",
440:       "com.google.common.collect.ForwardingIterator",
441:       "com.google.common.collect.ConcurrentHashMultiset$3",
442:       "com.google.common.collect.AbstractIterator$1",
443:       "com.google.common.base.Strings",
444:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
445:       "com.google.common.collect.Maps",
446:       "com.google.common.truth.Correspondence$FormattingDiffs",
447:       "com.google.common.collect.Lists$OnePlusArrayList",
448:       "com.google.common.truth.LazyMessage",
449:       "com.google.common.truth.StandardSubjectBuilder",
450:       "com.google.common.collect.Iterators",
451:       "com.google.common.truth.Subject$ComparisonResult",
452:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
453:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
454:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
455:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
456:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
457:       "com.google.common.truth.ComparableSubject",
458:       "com.google.common.truth.DoubleSubject",
459:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
460:       "com.google.common.collect.AbstractMapBasedMultiset$2",
461:       "com.google.common.collect.BaseImmutableMultimap",
462:       "com.google.common.collect.ImmutableMultimap",
463:       "com.google.common.collect.ImmutableSetMultimap",
464:       "com.google.common.collect.ImmutableMultimap$Builder",
465:       "com.google.common.collect.ImmutableSetMultimap$Builder",
466:       "com.google.common.collect.CompactHashMap$EntrySetView",
467:       "com.google.common.collect.ImmutableMap",
468:       "com.google.common.collect.RegularImmutableMap",
469:       "com.google.common.collect.RegularImmutableSet",
470:       "com.google.common.collect.EmptyImmutableSetMultimap",
471:       "com.google.common.base.Joiner",
472:       "com.google.common.base.Joiner$1",
473:       "com.google.common.truth.Correspondence$StoredException",
474:       "com.google.common.collect.Multisets$AbstractEntry",
475:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
476:       "com.google.common.collect.RegularImmutableMultiset",
477:       "com.google.common.collect.IndexedImmutableSet",
478:       "com.google.common.collect.ImmutableMultiset$EntrySet",
479:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
480:       "com.google.common.collect.ImmutableMultimap$1",
481:       "com.google.common.collect.RegularImmutableMap$EntrySet",
482:       "com.google.common.collect.CompactHashSet",
483:       "com.google.common.collect.ImmutableMap$Builder",
484:       "com.google.common.collect.CompactHashMap$Itr",
485:       "com.google.common.collect.CompactHashMap$2",
486:       "com.google.common.collect.AbstractMapEntry",
487:       "com.google.common.collect.CompactHashMap$MapEntry",
488:       "com.google.common.collect.Multisets$ImmutableEntry",
489:       "com.google.common.collect.NullnessCasts",
490:       "com.google.common.base.Converter$1",
491:       "com.google.common.base.NullnessCasts",
492:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
493:       "com.google.common.base.Present",
494:       "com.google.common.base.Equivalence",
495:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
496:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
497:       "com.google.common.base.Equivalence$Wrapper",
498:       "com.google.common.collect.FluentIterable",
499:       "com.google.common.collect.Iterables$5",
500:       "com.google.common.collect.TransformedIterator",
501:       "com.google.common.collect.Iterators$6",
502:       "com.google.common.collect.HashMultiset",
503:       "com.google.common.base.Converter$ReverseConverter",
504:       "com.google.common.collect.SingletonImmutableSet",
505:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
506:       "com.google.common.collect.LinkedListMultimap",
507:       "com.google.common.collect.Multisets$ElementSet",
508:       "com.google.common.collect.SortedMultisets$ElementSet",
509:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
510:       "com.google.common.collect.LinkedListMultimap$Node",
511:       "com.google.common.collect.LinkedListMultimap$KeyList",
512:       "com.google.common.collect.RegularImmutableList",
513:       "com.google.common.base.Throwables",
514:       "com.google.common.math.IntMath",
515:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
516:       "com.google.common.collect.FluentIterable$3",
517:       "com.google.common.collect.FluentIterable$3$1",
518:       "com.google.common.collect.Iterators$ConcatenatedIterator",
519:       "com.google.common.collect.Iterators$ArrayItr",
520:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
521:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
522:       "com.google.common.truth.Subject$EqualityCheck",
523:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
524:       "com.google.common.collect.RegularImmutableMap$KeySet",
525:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
526:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
527:       "com.google.common.truth.GraphMatching",
528:       "com.google.common.truth.GraphMatching$HopcroftKarp",
529:       "com.google.common.collect.HashBiMap",
530:       "com.google.common.collect.ImmutableBiMap",
531:       "com.google.common.collect.HashBiMap$View",
532:       "com.google.common.collect.HashBiMap$EntrySet",
533:       "com.google.common.collect.ImmutableBiMap$Builder",
534:       "com.google.common.collect.HashBiMap$View$1",
535:       "com.google.common.collect.RegularImmutableBiMap",
536:       "com.google.common.collect.Iterators$SingletonIterator",
537:       "com.google.common.collect.ImmutableEntry",
538:       "com.google.common.base.MoreObjects",
539:       "com.google.common.collect.HashBiMap$EntryForKey",
540:       "com.google.common.collect.HashBiMap$Inverse",
541:       "com.google.common.collect.LinkedListMultimap$1",
542:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
543:     );
544:   }
545: }

[MASTER] 16:14:59.103 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
Locale.Category locale_Category0 = Locale.Category.FORMAT;
iterableSubject0.contains(locale_Category0);

[MASTER] 16:14:59.770 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_43_1731035699726/com/google/common/truth/IterableSubject_43_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_43_1731035699726/com/google/common/truth/IterableSubject_43_tmp__ESTest_scaffolding.java]]
[MASTER] 16:14:59.770 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:14:59.770 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:14:59.770 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:14:59.770 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 26
[MASTER] 16:14:59.770 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkState
  location: class: 19
[MASTER] 16:14:59.771 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 20
[MASTER] 16:14:59.771 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 19
[MASTER] 16:14:59.771 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static lenientFormat
  location: class: 17
[MASTER] 16:14:59.771 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 18
[MASTER] 16:14:59.772 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 17
[MASTER] 16:14:59.773 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_43_1731035699726/com/google/common/truth/IterableSubject_43_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:14:59 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ConcurrentHashMultiset;
11: import com.google.common.truth.Correspondence;
12: import com.google.common.truth.FailureMetadata;
13: import com.google.common.truth.IterableSubject;
14: import java.sql.SQLNonTransientConnectionException;
15: import java.util.LinkedHashSet;
16: import java.util.Locale;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class IterableSubject_43_tmp__ESTest extends IterableSubject_43_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
27:       ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
28:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
29:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
30:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
31:       Locale.Category locale_Category0 = Locale.Category.FORMAT;
32:       iterableSubject_UsingCorrespondence0.doesNotContain(locale_Category0);
33:   }
34: }
RegularFileObject[/tmp/EvoSuite_43_1731035699726/com/google/common/truth/IterableSubject_43_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:14:59 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class IterableSubject_43_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_43_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
83:       "com.google.common.collect.Lists$RandomAccessPartition",
84:       "com.google.common.collect.Collections2",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
87:       "com.google.common.truth.SubjectUtils",
88:       "com.google.common.math.IntMath",
89:       "com.google.common.collect.LinkedHashMultiset",
90:       "com.google.common.truth.GraphMatching",
91:       "com.google.common.collect.AbstractMapBasedMultiset$2",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.Sets$1",
96:       "com.google.common.collect.NullsLastOrdering",
97:       "com.google.common.collect.Platform",
98:       "com.google.common.collect.RegularImmutableMap",
99:       "com.google.common.collect.RegularImmutableBiMap",
100:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
101:       "com.google.common.base.Converter$IdentityConverter",
102:       "com.google.common.collect.ImmutableMultimap$Values",
103:       "com.google.common.collect.HashBiMap$Inverse",
104:       "com.google.common.collect.ByFunctionOrdering",
105:       "com.google.common.collect.AbstractMapEntry",
106:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
107:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
108:       "com.google.common.collect.ImmutableBiMap$Builder",
109:       "com.google.common.base.Predicate",
110:       "com.google.common.base.Joiner",
111:       "com.google.common.collect.Iterators$ConcatenatedIterator",
112:       "com.google.common.collect.AbstractListMultimap",
113:       "com.google.common.collect.NullsFirstOrdering",
114:       "com.google.common.truth.Correspondence$BinaryPredicate",
115:       "org.checkerframework.framework.qual.QualifierForLiterals",
116:       "com.google.common.truth.AssertionErrorWithFacts",
117:       "com.google.common.base.Strings",
118:       "com.google.common.truth.IterableSubject$3",
119:       "com.google.common.collect.Lists$Partition",
120:       "com.google.common.collect.AbstractMapBasedMultimap",
121:       "com.google.common.collect.Lists",
122:       "com.google.common.truth.IterableSubject$1",
123:       "com.google.common.collect.Multisets$ImmutableEntry",
124:       "com.google.common.truth.IterableSubject$4",
125:       "com.google.common.collect.UnmodifiableListIterator",
126:       "com.google.common.collect.ImmutableMultimap",
127:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
128:       "com.google.common.collect.ImmutableSortedSet",
129:       "com.google.common.collect.Sets$4",
130:       "com.google.common.base.Absent",
131:       "com.google.common.collect.Maps$BiMapConverter",
132:       "com.google.common.base.Throwables",
133:       "org.checkerframework.framework.qual.SubtypeOf",
134:       "com.google.common.collect.ImmutableSortedSet$Builder",
135:       "com.google.common.base.Equivalence$Equals",
136:       "com.google.common.truth.Correspondence",
137:       "com.google.common.base.ElementTypesAreNonnullByDefault",
138:       "com.google.common.collect.AbstractMultiset$EntrySet",
139:       "com.google.common.base.Equivalence$Wrapper",
140:       "com.google.common.collect.Sets$ImprovedAbstractSet",
141:       "com.google.common.base.Preconditions",
142:       "com.google.common.truth.StandardSubjectBuilder$1",
143:       "com.google.common.collect.ImmutableEntry",
144:       "com.google.common.base.Joiner$1",
145:       "com.google.common.base.Converter$ConverterComposition",
146:       "com.google.common.base.Joiner$2",
147:       "com.google.common.collect.EmptyImmutableSetMultimap",
148:       "com.google.common.collect.HashBiMap$EntrySet",
149:       "com.google.common.collect.ImmutableList$Itr",
150:       "com.google.common.collect.ImmutableCollection",
151:       "com.google.common.collect.ImmutableEnumMap",
152:       "com.google.common.truth.Ordered",
153:       "com.google.common.collect.LinkedListMultimap$KeyList",
154:       "com.google.common.collect.Lists$OnePlusArrayList",
155:       "com.google.common.base.Objects",
156:       "com.google.common.collect.CompactHashMap$Itr",
157:       "com.google.common.collect.ImmutableSetMultimap",
158:       "com.google.common.collect.ImmutableCollection$Builder",
159:       "com.google.common.collect.Iterators$SingletonIterator",
160:       "com.google.common.collect.Iterators$6",
161:       "com.google.common.collect.BiMap",
162:       "com.google.common.collect.Iterators$9",
163:       "com.google.common.collect.ImmutableSet",
164:       "com.google.common.collect.Lists$AbstractListWrapper",
165:       "com.google.common.collect.AbstractMapBasedMultiset",
166:       "com.google.common.collect.Iterators$1",
167:       "com.google.common.collect.CompactHashMap",
168:       "com.google.common.collect.Iterators$4",
169:       "com.google.common.collect.Iterators$5",
170:       "com.google.common.collect.AbstractIterator$State",
171:       "com.google.common.base.Converter$ReverseConverter",
172:       "com.google.common.base.ExtraObjectsMethodsForWeb",
173:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
174:       "com.google.common.truth.Platform",
175:       "com.google.common.collect.Lists$StringAsImmutableList",
176:       "com.google.common.collect.Lists$2",
177:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
178:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
179:       "com.google.common.collect.CompactHashMap$EntrySetView",
180:       "com.google.common.truth.LazyMessage",
181:       "com.google.common.collect.Lists$1",
182:       "com.google.common.collect.ImmutableMultimap$Builder",
183:       "com.google.common.base.Equivalence$Identity",
184:       "com.google.common.truth.Subject$ComparisonResult",
185:       "com.google.common.collect.Multiset",
186:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
187:       "com.google.common.collect.AbstractMultimap",
188:       "com.google.common.base.Supplier",
189:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
190:       "com.google.common.collect.HashBiMap$View",
191:       "com.google.common.truth.IterableSubject$PairwiseChecker",
192:       "com.google.common.collect.ImmutableList",
193:       "com.google.common.collect.ReverseOrdering",
194:       "com.google.common.collect.FluentIterable$1",
195:       "com.google.common.collect.FluentIterable$2",
196:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
197:       "com.google.common.truth.Fact",
198:       "com.google.common.collect.FluentIterable$3",
199:       "org.checkerframework.checker.nullness.qual.Nullable",
200:       "com.google.common.collect.NullnessCasts",
201:       "org.checkerframework.framework.qual.DefaultFor",
202:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
203:       "com.google.common.collect.SortedMultisetBridge",
204:       "com.google.common.collect.ImmutableMap$Builder",
205:       "com.google.common.base.Converter$FunctionBasedConverter",
206:       "com.google.common.collect.HashBiMap",
207:       "com.google.common.collect.Maps$EntryTransformer",
208:       "com.google.common.collect.Ordering",
209:       "com.google.common.collect.FluentIterable$3$1",
210:       "com.google.common.collect.NaturalOrdering",
211:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
212:       "com.google.common.collect.LinkedListMultimap$Node",
213:       "com.google.common.collect.AllEqualOrdering",
214:       "com.google.common.collect.Hashing",
215:       "com.google.common.collect.ImmutableList$SubList",
216:       "com.google.common.collect.ListMultimap",
217:       "com.google.common.base.FunctionalEquivalence",
218:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
219:       "com.google.common.truth.ErrorWithFacts",
220:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
221:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
222:       "com.google.common.collect.RegularImmutableList",
223:       "com.google.common.collect.SortedMultiset",
224:       "com.google.common.truth.IterableSubject",
225:       "com.google.common.collect.FluentIterable",
226:       "com.google.common.base.Optional",
227:       "com.google.common.collect.Lists$TransformingRandomAccessList",
228:       "com.google.common.collect.Iterators$ArrayItr",
229:       "com.google.common.collect.RegularImmutableMap$KeySet",
230:       "com.google.common.collect.AbstractIterator$1",
231:       "com.google.common.collect.BaseImmutableMultimap",
232:       "com.google.common.collect.Multisets",
233:       "com.google.common.collect.CompactHashMap$MapEntry",
234:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
235:       "com.google.common.collect.SortedMapDifference",
236:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
237:       "com.google.common.collect.CompactHashMap$2",
238:       "com.google.common.collect.RegularImmutableSet",
239:       "com.google.common.truth.Subject$EqualityCheck",
240:       "com.google.common.collect.LexicographicalOrdering",
241:       "com.google.common.base.ParametricNullness",
242:       "com.google.common.collect.ImmutableListMultimap",
243:       "com.google.common.collect.ImmutableMultimap$1",
244:       "com.google.common.base.Present",
245:       "com.google.common.collect.ImmutableMultimap$2",
246:       "com.google.common.collect.Iterables",
247:       "com.google.common.collect.LinkedListMultimap$1",
248:       "com.google.common.collect.Sets$SetView",
249:       "com.google.common.collect.ImmutableSet$Builder",
250:       "com.google.common.truth.Correspondence$DiffFormatter",
251:       "com.google.common.collect.SingletonImmutableSet",
252:       "com.google.common.collect.ImmutableSetMultimap$Builder",
253:       "com.google.common.truth.Correspondence$Transforming",
254:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
255:       "com.google.common.collect.ImmutableMultiset",
256:       "com.google.common.truth.Correspondence$ExceptionStore",
257:       "com.google.common.collect.UsingToStringOrdering",
258:       "com.google.common.truth.ComparableSubject",
259:       "com.google.common.collect.Multisets$AbstractEntry",
260:       "com.google.common.collect.ImmutableMultimap$Keys",
261:       "com.google.common.truth.FailureMetadata",
262:       "com.google.common.collect.Lists$TransformingSequentialList",
263:       "com.google.common.primitives.IntsMethodsForWeb",
264:       "com.google.common.collect.ObjectArrays",
265:       "com.google.common.collect.ForwardingIterator",
266:       "com.google.common.collect.AbstractIterator",
267:       "com.google.common.truth.Correspondence$FormattingDiffs",
268:       "com.google.common.truth.Correspondence$Equality",
269:       "com.google.common.base.MoreObjects",
270:       "com.google.common.base.Suppliers$MemoizingSupplier",
271:       "com.google.common.collect.MapDifference",
272:       "com.google.common.collect.ObjectCountLinkedHashMap",
273:       "com.google.common.collect.ConcurrentHashMultiset$2",
274:       "com.google.common.collect.ConcurrentHashMultiset",
275:       "com.google.common.collect.SortedIterable",
276:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
277:       "com.google.common.collect.ConcurrentHashMultiset$3",
278:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
279:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
280:       "com.google.common.collect.UnmodifiableIterator",
281:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
282:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
283:       "com.google.common.collect.ImmutableEnumSet",
284:       "com.google.common.collect.Lists$RandomAccessListWrapper",
285:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
286:       "com.google.common.collect.HashBiMap$View$1",
287:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
288:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
289:       "com.google.common.base.Converter",
290:       "com.google.common.collect.LinkedListMultimap",
291:       "com.google.common.collect.Maps$8",
292:       "com.google.common.base.Function",
293:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
294:       "com.google.common.collect.ImmutableMap",
295:       "com.google.common.collect.ComparatorOrdering",
296:       "com.google.common.collect.AbstractIndexedListIterator",
297:       "com.google.common.collect.HashBiMap$EntryForKey",
298:       "com.google.common.collect.CollectPreconditions",
299:       "com.google.common.collect.Multiset$Entry",
300:       "com.google.common.truth.Subject",
301:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
302:       "com.google.common.collect.Sets",
303:       "com.google.common.collect.ObjectCountHashMap",
304:       "com.google.common.collect.BoundType",
305:       "com.google.common.collect.ExplicitOrdering",
306:       "com.google.common.collect.CompactHashSet",
307:       "com.google.common.collect.ImmutableList$Builder",
308:       "com.google.common.collect.ImmutableMap$1",
309:       "com.google.common.collect.Iterables$5",
310:       "com.google.common.collect.ForwardingObject",
311:       "com.google.common.collect.AbstractMultiset",
312:       "com.google.common.collect.Multimap",
313:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
314:       "com.google.common.collect.Iterators",
315:       "com.google.common.collect.CompoundOrdering",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
318:       "com.google.common.base.PairwiseEquivalence",
319:       "com.google.common.collect.Multisets$EntrySet",
320:       "com.google.common.collect.CompactHashing",
321:       "com.google.common.base.Suppliers",
322:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
323:       "com.google.common.collect.RegularImmutableMap$EntrySet",
324:       "com.google.common.base.Equivalence",
325:       "com.google.common.collect.ReverseNaturalOrdering",
326:       "com.google.common.truth.StandardSubjectBuilder",
327:       "com.google.common.primitives.Ints",
328:       "com.google.common.collect.Maps",
329:       "com.google.common.collect.SetMultimap",
330:       "com.google.common.collect.TransformedIterator",
331:       "com.google.common.truth.GraphMatching$HopcroftKarp",
332:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
333:       "com.google.common.collect.Iterators$MergingIterator",
334:       "com.google.common.truth.Correspondence$StoredException",
335:       "com.google.common.collect.RegularImmutableSortedSet"
336:     );
337:   } 
338: 
339:   private static void resetClasses() {
340:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_43_tmp__ESTest_scaffolding.class.getClassLoader()); 
341: 
342:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
343:       "com.google.common.truth.Subject",
344:       "com.google.common.truth.IterableSubject",
345:       "com.google.common.truth.IterableSubject$2",
346:       "com.google.common.truth.IterableSubject$1",
347:       "com.google.common.truth.IterableSubject$3",
348:       "com.google.common.truth.IterableSubject$4",
349:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
350:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
351:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
352:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
353:       "com.google.common.base.Optional",
354:       "com.google.common.base.Absent",
355:       "com.google.common.collect.ImmutableCollection",
356:       "com.google.common.collect.UnmodifiableIterator",
357:       "com.google.common.collect.UnmodifiableListIterator",
358:       "com.google.common.collect.AbstractIndexedListIterator",
359:       "com.google.common.collect.ImmutableList$Itr",
360:       "com.google.common.collect.ImmutableList",
361:       "com.google.common.collect.Ordering",
362:       "com.google.common.collect.NaturalOrdering",
363:       "com.google.common.truth.Correspondence",
364:       "com.google.common.truth.Correspondence$Equality",
365:       "com.google.common.truth.FailureMetadata",
366:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
367:       "com.google.common.collect.ImmutableMultiset",
368:       "com.google.common.collect.ImmutableSortedMultiset",
369:       "com.google.common.base.Preconditions",
370:       "com.google.common.collect.ImmutableCollection$Builder",
371:       "com.google.common.collect.ImmutableMultiset$Builder",
372:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
373:       "com.google.common.collect.ImmutableSet",
374:       "com.google.common.collect.ImmutableSortedSet",
375:       "com.google.common.collect.RegularImmutableSortedSet",
376:       "com.google.common.collect.RegularImmutableSortedMultiset",
377:       "com.google.common.base.Converter",
378:       "com.google.common.base.Converter$FunctionBasedConverter",
379:       "com.google.common.base.Converter$IdentityConverter",
380:       "com.google.common.base.Converter$ConverterComposition",
381:       "com.google.common.truth.Correspondence$Transforming",
382:       "com.google.common.base.Functions",
383:       "com.google.common.base.Functions$IdentityFunction",
384:       "com.google.common.truth.Correspondence$ExceptionStore",
385:       "com.google.common.truth.SubjectUtils",
386:       "com.google.common.collect.Lists",
387:       "com.google.common.collect.Iterables",
388:       "com.google.common.collect.AbstractMultimap",
389:       "com.google.common.collect.AbstractMapBasedMultimap",
390:       "com.google.common.collect.AbstractListMultimap",
391:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
392:       "com.google.common.collect.ArrayListMultimap",
393:       "com.google.common.collect.Platform",
394:       "com.google.common.collect.CompactHashMap",
395:       "com.google.common.primitives.IntsMethodsForWeb",
396:       "com.google.common.primitives.Ints",
397:       "com.google.common.collect.CollectPreconditions",
398:       "com.google.common.collect.CompactHashing",
399:       "com.google.common.collect.Hashing",
400:       "com.google.common.base.ExtraObjectsMethodsForWeb",
401:       "com.google.common.base.Objects",
402:       "com.google.common.truth.Fact",
403:       "com.google.common.collect.Collections2",
404:       "com.google.common.collect.AbstractMultiset",
405:       "com.google.common.collect.AbstractMapBasedMultiset",
406:       "com.google.common.collect.LinkedHashMultiset",
407:       "com.google.common.collect.ObjectCountHashMap",
408:       "com.google.common.collect.ObjectCountLinkedHashMap",
409:       "com.google.common.collect.AbstractSortedMultiset",
410:       "com.google.common.collect.TreeMultiset",
411:       "com.google.common.collect.GeneralRange",
412:       "com.google.common.collect.TreeMultiset$AvlNode",
413:       "com.google.common.collect.TreeMultiset$Reference",
414:       "com.google.common.collect.TreeMultiset$Aggregate",
415:       "com.google.common.collect.Multisets",
416:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
417:       "com.google.common.collect.Sets$ImprovedAbstractSet",
418:       "com.google.common.collect.Multisets$EntrySet",
419:       "com.google.common.collect.AbstractMultiset$EntrySet",
420:       "com.google.common.collect.TreeMultiset$2",
421:       "com.google.common.base.Suppliers",
422:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
423:       "com.google.common.truth.Platform",
424:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
425:       "com.google.common.collect.ImmutableList$Builder",
426:       "com.google.common.collect.ObjectArrays",
427:       "com.google.common.collect.Sets",
428:       "com.google.common.base.CharMatcher",
429:       "com.google.common.base.CharMatcher$FastMatcher",
430:       "com.google.common.base.CharMatcher$Is",
431:       "com.google.common.base.CharMatcher$InRange",
432:       "com.google.common.base.CaseFormat",
433:       "com.google.common.base.Ascii",
434:       "com.google.common.collect.ConcurrentHashMultiset",
435:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
436:       "com.google.common.collect.AbstractIterator",
437:       "com.google.common.collect.ConcurrentHashMultiset$2",
438:       "com.google.common.collect.AbstractIterator$State",
439:       "com.google.common.collect.ForwardingObject",
440:       "com.google.common.collect.ForwardingIterator",
441:       "com.google.common.collect.ConcurrentHashMultiset$3",
442:       "com.google.common.collect.AbstractIterator$1",
443:       "com.google.common.base.Strings",
444:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
445:       "com.google.common.collect.Maps",
446:       "com.google.common.truth.Correspondence$FormattingDiffs",
447:       "com.google.common.collect.Lists$OnePlusArrayList",
448:       "com.google.common.truth.LazyMessage",
449:       "com.google.common.truth.StandardSubjectBuilder",
450:       "com.google.common.collect.Iterators",
451:       "com.google.common.truth.Subject$ComparisonResult",
452:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
453:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
454:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
455:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
456:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
457:       "com.google.common.truth.ComparableSubject",
458:       "com.google.common.truth.DoubleSubject",
459:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
460:       "com.google.common.collect.AbstractMapBasedMultiset$2",
461:       "com.google.common.collect.BaseImmutableMultimap",
462:       "com.google.common.collect.ImmutableMultimap",
463:       "com.google.common.collect.ImmutableSetMultimap",
464:       "com.google.common.collect.ImmutableMultimap$Builder",
465:       "com.google.common.collect.ImmutableSetMultimap$Builder",
466:       "com.google.common.collect.CompactHashMap$EntrySetView",
467:       "com.google.common.collect.ImmutableMap",
468:       "com.google.common.collect.RegularImmutableMap",
469:       "com.google.common.collect.RegularImmutableSet",
470:       "com.google.common.collect.EmptyImmutableSetMultimap",
471:       "com.google.common.base.Joiner",
472:       "com.google.common.base.Joiner$1",
473:       "com.google.common.truth.Correspondence$StoredException",
474:       "com.google.common.collect.Multisets$AbstractEntry",
475:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
476:       "com.google.common.collect.RegularImmutableMultiset",
477:       "com.google.common.collect.IndexedImmutableSet",
478:       "com.google.common.collect.ImmutableMultiset$EntrySet",
479:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
480:       "com.google.common.collect.ImmutableMultimap$1",
481:       "com.google.common.collect.RegularImmutableMap$EntrySet",
482:       "com.google.common.collect.CompactHashSet",
483:       "com.google.common.collect.ImmutableMap$Builder",
484:       "com.google.common.collect.CompactHashMap$Itr",
485:       "com.google.common.collect.CompactHashMap$2",
486:       "com.google.common.collect.AbstractMapEntry",
487:       "com.google.common.collect.CompactHashMap$MapEntry",
488:       "com.google.common.collect.Multisets$ImmutableEntry",
489:       "com.google.common.collect.NullnessCasts",
490:       "com.google.common.base.Converter$1",
491:       "com.google.common.base.NullnessCasts",
492:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
493:       "com.google.common.base.Present",
494:       "com.google.common.base.Equivalence",
495:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
496:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
497:       "com.google.common.base.Equivalence$Wrapper",
498:       "com.google.common.collect.FluentIterable",
499:       "com.google.common.collect.Iterables$5",
500:       "com.google.common.collect.TransformedIterator",
501:       "com.google.common.collect.Iterators$6",
502:       "com.google.common.collect.HashMultiset",
503:       "com.google.common.base.Converter$ReverseConverter",
504:       "com.google.common.collect.SingletonImmutableSet",
505:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
506:       "com.google.common.collect.LinkedListMultimap",
507:       "com.google.common.collect.Multisets$ElementSet",
508:       "com.google.common.collect.SortedMultisets$ElementSet",
509:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
510:       "com.google.common.collect.LinkedListMultimap$Node",
511:       "com.google.common.collect.LinkedListMultimap$KeyList",
512:       "com.google.common.collect.RegularImmutableList",
513:       "com.google.common.base.Throwables",
514:       "com.google.common.math.IntMath",
515:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
516:       "com.google.common.collect.FluentIterable$3",
517:       "com.google.common.collect.FluentIterable$3$1",
518:       "com.google.common.collect.Iterators$ConcatenatedIterator",
519:       "com.google.common.collect.Iterators$ArrayItr",
520:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
521:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
522:       "com.google.common.truth.Subject$EqualityCheck",
523:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
524:       "com.google.common.collect.RegularImmutableMap$KeySet",
525:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
526:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
527:       "com.google.common.truth.GraphMatching",
528:       "com.google.common.truth.GraphMatching$HopcroftKarp",
529:       "com.google.common.collect.HashBiMap",
530:       "com.google.common.collect.ImmutableBiMap",
531:       "com.google.common.collect.HashBiMap$View",
532:       "com.google.common.collect.HashBiMap$EntrySet",
533:       "com.google.common.collect.ImmutableBiMap$Builder",
534:       "com.google.common.collect.HashBiMap$View$1",
535:       "com.google.common.collect.RegularImmutableBiMap",
536:       "com.google.common.collect.Iterators$SingletonIterator",
537:       "com.google.common.collect.ImmutableEntry",
538:       "com.google.common.base.MoreObjects",
539:       "com.google.common.collect.HashBiMap$EntryForKey",
540:       "com.google.common.collect.HashBiMap$Inverse",
541:       "com.google.common.collect.LinkedListMultimap$1",
542:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
543:     );
544:   }
545: }

[MASTER] 16:14:59.774 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
Correspondence<Object, Object> correspondence0 = Correspondence.equality();
IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
Locale.Category locale_Category0 = Locale.Category.FORMAT;
iterableSubject_UsingCorrespondence0.doesNotContain(locale_Category0);

[MASTER] 16:15:00.876 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_61_1731035700841/com/google/common/truth/IterableSubject_61_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_61_1731035700841/com/google/common/truth/IterableSubject_61_tmp__ESTest_scaffolding.java]]
[MASTER] 16:15:00.876 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:00.876 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:00.877 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:15:00.878 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 26
[MASTER] 16:15:00.878 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkState
  location: class: 19
[MASTER] 16:15:00.879 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 20
[MASTER] 16:15:00.879 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 19
[MASTER] 16:15:00.880 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static lenientFormat
  location: class: 17
[MASTER] 16:15:00.881 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 18
[MASTER] 16:15:00.881 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 17
[MASTER] 16:15:00.882 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_61_1731035700841/com/google/common/truth/IterableSubject_61_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:15:00 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ConcurrentHashMultiset;
12: import com.google.common.truth.FailureMetadata;
13: import com.google.common.truth.IterableSubject;
14: import java.util.LinkedHashSet;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class IterableSubject_61_tmp__ESTest extends IterableSubject_61_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
25:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
26:       ConcurrentHashMultiset<Object> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<?>) linkedHashSet0);
27:       Object object0 = iterableSubject0.actual();
28:       concurrentHashMultiset0.add(object0);
29:       // Undeclared exception!
30:       try { 
31:         iterableSubject0.isNotIn(concurrentHashMultiset0);
32:         fail("Expecting exception: NullPointerException");
33:       
34:       } catch(NullPointerException e) {
35:          //
36:          // no message in exception (getMessage() returned null)
37:          //
38:          verifyException("com.google.common.base.Preconditions", e);
39:       }
40:   }
41: }
RegularFileObject[/tmp/EvoSuite_61_1731035700841/com/google/common/truth/IterableSubject_61_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:15:00 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class IterableSubject_61_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_61_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
83:       "com.google.common.collect.Lists$RandomAccessPartition",
84:       "com.google.common.collect.Collections2",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
87:       "com.google.common.truth.SubjectUtils",
88:       "com.google.common.math.IntMath",
89:       "com.google.common.collect.LinkedHashMultiset",
90:       "com.google.common.truth.GraphMatching",
91:       "com.google.common.collect.AbstractMapBasedMultiset$2",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.Sets$1",
96:       "com.google.common.collect.NullsLastOrdering",
97:       "com.google.common.collect.Platform",
98:       "com.google.common.collect.RegularImmutableMap",
99:       "com.google.common.collect.RegularImmutableBiMap",
100:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
101:       "com.google.common.base.Converter$IdentityConverter",
102:       "com.google.common.collect.ImmutableMultimap$Values",
103:       "com.google.common.collect.HashBiMap$Inverse",
104:       "com.google.common.collect.ByFunctionOrdering",
105:       "com.google.common.collect.AbstractMapEntry",
106:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
107:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
108:       "com.google.common.collect.ImmutableBiMap$Builder",
109:       "com.google.common.base.Predicate",
110:       "com.google.common.base.Joiner",
111:       "com.google.common.collect.Iterators$ConcatenatedIterator",
112:       "com.google.common.collect.AbstractListMultimap",
113:       "com.google.common.collect.NullsFirstOrdering",
114:       "com.google.common.truth.Correspondence$BinaryPredicate",
115:       "org.checkerframework.framework.qual.QualifierForLiterals",
116:       "com.google.common.truth.AssertionErrorWithFacts",
117:       "com.google.common.base.Strings",
118:       "com.google.common.truth.IterableSubject$3",
119:       "com.google.common.collect.Lists$Partition",
120:       "com.google.common.collect.AbstractMapBasedMultimap",
121:       "com.google.common.collect.Lists",
122:       "com.google.common.truth.IterableSubject$1",
123:       "com.google.common.collect.Multisets$ImmutableEntry",
124:       "com.google.common.truth.IterableSubject$4",
125:       "com.google.common.collect.UnmodifiableListIterator",
126:       "com.google.common.collect.ImmutableMultimap",
127:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
128:       "com.google.common.collect.ImmutableSortedSet",
129:       "com.google.common.collect.Sets$4",
130:       "com.google.common.base.Absent",
131:       "com.google.common.collect.Maps$BiMapConverter",
132:       "com.google.common.base.Throwables",
133:       "org.checkerframework.framework.qual.SubtypeOf",
134:       "com.google.common.collect.ImmutableSortedSet$Builder",
135:       "com.google.common.base.Equivalence$Equals",
136:       "com.google.common.truth.Correspondence",
137:       "com.google.common.base.ElementTypesAreNonnullByDefault",
138:       "com.google.common.collect.AbstractMultiset$EntrySet",
139:       "com.google.common.base.Equivalence$Wrapper",
140:       "com.google.common.collect.Sets$ImprovedAbstractSet",
141:       "com.google.common.base.Preconditions",
142:       "com.google.common.truth.StandardSubjectBuilder$1",
143:       "com.google.common.collect.ImmutableEntry",
144:       "com.google.common.base.Joiner$1",
145:       "com.google.common.base.Converter$ConverterComposition",
146:       "com.google.common.base.Joiner$2",
147:       "com.google.common.collect.EmptyImmutableSetMultimap",
148:       "com.google.common.collect.HashBiMap$EntrySet",
149:       "com.google.common.collect.ImmutableList$Itr",
150:       "com.google.common.collect.ImmutableCollection",
151:       "com.google.common.collect.ImmutableEnumMap",
152:       "com.google.common.truth.Ordered",
153:       "com.google.common.collect.LinkedListMultimap$KeyList",
154:       "com.google.common.collect.Lists$OnePlusArrayList",
155:       "com.google.common.base.Objects",
156:       "com.google.common.collect.CompactHashMap$Itr",
157:       "com.google.common.collect.ImmutableSetMultimap",
158:       "com.google.common.collect.ImmutableCollection$Builder",
159:       "com.google.common.collect.Iterators$SingletonIterator",
160:       "com.google.common.collect.Iterators$6",
161:       "com.google.common.collect.BiMap",
162:       "com.google.common.collect.Iterators$9",
163:       "com.google.common.collect.ImmutableSet",
164:       "com.google.common.collect.Lists$AbstractListWrapper",
165:       "com.google.common.collect.AbstractMapBasedMultiset",
166:       "com.google.common.collect.Iterators$1",
167:       "com.google.common.collect.CompactHashMap",
168:       "com.google.common.collect.Iterators$4",
169:       "com.google.common.collect.Iterators$5",
170:       "com.google.common.collect.AbstractIterator$State",
171:       "com.google.common.base.Converter$ReverseConverter",
172:       "com.google.common.base.ExtraObjectsMethodsForWeb",
173:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
174:       "com.google.common.truth.Platform",
175:       "com.google.common.collect.Lists$StringAsImmutableList",
176:       "com.google.common.collect.Lists$2",
177:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
178:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
179:       "com.google.common.collect.CompactHashMap$EntrySetView",
180:       "com.google.common.truth.LazyMessage",
181:       "com.google.common.collect.Lists$1",
182:       "com.google.common.collect.ImmutableMultimap$Builder",
183:       "com.google.common.base.Equivalence$Identity",
184:       "com.google.common.truth.Subject$ComparisonResult",
185:       "com.google.common.collect.Multiset",
186:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
187:       "com.google.common.collect.AbstractMultimap",
188:       "com.google.common.base.Supplier",
189:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
190:       "com.google.common.collect.HashBiMap$View",
191:       "com.google.common.truth.IterableSubject$PairwiseChecker",
192:       "com.google.common.collect.ImmutableList",
193:       "com.google.common.collect.ReverseOrdering",
194:       "com.google.common.collect.FluentIterable$1",
195:       "com.google.common.collect.FluentIterable$2",
196:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
197:       "com.google.common.truth.Fact",
198:       "com.google.common.collect.FluentIterable$3",
199:       "org.checkerframework.checker.nullness.qual.Nullable",
200:       "com.google.common.collect.NullnessCasts",
201:       "org.checkerframework.framework.qual.DefaultFor",
202:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
203:       "com.google.common.collect.SortedMultisetBridge",
204:       "com.google.common.collect.ImmutableMap$Builder",
205:       "com.google.common.base.Converter$FunctionBasedConverter",
206:       "com.google.common.collect.HashBiMap",
207:       "com.google.common.collect.Maps$EntryTransformer",
208:       "com.google.common.collect.Ordering",
209:       "com.google.common.collect.FluentIterable$3$1",
210:       "com.google.common.collect.NaturalOrdering",
211:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
212:       "com.google.common.collect.LinkedListMultimap$Node",
213:       "com.google.common.collect.AllEqualOrdering",
214:       "com.google.common.collect.Hashing",
215:       "com.google.common.collect.ImmutableList$SubList",
216:       "com.google.common.collect.ListMultimap",
217:       "com.google.common.base.FunctionalEquivalence",
218:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
219:       "com.google.common.truth.ErrorWithFacts",
220:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
221:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
222:       "com.google.common.collect.RegularImmutableList",
223:       "com.google.common.collect.SortedMultiset",
224:       "com.google.common.truth.IterableSubject",
225:       "com.google.common.collect.FluentIterable",
226:       "com.google.common.base.Optional",
227:       "com.google.common.collect.Lists$TransformingRandomAccessList",
228:       "com.google.common.collect.Iterators$ArrayItr",
229:       "com.google.common.collect.RegularImmutableMap$KeySet",
230:       "com.google.common.collect.AbstractIterator$1",
231:       "com.google.common.collect.BaseImmutableMultimap",
232:       "com.google.common.collect.Multisets",
233:       "com.google.common.collect.CompactHashMap$MapEntry",
234:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
235:       "com.google.common.collect.SortedMapDifference",
236:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
237:       "com.google.common.collect.CompactHashMap$2",
238:       "com.google.common.collect.RegularImmutableSet",
239:       "com.google.common.truth.Subject$EqualityCheck",
240:       "com.google.common.collect.LexicographicalOrdering",
241:       "com.google.common.base.ParametricNullness",
242:       "com.google.common.collect.ImmutableListMultimap",
243:       "com.google.common.collect.ImmutableMultimap$1",
244:       "com.google.common.base.Present",
245:       "com.google.common.collect.ImmutableMultimap$2",
246:       "com.google.common.collect.Iterables",
247:       "com.google.common.collect.LinkedListMultimap$1",
248:       "com.google.common.collect.Sets$SetView",
249:       "com.google.common.collect.ImmutableSet$Builder",
250:       "com.google.common.truth.Correspondence$DiffFormatter",
251:       "com.google.common.collect.SingletonImmutableSet",
252:       "com.google.common.collect.ImmutableSetMultimap$Builder",
253:       "com.google.common.truth.Correspondence$Transforming",
254:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
255:       "com.google.common.collect.ImmutableMultiset",
256:       "com.google.common.truth.Correspondence$ExceptionStore",
257:       "com.google.common.collect.UsingToStringOrdering",
258:       "com.google.common.truth.ComparableSubject",
259:       "com.google.common.collect.Multisets$AbstractEntry",
260:       "com.google.common.collect.ImmutableMultimap$Keys",
261:       "com.google.common.truth.FailureMetadata",
262:       "com.google.common.collect.Lists$TransformingSequentialList",
263:       "com.google.common.primitives.IntsMethodsForWeb",
264:       "com.google.common.collect.ObjectArrays",
265:       "com.google.common.collect.ForwardingIterator",
266:       "com.google.common.collect.AbstractIterator",
267:       "com.google.common.truth.Correspondence$FormattingDiffs",
268:       "com.google.common.truth.Correspondence$Equality",
269:       "com.google.common.base.MoreObjects",
270:       "com.google.common.base.Suppliers$MemoizingSupplier",
271:       "com.google.common.collect.MapDifference",
272:       "com.google.common.collect.ObjectCountLinkedHashMap",
273:       "com.google.common.collect.ConcurrentHashMultiset$2",
274:       "com.google.common.collect.ConcurrentHashMultiset",
275:       "com.google.common.collect.SortedIterable",
276:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
277:       "com.google.common.collect.ConcurrentHashMultiset$3",
278:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
279:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
280:       "com.google.common.collect.UnmodifiableIterator",
281:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
282:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
283:       "com.google.common.collect.ImmutableEnumSet",
284:       "com.google.common.collect.Lists$RandomAccessListWrapper",
285:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
286:       "com.google.common.collect.HashBiMap$View$1",
287:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
288:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
289:       "com.google.common.base.Converter",
290:       "com.google.common.collect.LinkedListMultimap",
291:       "com.google.common.collect.Maps$8",
292:       "com.google.common.base.Function",
293:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
294:       "com.google.common.collect.ImmutableMap",
295:       "com.google.common.collect.ComparatorOrdering",
296:       "com.google.common.collect.AbstractIndexedListIterator",
297:       "com.google.common.collect.HashBiMap$EntryForKey",
298:       "com.google.common.collect.CollectPreconditions",
299:       "com.google.common.collect.Multiset$Entry",
300:       "com.google.common.truth.Subject",
301:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
302:       "com.google.common.collect.Sets",
303:       "com.google.common.collect.ObjectCountHashMap",
304:       "com.google.common.collect.BoundType",
305:       "com.google.common.collect.ExplicitOrdering",
306:       "com.google.common.collect.CompactHashSet",
307:       "com.google.common.collect.ImmutableList$Builder",
308:       "com.google.common.collect.ImmutableMap$1",
309:       "com.google.common.collect.Iterables$5",
310:       "com.google.common.collect.ForwardingObject",
311:       "com.google.common.collect.AbstractMultiset",
312:       "com.google.common.collect.Multimap",
313:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
314:       "com.google.common.collect.Iterators",
315:       "com.google.common.collect.CompoundOrdering",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
318:       "com.google.common.base.PairwiseEquivalence",
319:       "com.google.common.collect.Multisets$EntrySet",
320:       "com.google.common.collect.CompactHashing",
321:       "com.google.common.base.Suppliers",
322:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
323:       "com.google.common.collect.RegularImmutableMap$EntrySet",
324:       "com.google.common.base.Equivalence",
325:       "com.google.common.collect.ReverseNaturalOrdering",
326:       "com.google.common.truth.StandardSubjectBuilder",
327:       "com.google.common.primitives.Ints",
328:       "com.google.common.collect.Maps",
329:       "com.google.common.collect.SetMultimap",
330:       "com.google.common.collect.TransformedIterator",
331:       "com.google.common.truth.GraphMatching$HopcroftKarp",
332:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
333:       "com.google.common.collect.Iterators$MergingIterator",
334:       "com.google.common.truth.Correspondence$StoredException",
335:       "com.google.common.collect.RegularImmutableSortedSet"
336:     );
337:   } 
338: 
339:   private static void resetClasses() {
340:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_61_tmp__ESTest_scaffolding.class.getClassLoader()); 
341: 
342:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
343:       "com.google.common.truth.Subject",
344:       "com.google.common.truth.IterableSubject",
345:       "com.google.common.truth.IterableSubject$2",
346:       "com.google.common.truth.IterableSubject$1",
347:       "com.google.common.truth.IterableSubject$3",
348:       "com.google.common.truth.IterableSubject$4",
349:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
350:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
351:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
352:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
353:       "com.google.common.base.Optional",
354:       "com.google.common.base.Absent",
355:       "com.google.common.collect.ImmutableCollection",
356:       "com.google.common.collect.UnmodifiableIterator",
357:       "com.google.common.collect.UnmodifiableListIterator",
358:       "com.google.common.collect.AbstractIndexedListIterator",
359:       "com.google.common.collect.ImmutableList$Itr",
360:       "com.google.common.collect.ImmutableList",
361:       "com.google.common.collect.Ordering",
362:       "com.google.common.collect.NaturalOrdering",
363:       "com.google.common.truth.Correspondence",
364:       "com.google.common.truth.Correspondence$Equality",
365:       "com.google.common.truth.FailureMetadata",
366:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
367:       "com.google.common.collect.ImmutableMultiset",
368:       "com.google.common.collect.ImmutableSortedMultiset",
369:       "com.google.common.base.Preconditions",
370:       "com.google.common.collect.ImmutableCollection$Builder",
371:       "com.google.common.collect.ImmutableMultiset$Builder",
372:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
373:       "com.google.common.collect.ImmutableSet",
374:       "com.google.common.collect.ImmutableSortedSet",
375:       "com.google.common.collect.RegularImmutableSortedSet",
376:       "com.google.common.collect.RegularImmutableSortedMultiset",
377:       "com.google.common.base.Converter",
378:       "com.google.common.base.Converter$FunctionBasedConverter",
379:       "com.google.common.base.Converter$IdentityConverter",
380:       "com.google.common.base.Converter$ConverterComposition",
381:       "com.google.common.truth.Correspondence$Transforming",
382:       "com.google.common.base.Functions",
383:       "com.google.common.base.Functions$IdentityFunction",
384:       "com.google.common.truth.Correspondence$ExceptionStore",
385:       "com.google.common.truth.SubjectUtils",
386:       "com.google.common.collect.Lists",
387:       "com.google.common.collect.Iterables",
388:       "com.google.common.collect.AbstractMultimap",
389:       "com.google.common.collect.AbstractMapBasedMultimap",
390:       "com.google.common.collect.AbstractListMultimap",
391:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
392:       "com.google.common.collect.ArrayListMultimap",
393:       "com.google.common.collect.Platform",
394:       "com.google.common.collect.CompactHashMap",
395:       "com.google.common.primitives.IntsMethodsForWeb",
396:       "com.google.common.primitives.Ints",
397:       "com.google.common.collect.CollectPreconditions",
398:       "com.google.common.collect.CompactHashing",
399:       "com.google.common.collect.Hashing",
400:       "com.google.common.base.ExtraObjectsMethodsForWeb",
401:       "com.google.common.base.Objects",
402:       "com.google.common.truth.Fact",
403:       "com.google.common.collect.Collections2",
404:       "com.google.common.collect.AbstractMultiset",
405:       "com.google.common.collect.AbstractMapBasedMultiset",
406:       "com.google.common.collect.LinkedHashMultiset",
407:       "com.google.common.collect.ObjectCountHashMap",
408:       "com.google.common.collect.ObjectCountLinkedHashMap",
409:       "com.google.common.collect.AbstractSortedMultiset",
410:       "com.google.common.collect.TreeMultiset",
411:       "com.google.common.collect.GeneralRange",
412:       "com.google.common.collect.TreeMultiset$AvlNode",
413:       "com.google.common.collect.TreeMultiset$Reference",
414:       "com.google.common.collect.TreeMultiset$Aggregate",
415:       "com.google.common.collect.Multisets",
416:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
417:       "com.google.common.collect.Sets$ImprovedAbstractSet",
418:       "com.google.common.collect.Multisets$EntrySet",
419:       "com.google.common.collect.AbstractMultiset$EntrySet",
420:       "com.google.common.collect.TreeMultiset$2",
421:       "com.google.common.base.Suppliers",
422:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
423:       "com.google.common.truth.Platform",
424:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
425:       "com.google.common.collect.ImmutableList$Builder",
426:       "com.google.common.collect.ObjectArrays",
427:       "com.google.common.collect.Sets",
428:       "com.google.common.base.CharMatcher",
429:       "com.google.common.base.CharMatcher$FastMatcher",
430:       "com.google.common.base.CharMatcher$Is",
431:       "com.google.common.base.CharMatcher$InRange",
432:       "com.google.common.base.CaseFormat",
433:       "com.google.common.base.Ascii",
434:       "com.google.common.collect.ConcurrentHashMultiset",
435:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
436:       "com.google.common.collect.AbstractIterator",
437:       "com.google.common.collect.ConcurrentHashMultiset$2",
438:       "com.google.common.collect.AbstractIterator$State",
439:       "com.google.common.collect.ForwardingObject",
440:       "com.google.common.collect.ForwardingIterator",
441:       "com.google.common.collect.ConcurrentHashMultiset$3",
442:       "com.google.common.collect.AbstractIterator$1",
443:       "com.google.common.base.Strings",
444:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
445:       "com.google.common.collect.Maps",
446:       "com.google.common.truth.Correspondence$FormattingDiffs",
447:       "com.google.common.collect.Lists$OnePlusArrayList",
448:       "com.google.common.truth.LazyMessage",
449:       "com.google.common.truth.StandardSubjectBuilder",
450:       "com.google.common.collect.Iterators",
451:       "com.google.common.truth.Subject$ComparisonResult",
452:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
453:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
454:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
455:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
456:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
457:       "com.google.common.truth.ComparableSubject",
458:       "com.google.common.truth.DoubleSubject",
459:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
460:       "com.google.common.collect.AbstractMapBasedMultiset$2",
461:       "com.google.common.collect.BaseImmutableMultimap",
462:       "com.google.common.collect.ImmutableMultimap",
463:       "com.google.common.collect.ImmutableSetMultimap",
464:       "com.google.common.collect.ImmutableMultimap$Builder",
465:       "com.google.common.collect.ImmutableSetMultimap$Builder",
466:       "com.google.common.collect.CompactHashMap$EntrySetView",
467:       "com.google.common.collect.ImmutableMap",
468:       "com.google.common.collect.RegularImmutableMap",
469:       "com.google.common.collect.RegularImmutableSet",
470:       "com.google.common.collect.EmptyImmutableSetMultimap",
471:       "com.google.common.base.Joiner",
472:       "com.google.common.base.Joiner$1",
473:       "com.google.common.truth.Correspondence$StoredException",
474:       "com.google.common.collect.Multisets$AbstractEntry",
475:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
476:       "com.google.common.collect.RegularImmutableMultiset",
477:       "com.google.common.collect.IndexedImmutableSet",
478:       "com.google.common.collect.ImmutableMultiset$EntrySet",
479:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
480:       "com.google.common.collect.ImmutableMultimap$1",
481:       "com.google.common.collect.RegularImmutableMap$EntrySet",
482:       "com.google.common.collect.CompactHashSet",
483:       "com.google.common.collect.ImmutableMap$Builder",
484:       "com.google.common.collect.CompactHashMap$Itr",
485:       "com.google.common.collect.CompactHashMap$2",
486:       "com.google.common.collect.AbstractMapEntry",
487:       "com.google.common.collect.CompactHashMap$MapEntry",
488:       "com.google.common.collect.Multisets$ImmutableEntry",
489:       "com.google.common.collect.NullnessCasts",
490:       "com.google.common.base.Converter$1",
491:       "com.google.common.base.NullnessCasts",
492:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
493:       "com.google.common.base.Present",
494:       "com.google.common.base.Equivalence",
495:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
496:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
497:       "com.google.common.base.Equivalence$Wrapper",
498:       "com.google.common.collect.FluentIterable",
499:       "com.google.common.collect.Iterables$5",
500:       "com.google.common.collect.TransformedIterator",
501:       "com.google.common.collect.Iterators$6",
502:       "com.google.common.collect.HashMultiset",
503:       "com.google.common.base.Converter$ReverseConverter",
504:       "com.google.common.collect.SingletonImmutableSet",
505:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
506:       "com.google.common.collect.LinkedListMultimap",
507:       "com.google.common.collect.Multisets$ElementSet",
508:       "com.google.common.collect.SortedMultisets$ElementSet",
509:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
510:       "com.google.common.collect.LinkedListMultimap$Node",
511:       "com.google.common.collect.LinkedListMultimap$KeyList",
512:       "com.google.common.collect.RegularImmutableList",
513:       "com.google.common.base.Throwables",
514:       "com.google.common.math.IntMath",
515:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
516:       "com.google.common.collect.FluentIterable$3",
517:       "com.google.common.collect.FluentIterable$3$1",
518:       "com.google.common.collect.Iterators$ConcatenatedIterator",
519:       "com.google.common.collect.Iterators$ArrayItr",
520:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
521:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
522:       "com.google.common.truth.Subject$EqualityCheck",
523:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
524:       "com.google.common.collect.RegularImmutableMap$KeySet",
525:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
526:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
527:       "com.google.common.truth.GraphMatching",
528:       "com.google.common.truth.GraphMatching$HopcroftKarp",
529:       "com.google.common.collect.HashBiMap",
530:       "com.google.common.collect.ImmutableBiMap",
531:       "com.google.common.collect.HashBiMap$View",
532:       "com.google.common.collect.HashBiMap$EntrySet",
533:       "com.google.common.collect.ImmutableBiMap$Builder",
534:       "com.google.common.collect.HashBiMap$View$1",
535:       "com.google.common.collect.RegularImmutableBiMap",
536:       "com.google.common.collect.Iterators$SingletonIterator",
537:       "com.google.common.collect.ImmutableEntry",
538:       "com.google.common.base.MoreObjects",
539:       "com.google.common.collect.HashBiMap$EntryForKey",
540:       "com.google.common.collect.HashBiMap$Inverse",
541:       "com.google.common.collect.LinkedListMultimap$1",
542:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
543:     );
544:   }
545: }

[MASTER] 16:15:00.882 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
ConcurrentHashMultiset<Object> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<?>) linkedHashSet0);
Object object0 = iterableSubject0.actual();
concurrentHashMultiset0.add(object0);
iterableSubject0.isNotIn(concurrentHashMultiset0);

[MASTER] 16:15:00.909 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_62_1731035700883/com/google/common/truth/IterableSubject_62_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_62_1731035700883/com/google/common/truth/IterableSubject_62_tmp__ESTest_scaffolding.java]]
[MASTER] 16:15:00.909 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:00.909 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:00.909 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:15:00.909 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 26
[MASTER] 16:15:00.909 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkState
  location: class: 19
[MASTER] 16:15:00.910 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 20
[MASTER] 16:15:00.910 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 19
[MASTER] 16:15:00.910 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static lenientFormat
  location: class: 17
[MASTER] 16:15:00.910 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 18
[MASTER] 16:15:00.910 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 17
[MASTER] 16:15:00.911 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_62_1731035700883/com/google/common/truth/IterableSubject_62_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:15:00 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ConcurrentHashMultiset;
11: import com.google.common.truth.FailureMetadata;
12: import com.google.common.truth.IterableSubject;
13: import java.sql.SQLNonTransientConnectionException;
14: import java.util.ArrayDeque;
15: import java.util.LinkedHashSet;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class IterableSubject_62_tmp__ESTest extends IterableSubject_62_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
26:       ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
27:       ArrayDeque<IterableSubject> arrayDeque0 = new ArrayDeque<IterableSubject>(concurrentHashMultiset0);
28:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, arrayDeque0);
29:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("BD#?x8>0(xm4ARU'h");
30:       iterableSubject0.isNotIn(sQLNonTransientConnectionException0);
31:       assertFalse(arrayDeque0.contains(iterableSubject0));
32:   }
33: }
RegularFileObject[/tmp/EvoSuite_62_1731035700883/com/google/common/truth/IterableSubject_62_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:15:00 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class IterableSubject_62_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_62_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
83:       "com.google.common.collect.Lists$RandomAccessPartition",
84:       "com.google.common.collect.Collections2",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
87:       "com.google.common.truth.SubjectUtils",
88:       "com.google.common.math.IntMath",
89:       "com.google.common.collect.LinkedHashMultiset",
90:       "com.google.common.truth.GraphMatching",
91:       "com.google.common.collect.AbstractMapBasedMultiset$2",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.Sets$1",
96:       "com.google.common.collect.NullsLastOrdering",
97:       "com.google.common.collect.Platform",
98:       "com.google.common.collect.RegularImmutableMap",
99:       "com.google.common.collect.RegularImmutableBiMap",
100:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
101:       "com.google.common.base.Converter$IdentityConverter",
102:       "com.google.common.collect.ImmutableMultimap$Values",
103:       "com.google.common.collect.HashBiMap$Inverse",
104:       "com.google.common.collect.ByFunctionOrdering",
105:       "com.google.common.collect.AbstractMapEntry",
106:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
107:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
108:       "com.google.common.collect.ImmutableBiMap$Builder",
109:       "com.google.common.base.Predicate",
110:       "com.google.common.base.Joiner",
111:       "com.google.common.collect.Iterators$ConcatenatedIterator",
112:       "com.google.common.collect.AbstractListMultimap",
113:       "com.google.common.collect.NullsFirstOrdering",
114:       "com.google.common.truth.Correspondence$BinaryPredicate",
115:       "org.checkerframework.framework.qual.QualifierForLiterals",
116:       "com.google.common.truth.AssertionErrorWithFacts",
117:       "com.google.common.base.Strings",
118:       "com.google.common.truth.IterableSubject$3",
119:       "com.google.common.collect.Lists$Partition",
120:       "com.google.common.collect.AbstractMapBasedMultimap",
121:       "com.google.common.collect.Lists",
122:       "com.google.common.truth.IterableSubject$1",
123:       "com.google.common.collect.Multisets$ImmutableEntry",
124:       "com.google.common.truth.IterableSubject$4",
125:       "com.google.common.collect.UnmodifiableListIterator",
126:       "com.google.common.collect.ImmutableMultimap",
127:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
128:       "com.google.common.collect.ImmutableSortedSet",
129:       "com.google.common.collect.Sets$4",
130:       "com.google.common.base.Absent",
131:       "com.google.common.collect.Maps$BiMapConverter",
132:       "com.google.common.base.Throwables",
133:       "org.checkerframework.framework.qual.SubtypeOf",
134:       "com.google.common.collect.ImmutableSortedSet$Builder",
135:       "com.google.common.base.Equivalence$Equals",
136:       "com.google.common.truth.Correspondence",
137:       "com.google.common.base.ElementTypesAreNonnullByDefault",
138:       "com.google.common.collect.AbstractMultiset$EntrySet",
139:       "com.google.common.base.Equivalence$Wrapper",
140:       "com.google.common.collect.Sets$ImprovedAbstractSet",
141:       "com.google.common.base.Preconditions",
142:       "com.google.common.truth.StandardSubjectBuilder$1",
143:       "com.google.common.collect.ImmutableEntry",
144:       "com.google.common.base.Joiner$1",
145:       "com.google.common.base.Converter$ConverterComposition",
146:       "com.google.common.base.Joiner$2",
147:       "com.google.common.collect.EmptyImmutableSetMultimap",
148:       "com.google.common.collect.HashBiMap$EntrySet",
149:       "com.google.common.collect.ImmutableList$Itr",
150:       "com.google.common.collect.ImmutableCollection",
151:       "com.google.common.collect.ImmutableEnumMap",
152:       "com.google.common.truth.Ordered",
153:       "com.google.common.collect.LinkedListMultimap$KeyList",
154:       "com.google.common.collect.Lists$OnePlusArrayList",
155:       "com.google.common.base.Objects",
156:       "com.google.common.collect.CompactHashMap$Itr",
157:       "com.google.common.collect.ImmutableSetMultimap",
158:       "com.google.common.collect.ImmutableCollection$Builder",
159:       "com.google.common.collect.Iterators$SingletonIterator",
160:       "com.google.common.collect.Iterators$6",
161:       "com.google.common.collect.BiMap",
162:       "com.google.common.collect.Iterators$9",
163:       "com.google.common.collect.ImmutableSet",
164:       "com.google.common.collect.Lists$AbstractListWrapper",
165:       "com.google.common.collect.AbstractMapBasedMultiset",
166:       "com.google.common.collect.Iterators$1",
167:       "com.google.common.collect.CompactHashMap",
168:       "com.google.common.collect.Iterators$4",
169:       "com.google.common.collect.Iterators$5",
170:       "com.google.common.collect.AbstractIterator$State",
171:       "com.google.common.base.Converter$ReverseConverter",
172:       "com.google.common.base.ExtraObjectsMethodsForWeb",
173:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
174:       "com.google.common.truth.Platform",
175:       "com.google.common.collect.Lists$StringAsImmutableList",
176:       "com.google.common.collect.Lists$2",
177:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
178:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
179:       "com.google.common.collect.CompactHashMap$EntrySetView",
180:       "com.google.common.truth.LazyMessage",
181:       "com.google.common.collect.Lists$1",
182:       "com.google.common.collect.ImmutableMultimap$Builder",
183:       "com.google.common.base.Equivalence$Identity",
184:       "com.google.common.truth.Subject$ComparisonResult",
185:       "com.google.common.collect.Multiset",
186:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
187:       "com.google.common.collect.AbstractMultimap",
188:       "com.google.common.base.Supplier",
189:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
190:       "com.google.common.collect.HashBiMap$View",
191:       "com.google.common.truth.IterableSubject$PairwiseChecker",
192:       "com.google.common.collect.ImmutableList",
193:       "com.google.common.collect.ReverseOrdering",
194:       "com.google.common.collect.FluentIterable$1",
195:       "com.google.common.collect.FluentIterable$2",
196:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
197:       "com.google.common.truth.Fact",
198:       "com.google.common.collect.FluentIterable$3",
199:       "org.checkerframework.checker.nullness.qual.Nullable",
200:       "com.google.common.collect.NullnessCasts",
201:       "org.checkerframework.framework.qual.DefaultFor",
202:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
203:       "com.google.common.collect.SortedMultisetBridge",
204:       "com.google.common.collect.ImmutableMap$Builder",
205:       "com.google.common.base.Converter$FunctionBasedConverter",
206:       "com.google.common.collect.HashBiMap",
207:       "com.google.common.collect.Maps$EntryTransformer",
208:       "com.google.common.collect.Ordering",
209:       "com.google.common.collect.FluentIterable$3$1",
210:       "com.google.common.collect.NaturalOrdering",
211:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
212:       "com.google.common.collect.LinkedListMultimap$Node",
213:       "com.google.common.collect.AllEqualOrdering",
214:       "com.google.common.collect.Hashing",
215:       "com.google.common.collect.ImmutableList$SubList",
216:       "com.google.common.collect.ListMultimap",
217:       "com.google.common.base.FunctionalEquivalence",
218:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
219:       "com.google.common.truth.ErrorWithFacts",
220:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
221:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
222:       "com.google.common.collect.RegularImmutableList",
223:       "com.google.common.collect.SortedMultiset",
224:       "com.google.common.truth.IterableSubject",
225:       "com.google.common.collect.FluentIterable",
226:       "com.google.common.base.Optional",
227:       "com.google.common.collect.Lists$TransformingRandomAccessList",
228:       "com.google.common.collect.Iterators$ArrayItr",
229:       "com.google.common.collect.RegularImmutableMap$KeySet",
230:       "com.google.common.collect.AbstractIterator$1",
231:       "com.google.common.collect.BaseImmutableMultimap",
232:       "com.google.common.collect.Multisets",
233:       "com.google.common.collect.CompactHashMap$MapEntry",
234:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
235:       "com.google.common.collect.SortedMapDifference",
236:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
237:       "com.google.common.collect.CompactHashMap$2",
238:       "com.google.common.collect.RegularImmutableSet",
239:       "com.google.common.truth.Subject$EqualityCheck",
240:       "com.google.common.collect.LexicographicalOrdering",
241:       "com.google.common.base.ParametricNullness",
242:       "com.google.common.collect.ImmutableListMultimap",
243:       "com.google.common.collect.ImmutableMultimap$1",
244:       "com.google.common.base.Present",
245:       "com.google.common.collect.ImmutableMultimap$2",
246:       "com.google.common.collect.Iterables",
247:       "com.google.common.collect.LinkedListMultimap$1",
248:       "com.google.common.collect.Sets$SetView",
249:       "com.google.common.collect.ImmutableSet$Builder",
250:       "com.google.common.truth.Correspondence$DiffFormatter",
251:       "com.google.common.collect.SingletonImmutableSet",
252:       "com.google.common.collect.ImmutableSetMultimap$Builder",
253:       "com.google.common.truth.Correspondence$Transforming",
254:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
255:       "com.google.common.collect.ImmutableMultiset",
256:       "com.google.common.truth.Correspondence$ExceptionStore",
257:       "com.google.common.collect.UsingToStringOrdering",
258:       "com.google.common.truth.ComparableSubject",
259:       "com.google.common.collect.Multisets$AbstractEntry",
260:       "com.google.common.collect.ImmutableMultimap$Keys",
261:       "com.google.common.truth.FailureMetadata",
262:       "com.google.common.collect.Lists$TransformingSequentialList",
263:       "com.google.common.primitives.IntsMethodsForWeb",
264:       "com.google.common.collect.ObjectArrays",
265:       "com.google.common.collect.ForwardingIterator",
266:       "com.google.common.collect.AbstractIterator",
267:       "com.google.common.truth.Correspondence$FormattingDiffs",
268:       "com.google.common.truth.Correspondence$Equality",
269:       "com.google.common.base.MoreObjects",
270:       "com.google.common.base.Suppliers$MemoizingSupplier",
271:       "com.google.common.collect.MapDifference",
272:       "com.google.common.collect.ObjectCountLinkedHashMap",
273:       "com.google.common.collect.ConcurrentHashMultiset$2",
274:       "com.google.common.collect.ConcurrentHashMultiset",
275:       "com.google.common.collect.SortedIterable",
276:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
277:       "com.google.common.collect.ConcurrentHashMultiset$3",
278:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
279:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
280:       "com.google.common.collect.UnmodifiableIterator",
281:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
282:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
283:       "com.google.common.collect.ImmutableEnumSet",
284:       "com.google.common.collect.Lists$RandomAccessListWrapper",
285:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
286:       "com.google.common.collect.HashBiMap$View$1",
287:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
288:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
289:       "com.google.common.base.Converter",
290:       "com.google.common.collect.LinkedListMultimap",
291:       "com.google.common.collect.Maps$8",
292:       "com.google.common.base.Function",
293:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
294:       "com.google.common.collect.ImmutableMap",
295:       "com.google.common.collect.ComparatorOrdering",
296:       "com.google.common.collect.AbstractIndexedListIterator",
297:       "com.google.common.collect.HashBiMap$EntryForKey",
298:       "com.google.common.collect.CollectPreconditions",
299:       "com.google.common.collect.Multiset$Entry",
300:       "com.google.common.truth.Subject",
301:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
302:       "com.google.common.collect.Sets",
303:       "com.google.common.collect.ObjectCountHashMap",
304:       "com.google.common.collect.BoundType",
305:       "com.google.common.collect.ExplicitOrdering",
306:       "com.google.common.collect.CompactHashSet",
307:       "com.google.common.collect.ImmutableList$Builder",
308:       "com.google.common.collect.ImmutableMap$1",
309:       "com.google.common.collect.Iterables$5",
310:       "com.google.common.collect.ForwardingObject",
311:       "com.google.common.collect.AbstractMultiset",
312:       "com.google.common.collect.Multimap",
313:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
314:       "com.google.common.collect.Iterators",
315:       "com.google.common.collect.CompoundOrdering",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
318:       "com.google.common.base.PairwiseEquivalence",
319:       "com.google.common.collect.Multisets$EntrySet",
320:       "com.google.common.collect.CompactHashing",
321:       "com.google.common.base.Suppliers",
322:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
323:       "com.google.common.collect.RegularImmutableMap$EntrySet",
324:       "com.google.common.base.Equivalence",
325:       "com.google.common.collect.ReverseNaturalOrdering",
326:       "com.google.common.truth.StandardSubjectBuilder",
327:       "com.google.common.primitives.Ints",
328:       "com.google.common.collect.Maps",
329:       "com.google.common.collect.SetMultimap",
330:       "com.google.common.collect.TransformedIterator",
331:       "com.google.common.truth.GraphMatching$HopcroftKarp",
332:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
333:       "com.google.common.collect.Iterators$MergingIterator",
334:       "com.google.common.truth.Correspondence$StoredException",
335:       "com.google.common.collect.RegularImmutableSortedSet"
336:     );
337:   } 
338: 
339:   private static void resetClasses() {
340:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_62_tmp__ESTest_scaffolding.class.getClassLoader()); 
341: 
342:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
343:       "com.google.common.truth.Subject",
344:       "com.google.common.truth.IterableSubject",
345:       "com.google.common.truth.IterableSubject$2",
346:       "com.google.common.truth.IterableSubject$1",
347:       "com.google.common.truth.IterableSubject$3",
348:       "com.google.common.truth.IterableSubject$4",
349:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
350:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
351:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
352:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
353:       "com.google.common.base.Optional",
354:       "com.google.common.base.Absent",
355:       "com.google.common.collect.ImmutableCollection",
356:       "com.google.common.collect.UnmodifiableIterator",
357:       "com.google.common.collect.UnmodifiableListIterator",
358:       "com.google.common.collect.AbstractIndexedListIterator",
359:       "com.google.common.collect.ImmutableList$Itr",
360:       "com.google.common.collect.ImmutableList",
361:       "com.google.common.collect.Ordering",
362:       "com.google.common.collect.NaturalOrdering",
363:       "com.google.common.truth.Correspondence",
364:       "com.google.common.truth.Correspondence$Equality",
365:       "com.google.common.truth.FailureMetadata",
366:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
367:       "com.google.common.collect.ImmutableMultiset",
368:       "com.google.common.collect.ImmutableSortedMultiset",
369:       "com.google.common.base.Preconditions",
370:       "com.google.common.collect.ImmutableCollection$Builder",
371:       "com.google.common.collect.ImmutableMultiset$Builder",
372:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
373:       "com.google.common.collect.ImmutableSet",
374:       "com.google.common.collect.ImmutableSortedSet",
375:       "com.google.common.collect.RegularImmutableSortedSet",
376:       "com.google.common.collect.RegularImmutableSortedMultiset",
377:       "com.google.common.base.Converter",
378:       "com.google.common.base.Converter$FunctionBasedConverter",
379:       "com.google.common.base.Converter$IdentityConverter",
380:       "com.google.common.base.Converter$ConverterComposition",
381:       "com.google.common.truth.Correspondence$Transforming",
382:       "com.google.common.base.Functions",
383:       "com.google.common.base.Functions$IdentityFunction",
384:       "com.google.common.truth.Correspondence$ExceptionStore",
385:       "com.google.common.truth.SubjectUtils",
386:       "com.google.common.collect.Lists",
387:       "com.google.common.collect.Iterables",
388:       "com.google.common.collect.AbstractMultimap",
389:       "com.google.common.collect.AbstractMapBasedMultimap",
390:       "com.google.common.collect.AbstractListMultimap",
391:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
392:       "com.google.common.collect.ArrayListMultimap",
393:       "com.google.common.collect.Platform",
394:       "com.google.common.collect.CompactHashMap",
395:       "com.google.common.primitives.IntsMethodsForWeb",
396:       "com.google.common.primitives.Ints",
397:       "com.google.common.collect.CollectPreconditions",
398:       "com.google.common.collect.CompactHashing",
399:       "com.google.common.collect.Hashing",
400:       "com.google.common.base.ExtraObjectsMethodsForWeb",
401:       "com.google.common.base.Objects",
402:       "com.google.common.truth.Fact",
403:       "com.google.common.collect.Collections2",
404:       "com.google.common.collect.AbstractMultiset",
405:       "com.google.common.collect.AbstractMapBasedMultiset",
406:       "com.google.common.collect.LinkedHashMultiset",
407:       "com.google.common.collect.ObjectCountHashMap",
408:       "com.google.common.collect.ObjectCountLinkedHashMap",
409:       "com.google.common.collect.AbstractSortedMultiset",
410:       "com.google.common.collect.TreeMultiset",
411:       "com.google.common.collect.GeneralRange",
412:       "com.google.common.collect.TreeMultiset$AvlNode",
413:       "com.google.common.collect.TreeMultiset$Reference",
414:       "com.google.common.collect.TreeMultiset$Aggregate",
415:       "com.google.common.collect.Multisets",
416:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
417:       "com.google.common.collect.Sets$ImprovedAbstractSet",
418:       "com.google.common.collect.Multisets$EntrySet",
419:       "com.google.common.collect.AbstractMultiset$EntrySet",
420:       "com.google.common.collect.TreeMultiset$2",
421:       "com.google.common.base.Suppliers",
422:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
423:       "com.google.common.truth.Platform",
424:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
425:       "com.google.common.collect.ImmutableList$Builder",
426:       "com.google.common.collect.ObjectArrays",
427:       "com.google.common.collect.Sets",
428:       "com.google.common.base.CharMatcher",
429:       "com.google.common.base.CharMatcher$FastMatcher",
430:       "com.google.common.base.CharMatcher$Is",
431:       "com.google.common.base.CharMatcher$InRange",
432:       "com.google.common.base.CaseFormat",
433:       "com.google.common.base.Ascii",
434:       "com.google.common.collect.ConcurrentHashMultiset",
435:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
436:       "com.google.common.collect.AbstractIterator",
437:       "com.google.common.collect.ConcurrentHashMultiset$2",
438:       "com.google.common.collect.AbstractIterator$State",
439:       "com.google.common.collect.ForwardingObject",
440:       "com.google.common.collect.ForwardingIterator",
441:       "com.google.common.collect.ConcurrentHashMultiset$3",
442:       "com.google.common.collect.AbstractIterator$1",
443:       "com.google.common.base.Strings",
444:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
445:       "com.google.common.collect.Maps",
446:       "com.google.common.truth.Correspondence$FormattingDiffs",
447:       "com.google.common.collect.Lists$OnePlusArrayList",
448:       "com.google.common.truth.LazyMessage",
449:       "com.google.common.truth.StandardSubjectBuilder",
450:       "com.google.common.collect.Iterators",
451:       "com.google.common.truth.Subject$ComparisonResult",
452:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
453:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
454:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
455:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
456:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
457:       "com.google.common.truth.ComparableSubject",
458:       "com.google.common.truth.DoubleSubject",
459:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
460:       "com.google.common.collect.AbstractMapBasedMultiset$2",
461:       "com.google.common.collect.BaseImmutableMultimap",
462:       "com.google.common.collect.ImmutableMultimap",
463:       "com.google.common.collect.ImmutableSetMultimap",
464:       "com.google.common.collect.ImmutableMultimap$Builder",
465:       "com.google.common.collect.ImmutableSetMultimap$Builder",
466:       "com.google.common.collect.CompactHashMap$EntrySetView",
467:       "com.google.common.collect.ImmutableMap",
468:       "com.google.common.collect.RegularImmutableMap",
469:       "com.google.common.collect.RegularImmutableSet",
470:       "com.google.common.collect.EmptyImmutableSetMultimap",
471:       "com.google.common.base.Joiner",
472:       "com.google.common.base.Joiner$1",
473:       "com.google.common.truth.Correspondence$StoredException",
474:       "com.google.common.collect.Multisets$AbstractEntry",
475:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
476:       "com.google.common.collect.RegularImmutableMultiset",
477:       "com.google.common.collect.IndexedImmutableSet",
478:       "com.google.common.collect.ImmutableMultiset$EntrySet",
479:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
480:       "com.google.common.collect.ImmutableMultimap$1",
481:       "com.google.common.collect.RegularImmutableMap$EntrySet",
482:       "com.google.common.collect.CompactHashSet",
483:       "com.google.common.collect.ImmutableMap$Builder",
484:       "com.google.common.collect.CompactHashMap$Itr",
485:       "com.google.common.collect.CompactHashMap$2",
486:       "com.google.common.collect.AbstractMapEntry",
487:       "com.google.common.collect.CompactHashMap$MapEntry",
488:       "com.google.common.collect.Multisets$ImmutableEntry",
489:       "com.google.common.collect.NullnessCasts",
490:       "com.google.common.base.Converter$1",
491:       "com.google.common.base.NullnessCasts",
492:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
493:       "com.google.common.base.Present",
494:       "com.google.common.base.Equivalence",
495:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
496:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
497:       "com.google.common.base.Equivalence$Wrapper",
498:       "com.google.common.collect.FluentIterable",
499:       "com.google.common.collect.Iterables$5",
500:       "com.google.common.collect.TransformedIterator",
501:       "com.google.common.collect.Iterators$6",
502:       "com.google.common.collect.HashMultiset",
503:       "com.google.common.base.Converter$ReverseConverter",
504:       "com.google.common.collect.SingletonImmutableSet",
505:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
506:       "com.google.common.collect.LinkedListMultimap",
507:       "com.google.common.collect.Multisets$ElementSet",
508:       "com.google.common.collect.SortedMultisets$ElementSet",
509:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
510:       "com.google.common.collect.LinkedListMultimap$Node",
511:       "com.google.common.collect.LinkedListMultimap$KeyList",
512:       "com.google.common.collect.RegularImmutableList",
513:       "com.google.common.base.Throwables",
514:       "com.google.common.math.IntMath",
515:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
516:       "com.google.common.collect.FluentIterable$3",
517:       "com.google.common.collect.FluentIterable$3$1",
518:       "com.google.common.collect.Iterators$ConcatenatedIterator",
519:       "com.google.common.collect.Iterators$ArrayItr",
520:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
521:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
522:       "com.google.common.truth.Subject$EqualityCheck",
523:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
524:       "com.google.common.collect.RegularImmutableMap$KeySet",
525:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
526:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
527:       "com.google.common.truth.GraphMatching",
528:       "com.google.common.truth.GraphMatching$HopcroftKarp",
529:       "com.google.common.collect.HashBiMap",
530:       "com.google.common.collect.ImmutableBiMap",
531:       "com.google.common.collect.HashBiMap$View",
532:       "com.google.common.collect.HashBiMap$EntrySet",
533:       "com.google.common.collect.ImmutableBiMap$Builder",
534:       "com.google.common.collect.HashBiMap$View$1",
535:       "com.google.common.collect.RegularImmutableBiMap",
536:       "com.google.common.collect.Iterators$SingletonIterator",
537:       "com.google.common.collect.ImmutableEntry",
538:       "com.google.common.base.MoreObjects",
539:       "com.google.common.collect.HashBiMap$EntryForKey",
540:       "com.google.common.collect.HashBiMap$Inverse",
541:       "com.google.common.collect.LinkedListMultimap$1",
542:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
543:     );
544:   }
545: }

[MASTER] 16:15:00.914 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
ArrayDeque<IterableSubject> arrayDeque0 = new ArrayDeque<IterableSubject>(concurrentHashMultiset0);
IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, arrayDeque0);
SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("BD#?x8>0(xm4ARU'h");
iterableSubject0.isNotIn(sQLNonTransientConnectionException0);
assertFalse(arrayDeque0.contains(iterableSubject0));


[MASTER] 16:15:01.067 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_68_1731035701025/com/google/common/truth/IterableSubject_68_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_68_1731035701025/com/google/common/truth/IterableSubject_68_tmp__ESTest_scaffolding.java]]
[MASTER] 16:15:01.067 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:01.067 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:01.067 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:15:01.067 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 26
[MASTER] 16:15:01.067 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkState
  location: class: 19
[MASTER] 16:15:01.069 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 20
[MASTER] 16:15:01.069 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 19
[MASTER] 16:15:01.069 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static lenientFormat
  location: class: 17
[MASTER] 16:15:01.069 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkNotNull
  location: class: 18
[MASTER] 16:15:01.069 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   static checkArgument
  location: class: 17
[MASTER] 16:15:01.070 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_68_1731035701025/com/google/common/truth/IterableSubject_68_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:15:01 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ConcurrentHashMultiset;
12: import com.google.common.truth.FailureMetadata;
13: import com.google.common.truth.IterableSubject;
14: import java.util.LinkedHashSet;
15: import java.util.ServiceLoader;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class IterableSubject_68_tmp__ESTest extends IterableSubject_68_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
26:       ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
27:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
28:       Class<Object> class0 = Object.class;
29:       ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
30:       Object object0 = iterableSubject0.actual();
31:       // Undeclared exception!
32:       try { 
33:         iterableSubject0.containsAtLeast(object0, serviceLoader0, (Object[]) null);
34:         fail("Expecting exception: NullPointerException");
35:       
36:       } catch(NullPointerException e) {
37:          //
38:          // no message in exception (getMessage() returned null)
39:          //
40:          verifyException("com.google.common.base.Preconditions", e);
41:       }
42:   }
43: }
RegularFileObject[/tmp/EvoSuite_68_1731035701025/com/google/common/truth/IterableSubject_68_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:15:01 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class IterableSubject_68_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_68_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
83:       "com.google.common.collect.Lists$RandomAccessPartition",
84:       "com.google.common.collect.Collections2",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
87:       "com.google.common.truth.SubjectUtils",
88:       "com.google.common.math.IntMath",
89:       "com.google.common.collect.LinkedHashMultiset",
90:       "com.google.common.truth.GraphMatching",
91:       "com.google.common.collect.AbstractMapBasedMultiset$2",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Sets$3",
94:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
95:       "com.google.common.collect.Sets$1",
96:       "com.google.common.collect.NullsLastOrdering",
97:       "com.google.common.collect.Platform",
98:       "com.google.common.collect.RegularImmutableMap",
99:       "com.google.common.collect.RegularImmutableBiMap",
100:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
101:       "com.google.common.base.Converter$IdentityConverter",
102:       "com.google.common.collect.ImmutableMultimap$Values",
103:       "com.google.common.collect.HashBiMap$Inverse",
104:       "com.google.common.collect.ByFunctionOrdering",
105:       "com.google.common.collect.AbstractMapEntry",
106:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
107:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
108:       "com.google.common.collect.ImmutableBiMap$Builder",
109:       "com.google.common.base.Predicate",
110:       "com.google.common.base.Joiner",
111:       "com.google.common.collect.Iterators$ConcatenatedIterator",
112:       "com.google.common.collect.AbstractListMultimap",
113:       "com.google.common.collect.NullsFirstOrdering",
114:       "com.google.common.truth.Correspondence$BinaryPredicate",
115:       "org.checkerframework.framework.qual.QualifierForLiterals",
116:       "com.google.common.truth.AssertionErrorWithFacts",
117:       "com.google.common.base.Strings",
118:       "com.google.common.truth.IterableSubject$3",
119:       "com.google.common.collect.Lists$Partition",
120:       "com.google.common.collect.AbstractMapBasedMultimap",
121:       "com.google.common.collect.Lists",
122:       "com.google.common.truth.IterableSubject$1",
123:       "com.google.common.collect.Multisets$ImmutableEntry",
124:       "com.google.common.truth.IterableSubject$4",
125:       "com.google.common.collect.UnmodifiableListIterator",
126:       "com.google.common.collect.ImmutableMultimap",
127:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
128:       "com.google.common.collect.ImmutableSortedSet",
129:       "com.google.common.collect.Sets$4",
130:       "com.google.common.base.Absent",
131:       "com.google.common.collect.Maps$BiMapConverter",
132:       "com.google.common.base.Throwables",
133:       "org.checkerframework.framework.qual.SubtypeOf",
134:       "com.google.common.collect.ImmutableSortedSet$Builder",
135:       "com.google.common.base.Equivalence$Equals",
136:       "com.google.common.truth.Correspondence",
137:       "com.google.common.base.ElementTypesAreNonnullByDefault",
138:       "com.google.common.collect.AbstractMultiset$EntrySet",
139:       "com.google.common.base.Equivalence$Wrapper",
140:       "com.google.common.collect.Sets$ImprovedAbstractSet",
141:       "com.google.common.base.Preconditions",
142:       "com.google.common.truth.StandardSubjectBuilder$1",
143:       "com.google.common.collect.ImmutableEntry",
144:       "com.google.common.base.Joiner$1",
145:       "com.google.common.base.Converter$ConverterComposition",
146:       "com.google.common.base.Joiner$2",
147:       "com.google.common.collect.EmptyImmutableSetMultimap",
148:       "com.google.common.collect.HashBiMap$EntrySet",
149:       "com.google.common.collect.ImmutableList$Itr",
150:       "com.google.common.collect.ImmutableCollection",
151:       "com.google.common.collect.ImmutableEnumMap",
152:       "com.google.common.truth.Ordered",
153:       "com.google.common.collect.LinkedListMultimap$KeyList",
154:       "com.google.common.collect.Lists$OnePlusArrayList",
155:       "com.google.common.base.Objects",
156:       "com.google.common.collect.CompactHashMap$Itr",
157:       "com.google.common.collect.ImmutableSetMultimap",
158:       "com.google.common.collect.ImmutableCollection$Builder",
159:       "com.google.common.collect.Iterators$SingletonIterator",
160:       "com.google.common.collect.Iterators$6",
161:       "com.google.common.collect.BiMap",
162:       "com.google.common.collect.Iterators$9",
163:       "com.google.common.collect.ImmutableSet",
164:       "com.google.common.collect.Lists$AbstractListWrapper",
165:       "com.google.common.collect.AbstractMapBasedMultiset",
166:       "com.google.common.collect.Iterators$1",
167:       "com.google.common.collect.CompactHashMap",
168:       "com.google.common.collect.Iterators$4",
169:       "com.google.common.collect.Iterators$5",
170:       "com.google.common.collect.AbstractIterator$State",
171:       "com.google.common.base.Converter$ReverseConverter",
172:       "com.google.common.base.ExtraObjectsMethodsForWeb",
173:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
174:       "com.google.common.truth.Platform",
175:       "com.google.common.collect.Lists$StringAsImmutableList",
176:       "com.google.common.collect.Lists$2",
177:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
178:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
179:       "com.google.common.collect.CompactHashMap$EntrySetView",
180:       "com.google.common.truth.LazyMessage",
181:       "com.google.common.collect.Lists$1",
182:       "com.google.common.collect.ImmutableMultimap$Builder",
183:       "com.google.common.base.Equivalence$Identity",
184:       "com.google.common.truth.Subject$ComparisonResult",
185:       "com.google.common.collect.Multiset",
186:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
187:       "com.google.common.collect.AbstractMultimap",
188:       "com.google.common.base.Supplier",
189:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
190:       "com.google.common.collect.HashBiMap$View",
191:       "com.google.common.truth.IterableSubject$PairwiseChecker",
192:       "com.google.common.collect.ImmutableList",
193:       "com.google.common.collect.ReverseOrdering",
194:       "com.google.common.collect.FluentIterable$1",
195:       "com.google.common.collect.FluentIterable$2",
196:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
197:       "com.google.common.truth.Fact",
198:       "com.google.common.collect.FluentIterable$3",
199:       "org.checkerframework.checker.nullness.qual.Nullable",
200:       "com.google.common.collect.NullnessCasts",
201:       "org.checkerframework.framework.qual.DefaultFor",
202:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
203:       "com.google.common.collect.SortedMultisetBridge",
204:       "com.google.common.collect.ImmutableMap$Builder",
205:       "com.google.common.base.Converter$FunctionBasedConverter",
206:       "com.google.common.collect.HashBiMap",
207:       "com.google.common.collect.Maps$EntryTransformer",
208:       "com.google.common.collect.Ordering",
209:       "com.google.common.collect.FluentIterable$3$1",
210:       "com.google.common.collect.NaturalOrdering",
211:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
212:       "com.google.common.collect.LinkedListMultimap$Node",
213:       "com.google.common.collect.AllEqualOrdering",
214:       "com.google.common.collect.Hashing",
215:       "com.google.common.collect.ImmutableList$SubList",
216:       "com.google.common.collect.ListMultimap",
217:       "com.google.common.base.FunctionalEquivalence",
218:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
219:       "com.google.common.truth.ErrorWithFacts",
220:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
221:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
222:       "com.google.common.collect.RegularImmutableList",
223:       "com.google.common.collect.SortedMultiset",
224:       "com.google.common.truth.IterableSubject",
225:       "com.google.common.collect.FluentIterable",
226:       "com.google.common.base.Optional",
227:       "com.google.common.collect.Lists$TransformingRandomAccessList",
228:       "com.google.common.collect.Iterators$ArrayItr",
229:       "com.google.common.collect.RegularImmutableMap$KeySet",
230:       "com.google.common.collect.AbstractIterator$1",
231:       "com.google.common.collect.BaseImmutableMultimap",
232:       "com.google.common.collect.Multisets",
233:       "com.google.common.collect.CompactHashMap$MapEntry",
234:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
235:       "com.google.common.collect.SortedMapDifference",
236:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
237:       "com.google.common.collect.CompactHashMap$2",
238:       "com.google.common.collect.RegularImmutableSet",
239:       "com.google.common.truth.Subject$EqualityCheck",
240:       "com.google.common.collect.LexicographicalOrdering",
241:       "com.google.common.base.ParametricNullness",
242:       "com.google.common.collect.ImmutableListMultimap",
243:       "com.google.common.collect.ImmutableMultimap$1",
244:       "com.google.common.base.Present",
245:       "com.google.common.collect.ImmutableMultimap$2",
246:       "com.google.common.collect.Iterables",
247:       "com.google.common.collect.LinkedListMultimap$1",
248:       "com.google.common.collect.Sets$SetView",
249:       "com.google.common.collect.ImmutableSet$Builder",
250:       "com.google.common.truth.Correspondence$DiffFormatter",
251:       "com.google.common.collect.SingletonImmutableSet",
252:       "com.google.common.collect.ImmutableSetMultimap$Builder",
253:       "com.google.common.truth.Correspondence$Transforming",
254:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
255:       "com.google.common.collect.ImmutableMultiset",
256:       "com.google.common.truth.Correspondence$ExceptionStore",
257:       "com.google.common.collect.UsingToStringOrdering",
258:       "com.google.common.truth.ComparableSubject",
259:       "com.google.common.collect.Multisets$AbstractEntry",
260:       "com.google.common.collect.ImmutableMultimap$Keys",
261:       "com.google.common.truth.FailureMetadata",
262:       "com.google.common.collect.Lists$TransformingSequentialList",
263:       "com.google.common.primitives.IntsMethodsForWeb",
264:       "com.google.common.collect.ObjectArrays",
265:       "com.google.common.collect.ForwardingIterator",
266:       "com.google.common.collect.AbstractIterator",
267:       "com.google.common.truth.Correspondence$FormattingDiffs",
268:       "com.google.common.truth.Correspondence$Equality",
269:       "com.google.common.base.MoreObjects",
270:       "com.google.common.base.Suppliers$MemoizingSupplier",
271:       "com.google.common.collect.MapDifference",
272:       "com.google.common.collect.ObjectCountLinkedHashMap",
273:       "com.google.common.collect.ConcurrentHashMultiset$2",
274:       "com.google.common.collect.ConcurrentHashMultiset",
275:       "com.google.common.collect.SortedIterable",
276:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
277:       "com.google.common.collect.ConcurrentHashMultiset$3",
278:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
279:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
280:       "com.google.common.collect.UnmodifiableIterator",
281:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
282:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
283:       "com.google.common.collect.ImmutableEnumSet",
284:       "com.google.common.collect.Lists$RandomAccessListWrapper",
285:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
286:       "com.google.common.collect.HashBiMap$View$1",
287:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
288:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
289:       "com.google.common.base.Converter",
290:       "com.google.common.collect.LinkedListMultimap",
291:       "com.google.common.collect.Maps$8",
292:       "com.google.common.base.Function",
293:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
294:       "com.google.common.collect.ImmutableMap",
295:       "com.google.common.collect.ComparatorOrdering",
296:       "com.google.common.collect.AbstractIndexedListIterator",
297:       "com.google.common.collect.HashBiMap$EntryForKey",
298:       "com.google.common.collect.CollectPreconditions",
299:       "com.google.common.collect.Multiset$Entry",
300:       "com.google.common.truth.Subject",
301:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
302:       "com.google.common.collect.Sets",
303:       "com.google.common.collect.ObjectCountHashMap",
304:       "com.google.common.collect.BoundType",
305:       "com.google.common.collect.ExplicitOrdering",
306:       "com.google.common.collect.CompactHashSet",
307:       "com.google.common.collect.ImmutableList$Builder",
308:       "com.google.common.collect.ImmutableMap$1",
309:       "com.google.common.collect.Iterables$5",
310:       "com.google.common.collect.ForwardingObject",
311:       "com.google.common.collect.AbstractMultiset",
312:       "com.google.common.collect.Multimap",
313:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
314:       "com.google.common.collect.Iterators",
315:       "com.google.common.collect.CompoundOrdering",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
318:       "com.google.common.base.PairwiseEquivalence",
319:       "com.google.common.collect.Multisets$EntrySet",
320:       "com.google.common.collect.CompactHashing",
321:       "com.google.common.base.Suppliers",
322:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
323:       "com.google.common.collect.RegularImmutableMap$EntrySet",
324:       "com.google.common.base.Equivalence",
325:       "com.google.common.collect.ReverseNaturalOrdering",
326:       "com.google.common.truth.StandardSubjectBuilder",
327:       "com.google.common.primitives.Ints",
328:       "com.google.common.collect.Maps",
329:       "com.google.common.collect.SetMultimap",
330:       "com.google.common.collect.TransformedIterator",
331:       "com.google.common.truth.GraphMatching$HopcroftKarp",
332:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
333:       "com.google.common.collect.Iterators$MergingIterator",
334:       "com.google.common.truth.Correspondence$StoredException",
335:       "com.google.common.collect.RegularImmutableSortedSet"
336:     );
337:   } 
338: 
339:   private static void resetClasses() {
340:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_68_tmp__ESTest_scaffolding.class.getClassLoader()); 
341: 
342:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
343:       "com.google.common.truth.Subject",
344:       "com.google.common.truth.IterableSubject",
345:       "com.google.common.truth.IterableSubject$2",
346:       "com.google.common.truth.IterableSubject$1",
347:       "com.google.common.truth.IterableSubject$3",
348:       "com.google.common.truth.IterableSubject$4",
349:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
350:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
351:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
352:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
353:       "com.google.common.base.Optional",
354:       "com.google.common.base.Absent",
355:       "com.google.common.collect.ImmutableCollection",
356:       "com.google.common.collect.UnmodifiableIterator",
357:       "com.google.common.collect.UnmodifiableListIterator",
358:       "com.google.common.collect.AbstractIndexedListIterator",
359:       "com.google.common.collect.ImmutableList$Itr",
360:       "com.google.common.collect.ImmutableList",
361:       "com.google.common.collect.Ordering",
362:       "com.google.common.collect.NaturalOrdering",
363:       "com.google.common.truth.Correspondence",
364:       "com.google.common.truth.Correspondence$Equality",
365:       "com.google.common.truth.FailureMetadata",
366:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
367:       "com.google.common.collect.ImmutableMultiset",
368:       "com.google.common.collect.ImmutableSortedMultiset",
369:       "com.google.common.base.Preconditions",
370:       "com.google.common.collect.ImmutableCollection$Builder",
371:       "com.google.common.collect.ImmutableMultiset$Builder",
372:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
373:       "com.google.common.collect.ImmutableSet",
374:       "com.google.common.collect.ImmutableSortedSet",
375:       "com.google.common.collect.RegularImmutableSortedSet",
376:       "com.google.common.collect.RegularImmutableSortedMultiset",
377:       "com.google.common.base.Converter",
378:       "com.google.common.base.Converter$FunctionBasedConverter",
379:       "com.google.common.base.Converter$IdentityConverter",
380:       "com.google.common.base.Converter$ConverterComposition",
381:       "com.google.common.truth.Correspondence$Transforming",
382:       "com.google.common.base.Functions",
383:       "com.google.common.base.Functions$IdentityFunction",
384:       "com.google.common.truth.Correspondence$ExceptionStore",
385:       "com.google.common.truth.SubjectUtils",
386:       "com.google.common.collect.Lists",
387:       "com.google.common.collect.Iterables",
388:       "com.google.common.collect.AbstractMultimap",
389:       "com.google.common.collect.AbstractMapBasedMultimap",
390:       "com.google.common.collect.AbstractListMultimap",
391:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
392:       "com.google.common.collect.ArrayListMultimap",
393:       "com.google.common.collect.Platform",
394:       "com.google.common.collect.CompactHashMap",
395:       "com.google.common.primitives.IntsMethodsForWeb",
396:       "com.google.common.primitives.Ints",
397:       "com.google.common.collect.CollectPreconditions",
398:       "com.google.common.collect.CompactHashing",
399:       "com.google.common.collect.Hashing",
400:       "com.google.common.base.ExtraObjectsMethodsForWeb",
401:       "com.google.common.base.Objects",
402:       "com.google.common.truth.Fact",
403:       "com.google.common.collect.Collections2",
404:       "com.google.common.collect.AbstractMultiset",
405:       "com.google.common.collect.AbstractMapBasedMultiset",
406:       "com.google.common.collect.LinkedHashMultiset",
407:       "com.google.common.collect.ObjectCountHashMap",
408:       "com.google.common.collect.ObjectCountLinkedHashMap",
409:       "com.google.common.collect.AbstractSortedMultiset",
410:       "com.google.common.collect.TreeMultiset",
411:       "com.google.common.collect.GeneralRange",
412:       "com.google.common.collect.TreeMultiset$AvlNode",
413:       "com.google.common.collect.TreeMultiset$Reference",
414:       "com.google.common.collect.TreeMultiset$Aggregate",
415:       "com.google.common.collect.Multisets",
416:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
417:       "com.google.common.collect.Sets$ImprovedAbstractSet",
418:       "com.google.common.collect.Multisets$EntrySet",
419:       "com.google.common.collect.AbstractMultiset$EntrySet",
420:       "com.google.common.collect.TreeMultiset$2",
421:       "com.google.common.base.Suppliers",
422:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
423:       "com.google.common.truth.Platform",
424:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
425:       "com.google.common.collect.ImmutableList$Builder",
426:       "com.google.common.collect.ObjectArrays",
427:       "com.google.common.collect.Sets",
428:       "com.google.common.base.CharMatcher",
429:       "com.google.common.base.CharMatcher$FastMatcher",
430:       "com.google.common.base.CharMatcher$Is",
431:       "com.google.common.base.CharMatcher$InRange",
432:       "com.google.common.base.CaseFormat",
433:       "com.google.common.base.Ascii",
434:       "com.google.common.collect.ConcurrentHashMultiset",
435:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
436:       "com.google.common.collect.AbstractIterator",
437:       "com.google.common.collect.ConcurrentHashMultiset$2",
438:       "com.google.common.collect.AbstractIterator$State",
439:       "com.google.common.collect.ForwardingObject",
440:       "com.google.common.collect.ForwardingIterator",
441:       "com.google.common.collect.ConcurrentHashMultiset$3",
442:       "com.google.common.collect.AbstractIterator$1",
443:       "com.google.common.base.Strings",
444:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
445:       "com.google.common.collect.Maps",
446:       "com.google.common.truth.Correspondence$FormattingDiffs",
447:       "com.google.common.collect.Lists$OnePlusArrayList",
448:       "com.google.common.truth.LazyMessage",
449:       "com.google.common.truth.StandardSubjectBuilder",
450:       "com.google.common.collect.Iterators",
451:       "com.google.common.truth.Subject$ComparisonResult",
452:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
453:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
454:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
455:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
456:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
457:       "com.google.common.truth.ComparableSubject",
458:       "com.google.common.truth.DoubleSubject",
459:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
460:       "com.google.common.collect.AbstractMapBasedMultiset$2",
461:       "com.google.common.collect.BaseImmutableMultimap",
462:       "com.google.common.collect.ImmutableMultimap",
463:       "com.google.common.collect.ImmutableSetMultimap",
464:       "com.google.common.collect.ImmutableMultimap$Builder",
465:       "com.google.common.collect.ImmutableSetMultimap$Builder",
466:       "com.google.common.collect.CompactHashMap$EntrySetView",
467:       "com.google.common.collect.ImmutableMap",
468:       "com.google.common.collect.RegularImmutableMap",
469:       "com.google.common.collect.RegularImmutableSet",
470:       "com.google.common.collect.EmptyImmutableSetMultimap",
471:       "com.google.common.base.Joiner",
472:       "com.google.common.base.Joiner$1",
473:       "com.google.common.truth.Correspondence$StoredException",
474:       "com.google.common.collect.Multisets$AbstractEntry",
475:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
476:       "com.google.common.collect.RegularImmutableMultiset",
477:       "com.google.common.collect.IndexedImmutableSet",
478:       "com.google.common.collect.ImmutableMultiset$EntrySet",
479:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
480:       "com.google.common.collect.ImmutableMultimap$1",
481:       "com.google.common.collect.RegularImmutableMap$EntrySet",
482:       "com.google.common.collect.CompactHashSet",
483:       "com.google.common.collect.ImmutableMap$Builder",
484:       "com.google.common.collect.CompactHashMap$Itr",
485:       "com.google.common.collect.CompactHashMap$2",
486:       "com.google.common.collect.AbstractMapEntry",
487:       "com.google.common.collect.CompactHashMap$MapEntry",
488:       "com.google.common.collect.Multisets$ImmutableEntry",
489:       "com.google.common.collect.NullnessCasts",
490:       "com.google.common.base.Converter$1",
491:       "com.google.common.base.NullnessCasts",
492:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
493:       "com.google.common.base.Present",
494:       "com.google.common.base.Equivalence",
495:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
496:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
497:       "com.google.common.base.Equivalence$Wrapper",
498:       "com.google.common.collect.FluentIterable",
499:       "com.google.common.collect.Iterables$5",
500:       "com.google.common.collect.TransformedIterator",
501:       "com.google.common.collect.Iterators$6",
502:       "com.google.common.collect.HashMultiset",
503:       "com.google.common.base.Converter$ReverseConverter",
504:       "com.google.common.collect.SingletonImmutableSet",
505:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
506:       "com.google.common.collect.LinkedListMultimap",
507:       "com.google.common.collect.Multisets$ElementSet",
508:       "com.google.common.collect.SortedMultisets$ElementSet",
509:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
510:       "com.google.common.collect.LinkedListMultimap$Node",
511:       "com.google.common.collect.LinkedListMultimap$KeyList",
512:       "com.google.common.collect.RegularImmutableList",
513:       "com.google.common.base.Throwables",
514:       "com.google.common.math.IntMath",
515:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
516:       "com.google.common.collect.FluentIterable$3",
517:       "com.google.common.collect.FluentIterable$3$1",
518:       "com.google.common.collect.Iterators$ConcatenatedIterator",
519:       "com.google.common.collect.Iterators$ArrayItr",
520:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
521:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
522:       "com.google.common.truth.Subject$EqualityCheck",
523:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
524:       "com.google.common.collect.RegularImmutableMap$KeySet",
525:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
526:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
527:       "com.google.common.truth.GraphMatching",
528:       "com.google.common.truth.GraphMatching$HopcroftKarp",
529:       "com.google.common.collect.HashBiMap",
530:       "com.google.common.collect.ImmutableBiMap",
531:       "com.google.common.collect.HashBiMap$View",
532:       "com.google.common.collect.HashBiMap$EntrySet",
533:       "com.google.common.collect.ImmutableBiMap$Builder",
534:       "com.google.common.collect.HashBiMap$View$1",
535:       "com.google.common.collect.RegularImmutableBiMap",
536:       "com.google.common.collect.Iterators$SingletonIterator",
537:       "com.google.common.collect.ImmutableEntry",
538:       "com.google.common.base.MoreObjects",
539:       "com.google.common.collect.HashBiMap$EntryForKey",
540:       "com.google.common.collect.HashBiMap$Inverse",
541:       "com.google.common.collect.LinkedListMultimap$1",
542:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
543:     );
544:   }
545: }

[MASTER] 16:15:01.071 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
ConcurrentHashMultiset<IterableSubject> concurrentHashMultiset0 = ConcurrentHashMultiset.create((Iterable<? extends IterableSubject>) linkedHashSet0);
IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, concurrentHashMultiset0);
Class<Object> class0 = Object.class;
ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
Object object0 = iterableSubject0.actual();
iterableSubject0.containsAtLeast(object0, serviceLoader0, (Object[]) null);

[MASTER] 16:15:25.538 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_174_1731035725315/com/google/common/truth/IterableSubject_174_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_174_1731035725315/com/google/common/truth/IterableSubject_174_tmp__ESTest_scaffolding.java]]
[MASTER] 16:15:25.538 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:25.538 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:25.539 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:15:25.539 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 27
[MASTER] 16:15:25.541 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 16:15:25.541 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_174_1731035725315/com/google/common/truth/IterableSubject_174_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:15:25 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import com.google.common.base.Converter;
13: import com.google.common.base.Function;
14: import com.google.common.collect.BoundType;
15: import com.google.common.truth.Correspondence;
16: import com.google.common.truth.Fact;
17: import com.google.common.truth.FailureMetadata;
18: import com.google.common.truth.IterableSubject;
19: import com.google.common.truth.Ordered;
20: import java.sql.BatchUpdateException;
21: import java.sql.SQLInvalidAuthorizationSpecException;
22: import java.sql.SQLNonTransientConnectionException;
23: import java.sql.SQLNonTransientException;
24: import java.sql.SQLTransientConnectionException;
25: import java.util.Comparator;
26: import java.util.EnumSet;
27: import java.util.HashSet;
28: import java.util.LinkedHashSet;
29: import java.util.Locale;
30: import java.util.Map;
31: import java.util.NavigableSet;
32: import java.util.PriorityQueue;
33: import java.util.Stack;
34: import java.util.TreeMap;
35: import java.util.Vector;
36: import java.util.concurrent.ConcurrentSkipListMap;
37: import org.evosuite.runtime.EvoRunner;
38: import org.evosuite.runtime.EvoRunnerParameters;
39: import org.evosuite.runtime.ViolatedAssumptionAnswer;
40: import org.evosuite.runtime.mock.java.lang.MockException;
41: import org.evosuite.runtime.mock.java.lang.MockThrowable;
42: import org.junit.runner.RunWith;
43: 
44: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
45: public class IterableSubject_174_tmp__ESTest extends IterableSubject_174_tmp__ESTest_scaffolding {
46: 
47:   @Test(timeout = 4000)
48:   public void test00()  throws Throwable  {
49:       Stack<Fact> stack0 = new Stack<Fact>();
50:       stack0.add((Fact) null);
51:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
52:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
53:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super String>) correspondence0);
54:       Function<SQLNonTransientConnectionException, Locale.Category> function0 = (Function<SQLNonTransientConnectionException, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
55:       Function<Locale.Category, SQLNonTransientConnectionException> function1 = (Function<Locale.Category, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
56:       Converter<SQLNonTransientConnectionException, Locale.Category> converter0 = Converter.from((Function<? super SQLNonTransientConnectionException, ? extends Locale.Category>) function0, (Function<? super Locale.Category, ? extends SQLNonTransientConnectionException>) function1);
57:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
58:       Function<String, SQLNonTransientConnectionException> function2 = (Function<String, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
59:       doReturn(sQLNonTransientConnectionException0).when(function2).apply(anyString());
60:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter0, (Function<? super String, ?>) function2);
61:       // Undeclared exception!
62:       try { 
63:         iterableSubject_UsingCorrespondence1.contains("}.}$4[Hj*zz");
64:         fail("Expecting exception: NullPointerException");
65:       
66:       } catch(NullPointerException e) {
67:          //
68:          // no message in exception (getMessage() returned null)
69:          //
70:          verifyException("com.google.common.base.Preconditions", e);
71:       }
72:   }
73: 
74:   @Test(timeout = 4000)
75:   public void test01()  throws Throwable  {
76:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
77:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
78:       iterableSubject0.isInOrder();
79:   }
80: 
81:   @Test(timeout = 4000)
82:   public void test02()  throws Throwable  {
83:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
84:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
85:       linkedHashSet0.add("]zU(@TF1JK");
86:       // Undeclared exception!
87:       try { 
88:         iterableSubject0.containsNoneIn((Iterable<?>) linkedHashSet0);
89:         fail("Expecting exception: NullPointerException");
90:       
91:       } catch(NullPointerException e) {
92:          //
93:          // no message in exception (getMessage() returned null)
94:          //
95:          verifyException("com.google.common.base.Preconditions", e);
96:       }
97:   }
98: 
99:   @Test(timeout = 4000)
100:   public void test03()  throws Throwable  {
101:       Stack<Fact> stack0 = new Stack<Fact>();
102:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
103:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
104:       linkedHashSet0.add("O:h$*z");
105:       // Undeclared exception!
106:       try { 
107:         iterableSubject0.containsAtLeastElementsIn((Iterable<?>) linkedHashSet0);
108:         fail("Expecting exception: NullPointerException");
109:       
110:       } catch(NullPointerException e) {
111:          //
112:          // no message in exception (getMessage() returned null)
113:          //
114:          verifyException("com.google.common.base.Preconditions", e);
115:       }
116:   }
117: 
118:   @Test(timeout = 4000)
119:   public void test04()  throws Throwable  {
120:       Stack<Fact> stack0 = new Stack<Fact>();
121:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
122:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
123:       IterableSubject.UsingCorrespondence<String, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<String, String>(iterableSubject0, correspondence0);
124:       IterableSubject.UsingCorrespondence<String, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super String, ? super Object>) correspondence0);
125:       // Undeclared exception!
126:       try { 
127:         iterableSubject0.containsAtLeast(iterableSubject_UsingCorrespondence0, iterableSubject_UsingCorrespondence1, (Object[]) null);
128:         fail("Expecting exception: UnsupportedOperationException");
129:       
130:       } catch(UnsupportedOperationException e) {
131:          //
132:          // UsingCorrespondence.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
133:          //
134:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
135:       }
136:   }
137: 
138:   @Test(timeout = 4000)
139:   public void test05()  throws Throwable  {
140:       HashSet<String> hashSet0 = new HashSet<String>();
141:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
142:       Object[] objectArray0 = new Object[1];
143:       iterableSubject0.containsNoneIn(objectArray0);
144:       assertEquals(1, objectArray0.length);
145:   }
146: 
147:   @Test(timeout = 4000)
148:   public void test06()  throws Throwable  {
149:       Stack<Fact> stack0 = new Stack<Fact>();
150:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
151:       Object[] objectArray0 = new Object[0];
152:       Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn(objectArray0);
153:       assertNotNull(ordered0);
154:   }
155: 
156:   @Test(timeout = 4000)
157:   public void test07()  throws Throwable  {
158:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
159:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
160:       Object[] objectArray0 = new Object[1];
161:       // Undeclared exception!
162:       try { 
163:         iterableSubject0.containsAnyIn(objectArray0);
164:         fail("Expecting exception: NullPointerException");
165:       
166:       } catch(NullPointerException e) {
167:          //
168:          // no message in exception (getMessage() returned null)
169:          //
170:          verifyException("com.google.common.base.Preconditions", e);
171:       }
172:   }
173: 
174:   @Test(timeout = 4000)
175:   public void test08()  throws Throwable  {
176:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
177:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
178:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
179:       iterableSubject0.containsAnyOf(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, throwableArray0);
180:       assertNull(sQLNonTransientConnectionException0.getSQLState());
181:   }
182: 
183:   @Test(timeout = 4000)
184:   public void test09()  throws Throwable  {
185:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
186:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
187:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
188:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
189:       doReturn(false, false, false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
190:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
191:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
192:       // Undeclared exception!
193:       try { 
194:         iterableSubject_UsingCorrespondence0.containsAnyOf((String) null, "The actual value is an Iterable, and you've written a test that compares it to some objects that are not Iterables. Did you instead mean to check whether its *contents* match any of the *contents* of the given values? If so, call containsNoneOf(...)/containsNoneIn(...) instead. Non-iterables: %s", (String[]) null);
195:         fail("Expecting exception: NullPointerException");
196:       
197:       } catch(NullPointerException e) {
198:          //
199:          // no message in exception (getMessage() returned null)
200:          //
201:          verifyException("com.google.common.base.Preconditions", e);
202:       }
203:   }
204: 
205:   @Test(timeout = 4000)
206:   public void test10()  throws Throwable  {
207:       Stack<Fact> stack0 = new Stack<Fact>();
208:       stack0.add((Fact) null);
209:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
210:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
211:       IterableSubject.UsingCorrespondence<String, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<String, String>(iterableSubject0, correspondence0);
212:       IterableSubject.UsingCorrespondence<String, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super String, ? super Object>) correspondence0);
213:       // Undeclared exception!
214:       try { 
215:         iterableSubject0.containsAtLeast(iterableSubject_UsingCorrespondence0, iterableSubject_UsingCorrespondence1, (Object[]) null);
216:         fail("Expecting exception: UnsupportedOperationException");
217:       
218:       } catch(UnsupportedOperationException e) {
219:          //
220:          // UsingCorrespondence.equals() is not supported. Did you mean to call containsExactlyElementsIn(expected) instead of equals(expected)?
221:          //
222:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
223:       }
224:   }
225: 
226:   @Test(timeout = 4000)
227:   public void test11()  throws Throwable  {
228:       HashSet<String> hashSet0 = new HashSet<String>();
229:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
230:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
231:       IterableSubject iterableSubject1 = new IterableSubject((FailureMetadata) null, hashSet0);
232:       Correspondence.DiffFormatter<SQLNonTransientConnectionException, SQLNonTransientConnectionException> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
233:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
234:       // Undeclared exception!
235:       try { 
236:         iterableSubject1.doesNotContain(iterableSubject_UsingCorrespondence0);
237:         fail("Expecting exception: UnsupportedOperationException");
238:       
239:       } catch(UnsupportedOperationException e) {
240:          //
241:          // UsingCorrespondence.hashCode() is not supported.
242:          //
243:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
244:       }
245:   }
246: 
247:   @Test(timeout = 4000)
248:   public void test12()  throws Throwable  {
249:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
250:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
251:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
252:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
253:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
254:       String[] stringArray0 = new String[7];
255:       iterableSubject_UsingCorrespondence0.containsNoneOf("java.util.Stack@2", "java.sql.SQLNonTransientConnectionException@0000000002", stringArray0);
256:       assertEquals(7, stringArray0.length);
257:   }
258: 
259:   @Test(timeout = 4000)
260:   public void test13()  throws Throwable  {
261:       Stack<Fact> stack0 = new Stack<Fact>();
262:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
263:       // Undeclared exception!
264:       try { 
265:         iterableSubject0.isEqualTo("O:h$*z");
266:         fail("Expecting exception: NullPointerException");
267:       
268:       } catch(NullPointerException e) {
269:          //
270:          // no message in exception (getMessage() returned null)
271:          //
272:          verifyException("com.google.common.base.Preconditions", e);
273:       }
274:   }
275: 
276:   @Test(timeout = 4000)
277:   public void test14()  throws Throwable  {
278:       Stack<Fact> stack0 = new Stack<Fact>();
279:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
280:       iterableSubject0.isEqualTo(stack0);
281:       assertTrue(stack0.empty());
282:   }
283: 
284:   @Test(timeout = 4000)
285:   public void test15()  throws Throwable  {
286:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
287:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
288:       // Undeclared exception!
289:       try { 
290:         iterableSubject0.isEqualTo("TY4AcU~hjs0~Y Ump");
291:         fail("Expecting exception: NullPointerException");
292:       
293:       } catch(NullPointerException e) {
294:          //
295:          // no message in exception (getMessage() returned null)
296:          //
297:          verifyException("com.google.common.base.Preconditions", e);
298:       }
299:   }
300: 
301:   @Test(timeout = 4000)
302:   public void test16()  throws Throwable  {
303:       HashSet<String> hashSet0 = new HashSet<String>();
304:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
305:       iterableSubject0.isEmpty();
306:   }
307: 
308:   @Test(timeout = 4000)
309:   public void test17()  throws Throwable  {
310:       Stack<Fact> stack0 = new Stack<Fact>();
311:       stack0.add((Fact) null);
312:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
313:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
314:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
315:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
316:       // Undeclared exception!
317:       try { 
318:         iterableSubject_UsingCorrespondence0.containsExactly(locale_CategoryArray0);
319:         fail("Expecting exception: NullPointerException");
320:       
321:       } catch(NullPointerException e) {
322:          //
323:          // no message in exception (getMessage() returned null)
324:          //
325:          verifyException("com.google.common.base.Preconditions", e);
326:       }
327:   }
328: 
329:   @Test(timeout = 4000)
330:   public void test18()  throws Throwable  {
331:       Stack<Fact> stack0 = new Stack<Fact>();
332:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
333:       stack0.add(fact0);
334:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
335:       iterableSubject0.isNotEmpty();
336:   }
337: 
338:   @Test(timeout = 4000)
339:   public void test19()  throws Throwable  {
340:       HashSet<String> hashSet0 = new HashSet<String>();
341:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
342:       // Undeclared exception!
343:       try { 
344:         iterableSubject0.isNotEmpty();
345:         fail("Expecting exception: NullPointerException");
346:       
347:       } catch(NullPointerException e) {
348:          //
349:          // no message in exception (getMessage() returned null)
350:          //
351:          verifyException("com.google.common.base.Preconditions", e);
352:       }
353:   }
354: 
355:   @Test(timeout = 4000)
356:   public void test20()  throws Throwable  {
357:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
358:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
359:       // Undeclared exception!
360:       try { 
361:         iterableSubject0.hasSize((-1));
362:         fail("Expecting exception: IllegalArgumentException");
363:       
364:       } catch(IllegalArgumentException e) {
365:          //
366:          // expectedSize(java.lang.Integer@0000000002) must be >= 0
367:          //
368:          verifyException("com.google.common.base.Preconditions", e);
369:       }
370:   }
371: 
372:   @Test(timeout = 4000)
373:   public void test21()  throws Throwable  {
374:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
375:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
376:       // Undeclared exception!
377:       try { 
378:         iterableSubject0.hasSize(0);
379:         fail("Expecting exception: NullPointerException");
380:       
381:       } catch(NullPointerException e) {
382:          //
383:          // no message in exception (getMessage() returned null)
384:          //
385:          verifyException("com.google.common.base.Preconditions", e);
386:       }
387:   }
388: 
389:   @Test(timeout = 4000)
390:   public void test22()  throws Throwable  {
391:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
392:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
393:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
394:       iterableSubject0.contains(iterableSubject_ElementFactGrouping0);
395:       assertTrue(enumSet0.contains(iterableSubject_ElementFactGrouping0));
396:   }
397: 
398:   @Test(timeout = 4000)
399:   public void test23()  throws Throwable  {
400:       Stack<Fact> stack0 = new Stack<Fact>();
401:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
402:       iterableSubject0.doesNotContain((Object) null);
403:   }
404: 
405:   @Test(timeout = 4000)
406:   public void test24()  throws Throwable  {
407:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
408:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
409:       linkedHashSet0.add("8]a3M\">ZlY");
410:       // Undeclared exception!
411:       try { 
412:         iterableSubject0.doesNotContain("8]a3M\">ZlY");
413:         fail("Expecting exception: NullPointerException");
414:       
415:       } catch(NullPointerException e) {
416:          //
417:          // no message in exception (getMessage() returned null)
418:          //
419:          verifyException("com.google.common.base.Preconditions", e);
420:       }
421:   }
422: 
423:   @Test(timeout = 4000)
424:   public void test25()  throws Throwable  {
425:       PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
426:       SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "expected", (-1933786899));
427:       MockThrowable mockThrowable0 = new MockThrowable("expected", sQLInvalidAuthorizationSpecException0);
428:       SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("O:h$*z", "O:h$*z", mockThrowable0);
429:       MockException mockException0 = new MockException("java.util.HashSet@7", sQLTransientConnectionException0);
430:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockException0);
431:       priorityQueue0.add(sQLNonTransientConnectionException0);
432:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
433:       iterableSubject0.containsNoDuplicates();
434:   }
435: 
436:   @Test(timeout = 4000)
437:   public void test26()  throws Throwable  {
438:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
439:       SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
440:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
441:       // Undeclared exception!
442:       try { 
443:         iterableSubject0.containsAnyIn((Iterable<?>) sQLNonTransientConnectionException1);
444:         fail("Expecting exception: NullPointerException");
445:       
446:       } catch(NullPointerException e) {
447:          //
448:          // no message in exception (getMessage() returned null)
449:          //
450:          verifyException("com.google.common.base.Preconditions", e);
451:       }
452:   }
453: 
454:   @Test(timeout = 4000)
455:   public void test27()  throws Throwable  {
456:       Stack<Fact> stack0 = new Stack<Fact>();
457:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
458:       stack0.add(fact0);
459:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
460:       Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn((Iterable<?>) stack0);
461:       assertNotNull(ordered0);
462:   }
463: 
464:   @Test(timeout = 4000)
465:   public void test28()  throws Throwable  {
466:       Stack<Fact> stack0 = new Stack<Fact>();
467:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
468:       Object[] objectArray0 = new Object[0];
469:       Ordered ordered0 = iterableSubject0.containsExactly(objectArray0);
470:       assertNotNull(ordered0);
471:   }
472: 
473:   @Test(timeout = 4000)
474:   public void test29()  throws Throwable  {
475:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
476:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
477:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
478:       // Undeclared exception!
479:       try { 
480:         iterableSubject0.containsExactly((Object[]) null);
481:         fail("Expecting exception: NullPointerException");
482:       
483:       } catch(NullPointerException e) {
484:          //
485:          // no message in exception (getMessage() returned null)
486:          //
487:          verifyException("com.google.common.base.Preconditions", e);
488:       }
489:   }
490: 
491:   @Test(timeout = 4000)
492:   public void test30()  throws Throwable  {
493:       Stack<Fact> stack0 = new Stack<Fact>();
494:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
495:       Object[] objectArray0 = new Object[1];
496:       // Undeclared exception!
497:       try { 
498:         iterableSubject0.containsExactly(objectArray0);
499:         fail("Expecting exception: NullPointerException");
500:       
501:       } catch(NullPointerException e) {
502:          //
503:          // no message in exception (getMessage() returned null)
504:          //
505:          verifyException("com.google.common.base.Preconditions", e);
506:       }
507:   }
508: 
509:   @Test(timeout = 4000)
510:   public void test31()  throws Throwable  {
511:       Stack<Fact> stack0 = new Stack<Fact>();
512:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
513:       stack0.add(fact0);
514:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
515:       Object[] objectArray0 = new Object[0];
516:       // Undeclared exception!
517:       try { 
518:         iterableSubject0.containsExactly(objectArray0);
519:         fail("Expecting exception: NullPointerException");
520:       
521:       } catch(NullPointerException e) {
522:          //
523:          // no message in exception (getMessage() returned null)
524:          //
525:          verifyException("com.google.common.base.Preconditions", e);
526:       }
527:   }
528: 
529:   @Test(timeout = 4000)
530:   public void test32()  throws Throwable  {
531:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
532:       linkedHashSet0.add((String) null);
533:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
534:       Ordered ordered0 = iterableSubject0.containsExactlyElementsIn((Iterable<?>) linkedHashSet0);
535:       assertNotNull(ordered0);
536:   }
537: 
538:   @Test(timeout = 4000)
539:   public void test33()  throws Throwable  {
540:       Stack<Fact> stack0 = new Stack<Fact>();
541:       stack0.add((Fact) null);
542:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
543:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
544:       stack0.add((Fact) null);
545:       Object[] objectArray0 = new Object[7];
546:       objectArray0[1] = (Object) correspondence0;
547:       // Undeclared exception!
548:       try { 
549:         iterableSubject0.containsExactly(objectArray0);
550:         fail("Expecting exception: NullPointerException");
551:       
552:       } catch(NullPointerException e) {
553:          //
554:          // no message in exception (getMessage() returned null)
555:          //
556:          verifyException("com.google.common.base.Preconditions", e);
557:       }
558:   }
559: 
560:   @Test(timeout = 4000)
561:   public void test34()  throws Throwable  {
562:       Stack<Fact> stack0 = new Stack<Fact>();
563:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
564:       stack0.add(fact0);
565:       stack0.add(fact0);
566:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
567:       int[] intArray0 = new int[1];
568:       BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "A'", 239, intArray0);
569:       // Undeclared exception!
570:       try { 
571:         iterableSubject0.containsExactlyElementsIn((Iterable<?>) batchUpdateException0);
572:         fail("Expecting exception: NullPointerException");
573:       
574:       } catch(NullPointerException e) {
575:          //
576:          // no message in exception (getMessage() returned null)
577:          //
578:          verifyException("com.google.common.base.Preconditions", e);
579:       }
580:   }
581: 
582:   @Test(timeout = 4000)
583:   public void test35()  throws Throwable  {
584:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
585:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
586:       linkedHashSet0.add("](@TF1Ji");
587:       Object[] objectArray0 = new Object[3];
588:       // Undeclared exception!
589:       try { 
590:         iterableSubject0.containsExactlyElementsIn(objectArray0);
591:         fail("Expecting exception: NullPointerException");
592:       
593:       } catch(NullPointerException e) {
594:          //
595:          // no message in exception (getMessage() returned null)
596:          //
597:          verifyException("com.google.common.base.Preconditions", e);
598:       }
599:   }
600: 
601:   @Test(timeout = 4000)
602:   public void test36()  throws Throwable  {
603:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
604:       linkedHashSet0.add("O:h$*z");
605:       linkedHashSet0.add("java.util.concurrent.ConcurrentSkipListMap$KeySet@0000000004");
606:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
607:       iterableSubject0.isInStrictOrder();
608:   }
609: 
610:   @Test(timeout = 4000)
611:   public void test37()  throws Throwable  {
612:       Stack<Fact> stack0 = new Stack<Fact>();
613:       Fact fact0 = Fact.fact("O:h$*z", stack0);
614:       stack0.add(fact0);
615:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
616:       // Undeclared exception!
617:       try { 
618:         iterableSubject0.isNotIn(stack0);
619:         fail("Expecting exception: NullPointerException");
620:       
621:       } catch(NullPointerException e) {
622:          //
623:          // no message in exception (getMessage() returned null)
624:          //
625:          verifyException("com.google.common.base.Preconditions", e);
626:       }
627:   }
628: 
629:   @Test(timeout = 4000)
630:   public void test38()  throws Throwable  {
631:       Stack<Fact> stack0 = new Stack<Fact>();
632:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
633:       LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
634:       IterableSubject.ElementFactGrouping[] iterableSubject_ElementFactGroupingArray0 = IterableSubject.ElementFactGrouping.values();
635:       // Undeclared exception!
636:       try { 
637:         iterableSubject0.isNoneOf(linkedHashSet0, (Object) null, iterableSubject_ElementFactGroupingArray0);
638:         fail("Expecting exception: NullPointerException");
639:       
640:       } catch(NullPointerException e) {
641:          //
642:          // no message in exception (getMessage() returned null)
643:          //
644:          verifyException("com.google.common.base.Preconditions", e);
645:       }
646:   }
647: 
648:   @Test(timeout = 4000)
649:   public void test39()  throws Throwable  {
650:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
651:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
652:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
653:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
654:       doReturn(false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
655:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
656:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
657:       // Undeclared exception!
658:       try { 
659:         iterableSubject_UsingCorrespondence0.contains(">+");
660:         fail("Expecting exception: NullPointerException");
661:       
662:       } catch(NullPointerException e) {
663:          //
664:          // no message in exception (getMessage() returned null)
665:          //
666:          verifyException("com.google.common.base.Preconditions", e);
667:       }
668:   }
669: 
670:   @Test(timeout = 4000)
671:   public void test40()  throws Throwable  {
672:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
673:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
674:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
675:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super String>) correspondence0);
676:       // Undeclared exception!
677:       try { 
678:         iterableSubject_UsingCorrespondence0.contains("");
679:         fail("Expecting exception: NullPointerException");
680:       
681:       } catch(NullPointerException e) {
682:          //
683:          // no message in exception (getMessage() returned null)
684:          //
685:          verifyException("com.google.common.base.Preconditions", e);
686:       }
687:   }
688: 
689:   @Test(timeout = 4000)
690:   public void test41()  throws Throwable  {
691:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
692:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
693:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
694:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
695:       doReturn(true).when(correspondence_BinaryPredicate0).apply(any() , anyString());
696:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
697:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
698:       // Undeclared exception!
699:       try { 
700:         iterableSubject_UsingCorrespondence0.doesNotContain("b~V%=#)&yAS.>cy");
701:         fail("Expecting exception: NullPointerException");
702:       
703:       } catch(NullPointerException e) {
704:          //
705:          // no message in exception (getMessage() returned null)
706:          //
707:          verifyException("com.google.common.base.Preconditions", e);
708:       }
709:   }
710: 
711:   @Test(timeout = 4000)
712:   public void test42()  throws Throwable  {
713:       Stack<Fact> stack0 = new Stack<Fact>();
714:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
715:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
716:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
717:       // Undeclared exception!
718:       try { 
719:         iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
720:         fail("Expecting exception: NullPointerException");
721:       
722:       } catch(NullPointerException e) {
723:          //
724:          // no message in exception (getMessage() returned null)
725:          //
726:          verifyException("com.google.common.base.Preconditions", e);
727:       }
728:   }
729: 
730:   @Test(timeout = 4000)
731:   public void test43()  throws Throwable  {
732:       Stack<Fact> stack0 = new Stack<Fact>();
733:       stack0.add((Fact) null);
734:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
735:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
736:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
737:       Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
738:       assertNotNull(ordered0);
739:   }
740: 
741:   @Test(timeout = 4000)
742:   public void test44()  throws Throwable  {
743:       Stack<Fact> stack0 = new Stack<Fact>();
744:       stack0.add((Fact) null);
745:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
746:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
747:       stack0.add((Fact) null);
748:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
749:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
750:       // Undeclared exception!
751:       try { 
752:         iterableSubject_UsingCorrespondence0.containsExactly(locale_CategoryArray0);
753:         fail("Expecting exception: NullPointerException");
754:       
755:       } catch(NullPointerException e) {
756:          //
757:          // no message in exception (getMessage() returned null)
758:          //
759:          verifyException("com.google.common.base.Preconditions", e);
760:       }
761:   }
762: 
763:   @Test(timeout = 4000)
764:   public void test45()  throws Throwable  {
765:       Stack<Fact> stack0 = new Stack<Fact>();
766:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
767:       stack0.add(fact0);
768:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
769:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
770:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
771:       // Undeclared exception!
772:       try { 
773:         iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
774:         fail("Expecting exception: NullPointerException");
775:       
776:       } catch(NullPointerException e) {
777:          //
778:          // no message in exception (getMessage() returned null)
779:          //
780:          verifyException("com.google.common.base.Preconditions", e);
781:       }
782:   }
783: 
784:   @Test(timeout = 4000)
785:   public void test46()  throws Throwable  {
786:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
787:       linkedHashSet0.add("com.google.common.collect.LinkedListMultimap");
788:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
789:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
790:       IterableSubject.UsingCorrespondence<IterableSubject.UsingCorrespondence<Object, Object>, Comparable<String>> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<IterableSubject.UsingCorrespondence<Object, Object>, Comparable<String>>(iterableSubject0, correspondence0);
791:       Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsAtLeastElementsIn((Iterable<? extends Comparable<String>>) linkedHashSet0);
792:       assertNotNull(ordered0);
793:   }
794: 
795:   @Test(timeout = 4000)
796:   public void test47()  throws Throwable  {
797:       Stack<Fact> stack0 = new Stack<Fact>();
798:       stack0.add((Fact) null);
799:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
800:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
801:       IterableSubject.UsingCorrespondence<Object, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Object, ? super Object>) correspondence0);
802:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
803:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Object>) correspondence0);
804:       Object object0 = new Object();
805:       // Undeclared exception!
806:       try { 
807:         iterableSubject_UsingCorrespondence1.containsAtLeast(iterableSubject_UsingCorrespondence0, object0, locale_CategoryArray0);
808:         fail("Expecting exception: UnsupportedOperationException");
809:       
810:       } catch(UnsupportedOperationException e) {
811:          //
812:          // UsingCorrespondence.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
813:          //
814:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
815:       }
816:   }
817: 
818:   @Test(timeout = 4000)
819:   public void test48()  throws Throwable  {
820:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
821:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
822:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
823:       doReturn(false, false, false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
824:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, "");
825:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
826:       // Undeclared exception!
827:       try { 
828:         iterableSubject_UsingCorrespondence0.containsAnyOf("1t^=fE*j", "", (String[]) null);
829:         fail("Expecting exception: NullPointerException");
830:       
831:       } catch(NullPointerException e) {
832:          //
833:          // no message in exception (getMessage() returned null)
834:          //
835:          verifyException("com.google.common.base.Preconditions", e);
836:       }
837:   }
838: 
839:   @Test(timeout = 4000)
840:   public void test49()  throws Throwable  {
841:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
842:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
843:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
844:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
845:       Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
846:       doReturn((Object) null, (Object) null).when(function0).apply(any());
847:       Converter<Object, Object> converter0 = Converter.identity();
848:       Converter<Object, String> converter1 = Converter.from((Function<? super Object, ? extends String>) function0, (Function<? super String, ?>) converter0);
849:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter1, (Function<? super Locale.Category, ?>) converter1);
850:       Locale.Category locale_Category0 = Locale.Category.DISPLAY;
851:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
852:       // Undeclared exception!
853:       try { 
854:         iterableSubject_UsingCorrespondence1.containsAnyOf(locale_Category0, locale_Category0, locale_CategoryArray0);
855:         fail("Expecting exception: NullPointerException");
856:       
857:       } catch(NullPointerException e) {
858:          //
859:          // no message in exception (getMessage() returned null)
860:          //
861:          verifyException("com.google.common.base.Preconditions", e);
862:       }
863:   }
864: 
865:   @Test(timeout = 4000)
866:   public void test50()  throws Throwable  {
867:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
868:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
869:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
870:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
871:       doReturn(true, true).when(correspondence_BinaryPredicate0).apply(any() , anyString());
872:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
873:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
874:       String[] stringArray0 = new String[3];
875:       // Undeclared exception!
876:       try { 
877:         iterableSubject_UsingCorrespondence0.containsNoneOf("N(u#=)]#-j!o{7r=R", "N(u#=)]#-j!o{7r=R", stringArray0);
878:         fail("Expecting exception: NullPointerException");
879:       
880:       } catch(NullPointerException e) {
881:          //
882:          // no message in exception (getMessage() returned null)
883:          //
884:          verifyException("com.google.common.base.Preconditions", e);
885:       }
886:   }
887: 
888:   @Test(timeout = 4000)
889:   public void test51()  throws Throwable  {
890:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
891:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
892:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
893:       Function<Object, SQLNonTransientConnectionException> function0 = (Function<Object, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
894:       doReturn((Object) null).when(function0).apply(any());
895:       Converter<Object, SQLNonTransientConnectionException> converter0 = Converter.from((Function<? super Object, ? extends SQLNonTransientConnectionException>) function0, (Function<? super SQLNonTransientConnectionException, ?>) function0);
896:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
897:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super String, ?>) converter0);
898:       // Undeclared exception!
899:       try { 
900:         iterableSubject_UsingCorrespondence1.contains("java.sql.SQLNonTransientConnectionException@5");
901:         fail("Expecting exception: NullPointerException");
902:       
903:       } catch(NullPointerException e) {
904:          //
905:          // no message in exception (getMessage() returned null)
906:          //
907:          verifyException("com.google.common.base.Preconditions", e);
908:       }
909:   }
910: 
911:   @Test(timeout = 4000)
912:   public void test52()  throws Throwable  {
913:       Stack<Fact> stack0 = new Stack<Fact>();
914:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
915:       Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
916:       iterableSubject0.isInStrictOrder(comparator0);
917:   }
918: 
919:   @Test(timeout = 4000)
920:   public void test53()  throws Throwable  {
921:       Stack<Fact> stack0 = new Stack<Fact>();
922:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
923:       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
924:       iterableSubject0.isInOrder(comparator0);
925:   }
926: 
927:   @Test(timeout = 4000)
928:   public void test54()  throws Throwable  {
929:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1rk");
930:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
931:       // Undeclared exception!
932:       try { 
933:         iterableSubject0.isEmpty();
934:         fail("Expecting exception: NullPointerException");
935:       
936:       } catch(NullPointerException e) {
937:          //
938:          // no message in exception (getMessage() returned null)
939:          //
940:          verifyException("com.google.common.base.Preconditions", e);
941:       }
942:   }
943: 
944:   @Test(timeout = 4000)
945:   public void test55()  throws Throwable  {
946:       Stack<Fact> stack0 = new Stack<Fact>();
947:       stack0.add((Fact) null);
948:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
949:       iterableSubject0.containsAnyIn((Iterable<?>) stack0);
950:       assertEquals(1, stack0.size());
951:   }
952: 
953:   @Test(timeout = 4000)
954:   public void test56()  throws Throwable  {
955:       Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
956:       PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(vector0);
957:       PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
958:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue1);
959:       // Undeclared exception!
960:       try { 
961:         iterableSubject0.containsAnyIn((Iterable<?>) priorityQueue0);
962:         fail("Expecting exception: NullPointerException");
963:       
964:       } catch(NullPointerException e) {
965:          //
966:          // no message in exception (getMessage() returned null)
967:          //
968:          verifyException("com.google.common.base.Preconditions", e);
969:       }
970:   }
971: 
972:   @Test(timeout = 4000)
973:   public void test57()  throws Throwable  {
974:       HashSet<String> hashSet0 = new HashSet<String>();
975:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
976:       HashSet<String> hashSet1 = new HashSet<String>();
977:       hashSet1.add("");
978:       iterableSubject0.containsNoneIn((Iterable<?>) hashSet1);
979:       assertTrue(hashSet1.contains(""));
980:   }
981: 
982:   @Test(timeout = 4000)
983:   public void test58()  throws Throwable  {
984:       LinkedHashSet<IterableSubject.ElementFactGrouping> linkedHashSet0 = new LinkedHashSet<IterableSubject.ElementFactGrouping>();
985:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
986:       // Undeclared exception!
987:       try { 
988:         iterableSubject0.comparingElementsUsing((Correspondence<? super Object, ? super Object>) null);
989:         fail("Expecting exception: NullPointerException");
990:       
991:       } catch(NullPointerException e) {
992:          //
993:          // no message in exception (getMessage() returned null)
994:          //
995:          verifyException("com.google.common.base.Preconditions", e);
996:       }
997:   }
998: 
999:   @Test(timeout = 4000)
1000:   public void test59()  throws Throwable  {
1001:       HashSet<String> hashSet0 = new HashSet<String>();
1002:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
1003:       // Undeclared exception!
1004:       try { 
1005:         iterableSubject0.containsAnyIn((Object[]) null);
1006:         fail("Expecting exception: NullPointerException");
1007:       
1008:       } catch(NullPointerException e) {
1009:          //
1010:          // no message in exception (getMessage() returned null)
1011:          //
1012:          verifyException("java.util.Objects", e);
1013:       }
1014:   }
1015: 
1016:   @Test(timeout = 4000)
1017:   public void test60()  throws Throwable  {
1018:       LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
1019:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1020:       Object[] objectArray0 = new Object[3];
1021:       objectArray0[1] = (Object) iterableSubject0;
1022:       // Undeclared exception!
1023:       try { 
1024:         iterableSubject0.containsAnyIn(objectArray0);
1025:         fail("Expecting exception: UnsupportedOperationException");
1026:       
1027:       } catch(UnsupportedOperationException e) {
1028:          //
1029:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
1030:          //
1031:          verifyException("com.google.common.truth.Subject", e);
1032:       }
1033:   }
1034: 
1035:   @Test(timeout = 4000)
1036:   public void test61()  throws Throwable  {
1037:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
1038:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
1039:       Object object0 = new Object();
1040:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
1041:       // Undeclared exception!
1042:       try { 
1043:         iterableSubject0.containsAnyOf((Object) null, object0, throwableArray0);
1044:         fail("Expecting exception: NullPointerException");
1045:       
1046:       } catch(NullPointerException e) {
1047:          //
1048:          // no message in exception (getMessage() returned null)
1049:          //
1050:          verifyException("com.google.common.base.Preconditions", e);
1051:       }
1052:   }
1053: 
1054:   @Test(timeout = 4000)
1055:   public void test62()  throws Throwable  {
1056:       Stack<Fact> stack0 = new Stack<Fact>();
1057:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1058:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^h~?0Ts2X)M3>M,R9", "^h~?0Ts2X)M3>M,R9");
1059:       Object[] objectArray0 = new Object[8];
1060:       objectArray0[1] = (Object) iterableSubject0;
1061:       // Undeclared exception!
1062:       try { 
1063:         iterableSubject0.containsAnyOf(sQLNonTransientConnectionException0, (Object) null, objectArray0);
1064:         fail("Expecting exception: UnsupportedOperationException");
1065:       
1066:       } catch(UnsupportedOperationException e) {
1067:          //
1068:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
1069:          //
1070:          verifyException("com.google.common.truth.Subject", e);
1071:       }
1072:   }
1073: 
1074:   @Test(timeout = 4000)
1075:   public void test63()  throws Throwable  {
1076:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
1077:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
1078:       // Undeclared exception!
1079:       try { 
1080:         iterableSubject0.containsAtLeast((Object) null, sQLNonTransientConnectionException0, (Object[]) null);
1081:         fail("Expecting exception: NullPointerException");
1082:       
1083:       } catch(NullPointerException e) {
1084:          //
1085:          // no message in exception (getMessage() returned null)
1086:          //
1087:          verifyException("com.google.common.base.Preconditions", e);
1088:       }
1089:   }
1090: 
1091:   @Test(timeout = 4000)
1092:   public void test64()  throws Throwable  {
1093:       Stack<Fact> stack0 = new Stack<Fact>();
1094:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1095:       // Undeclared exception!
1096:       try { 
1097:         iterableSubject0.containsAtLeastElementsIn((Iterable<?>) null);
1098:         fail("Expecting exception: NullPointerException");
1099:       
1100:       } catch(NullPointerException e) {
1101:          //
1102:          // no message in exception (getMessage() returned null)
1103:          //
1104:          verifyException("com.google.common.base.Preconditions", e);
1105:       }
1106:   }
1107: 
1108:   @Test(timeout = 4000)
1109:   public void test65()  throws Throwable  {
1110:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1111:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1112:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
1113:       SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("rW]gH@o+&ddE !|{f", sQLNonTransientConnectionException0);
1114:       sQLNonTransientConnectionException0.initCause(sQLNonTransientException0);
1115:       // Undeclared exception!
1116:       iterableSubject0.containsAtLeastElementsIn((Iterable<?>) sQLNonTransientConnectionException0);
1117:   }
1118: 
1119:   @Test(timeout = 4000)
1120:   public void test66()  throws Throwable  {
1121:       Stack<Fact> stack0 = new Stack<Fact>();
1122:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1123:       Object[] objectArray0 = new Object[1];
1124:       // Undeclared exception!
1125:       try { 
1126:         iterableSubject0.containsAtLeastElementsIn(objectArray0);
1127:         fail("Expecting exception: NullPointerException");
1128:       
1129:       } catch(NullPointerException e) {
1130:          //
1131:          // no message in exception (getMessage() returned null)
1132:          //
1133:          verifyException("com.google.common.base.Preconditions", e);
1134:       }
1135:   }
1136: 
1137:   @Test(timeout = 4000)
1138:   public void test67()  throws Throwable  {
1139:       HashSet<String> hashSet0 = new HashSet<String>();
1140:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
1141:       // Undeclared exception!
1142:       try { 
1143:         iterableSubject0.containsAtLeastElementsIn((Object[]) null);
1144:         fail("Expecting exception: NullPointerException");
1145:       
1146:       } catch(NullPointerException e) {
1147:          //
1148:          // no message in exception (getMessage() returned null)
1149:          //
1150:          verifyException("java.util.Objects", e);
1151:       }
1152:   }
1153: 
1154:   @Test(timeout = 4000)
1155:   public void test68()  throws Throwable  {
1156:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1157:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1158:       Object[] objectArray0 = new Object[4];
1159:       objectArray0[2] = (Object) iterableSubject0;
1160:       // Undeclared exception!
1161:       try { 
1162:         iterableSubject0.containsAtLeastElementsIn(objectArray0);
1163:         fail("Expecting exception: UnsupportedOperationException");
1164:       
1165:       } catch(UnsupportedOperationException e) {
1166:          //
1167:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
1168:          //
1169:          verifyException("com.google.common.truth.Subject", e);
1170:       }
1171:   }
1172: 
1173:   @Test(timeout = 4000)
1174:   public void test69()  throws Throwable  {
1175:       Stack<Fact> stack0 = new Stack<Fact>();
1176:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
1177:       stack0.add(fact0);
1178:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1179:       int[] intArray0 = new int[1];
1180:       BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "A'", 239, intArray0);
1181:       // Undeclared exception!
1182:       try { 
1183:         iterableSubject0.containsExactlyElementsIn((Iterable<?>) batchUpdateException0);
1184:         fail("Expecting exception: NullPointerException");
1185:       
1186:       } catch(NullPointerException e) {
1187:          //
1188:          // no message in exception (getMessage() returned null)
1189:          //
1190:          verifyException("com.google.common.base.Preconditions", e);
1191:       }
1192:   }
1193: 
1194:   @Test(timeout = 4000)
1195:   public void test70()  throws Throwable  {
1196:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1197:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1198:       // Undeclared exception!
1199:       try { 
1200:         iterableSubject0.containsExactlyElementsIn((Object[]) null);
1201:         fail("Expecting exception: NullPointerException");
1202:       
1203:       } catch(NullPointerException e) {
1204:          //
1205:          // no message in exception (getMessage() returned null)
1206:          //
1207:          verifyException("com.google.common.base.Preconditions", e);
1208:       }
1209:   }
1210: 
1211:   @Test(timeout = 4000)
1212:   public void test71()  throws Throwable  {
1213:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1214:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1215:       // Undeclared exception!
1216:       try { 
1217:         iterableSubject0.containsNoneIn((Iterable<?>) null);
1218:         fail("Expecting exception: NullPointerException");
1219:       
1220:       } catch(NullPointerException e) {
1221:          //
1222:          // no message in exception (getMessage() returned null)
1223:          //
1224:          verifyException("com.google.common.base.Preconditions", e);
1225:       }
1226:   }
1227: 
1228:   @Test(timeout = 4000)
1229:   public void test72()  throws Throwable  {
1230:       Stack<Fact> stack0 = new Stack<Fact>();
1231:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1232:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
1233:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Object>) correspondence0);
1234:       Object[] objectArray0 = new Object[4];
1235:       objectArray0[2] = (Object) iterableSubject_UsingCorrespondence0;
1236:       // Undeclared exception!
1237:       try { 
1238:         iterableSubject0.containsNoneIn(objectArray0);
1239:         fail("Expecting exception: UnsupportedOperationException");
1240:       
1241:       } catch(UnsupportedOperationException e) {
1242:          //
1243:          // UsingCorrespondence.hashCode() is not supported.
1244:          //
1245:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
1246:       }
1247:   }
1248: 
1249:   @Test(timeout = 4000)
1250:   public void test73()  throws Throwable  {
1251:       TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> treeMap0 = new TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>();
1252:       ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Map<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) treeMap0);
1253:       NavigableSet<SQLNonTransientConnectionException> navigableSet0 = concurrentSkipListMap0.keySet();
1254:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, navigableSet0);
1255:       // Undeclared exception!
1256:       try { 
1257:         iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super Locale.Category, ? super Locale.Category>) null);
1258:         fail("Expecting exception: NullPointerException");
1259:       
1260:       } catch(NullPointerException e) {
1261:          //
1262:          // no message in exception (getMessage() returned null)
1263:          //
1264:          verifyException("com.google.common.base.Preconditions", e);
1265:       }
1266:   }
1267: 
1268:   @Test(timeout = 4000)
1269:   public void test74()  throws Throwable  {
1270:       Stack<Fact> stack0 = new Stack<Fact>();
1271:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
1272:       stack0.add(fact0);
1273:       stack0.add(fact0);
1274:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1275:       // Undeclared exception!
1276:       try { 
1277:         iterableSubject0.isInStrictOrder();
1278:         fail("Expecting exception: ClassCastException");
1279:       
1280:       } catch(ClassCastException e) {
1281:          //
1282:          // com.google.common.truth.Fact cannot be cast to java.lang.Comparable
1283:          //
1284:          verifyException("com.google.common.collect.NaturalOrdering", e);
1285:       }
1286:   }
1287: 
1288:   @Test(timeout = 4000)
1289:   public void test75()  throws Throwable  {
1290:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1291:       linkedHashSet0.add((String) null);
1292:       linkedHashSet0.add("java.util.concurrent.ConcurrentSkipListMap$KeySet@0000000004");
1293:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1294:       // Undeclared exception!
1295:       try { 
1296:         iterableSubject0.isInStrictOrder();
1297:         fail("Expecting exception: NullPointerException");
1298:       
1299:       } catch(NullPointerException e) {
1300:          //
1301:          // no message in exception (getMessage() returned null)
1302:          //
1303:          verifyException("com.google.common.base.Preconditions", e);
1304:       }
1305:   }
1306: 
1307:   @Test(timeout = 4000)
1308:   public void test76()  throws Throwable  {
1309:       Stack<Fact> stack0 = new Stack<Fact>();
1310:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1311:       Object[] objectArray0 = new Object[6];
1312:       objectArray0[3] = (Object) iterableSubject0;
1313:       // Undeclared exception!
1314:       try { 
1315:         iterableSubject0.isNoneOf((Object) null, stack0, objectArray0);
1316:         fail("Expecting exception: UnsupportedOperationException");
1317:       
1318:       } catch(UnsupportedOperationException e) {
1319:          //
1320:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
1321:          //
1322:          verifyException("com.google.common.truth.Subject", e);
1323:       }
1324:   }
1325: 
1326:   @Test(timeout = 4000)
1327:   public void test77()  throws Throwable  {
1328:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
1329:       // Undeclared exception!
1330:       try { 
1331:         iterableSubject0.isNotIn((Iterable<?>) null);
1332:         fail("Expecting exception: NullPointerException");
1333:       
1334:       } catch(NullPointerException e) {
1335:          //
1336:          // no message in exception (getMessage() returned null)
1337:          //
1338:          verifyException("com.google.common.base.Preconditions", e);
1339:       }
1340:   }
1341: 
1342:   @Test(timeout = 4000)
1343:   public void test78()  throws Throwable  {
1344:       Stack<Fact> stack0 = new Stack<Fact>();
1345:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1346:       String string0 = iterableSubject0.actualCustomStringRepresentation();
1347:       assertEquals("[]", string0);
1348:   }
1349: 
1350:   @Test(timeout = 4000)
1351:   public void test79()  throws Throwable  {
1352:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1353:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.util.HashSet@3");
1354:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
1355:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1356:       Ordered ordered0 = iterableSubject0.containsExactlyElementsIn((Object[]) throwableArray0);
1357:       assertNotNull(ordered0);
1358:   }
1359: 
1360:   @Test(timeout = 4000)
1361:   public void test80()  throws Throwable  {
1362:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1363:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1364:       linkedHashSet0.add("]zU(@TF1JK");
1365:       Object[] objectArray0 = new Object[5];
1366:       objectArray0[0] = (Object) "]zU(@TF1JK";
1367:       iterableSubject0.containsAnyIn(objectArray0);
1368:       assertEquals(5, objectArray0.length);
1369:   }
1370: 
1371:   @Test(timeout = 4000)
1372:   public void test81()  throws Throwable  {
1373:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1374:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1375:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
1376:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
1377:       Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
1378:       PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>(2431, comparator0);
1379:       Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsExactlyElementsIn((Iterable<? extends Locale.Category>) priorityQueue0);
1380:       assertNotNull(ordered0);
1381:   }
1382: 
1383:   @Test(timeout = 4000)
1384:   public void test82()  throws Throwable  {
1385:       TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> treeMap0 = new TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>();
1386:       ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Map<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) treeMap0);
1387:       NavigableSet<SQLNonTransientConnectionException> navigableSet0 = concurrentSkipListMap0.keySet();
1388:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, navigableSet0);
1389:       // Undeclared exception!
1390:       try { 
1391:         iterableSubject0.hasSize(1);
1392:         fail("Expecting exception: NullPointerException");
1393:       
1394:       } catch(NullPointerException e) {
1395:          //
1396:          // no message in exception (getMessage() returned null)
1397:          //
1398:          verifyException("com.google.common.base.Preconditions", e);
1399:       }
1400:   }
1401: 
1402:   @Test(timeout = 4000)
1403:   public void test83()  throws Throwable  {
1404:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1rk");
1405:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
1406:       Object object0 = new Object();
1407:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
1408:       Object object1 = new Object();
1409:       iterableSubject0.containsNoneOf(object0, object1, throwableArray0);
1410:       assertEquals(0, throwableArray0.length);
1411:   }
1412: }
RegularFileObject[/tmp/EvoSuite_174_1731035725315/com/google/common/truth/IterableSubject_174_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:15:25 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class IterableSubject_174_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_174_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "com.google.common.collect.ArrayListMultimap",
84:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
85:       "com.google.common.collect.Lists$RandomAccessPartition",
86:       "com.google.common.collect.Collections2",
87:       "com.google.common.collect.PeekingIterator",
88:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
89:       "com.google.common.truth.SubjectUtils",
90:       "com.google.common.math.IntMath",
91:       "com.google.common.collect.LinkedHashMultiset",
92:       "com.google.common.truth.GraphMatching",
93:       "com.google.common.collect.AbstractMapBasedMultiset$2",
94:       "com.google.common.collect.Sets$2",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.Sets$1",
98:       "com.google.common.collect.NullsLastOrdering",
99:       "com.google.common.collect.Platform",
100:       "com.google.common.collect.RegularImmutableMap",
101:       "com.google.common.collect.RegularImmutableBiMap",
102:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
103:       "com.google.common.base.Converter$IdentityConverter",
104:       "com.google.common.collect.ImmutableMultimap$Values",
105:       "com.google.common.collect.HashBiMap$Inverse",
106:       "com.google.common.collect.ByFunctionOrdering",
107:       "com.google.common.collect.AbstractMapEntry",
108:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
109:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
110:       "com.google.common.collect.ImmutableBiMap$Builder",
111:       "com.google.common.base.Predicate",
112:       "com.google.common.base.Joiner",
113:       "com.google.common.collect.Iterators$ConcatenatedIterator",
114:       "com.google.common.collect.AbstractListMultimap",
115:       "com.google.common.collect.NullsFirstOrdering",
116:       "com.google.common.truth.Correspondence$BinaryPredicate",
117:       "org.checkerframework.framework.qual.QualifierForLiterals",
118:       "com.google.common.truth.AssertionErrorWithFacts",
119:       "com.google.common.base.Strings",
120:       "com.google.common.truth.IterableSubject$3",
121:       "com.google.common.collect.Lists$Partition",
122:       "com.google.common.collect.AbstractMapBasedMultimap",
123:       "com.google.common.collect.Lists",
124:       "com.google.common.truth.IterableSubject$1",
125:       "com.google.common.collect.Multisets$ImmutableEntry",
126:       "com.google.common.truth.IterableSubject$4",
127:       "com.google.common.collect.UnmodifiableListIterator",
128:       "com.google.common.collect.ImmutableMultimap",
129:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
130:       "com.google.common.collect.ImmutableSortedSet",
131:       "com.google.common.collect.Sets$4",
132:       "com.google.common.base.Absent",
133:       "com.google.common.collect.Maps$BiMapConverter",
134:       "com.google.common.base.Throwables",
135:       "org.checkerframework.framework.qual.SubtypeOf",
136:       "com.google.common.collect.ImmutableSortedSet$Builder",
137:       "com.google.common.base.Equivalence$Equals",
138:       "com.google.common.truth.Correspondence",
139:       "com.google.common.base.ElementTypesAreNonnullByDefault",
140:       "com.google.common.collect.AbstractMultiset$EntrySet",
141:       "com.google.common.base.Equivalence$Wrapper",
142:       "com.google.common.collect.Sets$ImprovedAbstractSet",
143:       "com.google.common.base.Preconditions",
144:       "com.google.common.truth.StandardSubjectBuilder$1",
145:       "com.google.common.collect.ImmutableEntry",
146:       "com.google.common.base.Joiner$1",
147:       "com.google.common.base.Converter$ConverterComposition",
148:       "com.google.common.base.Joiner$2",
149:       "com.google.common.collect.EmptyImmutableSetMultimap",
150:       "com.google.common.collect.HashBiMap$EntrySet",
151:       "com.google.common.collect.ImmutableList$Itr",
152:       "com.google.common.collect.ImmutableCollection",
153:       "com.google.common.collect.ImmutableEnumMap",
154:       "com.google.common.truth.Ordered",
155:       "com.google.common.collect.LinkedListMultimap$KeyList",
156:       "com.google.common.collect.Lists$OnePlusArrayList",
157:       "com.google.common.base.Objects",
158:       "com.google.common.collect.CompactHashMap$Itr",
159:       "com.google.common.collect.ImmutableSetMultimap",
160:       "com.google.common.collect.ImmutableCollection$Builder",
161:       "com.google.common.collect.Iterators$SingletonIterator",
162:       "com.google.common.collect.Iterators$6",
163:       "com.google.common.collect.BiMap",
164:       "com.google.common.collect.Iterators$9",
165:       "com.google.common.collect.ImmutableSet",
166:       "com.google.common.collect.Lists$AbstractListWrapper",
167:       "com.google.common.collect.AbstractMapBasedMultiset",
168:       "com.google.common.collect.Iterators$1",
169:       "com.google.common.collect.CompactHashMap",
170:       "com.google.common.collect.Iterators$4",
171:       "com.google.common.collect.Iterators$5",
172:       "com.google.common.collect.AbstractIterator$State",
173:       "com.google.common.base.Converter$ReverseConverter",
174:       "com.google.common.base.ExtraObjectsMethodsForWeb",
175:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
176:       "com.google.common.truth.Platform",
177:       "com.google.common.collect.Lists$StringAsImmutableList",
178:       "com.google.common.collect.Lists$2",
179:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
180:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
181:       "com.google.common.collect.CompactHashMap$EntrySetView",
182:       "com.google.common.truth.LazyMessage",
183:       "com.google.common.collect.Lists$1",
184:       "com.google.common.collect.ImmutableMultimap$Builder",
185:       "com.google.common.base.Equivalence$Identity",
186:       "com.google.common.truth.Subject$ComparisonResult",
187:       "com.google.common.collect.Multiset",
188:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
189:       "com.google.common.collect.AbstractMultimap",
190:       "com.google.common.base.Supplier",
191:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
192:       "com.google.common.collect.HashBiMap$View",
193:       "com.google.common.truth.IterableSubject$PairwiseChecker",
194:       "com.google.common.collect.ImmutableList",
195:       "com.google.common.collect.ReverseOrdering",
196:       "com.google.common.collect.FluentIterable$1",
197:       "com.google.common.collect.FluentIterable$2",
198:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
199:       "com.google.common.truth.Fact",
200:       "com.google.common.collect.FluentIterable$3",
201:       "org.checkerframework.checker.nullness.qual.Nullable",
202:       "com.google.common.collect.NullnessCasts",
203:       "org.checkerframework.framework.qual.DefaultFor",
204:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
205:       "com.google.common.collect.SortedMultisetBridge",
206:       "com.google.common.collect.ImmutableMap$Builder",
207:       "com.google.common.base.Converter$FunctionBasedConverter",
208:       "com.google.common.collect.HashBiMap",
209:       "com.google.common.collect.Maps$EntryTransformer",
210:       "com.google.common.collect.Ordering",
211:       "com.google.common.collect.FluentIterable$3$1",
212:       "com.google.common.collect.NaturalOrdering",
213:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
214:       "com.google.common.collect.LinkedListMultimap$Node",
215:       "com.google.common.collect.AllEqualOrdering",
216:       "com.google.common.collect.Hashing",
217:       "com.google.common.collect.ImmutableList$SubList",
218:       "com.google.common.collect.ListMultimap",
219:       "com.google.common.base.FunctionalEquivalence",
220:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
221:       "com.google.common.truth.ErrorWithFacts",
222:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
223:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
224:       "com.google.common.collect.RegularImmutableList",
225:       "com.google.common.collect.SortedMultiset",
226:       "com.google.common.truth.IterableSubject",
227:       "com.google.common.collect.FluentIterable",
228:       "com.google.common.base.Optional",
229:       "com.google.common.collect.Lists$TransformingRandomAccessList",
230:       "com.google.common.collect.Iterators$ArrayItr",
231:       "com.google.common.collect.RegularImmutableMap$KeySet",
232:       "com.google.common.collect.AbstractIterator$1",
233:       "com.google.common.collect.BaseImmutableMultimap",
234:       "com.google.common.collect.Multisets",
235:       "com.google.common.collect.CompactHashMap$MapEntry",
236:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
237:       "com.google.common.collect.SortedMapDifference",
238:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
239:       "com.google.common.collect.CompactHashMap$2",
240:       "com.google.common.collect.RegularImmutableSet",
241:       "com.google.common.truth.Subject$EqualityCheck",
242:       "com.google.common.collect.LexicographicalOrdering",
243:       "com.google.common.base.ParametricNullness",
244:       "com.google.common.collect.ImmutableListMultimap",
245:       "com.google.common.collect.ImmutableMultimap$1",
246:       "com.google.common.base.Present",
247:       "com.google.common.collect.ImmutableMultimap$2",
248:       "com.google.common.collect.Iterables",
249:       "com.google.common.collect.LinkedListMultimap$1",
250:       "com.google.common.collect.Sets$SetView",
251:       "com.google.common.collect.ImmutableSet$Builder",
252:       "com.google.common.truth.Correspondence$DiffFormatter",
253:       "com.google.common.collect.SingletonImmutableSet",
254:       "com.google.common.collect.ImmutableSetMultimap$Builder",
255:       "com.google.common.truth.Correspondence$Transforming",
256:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
257:       "com.google.common.collect.ImmutableMultiset",
258:       "com.google.common.truth.Correspondence$ExceptionStore",
259:       "com.google.common.collect.UsingToStringOrdering",
260:       "com.google.common.truth.ComparableSubject",
261:       "com.google.common.collect.Multisets$AbstractEntry",
262:       "com.google.common.collect.ImmutableMultimap$Keys",
263:       "com.google.common.truth.FailureMetadata",
264:       "com.google.common.collect.Lists$TransformingSequentialList",
265:       "com.google.common.primitives.IntsMethodsForWeb",
266:       "com.google.common.collect.ObjectArrays",
267:       "com.google.common.collect.ForwardingIterator",
268:       "com.google.common.collect.AbstractIterator",
269:       "com.google.common.truth.Correspondence$FormattingDiffs",
270:       "com.google.common.truth.Correspondence$Equality",
271:       "com.google.common.base.MoreObjects",
272:       "com.google.common.base.Suppliers$MemoizingSupplier",
273:       "com.google.common.collect.MapDifference",
274:       "com.google.common.collect.ObjectCountLinkedHashMap",
275:       "com.google.common.collect.ConcurrentHashMultiset$2",
276:       "com.google.common.collect.ConcurrentHashMultiset",
277:       "com.google.common.collect.SortedIterable",
278:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
279:       "com.google.common.collect.ConcurrentHashMultiset$3",
280:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
281:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
282:       "com.google.common.collect.UnmodifiableIterator",
283:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
284:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
285:       "com.google.common.collect.ImmutableEnumSet",
286:       "com.google.common.collect.Lists$RandomAccessListWrapper",
287:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
288:       "com.google.common.collect.HashBiMap$View$1",
289:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
290:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
291:       "com.google.common.base.Converter",
292:       "com.google.common.collect.LinkedListMultimap",
293:       "com.google.common.collect.Maps$8",
294:       "com.google.common.base.Function",
295:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
296:       "com.google.common.collect.ImmutableMap",
297:       "com.google.common.collect.ComparatorOrdering",
298:       "com.google.common.collect.AbstractIndexedListIterator",
299:       "com.google.common.collect.HashBiMap$EntryForKey",
300:       "com.google.common.collect.CollectPreconditions",
301:       "com.google.common.collect.Multiset$Entry",
302:       "com.google.common.truth.Subject",
303:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
304:       "com.google.common.collect.Sets",
305:       "com.google.common.collect.ObjectCountHashMap",
306:       "com.google.common.collect.BoundType",
307:       "com.google.common.collect.ExplicitOrdering",
308:       "com.google.common.collect.CompactHashSet",
309:       "com.google.common.collect.ImmutableList$Builder",
310:       "com.google.common.collect.ImmutableMap$1",
311:       "com.google.common.collect.Iterables$5",
312:       "com.google.common.collect.ForwardingObject",
313:       "com.google.common.collect.AbstractMultiset",
314:       "com.google.common.collect.Multimap",
315:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
316:       "com.google.common.collect.Iterators",
317:       "com.google.common.collect.CompoundOrdering",
318:       "com.google.common.collect.ImmutableBiMap",
319:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
320:       "com.google.common.base.PairwiseEquivalence",
321:       "com.google.common.collect.Multisets$EntrySet",
322:       "com.google.common.collect.CompactHashing",
323:       "com.google.common.base.Suppliers",
324:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
325:       "com.google.common.collect.RegularImmutableMap$EntrySet",
326:       "com.google.common.base.Equivalence",
327:       "com.google.common.collect.ReverseNaturalOrdering",
328:       "com.google.common.truth.StandardSubjectBuilder",
329:       "com.google.common.primitives.Ints",
330:       "com.google.common.collect.Maps",
331:       "com.google.common.collect.SetMultimap",
332:       "com.google.common.collect.TransformedIterator",
333:       "com.google.common.truth.GraphMatching$HopcroftKarp",
334:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
335:       "com.google.common.collect.Iterators$MergingIterator",
336:       "com.google.common.truth.Correspondence$StoredException",
337:       "com.google.common.collect.RegularImmutableSortedSet"
338:     );
339:   } 
340:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
341:     mock(Class.forName("com.google.common.base.Function", false, IterableSubject_174_tmp__ESTest_scaffolding.class.getClassLoader()));
342:     mock(Class.forName("com.google.common.truth.Correspondence$BinaryPredicate", false, IterableSubject_174_tmp__ESTest_scaffolding.class.getClassLoader()));
343:     mock(Class.forName("com.google.common.truth.Correspondence$DiffFormatter", false, IterableSubject_174_tmp__ESTest_scaffolding.class.getClassLoader()));
344:     mock(Class.forName("java.util.Comparator", false, IterableSubject_174_tmp__ESTest_scaffolding.class.getClassLoader()));
345:   }
346: 
347:   private static void resetClasses() {
348:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_174_tmp__ESTest_scaffolding.class.getClassLoader()); 
349: 
350:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
351:       "com.google.common.truth.Subject",
352:       "com.google.common.truth.IterableSubject",
353:       "com.google.common.truth.IterableSubject$2",
354:       "com.google.common.truth.IterableSubject$1",
355:       "com.google.common.truth.IterableSubject$3",
356:       "com.google.common.truth.IterableSubject$4",
357:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
358:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
359:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
360:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
361:       "com.google.common.base.Optional",
362:       "com.google.common.base.Absent",
363:       "com.google.common.collect.ImmutableCollection",
364:       "com.google.common.collect.UnmodifiableIterator",
365:       "com.google.common.collect.UnmodifiableListIterator",
366:       "com.google.common.collect.AbstractIndexedListIterator",
367:       "com.google.common.collect.ImmutableList$Itr",
368:       "com.google.common.collect.ImmutableList",
369:       "com.google.common.collect.Ordering",
370:       "com.google.common.collect.NaturalOrdering",
371:       "com.google.common.truth.Correspondence",
372:       "com.google.common.truth.Correspondence$Equality",
373:       "com.google.common.truth.FailureMetadata",
374:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
375:       "com.google.common.collect.ImmutableMultiset",
376:       "com.google.common.collect.ImmutableSortedMultiset",
377:       "com.google.common.base.Preconditions",
378:       "com.google.common.collect.ImmutableCollection$Builder",
379:       "com.google.common.collect.ImmutableMultiset$Builder",
380:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
381:       "com.google.common.collect.ImmutableSet",
382:       "com.google.common.collect.ImmutableSortedSet",
383:       "com.google.common.collect.RegularImmutableSortedSet",
384:       "com.google.common.collect.RegularImmutableSortedMultiset",
385:       "com.google.common.base.Converter",
386:       "com.google.common.base.Converter$FunctionBasedConverter",
387:       "com.google.common.base.Converter$IdentityConverter",
388:       "com.google.common.base.Converter$ConverterComposition",
389:       "com.google.common.truth.Correspondence$Transforming",
390:       "com.google.common.base.Functions",
391:       "com.google.common.base.Functions$IdentityFunction",
392:       "com.google.common.truth.Correspondence$ExceptionStore",
393:       "com.google.common.truth.SubjectUtils",
394:       "com.google.common.collect.Lists",
395:       "com.google.common.collect.Iterables",
396:       "com.google.common.collect.AbstractMultimap",
397:       "com.google.common.collect.AbstractMapBasedMultimap",
398:       "com.google.common.collect.AbstractListMultimap",
399:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
400:       "com.google.common.collect.ArrayListMultimap",
401:       "com.google.common.collect.Platform",
402:       "com.google.common.collect.CompactHashMap",
403:       "com.google.common.primitives.IntsMethodsForWeb",
404:       "com.google.common.primitives.Ints",
405:       "com.google.common.collect.CollectPreconditions",
406:       "com.google.common.collect.CompactHashing",
407:       "com.google.common.collect.Hashing",
408:       "com.google.common.base.ExtraObjectsMethodsForWeb",
409:       "com.google.common.base.Objects",
410:       "com.google.common.truth.Fact",
411:       "com.google.common.collect.Collections2",
412:       "com.google.common.collect.AbstractMultiset",
413:       "com.google.common.collect.AbstractMapBasedMultiset",
414:       "com.google.common.collect.LinkedHashMultiset",
415:       "com.google.common.collect.ObjectCountHashMap",
416:       "com.google.common.collect.ObjectCountLinkedHashMap",
417:       "com.google.common.collect.AbstractSortedMultiset",
418:       "com.google.common.collect.TreeMultiset",
419:       "com.google.common.collect.GeneralRange",
420:       "com.google.common.collect.TreeMultiset$AvlNode",
421:       "com.google.common.collect.TreeMultiset$Reference",
422:       "com.google.common.collect.TreeMultiset$Aggregate",
423:       "com.google.common.collect.Multisets",
424:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
425:       "com.google.common.collect.Sets$ImprovedAbstractSet",
426:       "com.google.common.collect.Multisets$EntrySet",
427:       "com.google.common.collect.AbstractMultiset$EntrySet",
428:       "com.google.common.collect.TreeMultiset$2",
429:       "com.google.common.base.Suppliers",
430:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
431:       "com.google.common.truth.Platform",
432:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
433:       "com.google.common.collect.ImmutableList$Builder",
434:       "com.google.common.collect.ObjectArrays",
435:       "com.google.common.collect.Sets",
436:       "com.google.common.base.CharMatcher",
437:       "com.google.common.base.CharMatcher$FastMatcher",
438:       "com.google.common.base.CharMatcher$Is",
439:       "com.google.common.base.CharMatcher$InRange",
440:       "com.google.common.base.CaseFormat",
441:       "com.google.common.base.Ascii",
442:       "com.google.common.collect.ConcurrentHashMultiset",
443:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
444:       "com.google.common.collect.AbstractIterator",
445:       "com.google.common.collect.ConcurrentHashMultiset$2",
446:       "com.google.common.collect.AbstractIterator$State",
447:       "com.google.common.collect.ForwardingObject",
448:       "com.google.common.collect.ForwardingIterator",
449:       "com.google.common.collect.ConcurrentHashMultiset$3",
450:       "com.google.common.collect.AbstractIterator$1",
451:       "com.google.common.base.Strings",
452:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
453:       "com.google.common.collect.Maps",
454:       "com.google.common.truth.Correspondence$FormattingDiffs",
455:       "com.google.common.collect.Lists$OnePlusArrayList",
456:       "com.google.common.truth.LazyMessage",
457:       "com.google.common.truth.StandardSubjectBuilder",
458:       "com.google.common.collect.Iterators",
459:       "com.google.common.truth.Subject$ComparisonResult",
460:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
461:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
462:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
463:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
464:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
465:       "com.google.common.truth.ComparableSubject",
466:       "com.google.common.truth.DoubleSubject",
467:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
468:       "com.google.common.collect.AbstractMapBasedMultiset$2",
469:       "com.google.common.collect.BaseImmutableMultimap",
470:       "com.google.common.collect.ImmutableMultimap",
471:       "com.google.common.collect.ImmutableSetMultimap",
472:       "com.google.common.collect.ImmutableMultimap$Builder",
473:       "com.google.common.collect.ImmutableSetMultimap$Builder",
474:       "com.google.common.collect.CompactHashMap$EntrySetView",
475:       "com.google.common.collect.ImmutableMap",
476:       "com.google.common.collect.RegularImmutableMap",
477:       "com.google.common.collect.RegularImmutableSet",
478:       "com.google.common.collect.EmptyImmutableSetMultimap",
479:       "com.google.common.base.Joiner",
480:       "com.google.common.base.Joiner$1",
481:       "com.google.common.truth.Correspondence$StoredException",
482:       "com.google.common.collect.Multisets$AbstractEntry",
483:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
484:       "com.google.common.collect.RegularImmutableMultiset",
485:       "com.google.common.collect.IndexedImmutableSet",
486:       "com.google.common.collect.ImmutableMultiset$EntrySet",
487:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
488:       "com.google.common.collect.ImmutableMultimap$1",
489:       "com.google.common.collect.RegularImmutableMap$EntrySet",
490:       "com.google.common.collect.CompactHashSet",
491:       "com.google.common.collect.ImmutableMap$Builder",
492:       "com.google.common.collect.CompactHashMap$Itr",
493:       "com.google.common.collect.CompactHashMap$2",
494:       "com.google.common.collect.AbstractMapEntry",
495:       "com.google.common.collect.CompactHashMap$MapEntry",
496:       "com.google.common.collect.Multisets$ImmutableEntry",
497:       "com.google.common.collect.NullnessCasts",
498:       "com.google.common.base.Converter$1",
499:       "com.google.common.base.NullnessCasts",
500:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
501:       "com.google.common.base.Present",
502:       "com.google.common.base.Equivalence",
503:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
504:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
505:       "com.google.common.base.Equivalence$Wrapper",
506:       "com.google.common.collect.FluentIterable",
507:       "com.google.common.collect.Iterables$5",
508:       "com.google.common.collect.TransformedIterator",
509:       "com.google.common.collect.Iterators$6",
510:       "com.google.common.collect.HashMultiset",
511:       "com.google.common.base.Converter$ReverseConverter",
512:       "com.google.common.collect.SingletonImmutableSet",
513:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
514:       "com.google.common.collect.LinkedListMultimap",
515:       "com.google.common.collect.Multisets$ElementSet",
516:       "com.google.common.collect.SortedMultisets$ElementSet",
517:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
518:       "com.google.common.collect.LinkedListMultimap$Node",
519:       "com.google.common.collect.LinkedListMultimap$KeyList",
520:       "com.google.common.collect.RegularImmutableList",
521:       "com.google.common.base.Throwables",
522:       "com.google.common.math.IntMath",
523:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
524:       "com.google.common.collect.FluentIterable$3",
525:       "com.google.common.collect.FluentIterable$3$1",
526:       "com.google.common.collect.Iterators$ConcatenatedIterator",
527:       "com.google.common.collect.Iterators$ArrayItr",
528:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
529:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
530:       "com.google.common.truth.Subject$EqualityCheck",
531:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
532:       "com.google.common.collect.RegularImmutableMap$KeySet",
533:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
534:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
535:       "com.google.common.truth.GraphMatching",
536:       "com.google.common.truth.GraphMatching$HopcroftKarp",
537:       "com.google.common.collect.HashBiMap",
538:       "com.google.common.collect.ImmutableBiMap",
539:       "com.google.common.collect.HashBiMap$View",
540:       "com.google.common.collect.HashBiMap$EntrySet",
541:       "com.google.common.collect.ImmutableBiMap$Builder",
542:       "com.google.common.collect.HashBiMap$View$1",
543:       "com.google.common.collect.RegularImmutableBiMap",
544:       "com.google.common.collect.Iterators$SingletonIterator",
545:       "com.google.common.collect.ImmutableEntry",
546:       "com.google.common.base.MoreObjects",
547:       "com.google.common.collect.HashBiMap$EntryForKey",
548:       "com.google.common.collect.HashBiMap$Inverse",
549:       "com.google.common.collect.LinkedListMultimap$1",
550:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
551:     );
552:   }
553: }

[MASTER] 16:15:25.838 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_175_1731035725542/com/google/common/truth/IterableSubject_175_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_175_1731035725542/com/google/common/truth/IterableSubject_175_tmp__ESTest_scaffolding.java]]
[MASTER] 16:15:25.838 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:t/dependency/asm-9.6.jar:t/dependency/auto-value-annotations-1.10.4.jar:t/dependency/checker-qual-3.42.0.jar:t/dependency/error_prone_annotations-2.23.0.jar:t/dependency/failureaccess-1.0.2.jar:t/dependency/guava-33.0.0-android.jar:t/dependency/guava-gwt-33.0.0-jre.jar:t/dependency/guava-testlib-33.0.0-android.jar:t/dependency/gwt-user-2.10.0.jar:t/dependency/hamcrest-core-1.3.jar:t/dependency/j2objc-annotations-2.8.jar:t/dependency/javax.servlet-api-3.1.0.jar:t/dependency/jsinterop-annotations-2.0.0.jar:t/dependency/jsr305-3.0.2.jar:t/dependency/junit-4.13.2.jar:t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:t/dependency/sac-1.3.jar:t/dependency/validation-api-1.0.0.GA.jar:t/dependency/validation-api-1.0.0.GA-sources.jar:/home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:25.838 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/wtwhite/code/regression-test-generation/evosuite/evosuite-1.2.0.jar:/home/wtwhite/code/craw-redhat-oss/wget/crawl/repo1.maven.org/maven2/com/google/truth/truth/1.2.0/truth-1.2.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/asm-9.6.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/auto-value-annotations-1.10.4.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/checker-qual-3.42.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/error_prone_annotations-2.23.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/failureaccess-1.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-gwt-33.0.0-jre.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/guava-testlib-33.0.0-android.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/gwt-user-2.10.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/hamcrest-core-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/j2objc-annotations-2.8.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/javax.servlet-api-3.1.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsinterop-annotations-2.0.0.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/jsr305-3.0.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/junit-4.13.2.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/sac-1.3.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA.jar:/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0/t/dependency/validation-api-1.0.0.GA-sources.jar
[MASTER] 16:15:25.839 [logback-2] ERROR JUnitAnalyzer - Diagnostic: duplicate class: com.google.common.base.ElementTypesAreNonnullByDefault: 41
[MASTER] 16:15:25.839 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot access com.google.common.collect.ElementTypesAreNonnullByDefault
  bad source file: t/dependency/guava-gwt-33.0.0-jre.jar(com/google/common/collect/ElementTypesAreNonnullByDefault.java)
    file does not contain class com.google.common.collect.ElementTypesAreNonnullByDefault
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.: 27
[MASTER] 16:15:25.840 [logback-1] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 16:15:25.840 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_175_1731035725542/com/google/common/truth/IterableSubject_175_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Nov 08 03:15:25 GMT 2024
4:  */
5: 
6: package com.google.common.truth;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import com.google.common.base.Converter;
13: import com.google.common.base.Function;
14: import com.google.common.collect.BoundType;
15: import com.google.common.truth.Correspondence;
16: import com.google.common.truth.Fact;
17: import com.google.common.truth.FailureMetadata;
18: import com.google.common.truth.IterableSubject;
19: import com.google.common.truth.Ordered;
20: import java.sql.BatchUpdateException;
21: import java.sql.SQLInvalidAuthorizationSpecException;
22: import java.sql.SQLNonTransientConnectionException;
23: import java.sql.SQLNonTransientException;
24: import java.sql.SQLTransientConnectionException;
25: import java.util.Comparator;
26: import java.util.EnumSet;
27: import java.util.HashSet;
28: import java.util.LinkedHashSet;
29: import java.util.Locale;
30: import java.util.Map;
31: import java.util.NavigableSet;
32: import java.util.PriorityQueue;
33: import java.util.Stack;
34: import java.util.TreeMap;
35: import java.util.Vector;
36: import java.util.concurrent.ConcurrentSkipListMap;
37: import org.evosuite.runtime.EvoRunner;
38: import org.evosuite.runtime.EvoRunnerParameters;
39: import org.evosuite.runtime.ViolatedAssumptionAnswer;
40: import org.evosuite.runtime.mock.java.lang.MockException;
41: import org.evosuite.runtime.mock.java.lang.MockThrowable;
42: import org.junit.runner.RunWith;
43: 
44: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
45: public class IterableSubject_175_tmp__ESTest extends IterableSubject_175_tmp__ESTest_scaffolding {
46: 
47:   @Test(timeout = 4000)
48:   public void test00()  throws Throwable  {
49:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1rk");
50:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
51:       Object object0 = new Object();
52:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
53:       Object object1 = new Object();
54:       iterableSubject0.containsNoneOf(object0, object1, throwableArray0);
55:       assertEquals(0, throwableArray0.length);
56:   }
57: 
58:   @Test(timeout = 4000)
59:   public void test01()  throws Throwable  {
60:       TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> treeMap0 = new TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>();
61:       ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Map<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) treeMap0);
62:       NavigableSet<SQLNonTransientConnectionException> navigableSet0 = concurrentSkipListMap0.keySet();
63:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, navigableSet0);
64:       // Undeclared exception!
65:       try { 
66:         iterableSubject0.hasSize(1);
67:         fail("Expecting exception: NullPointerException");
68:       
69:       } catch(NullPointerException e) {
70:          //
71:          // no message in exception (getMessage() returned null)
72:          //
73:          verifyException("com.google.common.base.Preconditions", e);
74:       }
75:   }
76: 
77:   @Test(timeout = 4000)
78:   public void test02()  throws Throwable  {
79:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
80:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
81:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
82:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
83:       Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
84:       PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>(2431, comparator0);
85:       Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsExactlyElementsIn((Iterable<? extends Locale.Category>) priorityQueue0);
86:       assertNotNull(ordered0);
87:   }
88: 
89:   @Test(timeout = 4000)
90:   public void test03()  throws Throwable  {
91:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
92:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
93:       linkedHashSet0.add("]zU(@TF1JK");
94:       Object[] objectArray0 = new Object[5];
95:       objectArray0[0] = (Object) "]zU(@TF1JK";
96:       iterableSubject0.containsAnyIn(objectArray0);
97:       assertEquals(5, objectArray0.length);
98:   }
99: 
100:   @Test(timeout = 4000)
101:   public void test04()  throws Throwable  {
102:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
103:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.util.HashSet@3");
104:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
105:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
106:       Ordered ordered0 = iterableSubject0.containsExactlyElementsIn((Object[]) throwableArray0);
107:       assertNotNull(ordered0);
108:   }
109: 
110:   @Test(timeout = 4000)
111:   public void test05()  throws Throwable  {
112:       Stack<Fact> stack0 = new Stack<Fact>();
113:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
114:       String string0 = iterableSubject0.actualCustomStringRepresentation();
115:       assertEquals("[]", string0);
116:   }
117: 
118:   @Test(timeout = 4000)
119:   public void test06()  throws Throwable  {
120:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
121:       // Undeclared exception!
122:       try { 
123:         iterableSubject0.isNotIn((Iterable<?>) null);
124:         fail("Expecting exception: NullPointerException");
125:       
126:       } catch(NullPointerException e) {
127:          //
128:          // no message in exception (getMessage() returned null)
129:          //
130:          verifyException("com.google.common.base.Preconditions", e);
131:       }
132:   }
133: 
134:   @Test(timeout = 4000)
135:   public void test07()  throws Throwable  {
136:       Stack<Fact> stack0 = new Stack<Fact>();
137:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
138:       Object[] objectArray0 = new Object[6];
139:       objectArray0[3] = (Object) iterableSubject0;
140:       // Undeclared exception!
141:       try { 
142:         iterableSubject0.isNoneOf((Object) null, stack0, objectArray0);
143:         fail("Expecting exception: UnsupportedOperationException");
144:       
145:       } catch(UnsupportedOperationException e) {
146:          //
147:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
148:          //
149:          verifyException("com.google.common.truth.Subject", e);
150:       }
151:   }
152: 
153:   @Test(timeout = 4000)
154:   public void test08()  throws Throwable  {
155:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
156:       linkedHashSet0.add((String) null);
157:       linkedHashSet0.add("java.util.concurrent.ConcurrentSkipListMap$KeySet@0000000004");
158:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
159:       // Undeclared exception!
160:       try { 
161:         iterableSubject0.isInStrictOrder();
162:         fail("Expecting exception: NullPointerException");
163:       
164:       } catch(NullPointerException e) {
165:          //
166:          // no message in exception (getMessage() returned null)
167:          //
168:          verifyException("com.google.common.base.Preconditions", e);
169:       }
170:   }
171: 
172:   @Test(timeout = 4000)
173:   public void test09()  throws Throwable  {
174:       Stack<Fact> stack0 = new Stack<Fact>();
175:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
176:       stack0.add(fact0);
177:       stack0.add(fact0);
178:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
179:       // Undeclared exception!
180:       try { 
181:         iterableSubject0.isInStrictOrder();
182:         fail("Expecting exception: ClassCastException");
183:       
184:       } catch(ClassCastException e) {
185:          //
186:          // com.google.common.truth.Fact cannot be cast to java.lang.Comparable
187:          //
188:          verifyException("com.google.common.collect.NaturalOrdering", e);
189:       }
190:   }
191: 
192:   @Test(timeout = 4000)
193:   public void test10()  throws Throwable  {
194:       TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> treeMap0 = new TreeMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>();
195:       ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException> concurrentSkipListMap0 = new ConcurrentSkipListMap<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Map<? extends SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) treeMap0);
196:       NavigableSet<SQLNonTransientConnectionException> navigableSet0 = concurrentSkipListMap0.keySet();
197:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, navigableSet0);
198:       // Undeclared exception!
199:       try { 
200:         iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super Locale.Category, ? super Locale.Category>) null);
201:         fail("Expecting exception: NullPointerException");
202:       
203:       } catch(NullPointerException e) {
204:          //
205:          // no message in exception (getMessage() returned null)
206:          //
207:          verifyException("com.google.common.base.Preconditions", e);
208:       }
209:   }
210: 
211:   @Test(timeout = 4000)
212:   public void test11()  throws Throwable  {
213:       Stack<Fact> stack0 = new Stack<Fact>();
214:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
215:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
216:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Object>) correspondence0);
217:       Object[] objectArray0 = new Object[4];
218:       objectArray0[2] = (Object) iterableSubject_UsingCorrespondence0;
219:       // Undeclared exception!
220:       try { 
221:         iterableSubject0.containsNoneIn(objectArray0);
222:         fail("Expecting exception: UnsupportedOperationException");
223:       
224:       } catch(UnsupportedOperationException e) {
225:          //
226:          // UsingCorrespondence.hashCode() is not supported.
227:          //
228:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
229:       }
230:   }
231: 
232:   @Test(timeout = 4000)
233:   public void test12()  throws Throwable  {
234:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
235:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
236:       // Undeclared exception!
237:       try { 
238:         iterableSubject0.containsNoneIn((Iterable<?>) null);
239:         fail("Expecting exception: NullPointerException");
240:       
241:       } catch(NullPointerException e) {
242:          //
243:          // no message in exception (getMessage() returned null)
244:          //
245:          verifyException("com.google.common.base.Preconditions", e);
246:       }
247:   }
248: 
249:   @Test(timeout = 4000)
250:   public void test13()  throws Throwable  {
251:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
252:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
253:       // Undeclared exception!
254:       try { 
255:         iterableSubject0.containsExactlyElementsIn((Object[]) null);
256:         fail("Expecting exception: NullPointerException");
257:       
258:       } catch(NullPointerException e) {
259:          //
260:          // no message in exception (getMessage() returned null)
261:          //
262:          verifyException("com.google.common.base.Preconditions", e);
263:       }
264:   }
265: 
266:   @Test(timeout = 4000)
267:   public void test14()  throws Throwable  {
268:       Stack<Fact> stack0 = new Stack<Fact>();
269:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
270:       stack0.add(fact0);
271:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
272:       int[] intArray0 = new int[1];
273:       BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "A'", 239, intArray0);
274:       // Undeclared exception!
275:       try { 
276:         iterableSubject0.containsExactlyElementsIn((Iterable<?>) batchUpdateException0);
277:         fail("Expecting exception: NullPointerException");
278:       
279:       } catch(NullPointerException e) {
280:          //
281:          // no message in exception (getMessage() returned null)
282:          //
283:          verifyException("com.google.common.base.Preconditions", e);
284:       }
285:   }
286: 
287:   @Test(timeout = 4000)
288:   public void test15()  throws Throwable  {
289:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
290:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
291:       Object[] objectArray0 = new Object[4];
292:       objectArray0[2] = (Object) iterableSubject0;
293:       // Undeclared exception!
294:       try { 
295:         iterableSubject0.containsAtLeastElementsIn(objectArray0);
296:         fail("Expecting exception: UnsupportedOperationException");
297:       
298:       } catch(UnsupportedOperationException e) {
299:          //
300:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
301:          //
302:          verifyException("com.google.common.truth.Subject", e);
303:       }
304:   }
305: 
306:   @Test(timeout = 4000)
307:   public void test16()  throws Throwable  {
308:       HashSet<String> hashSet0 = new HashSet<String>();
309:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
310:       // Undeclared exception!
311:       try { 
312:         iterableSubject0.containsAtLeastElementsIn((Object[]) null);
313:         fail("Expecting exception: NullPointerException");
314:       
315:       } catch(NullPointerException e) {
316:          //
317:          // no message in exception (getMessage() returned null)
318:          //
319:          verifyException("java.util.Objects", e);
320:       }
321:   }
322: 
323:   @Test(timeout = 4000)
324:   public void test17()  throws Throwable  {
325:       Stack<Fact> stack0 = new Stack<Fact>();
326:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
327:       Object[] objectArray0 = new Object[1];
328:       // Undeclared exception!
329:       try { 
330:         iterableSubject0.containsAtLeastElementsIn(objectArray0);
331:         fail("Expecting exception: NullPointerException");
332:       
333:       } catch(NullPointerException e) {
334:          //
335:          // no message in exception (getMessage() returned null)
336:          //
337:          verifyException("com.google.common.base.Preconditions", e);
338:       }
339:   }
340: 
341:   @Test(timeout = 4000)
342:   public void test18()  throws Throwable  {
343:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
344:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
345:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
346:       SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("rW]gH@o+&ddE !|{f", sQLNonTransientConnectionException0);
347:       sQLNonTransientConnectionException0.initCause(sQLNonTransientException0);
348:       // Undeclared exception!
349:       iterableSubject0.containsAtLeastElementsIn((Iterable<?>) sQLNonTransientConnectionException0);
350:   }
351: 
352:   @Test(timeout = 4000)
353:   public void test19()  throws Throwable  {
354:       Stack<Fact> stack0 = new Stack<Fact>();
355:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
356:       // Undeclared exception!
357:       try { 
358:         iterableSubject0.containsAtLeastElementsIn((Iterable<?>) null);
359:         fail("Expecting exception: NullPointerException");
360:       
361:       } catch(NullPointerException e) {
362:          //
363:          // no message in exception (getMessage() returned null)
364:          //
365:          verifyException("com.google.common.base.Preconditions", e);
366:       }
367:   }
368: 
369:   @Test(timeout = 4000)
370:   public void test20()  throws Throwable  {
371:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, (Iterable<?>) null);
372:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
373:       // Undeclared exception!
374:       try { 
375:         iterableSubject0.containsAtLeast((Object) null, sQLNonTransientConnectionException0, (Object[]) null);
376:         fail("Expecting exception: NullPointerException");
377:       
378:       } catch(NullPointerException e) {
379:          //
380:          // no message in exception (getMessage() returned null)
381:          //
382:          verifyException("com.google.common.base.Preconditions", e);
383:       }
384:   }
385: 
386:   @Test(timeout = 4000)
387:   public void test21()  throws Throwable  {
388:       Stack<Fact> stack0 = new Stack<Fact>();
389:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
390:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^h~?0Ts2X)M3>M,R9", "^h~?0Ts2X)M3>M,R9");
391:       Object[] objectArray0 = new Object[8];
392:       objectArray0[1] = (Object) iterableSubject0;
393:       // Undeclared exception!
394:       try { 
395:         iterableSubject0.containsAnyOf(sQLNonTransientConnectionException0, (Object) null, objectArray0);
396:         fail("Expecting exception: UnsupportedOperationException");
397:       
398:       } catch(UnsupportedOperationException e) {
399:          //
400:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
401:          //
402:          verifyException("com.google.common.truth.Subject", e);
403:       }
404:   }
405: 
406:   @Test(timeout = 4000)
407:   public void test22()  throws Throwable  {
408:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
409:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
410:       Object object0 = new Object();
411:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
412:       // Undeclared exception!
413:       try { 
414:         iterableSubject0.containsAnyOf((Object) null, object0, throwableArray0);
415:         fail("Expecting exception: NullPointerException");
416:       
417:       } catch(NullPointerException e) {
418:          //
419:          // no message in exception (getMessage() returned null)
420:          //
421:          verifyException("com.google.common.base.Preconditions", e);
422:       }
423:   }
424: 
425:   @Test(timeout = 4000)
426:   public void test23()  throws Throwable  {
427:       LinkedHashSet<IterableSubject> linkedHashSet0 = new LinkedHashSet<IterableSubject>();
428:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
429:       Object[] objectArray0 = new Object[3];
430:       objectArray0[1] = (Object) iterableSubject0;
431:       // Undeclared exception!
432:       try { 
433:         iterableSubject0.containsAnyIn(objectArray0);
434:         fail("Expecting exception: UnsupportedOperationException");
435:       
436:       } catch(UnsupportedOperationException e) {
437:          //
438:          // Subject.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
439:          //
440:          verifyException("com.google.common.truth.Subject", e);
441:       }
442:   }
443: 
444:   @Test(timeout = 4000)
445:   public void test24()  throws Throwable  {
446:       HashSet<String> hashSet0 = new HashSet<String>();
447:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
448:       // Undeclared exception!
449:       try { 
450:         iterableSubject0.containsAnyIn((Object[]) null);
451:         fail("Expecting exception: NullPointerException");
452:       
453:       } catch(NullPointerException e) {
454:          //
455:          // no message in exception (getMessage() returned null)
456:          //
457:          verifyException("java.util.Objects", e);
458:       }
459:   }
460: 
461:   @Test(timeout = 4000)
462:   public void test25()  throws Throwable  {
463:       LinkedHashSet<IterableSubject.ElementFactGrouping> linkedHashSet0 = new LinkedHashSet<IterableSubject.ElementFactGrouping>();
464:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
465:       // Undeclared exception!
466:       try { 
467:         iterableSubject0.comparingElementsUsing((Correspondence<? super Object, ? super Object>) null);
468:         fail("Expecting exception: NullPointerException");
469:       
470:       } catch(NullPointerException e) {
471:          //
472:          // no message in exception (getMessage() returned null)
473:          //
474:          verifyException("com.google.common.base.Preconditions", e);
475:       }
476:   }
477: 
478:   @Test(timeout = 4000)
479:   public void test26()  throws Throwable  {
480:       HashSet<String> hashSet0 = new HashSet<String>();
481:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
482:       HashSet<String> hashSet1 = new HashSet<String>();
483:       hashSet1.add("");
484:       iterableSubject0.containsNoneIn((Iterable<?>) hashSet1);
485:       assertTrue(hashSet1.contains(""));
486:   }
487: 
488:   @Test(timeout = 4000)
489:   public void test27()  throws Throwable  {
490:       Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
491:       PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(vector0);
492:       PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
493:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue1);
494:       // Undeclared exception!
495:       try { 
496:         iterableSubject0.containsAnyIn((Iterable<?>) priorityQueue0);
497:         fail("Expecting exception: NullPointerException");
498:       
499:       } catch(NullPointerException e) {
500:          //
501:          // no message in exception (getMessage() returned null)
502:          //
503:          verifyException("com.google.common.base.Preconditions", e);
504:       }
505:   }
506: 
507:   @Test(timeout = 4000)
508:   public void test28()  throws Throwable  {
509:       Stack<Fact> stack0 = new Stack<Fact>();
510:       stack0.add((Fact) null);
511:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
512:       iterableSubject0.containsAnyIn((Iterable<?>) stack0);
513:       assertEquals(1, stack0.size());
514:   }
515: 
516:   @Test(timeout = 4000)
517:   public void test29()  throws Throwable  {
518:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1rk");
519:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
520:       // Undeclared exception!
521:       try { 
522:         iterableSubject0.isEmpty();
523:         fail("Expecting exception: NullPointerException");
524:       
525:       } catch(NullPointerException e) {
526:          //
527:          // no message in exception (getMessage() returned null)
528:          //
529:          verifyException("com.google.common.base.Preconditions", e);
530:       }
531:   }
532: 
533:   @Test(timeout = 4000)
534:   public void test30()  throws Throwable  {
535:       Stack<Fact> stack0 = new Stack<Fact>();
536:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
537:       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
538:       iterableSubject0.isInOrder(comparator0);
539:   }
540: 
541:   @Test(timeout = 4000)
542:   public void test31()  throws Throwable  {
543:       Stack<Fact> stack0 = new Stack<Fact>();
544:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
545:       Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
546:       iterableSubject0.isInStrictOrder(comparator0);
547:   }
548: 
549:   @Test(timeout = 4000)
550:   public void test32()  throws Throwable  {
551:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
552:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
553:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
554:       Function<Object, SQLNonTransientConnectionException> function0 = (Function<Object, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
555:       doReturn((Object) null).when(function0).apply(any());
556:       Converter<Object, SQLNonTransientConnectionException> converter0 = Converter.from((Function<? super Object, ? extends SQLNonTransientConnectionException>) function0, (Function<? super SQLNonTransientConnectionException, ?>) function0);
557:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
558:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super String, ?>) converter0);
559:       // Undeclared exception!
560:       try { 
561:         iterableSubject_UsingCorrespondence1.contains("java.sql.SQLNonTransientConnectionException@5");
562:         fail("Expecting exception: NullPointerException");
563:       
564:       } catch(NullPointerException e) {
565:          //
566:          // no message in exception (getMessage() returned null)
567:          //
568:          verifyException("com.google.common.base.Preconditions", e);
569:       }
570:   }
571: 
572:   @Test(timeout = 4000)
573:   public void test33()  throws Throwable  {
574:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
575:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
576:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
577:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
578:       doReturn(true, true).when(correspondence_BinaryPredicate0).apply(any() , anyString());
579:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
580:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
581:       String[] stringArray0 = new String[3];
582:       // Undeclared exception!
583:       try { 
584:         iterableSubject_UsingCorrespondence0.containsNoneOf("N(u#=)]#-j!o{7r=R", "N(u#=)]#-j!o{7r=R", stringArray0);
585:         fail("Expecting exception: NullPointerException");
586:       
587:       } catch(NullPointerException e) {
588:          //
589:          // no message in exception (getMessage() returned null)
590:          //
591:          verifyException("com.google.common.base.Preconditions", e);
592:       }
593:   }
594: 
595:   @Test(timeout = 4000)
596:   public void test34()  throws Throwable  {
597:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
598:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
599:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
600:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
601:       Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
602:       doReturn((Object) null, (Object) null).when(function0).apply(any());
603:       Converter<Object, Object> converter0 = Converter.identity();
604:       Converter<Object, String> converter1 = Converter.from((Function<? super Object, ? extends String>) function0, (Function<? super String, ?>) converter0);
605:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter1, (Function<? super Locale.Category, ?>) converter1);
606:       Locale.Category locale_Category0 = Locale.Category.DISPLAY;
607:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
608:       // Undeclared exception!
609:       try { 
610:         iterableSubject_UsingCorrespondence1.containsAnyOf(locale_Category0, locale_Category0, locale_CategoryArray0);
611:         fail("Expecting exception: NullPointerException");
612:       
613:       } catch(NullPointerException e) {
614:          //
615:          // no message in exception (getMessage() returned null)
616:          //
617:          verifyException("com.google.common.base.Preconditions", e);
618:       }
619:   }
620: 
621:   @Test(timeout = 4000)
622:   public void test35()  throws Throwable  {
623:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
624:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
625:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
626:       doReturn(false, false, false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
627:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, "");
628:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
629:       // Undeclared exception!
630:       try { 
631:         iterableSubject_UsingCorrespondence0.containsAnyOf("1t^=fE*j", "", (String[]) null);
632:         fail("Expecting exception: NullPointerException");
633:       
634:       } catch(NullPointerException e) {
635:          //
636:          // no message in exception (getMessage() returned null)
637:          //
638:          verifyException("com.google.common.base.Preconditions", e);
639:       }
640:   }
641: 
642:   @Test(timeout = 4000)
643:   public void test36()  throws Throwable  {
644:       Stack<Fact> stack0 = new Stack<Fact>();
645:       stack0.add((Fact) null);
646:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
647:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
648:       IterableSubject.UsingCorrespondence<Object, Object> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super Object, ? super Object>) correspondence0);
649:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
650:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Object>) correspondence0);
651:       Object object0 = new Object();
652:       // Undeclared exception!
653:       try { 
654:         iterableSubject_UsingCorrespondence1.containsAtLeast(iterableSubject_UsingCorrespondence0, object0, locale_CategoryArray0);
655:         fail("Expecting exception: UnsupportedOperationException");
656:       
657:       } catch(UnsupportedOperationException e) {
658:          //
659:          // UsingCorrespondence.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
660:          //
661:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
662:       }
663:   }
664: 
665:   @Test(timeout = 4000)
666:   public void test37()  throws Throwable  {
667:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
668:       linkedHashSet0.add("com.google.common.collect.LinkedListMultimap");
669:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
670:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
671:       IterableSubject.UsingCorrespondence<IterableSubject.UsingCorrespondence<Object, Object>, Comparable<String>> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<IterableSubject.UsingCorrespondence<Object, Object>, Comparable<String>>(iterableSubject0, correspondence0);
672:       Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsAtLeastElementsIn((Iterable<? extends Comparable<String>>) linkedHashSet0);
673:       assertNotNull(ordered0);
674:   }
675: 
676:   @Test(timeout = 4000)
677:   public void test38()  throws Throwable  {
678:       Stack<Fact> stack0 = new Stack<Fact>();
679:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
680:       stack0.add(fact0);
681:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
682:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
683:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
684:       // Undeclared exception!
685:       try { 
686:         iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
687:         fail("Expecting exception: NullPointerException");
688:       
689:       } catch(NullPointerException e) {
690:          //
691:          // no message in exception (getMessage() returned null)
692:          //
693:          verifyException("com.google.common.base.Preconditions", e);
694:       }
695:   }
696: 
697:   @Test(timeout = 4000)
698:   public void test39()  throws Throwable  {
699:       Stack<Fact> stack0 = new Stack<Fact>();
700:       stack0.add((Fact) null);
701:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
702:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
703:       stack0.add((Fact) null);
704:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
705:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
706:       // Undeclared exception!
707:       try { 
708:         iterableSubject_UsingCorrespondence0.containsExactly(locale_CategoryArray0);
709:         fail("Expecting exception: NullPointerException");
710:       
711:       } catch(NullPointerException e) {
712:          //
713:          // no message in exception (getMessage() returned null)
714:          //
715:          verifyException("com.google.common.base.Preconditions", e);
716:       }
717:   }
718: 
719:   @Test(timeout = 4000)
720:   public void test40()  throws Throwable  {
721:       Stack<Fact> stack0 = new Stack<Fact>();
722:       stack0.add((Fact) null);
723:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
724:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
725:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
726:       Ordered ordered0 = iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
727:       assertNotNull(ordered0);
728:   }
729: 
730:   @Test(timeout = 4000)
731:   public void test41()  throws Throwable  {
732:       Stack<Fact> stack0 = new Stack<Fact>();
733:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
734:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
735:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
736:       // Undeclared exception!
737:       try { 
738:         iterableSubject_UsingCorrespondence0.containsExactly((Locale.Category[]) null);
739:         fail("Expecting exception: NullPointerException");
740:       
741:       } catch(NullPointerException e) {
742:          //
743:          // no message in exception (getMessage() returned null)
744:          //
745:          verifyException("com.google.common.base.Preconditions", e);
746:       }
747:   }
748: 
749:   @Test(timeout = 4000)
750:   public void test42()  throws Throwable  {
751:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
752:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
753:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
754:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
755:       doReturn(true).when(correspondence_BinaryPredicate0).apply(any() , anyString());
756:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
757:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
758:       // Undeclared exception!
759:       try { 
760:         iterableSubject_UsingCorrespondence0.doesNotContain("b~V%=#)&yAS.>cy");
761:         fail("Expecting exception: NullPointerException");
762:       
763:       } catch(NullPointerException e) {
764:          //
765:          // no message in exception (getMessage() returned null)
766:          //
767:          verifyException("com.google.common.base.Preconditions", e);
768:       }
769:   }
770: 
771:   @Test(timeout = 4000)
772:   public void test43()  throws Throwable  {
773:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
774:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
775:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
776:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super String>) correspondence0);
777:       // Undeclared exception!
778:       try { 
779:         iterableSubject_UsingCorrespondence0.contains("");
780:         fail("Expecting exception: NullPointerException");
781:       
782:       } catch(NullPointerException e) {
783:          //
784:          // no message in exception (getMessage() returned null)
785:          //
786:          verifyException("com.google.common.base.Preconditions", e);
787:       }
788:   }
789: 
790:   @Test(timeout = 4000)
791:   public void test44()  throws Throwable  {
792:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
793:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
794:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
795:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
796:       doReturn(false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
797:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
798:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
799:       // Undeclared exception!
800:       try { 
801:         iterableSubject_UsingCorrespondence0.contains(">+");
802:         fail("Expecting exception: NullPointerException");
803:       
804:       } catch(NullPointerException e) {
805:          //
806:          // no message in exception (getMessage() returned null)
807:          //
808:          verifyException("com.google.common.base.Preconditions", e);
809:       }
810:   }
811: 
812:   @Test(timeout = 4000)
813:   public void test45()  throws Throwable  {
814:       Stack<Fact> stack0 = new Stack<Fact>();
815:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
816:       LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
817:       IterableSubject.ElementFactGrouping[] iterableSubject_ElementFactGroupingArray0 = IterableSubject.ElementFactGrouping.values();
818:       // Undeclared exception!
819:       try { 
820:         iterableSubject0.isNoneOf(linkedHashSet0, (Object) null, iterableSubject_ElementFactGroupingArray0);
821:         fail("Expecting exception: NullPointerException");
822:       
823:       } catch(NullPointerException e) {
824:          //
825:          // no message in exception (getMessage() returned null)
826:          //
827:          verifyException("com.google.common.base.Preconditions", e);
828:       }
829:   }
830: 
831:   @Test(timeout = 4000)
832:   public void test46()  throws Throwable  {
833:       Stack<Fact> stack0 = new Stack<Fact>();
834:       Fact fact0 = Fact.fact("O:h$*z", stack0);
835:       stack0.add(fact0);
836:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
837:       // Undeclared exception!
838:       try { 
839:         iterableSubject0.isNotIn(stack0);
840:         fail("Expecting exception: NullPointerException");
841:       
842:       } catch(NullPointerException e) {
843:          //
844:          // no message in exception (getMessage() returned null)
845:          //
846:          verifyException("com.google.common.base.Preconditions", e);
847:       }
848:   }
849: 
850:   @Test(timeout = 4000)
851:   public void test47()  throws Throwable  {
852:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
853:       linkedHashSet0.add("O:h$*z");
854:       linkedHashSet0.add("java.util.concurrent.ConcurrentSkipListMap$KeySet@0000000004");
855:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
856:       iterableSubject0.isInStrictOrder();
857:   }
858: 
859:   @Test(timeout = 4000)
860:   public void test48()  throws Throwable  {
861:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
862:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
863:       linkedHashSet0.add("](@TF1Ji");
864:       Object[] objectArray0 = new Object[3];
865:       // Undeclared exception!
866:       try { 
867:         iterableSubject0.containsExactlyElementsIn(objectArray0);
868:         fail("Expecting exception: NullPointerException");
869:       
870:       } catch(NullPointerException e) {
871:          //
872:          // no message in exception (getMessage() returned null)
873:          //
874:          verifyException("com.google.common.base.Preconditions", e);
875:       }
876:   }
877: 
878:   @Test(timeout = 4000)
879:   public void test49()  throws Throwable  {
880:       Stack<Fact> stack0 = new Stack<Fact>();
881:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
882:       stack0.add(fact0);
883:       stack0.add(fact0);
884:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
885:       int[] intArray0 = new int[1];
886:       BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "A'", 239, intArray0);
887:       // Undeclared exception!
888:       try { 
889:         iterableSubject0.containsExactlyElementsIn((Iterable<?>) batchUpdateException0);
890:         fail("Expecting exception: NullPointerException");
891:       
892:       } catch(NullPointerException e) {
893:          //
894:          // no message in exception (getMessage() returned null)
895:          //
896:          verifyException("com.google.common.base.Preconditions", e);
897:       }
898:   }
899: 
900:   @Test(timeout = 4000)
901:   public void test50()  throws Throwable  {
902:       Stack<Fact> stack0 = new Stack<Fact>();
903:       stack0.add((Fact) null);
904:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
905:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
906:       stack0.add((Fact) null);
907:       Object[] objectArray0 = new Object[7];
908:       objectArray0[1] = (Object) correspondence0;
909:       // Undeclared exception!
910:       try { 
911:         iterableSubject0.containsExactly(objectArray0);
912:         fail("Expecting exception: NullPointerException");
913:       
914:       } catch(NullPointerException e) {
915:          //
916:          // no message in exception (getMessage() returned null)
917:          //
918:          verifyException("com.google.common.base.Preconditions", e);
919:       }
920:   }
921: 
922:   @Test(timeout = 4000)
923:   public void test51()  throws Throwable  {
924:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
925:       linkedHashSet0.add((String) null);
926:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
927:       Ordered ordered0 = iterableSubject0.containsExactlyElementsIn((Iterable<?>) linkedHashSet0);
928:       assertNotNull(ordered0);
929:   }
930: 
931:   @Test(timeout = 4000)
932:   public void test52()  throws Throwable  {
933:       Stack<Fact> stack0 = new Stack<Fact>();
934:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
935:       stack0.add(fact0);
936:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
937:       Object[] objectArray0 = new Object[0];
938:       // Undeclared exception!
939:       try { 
940:         iterableSubject0.containsExactly(objectArray0);
941:         fail("Expecting exception: NullPointerException");
942:       
943:       } catch(NullPointerException e) {
944:          //
945:          // no message in exception (getMessage() returned null)
946:          //
947:          verifyException("com.google.common.base.Preconditions", e);
948:       }
949:   }
950: 
951:   @Test(timeout = 4000)
952:   public void test53()  throws Throwable  {
953:       Stack<Fact> stack0 = new Stack<Fact>();
954:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
955:       Object[] objectArray0 = new Object[1];
956:       // Undeclared exception!
957:       try { 
958:         iterableSubject0.containsExactly(objectArray0);
959:         fail("Expecting exception: NullPointerException");
960:       
961:       } catch(NullPointerException e) {
962:          //
963:          // no message in exception (getMessage() returned null)
964:          //
965:          verifyException("com.google.common.base.Preconditions", e);
966:       }
967:   }
968: 
969:   @Test(timeout = 4000)
970:   public void test54()  throws Throwable  {
971:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
972:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
973:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
974:       // Undeclared exception!
975:       try { 
976:         iterableSubject0.containsExactly((Object[]) null);
977:         fail("Expecting exception: NullPointerException");
978:       
979:       } catch(NullPointerException e) {
980:          //
981:          // no message in exception (getMessage() returned null)
982:          //
983:          verifyException("com.google.common.base.Preconditions", e);
984:       }
985:   }
986: 
987:   @Test(timeout = 4000)
988:   public void test55()  throws Throwable  {
989:       Stack<Fact> stack0 = new Stack<Fact>();
990:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
991:       Object[] objectArray0 = new Object[0];
992:       Ordered ordered0 = iterableSubject0.containsExactly(objectArray0);
993:       assertNotNull(ordered0);
994:   }
995: 
996:   @Test(timeout = 4000)
997:   public void test56()  throws Throwable  {
998:       Stack<Fact> stack0 = new Stack<Fact>();
999:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
1000:       stack0.add(fact0);
1001:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1002:       Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn((Iterable<?>) stack0);
1003:       assertNotNull(ordered0);
1004:   }
1005: 
1006:   @Test(timeout = 4000)
1007:   public void test57()  throws Throwable  {
1008:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
1009:       SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
1010:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
1011:       // Undeclared exception!
1012:       try { 
1013:         iterableSubject0.containsAnyIn((Iterable<?>) sQLNonTransientConnectionException1);
1014:         fail("Expecting exception: NullPointerException");
1015:       
1016:       } catch(NullPointerException e) {
1017:          //
1018:          // no message in exception (getMessage() returned null)
1019:          //
1020:          verifyException("com.google.common.base.Preconditions", e);
1021:       }
1022:   }
1023: 
1024:   @Test(timeout = 4000)
1025:   public void test58()  throws Throwable  {
1026:       PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
1027:       SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "expected", (-1933786899));
1028:       MockThrowable mockThrowable0 = new MockThrowable("expected", sQLInvalidAuthorizationSpecException0);
1029:       SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("O:h$*z", "O:h$*z", mockThrowable0);
1030:       MockException mockException0 = new MockException("java.util.HashSet@7", sQLTransientConnectionException0);
1031:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockException0);
1032:       priorityQueue0.add(sQLNonTransientConnectionException0);
1033:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, priorityQueue0);
1034:       iterableSubject0.containsNoDuplicates();
1035:   }
1036: 
1037:   @Test(timeout = 4000)
1038:   public void test59()  throws Throwable  {
1039:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1040:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1041:       linkedHashSet0.add("8]a3M\">ZlY");
1042:       // Undeclared exception!
1043:       try { 
1044:         iterableSubject0.doesNotContain("8]a3M\">ZlY");
1045:         fail("Expecting exception: NullPointerException");
1046:       
1047:       } catch(NullPointerException e) {
1048:          //
1049:          // no message in exception (getMessage() returned null)
1050:          //
1051:          verifyException("com.google.common.base.Preconditions", e);
1052:       }
1053:   }
1054: 
1055:   @Test(timeout = 4000)
1056:   public void test60()  throws Throwable  {
1057:       Stack<Fact> stack0 = new Stack<Fact>();
1058:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1059:       iterableSubject0.doesNotContain((Object) null);
1060:   }
1061: 
1062:   @Test(timeout = 4000)
1063:   public void test61()  throws Throwable  {
1064:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
1065:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
1066:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
1067:       iterableSubject0.contains(iterableSubject_ElementFactGrouping0);
1068:       assertTrue(enumSet0.contains(iterableSubject_ElementFactGrouping0));
1069:   }
1070: 
1071:   @Test(timeout = 4000)
1072:   public void test62()  throws Throwable  {
1073:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1074:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1075:       // Undeclared exception!
1076:       try { 
1077:         iterableSubject0.hasSize(0);
1078:         fail("Expecting exception: NullPointerException");
1079:       
1080:       } catch(NullPointerException e) {
1081:          //
1082:          // no message in exception (getMessage() returned null)
1083:          //
1084:          verifyException("com.google.common.base.Preconditions", e);
1085:       }
1086:   }
1087: 
1088:   @Test(timeout = 4000)
1089:   public void test63()  throws Throwable  {
1090:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1091:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1092:       // Undeclared exception!
1093:       try { 
1094:         iterableSubject0.hasSize((-1));
1095:         fail("Expecting exception: IllegalArgumentException");
1096:       
1097:       } catch(IllegalArgumentException e) {
1098:          //
1099:          // expectedSize(java.lang.Integer@0000000002) must be >= 0
1100:          //
1101:          verifyException("com.google.common.base.Preconditions", e);
1102:       }
1103:   }
1104: 
1105:   @Test(timeout = 4000)
1106:   public void test64()  throws Throwable  {
1107:       HashSet<String> hashSet0 = new HashSet<String>();
1108:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
1109:       // Undeclared exception!
1110:       try { 
1111:         iterableSubject0.isNotEmpty();
1112:         fail("Expecting exception: NullPointerException");
1113:       
1114:       } catch(NullPointerException e) {
1115:          //
1116:          // no message in exception (getMessage() returned null)
1117:          //
1118:          verifyException("com.google.common.base.Preconditions", e);
1119:       }
1120:   }
1121: 
1122:   @Test(timeout = 4000)
1123:   public void test65()  throws Throwable  {
1124:       Stack<Fact> stack0 = new Stack<Fact>();
1125:       Fact fact0 = Fact.fact("O:h$*z", "O:h$*z");
1126:       stack0.add(fact0);
1127:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1128:       iterableSubject0.isNotEmpty();
1129:   }
1130: 
1131:   @Test(timeout = 4000)
1132:   public void test66()  throws Throwable  {
1133:       Stack<Fact> stack0 = new Stack<Fact>();
1134:       stack0.add((Fact) null);
1135:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1136:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
1137:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, Locale.Category> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super Locale.Category>) correspondence0);
1138:       Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
1139:       // Undeclared exception!
1140:       try { 
1141:         iterableSubject_UsingCorrespondence0.containsExactly(locale_CategoryArray0);
1142:         fail("Expecting exception: NullPointerException");
1143:       
1144:       } catch(NullPointerException e) {
1145:          //
1146:          // no message in exception (getMessage() returned null)
1147:          //
1148:          verifyException("com.google.common.base.Preconditions", e);
1149:       }
1150:   }
1151: 
1152:   @Test(timeout = 4000)
1153:   public void test67()  throws Throwable  {
1154:       HashSet<String> hashSet0 = new HashSet<String>();
1155:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
1156:       iterableSubject0.isEmpty();
1157:   }
1158: 
1159:   @Test(timeout = 4000)
1160:   public void test68()  throws Throwable  {
1161:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1162:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1163:       // Undeclared exception!
1164:       try { 
1165:         iterableSubject0.isEqualTo("TY4AcU~hjs0~Y Ump");
1166:         fail("Expecting exception: NullPointerException");
1167:       
1168:       } catch(NullPointerException e) {
1169:          //
1170:          // no message in exception (getMessage() returned null)
1171:          //
1172:          verifyException("com.google.common.base.Preconditions", e);
1173:       }
1174:   }
1175: 
1176:   @Test(timeout = 4000)
1177:   public void test69()  throws Throwable  {
1178:       Stack<Fact> stack0 = new Stack<Fact>();
1179:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1180:       iterableSubject0.isEqualTo(stack0);
1181:       assertTrue(stack0.empty());
1182:   }
1183: 
1184:   @Test(timeout = 4000)
1185:   public void test70()  throws Throwable  {
1186:       Stack<Fact> stack0 = new Stack<Fact>();
1187:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1188:       // Undeclared exception!
1189:       try { 
1190:         iterableSubject0.isEqualTo("O:h$*z");
1191:         fail("Expecting exception: NullPointerException");
1192:       
1193:       } catch(NullPointerException e) {
1194:          //
1195:          // no message in exception (getMessage() returned null)
1196:          //
1197:          verifyException("com.google.common.base.Preconditions", e);
1198:       }
1199:   }
1200: 
1201:   @Test(timeout = 4000)
1202:   public void test71()  throws Throwable  {
1203:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1204:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1205:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
1206:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
1207:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
1208:       String[] stringArray0 = new String[7];
1209:       iterableSubject_UsingCorrespondence0.containsNoneOf("java.util.Stack@2", "java.sql.SQLNonTransientConnectionException@0000000002", stringArray0);
1210:       assertEquals(7, stringArray0.length);
1211:   }
1212: 
1213:   @Test(timeout = 4000)
1214:   public void test72()  throws Throwable  {
1215:       HashSet<String> hashSet0 = new HashSet<String>();
1216:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
1217:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
1218:       IterableSubject iterableSubject1 = new IterableSubject((FailureMetadata) null, hashSet0);
1219:       Correspondence.DiffFormatter<SQLNonTransientConnectionException, SQLNonTransientConnectionException> correspondence_DiffFormatter0 = (Correspondence.DiffFormatter<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(Correspondence.DiffFormatter.class, new ViolatedAssumptionAnswer());
1220:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iterableSubject_UsingCorrespondence0 = iterableSubject0.formattingDiffsUsing((Correspondence.DiffFormatter<? super SQLNonTransientConnectionException, ? super SQLNonTransientConnectionException>) correspondence_DiffFormatter0);
1221:       // Undeclared exception!
1222:       try { 
1223:         iterableSubject1.doesNotContain(iterableSubject_UsingCorrespondence0);
1224:         fail("Expecting exception: UnsupportedOperationException");
1225:       
1226:       } catch(UnsupportedOperationException e) {
1227:          //
1228:          // UsingCorrespondence.hashCode() is not supported.
1229:          //
1230:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
1231:       }
1232:   }
1233: 
1234:   @Test(timeout = 4000)
1235:   public void test73()  throws Throwable  {
1236:       Stack<Fact> stack0 = new Stack<Fact>();
1237:       stack0.add((Fact) null);
1238:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1239:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
1240:       IterableSubject.UsingCorrespondence<String, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<String, String>(iterableSubject0, correspondence0);
1241:       IterableSubject.UsingCorrespondence<String, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super String, ? super Object>) correspondence0);
1242:       // Undeclared exception!
1243:       try { 
1244:         iterableSubject0.containsAtLeast(iterableSubject_UsingCorrespondence0, iterableSubject_UsingCorrespondence1, (Object[]) null);
1245:         fail("Expecting exception: UnsupportedOperationException");
1246:       
1247:       } catch(UnsupportedOperationException e) {
1248:          //
1249:          // UsingCorrespondence.equals() is not supported. Did you mean to call containsExactlyElementsIn(expected) instead of equals(expected)?
1250:          //
1251:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
1252:       }
1253:   }
1254: 
1255:   @Test(timeout = 4000)
1256:   public void test74()  throws Throwable  {
1257:       IterableSubject.ElementFactGrouping iterableSubject_ElementFactGrouping0 = IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;
1258:       EnumSet<IterableSubject.ElementFactGrouping> enumSet0 = EnumSet.range(iterableSubject_ElementFactGrouping0, iterableSubject_ElementFactGrouping0);
1259:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, enumSet0);
1260:       Correspondence.BinaryPredicate<Object, String> correspondence_BinaryPredicate0 = (Correspondence.BinaryPredicate<Object, String>) mock(Correspondence.BinaryPredicate.class, new ViolatedAssumptionAnswer());
1261:       doReturn(false, false, false).when(correspondence_BinaryPredicate0).apply(any() , anyString());
1262:       Correspondence<Object, String> correspondence0 = Correspondence.from((Correspondence.BinaryPredicate<Object, String>) correspondence_BinaryPredicate0, ">+");
1263:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String>(iterableSubject0, correspondence0);
1264:       // Undeclared exception!
1265:       try { 
1266:         iterableSubject_UsingCorrespondence0.containsAnyOf((String) null, "The actual value is an Iterable, and you've written a test that compares it to some objects that are not Iterables. Did you instead mean to check whether its *contents* match any of the *contents* of the given values? If so, call containsNoneOf(...)/containsNoneIn(...) instead. Non-iterables: %s", (String[]) null);
1267:         fail("Expecting exception: NullPointerException");
1268:       
1269:       } catch(NullPointerException e) {
1270:          //
1271:          // no message in exception (getMessage() returned null)
1272:          //
1273:          verifyException("com.google.common.base.Preconditions", e);
1274:       }
1275:   }
1276: 
1277:   @Test(timeout = 4000)
1278:   public void test75()  throws Throwable  {
1279:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
1280:       Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
1281:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, sQLNonTransientConnectionException0);
1282:       iterableSubject0.containsAnyOf(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, throwableArray0);
1283:       assertNull(sQLNonTransientConnectionException0.getSQLState());
1284:   }
1285: 
1286:   @Test(timeout = 4000)
1287:   public void test76()  throws Throwable  {
1288:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1289:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1290:       Object[] objectArray0 = new Object[1];
1291:       // Undeclared exception!
1292:       try { 
1293:         iterableSubject0.containsAnyIn(objectArray0);
1294:         fail("Expecting exception: NullPointerException");
1295:       
1296:       } catch(NullPointerException e) {
1297:          //
1298:          // no message in exception (getMessage() returned null)
1299:          //
1300:          verifyException("com.google.common.base.Preconditions", e);
1301:       }
1302:   }
1303: 
1304:   @Test(timeout = 4000)
1305:   public void test77()  throws Throwable  {
1306:       Stack<Fact> stack0 = new Stack<Fact>();
1307:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1308:       Object[] objectArray0 = new Object[0];
1309:       Ordered ordered0 = iterableSubject0.containsAtLeastElementsIn(objectArray0);
1310:       assertNotNull(ordered0);
1311:   }
1312: 
1313:   @Test(timeout = 4000)
1314:   public void test78()  throws Throwable  {
1315:       HashSet<String> hashSet0 = new HashSet<String>();
1316:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, hashSet0);
1317:       Object[] objectArray0 = new Object[1];
1318:       iterableSubject0.containsNoneIn(objectArray0);
1319:       assertEquals(1, objectArray0.length);
1320:   }
1321: 
1322:   @Test(timeout = 4000)
1323:   public void test79()  throws Throwable  {
1324:       Stack<Fact> stack0 = new Stack<Fact>();
1325:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1326:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
1327:       IterableSubject.UsingCorrespondence<String, String> iterableSubject_UsingCorrespondence0 = new IterableSubject.UsingCorrespondence<String, String>(iterableSubject0, correspondence0);
1328:       IterableSubject.UsingCorrespondence<String, Object> iterableSubject_UsingCorrespondence1 = iterableSubject0.comparingElementsUsing((Correspondence<? super String, ? super Object>) correspondence0);
1329:       // Undeclared exception!
1330:       try { 
1331:         iterableSubject0.containsAtLeast(iterableSubject_UsingCorrespondence0, iterableSubject_UsingCorrespondence1, (Object[]) null);
1332:         fail("Expecting exception: UnsupportedOperationException");
1333:       
1334:       } catch(UnsupportedOperationException e) {
1335:          //
1336:          // UsingCorrespondence.toString() is not supported. Did you mean to call assertThat(foo.toString()) instead of assertThat(foo).toString()?
1337:          //
1338:          verifyException("com.google.common.truth.IterableSubject$UsingCorrespondence", e);
1339:       }
1340:   }
1341: 
1342:   @Test(timeout = 4000)
1343:   public void test80()  throws Throwable  {
1344:       Stack<Fact> stack0 = new Stack<Fact>();
1345:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1346:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1347:       linkedHashSet0.add("O:h$*z");
1348:       // Undeclared exception!
1349:       try { 
1350:         iterableSubject0.containsAtLeastElementsIn((Iterable<?>) linkedHashSet0);
1351:         fail("Expecting exception: NullPointerException");
1352:       
1353:       } catch(NullPointerException e) {
1354:          //
1355:          // no message in exception (getMessage() returned null)
1356:          //
1357:          verifyException("com.google.common.base.Preconditions", e);
1358:       }
1359:   }
1360: 
1361:   @Test(timeout = 4000)
1362:   public void test81()  throws Throwable  {
1363:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1364:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1365:       linkedHashSet0.add("]zU(@TF1JK");
1366:       // Undeclared exception!
1367:       try { 
1368:         iterableSubject0.containsNoneIn((Iterable<?>) linkedHashSet0);
1369:         fail("Expecting exception: NullPointerException");
1370:       
1371:       } catch(NullPointerException e) {
1372:          //
1373:          // no message in exception (getMessage() returned null)
1374:          //
1375:          verifyException("com.google.common.base.Preconditions", e);
1376:       }
1377:   }
1378: 
1379:   @Test(timeout = 4000)
1380:   public void test82()  throws Throwable  {
1381:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
1382:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, linkedHashSet0);
1383:       iterableSubject0.isInOrder();
1384:   }
1385: 
1386:   @Test(timeout = 4000)
1387:   public void test83()  throws Throwable  {
1388:       Stack<Fact> stack0 = new Stack<Fact>();
1389:       stack0.add((Fact) null);
1390:       IterableSubject iterableSubject0 = new IterableSubject((FailureMetadata) null, stack0);
1391:       Correspondence<Object, Object> correspondence0 = Correspondence.equality();
1392:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence0 = iterableSubject0.comparingElementsUsing((Correspondence<? super SQLNonTransientConnectionException, ? super String>) correspondence0);
1393:       Function<SQLNonTransientConnectionException, Locale.Category> function0 = (Function<SQLNonTransientConnectionException, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
1394:       Function<Locale.Category, SQLNonTransientConnectionException> function1 = (Function<Locale.Category, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
1395:       Converter<SQLNonTransientConnectionException, Locale.Category> converter0 = Converter.from((Function<? super SQLNonTransientConnectionException, ? extends Locale.Category>) function0, (Function<? super Locale.Category, ? extends SQLNonTransientConnectionException>) function1);
1396:       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
1397:       Function<String, SQLNonTransientConnectionException> function2 = (Function<String, SQLNonTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
1398:       doReturn(sQLNonTransientConnectionException0).when(function2).apply(anyString());
1399:       IterableSubject.UsingCorrespondence<SQLNonTransientConnectionException, String> iterableSubject_UsingCorrespondence1 = iterableSubject_UsingCorrespondence0.displayingDiffsPairedBy((Function<? super SQLNonTransientConnectionException, ?>) converter0, (Function<? super String, ?>) function2);
1400:       // Undeclared exception!
1401:       try { 
1402:         iterableSubject_UsingCorrespondence1.contains("}.}$4[Hj*zz");
1403:         fail("Expecting exception: NullPointerException");
1404:       
1405:       } catch(NullPointerException e) {
1406:          //
1407:          // no message in exception (getMessage() returned null)
1408:          //
1409:          verifyException("com.google.common.base.Preconditions", e);
1410:       }
1411:   }
1412: }
RegularFileObject[/tmp/EvoSuite_175_1731035725542/com/google/common/truth/IterableSubject_175_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Nov 08 03:15:25 GMT 2024
5:  */
6: 
7: package com.google.common.truth;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class IterableSubject_175_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "com.google.common.truth.IterableSubject"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation-NON-SOURCE-EQUIV/find-diff-classes/testgen/mvnc/com/google/truth/truth/1.2.0"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IterableSubject_175_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "com.google.common.collect.ArrayListMultimap",
84:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
85:       "com.google.common.collect.Lists$RandomAccessPartition",
86:       "com.google.common.collect.Collections2",
87:       "com.google.common.collect.PeekingIterator",
88:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
89:       "com.google.common.truth.SubjectUtils",
90:       "com.google.common.math.IntMath",
91:       "com.google.common.collect.LinkedHashMultiset",
92:       "com.google.common.truth.GraphMatching",
93:       "com.google.common.collect.AbstractMapBasedMultiset$2",
94:       "com.google.common.collect.Sets$2",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.Sets$1",
98:       "com.google.common.collect.NullsLastOrdering",
99:       "com.google.common.collect.Platform",
100:       "com.google.common.collect.RegularImmutableMap",
101:       "com.google.common.collect.RegularImmutableBiMap",
102:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
103:       "com.google.common.base.Converter$IdentityConverter",
104:       "com.google.common.collect.ImmutableMultimap$Values",
105:       "com.google.common.collect.HashBiMap$Inverse",
106:       "com.google.common.collect.ByFunctionOrdering",
107:       "com.google.common.collect.AbstractMapEntry",
108:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
109:       "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
110:       "com.google.common.collect.ImmutableBiMap$Builder",
111:       "com.google.common.base.Predicate",
112:       "com.google.common.base.Joiner",
113:       "com.google.common.collect.Iterators$ConcatenatedIterator",
114:       "com.google.common.collect.AbstractListMultimap",
115:       "com.google.common.collect.NullsFirstOrdering",
116:       "com.google.common.truth.Correspondence$BinaryPredicate",
117:       "org.checkerframework.framework.qual.QualifierForLiterals",
118:       "com.google.common.truth.AssertionErrorWithFacts",
119:       "com.google.common.base.Strings",
120:       "com.google.common.truth.IterableSubject$3",
121:       "com.google.common.collect.Lists$Partition",
122:       "com.google.common.collect.AbstractMapBasedMultimap",
123:       "com.google.common.collect.Lists",
124:       "com.google.common.truth.IterableSubject$1",
125:       "com.google.common.collect.Multisets$ImmutableEntry",
126:       "com.google.common.truth.IterableSubject$4",
127:       "com.google.common.collect.UnmodifiableListIterator",
128:       "com.google.common.collect.ImmutableMultimap",
129:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
130:       "com.google.common.collect.ImmutableSortedSet",
131:       "com.google.common.collect.Sets$4",
132:       "com.google.common.base.Absent",
133:       "com.google.common.collect.Maps$BiMapConverter",
134:       "com.google.common.base.Throwables",
135:       "org.checkerframework.framework.qual.SubtypeOf",
136:       "com.google.common.collect.ImmutableSortedSet$Builder",
137:       "com.google.common.base.Equivalence$Equals",
138:       "com.google.common.truth.Correspondence",
139:       "com.google.common.base.ElementTypesAreNonnullByDefault",
140:       "com.google.common.collect.AbstractMultiset$EntrySet",
141:       "com.google.common.base.Equivalence$Wrapper",
142:       "com.google.common.collect.Sets$ImprovedAbstractSet",
143:       "com.google.common.base.Preconditions",
144:       "com.google.common.truth.StandardSubjectBuilder$1",
145:       "com.google.common.collect.ImmutableEntry",
146:       "com.google.common.base.Joiner$1",
147:       "com.google.common.base.Converter$ConverterComposition",
148:       "com.google.common.base.Joiner$2",
149:       "com.google.common.collect.EmptyImmutableSetMultimap",
150:       "com.google.common.collect.HashBiMap$EntrySet",
151:       "com.google.common.collect.ImmutableList$Itr",
152:       "com.google.common.collect.ImmutableCollection",
153:       "com.google.common.collect.ImmutableEnumMap",
154:       "com.google.common.truth.Ordered",
155:       "com.google.common.collect.LinkedListMultimap$KeyList",
156:       "com.google.common.collect.Lists$OnePlusArrayList",
157:       "com.google.common.base.Objects",
158:       "com.google.common.collect.CompactHashMap$Itr",
159:       "com.google.common.collect.ImmutableSetMultimap",
160:       "com.google.common.collect.ImmutableCollection$Builder",
161:       "com.google.common.collect.Iterators$SingletonIterator",
162:       "com.google.common.collect.Iterators$6",
163:       "com.google.common.collect.BiMap",
164:       "com.google.common.collect.Iterators$9",
165:       "com.google.common.collect.ImmutableSet",
166:       "com.google.common.collect.Lists$AbstractListWrapper",
167:       "com.google.common.collect.AbstractMapBasedMultiset",
168:       "com.google.common.collect.Iterators$1",
169:       "com.google.common.collect.CompactHashMap",
170:       "com.google.common.collect.Iterators$4",
171:       "com.google.common.collect.Iterators$5",
172:       "com.google.common.collect.AbstractIterator$State",
173:       "com.google.common.base.Converter$ReverseConverter",
174:       "com.google.common.base.ExtraObjectsMethodsForWeb",
175:       "com.google.common.collect.ImmutableMultimap$EntryCollection",
176:       "com.google.common.truth.Platform",
177:       "com.google.common.collect.Lists$StringAsImmutableList",
178:       "com.google.common.collect.Lists$2",
179:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
180:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
181:       "com.google.common.collect.CompactHashMap$EntrySetView",
182:       "com.google.common.truth.LazyMessage",
183:       "com.google.common.collect.Lists$1",
184:       "com.google.common.collect.ImmutableMultimap$Builder",
185:       "com.google.common.base.Equivalence$Identity",
186:       "com.google.common.truth.Subject$ComparisonResult",
187:       "com.google.common.collect.Multiset",
188:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
189:       "com.google.common.collect.AbstractMultimap",
190:       "com.google.common.base.Supplier",
191:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
192:       "com.google.common.collect.HashBiMap$View",
193:       "com.google.common.truth.IterableSubject$PairwiseChecker",
194:       "com.google.common.collect.ImmutableList",
195:       "com.google.common.collect.ReverseOrdering",
196:       "com.google.common.collect.FluentIterable$1",
197:       "com.google.common.collect.FluentIterable$2",
198:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
199:       "com.google.common.truth.Fact",
200:       "com.google.common.collect.FluentIterable$3",
201:       "org.checkerframework.checker.nullness.qual.Nullable",
202:       "com.google.common.collect.NullnessCasts",
203:       "org.checkerframework.framework.qual.DefaultFor",
204:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
205:       "com.google.common.collect.SortedMultisetBridge",
206:       "com.google.common.collect.ImmutableMap$Builder",
207:       "com.google.common.base.Converter$FunctionBasedConverter",
208:       "com.google.common.collect.HashBiMap",
209:       "com.google.common.collect.Maps$EntryTransformer",
210:       "com.google.common.collect.Ordering",
211:       "com.google.common.collect.FluentIterable$3$1",
212:       "com.google.common.collect.NaturalOrdering",
213:       "com.google.common.collect.ElementTypesAreNonnullByDefault",
214:       "com.google.common.collect.LinkedListMultimap$Node",
215:       "com.google.common.collect.AllEqualOrdering",
216:       "com.google.common.collect.Hashing",
217:       "com.google.common.collect.ImmutableList$SubList",
218:       "com.google.common.collect.ListMultimap",
219:       "com.google.common.base.FunctionalEquivalence",
220:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
221:       "com.google.common.truth.ErrorWithFacts",
222:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
223:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
224:       "com.google.common.collect.RegularImmutableList",
225:       "com.google.common.collect.SortedMultiset",
226:       "com.google.common.truth.IterableSubject",
227:       "com.google.common.collect.FluentIterable",
228:       "com.google.common.base.Optional",
229:       "com.google.common.collect.Lists$TransformingRandomAccessList",
230:       "com.google.common.collect.Iterators$ArrayItr",
231:       "com.google.common.collect.RegularImmutableMap$KeySet",
232:       "com.google.common.collect.AbstractIterator$1",
233:       "com.google.common.collect.BaseImmutableMultimap",
234:       "com.google.common.collect.Multisets",
235:       "com.google.common.collect.CompactHashMap$MapEntry",
236:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
237:       "com.google.common.collect.SortedMapDifference",
238:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
239:       "com.google.common.collect.CompactHashMap$2",
240:       "com.google.common.collect.RegularImmutableSet",
241:       "com.google.common.truth.Subject$EqualityCheck",
242:       "com.google.common.collect.LexicographicalOrdering",
243:       "com.google.common.base.ParametricNullness",
244:       "com.google.common.collect.ImmutableListMultimap",
245:       "com.google.common.collect.ImmutableMultimap$1",
246:       "com.google.common.base.Present",
247:       "com.google.common.collect.ImmutableMultimap$2",
248:       "com.google.common.collect.Iterables",
249:       "com.google.common.collect.LinkedListMultimap$1",
250:       "com.google.common.collect.Sets$SetView",
251:       "com.google.common.collect.ImmutableSet$Builder",
252:       "com.google.common.truth.Correspondence$DiffFormatter",
253:       "com.google.common.collect.SingletonImmutableSet",
254:       "com.google.common.collect.ImmutableSetMultimap$Builder",
255:       "com.google.common.truth.Correspondence$Transforming",
256:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
257:       "com.google.common.collect.ImmutableMultiset",
258:       "com.google.common.truth.Correspondence$ExceptionStore",
259:       "com.google.common.collect.UsingToStringOrdering",
260:       "com.google.common.truth.ComparableSubject",
261:       "com.google.common.collect.Multisets$AbstractEntry",
262:       "com.google.common.collect.ImmutableMultimap$Keys",
263:       "com.google.common.truth.FailureMetadata",
264:       "com.google.common.collect.Lists$TransformingSequentialList",
265:       "com.google.common.primitives.IntsMethodsForWeb",
266:       "com.google.common.collect.ObjectArrays",
267:       "com.google.common.collect.ForwardingIterator",
268:       "com.google.common.collect.AbstractIterator",
269:       "com.google.common.truth.Correspondence$FormattingDiffs",
270:       "com.google.common.truth.Correspondence$Equality",
271:       "com.google.common.base.MoreObjects",
272:       "com.google.common.base.Suppliers$MemoizingSupplier",
273:       "com.google.common.collect.MapDifference",
274:       "com.google.common.collect.ObjectCountLinkedHashMap",
275:       "com.google.common.collect.ConcurrentHashMultiset$2",
276:       "com.google.common.collect.ConcurrentHashMultiset",
277:       "com.google.common.collect.SortedIterable",
278:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
279:       "com.google.common.collect.ConcurrentHashMultiset$3",
280:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
281:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
282:       "com.google.common.collect.UnmodifiableIterator",
283:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
284:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
285:       "com.google.common.collect.ImmutableEnumSet",
286:       "com.google.common.collect.Lists$RandomAccessListWrapper",
287:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
288:       "com.google.common.collect.HashBiMap$View$1",
289:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
290:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
291:       "com.google.common.base.Converter",
292:       "com.google.common.collect.LinkedListMultimap",
293:       "com.google.common.collect.Maps$8",
294:       "com.google.common.base.Function",
295:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
296:       "com.google.common.collect.ImmutableMap",
297:       "com.google.common.collect.ComparatorOrdering",
298:       "com.google.common.collect.AbstractIndexedListIterator",
299:       "com.google.common.collect.HashBiMap$EntryForKey",
300:       "com.google.common.collect.CollectPreconditions",
301:       "com.google.common.collect.Multiset$Entry",
302:       "com.google.common.truth.Subject",
303:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
304:       "com.google.common.collect.Sets",
305:       "com.google.common.collect.ObjectCountHashMap",
306:       "com.google.common.collect.BoundType",
307:       "com.google.common.collect.ExplicitOrdering",
308:       "com.google.common.collect.CompactHashSet",
309:       "com.google.common.collect.ImmutableList$Builder",
310:       "com.google.common.collect.ImmutableMap$1",
311:       "com.google.common.collect.Iterables$5",
312:       "com.google.common.collect.ForwardingObject",
313:       "com.google.common.collect.AbstractMultiset",
314:       "com.google.common.collect.Multimap",
315:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
316:       "com.google.common.collect.Iterators",
317:       "com.google.common.collect.CompoundOrdering",
318:       "com.google.common.collect.ImmutableBiMap",
319:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
320:       "com.google.common.base.PairwiseEquivalence",
321:       "com.google.common.collect.Multisets$EntrySet",
322:       "com.google.common.collect.CompactHashing",
323:       "com.google.common.base.Suppliers",
324:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
325:       "com.google.common.collect.RegularImmutableMap$EntrySet",
326:       "com.google.common.base.Equivalence",
327:       "com.google.common.collect.ReverseNaturalOrdering",
328:       "com.google.common.truth.StandardSubjectBuilder",
329:       "com.google.common.primitives.Ints",
330:       "com.google.common.collect.Maps",
331:       "com.google.common.collect.SetMultimap",
332:       "com.google.common.collect.TransformedIterator",
333:       "com.google.common.truth.GraphMatching$HopcroftKarp",
334:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
335:       "com.google.common.collect.Iterators$MergingIterator",
336:       "com.google.common.truth.Correspondence$StoredException",
337:       "com.google.common.collect.RegularImmutableSortedSet"
338:     );
339:   } 
340:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
341:     mock(Class.forName("com.google.common.base.Function", false, IterableSubject_175_tmp__ESTest_scaffolding.class.getClassLoader()));
342:     mock(Class.forName("com.google.common.truth.Correspondence$BinaryPredicate", false, IterableSubject_175_tmp__ESTest_scaffolding.class.getClassLoader()));
343:     mock(Class.forName("com.google.common.truth.Correspondence$DiffFormatter", false, IterableSubject_175_tmp__ESTest_scaffolding.class.getClassLoader()));
344:     mock(Class.forName("java.util.Comparator", false, IterableSubject_175_tmp__ESTest_scaffolding.class.getClassLoader()));
345:   }
346: 
347:   private static void resetClasses() {
348:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IterableSubject_175_tmp__ESTest_scaffolding.class.getClassLoader()); 
349: 
350:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
351:       "com.google.common.truth.Subject",
352:       "com.google.common.truth.IterableSubject",
353:       "com.google.common.truth.IterableSubject$2",
354:       "com.google.common.truth.IterableSubject$1",
355:       "com.google.common.truth.IterableSubject$3",
356:       "com.google.common.truth.IterableSubject$4",
357:       "com.google.common.truth.IterableSubject$UsingCorrespondence",
358:       "com.google.common.truth.IterableSubject$UsingCorrespondence$1",
359:       "com.google.common.truth.IterableSubject$UsingCorrespondence$2",
360:       "com.google.common.truth.IterableSubject$ElementFactGrouping",
361:       "com.google.common.base.Optional",
362:       "com.google.common.base.Absent",
363:       "com.google.common.collect.ImmutableCollection",
364:       "com.google.common.collect.UnmodifiableIterator",
365:       "com.google.common.collect.UnmodifiableListIterator",
366:       "com.google.common.collect.AbstractIndexedListIterator",
367:       "com.google.common.collect.ImmutableList$Itr",
368:       "com.google.common.collect.ImmutableList",
369:       "com.google.common.collect.Ordering",
370:       "com.google.common.collect.NaturalOrdering",
371:       "com.google.common.truth.Correspondence",
372:       "com.google.common.truth.Correspondence$Equality",
373:       "com.google.common.truth.FailureMetadata",
374:       "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
375:       "com.google.common.collect.ImmutableMultiset",
376:       "com.google.common.collect.ImmutableSortedMultiset",
377:       "com.google.common.base.Preconditions",
378:       "com.google.common.collect.ImmutableCollection$Builder",
379:       "com.google.common.collect.ImmutableMultiset$Builder",
380:       "com.google.common.collect.ImmutableSortedMultiset$Builder",
381:       "com.google.common.collect.ImmutableSet",
382:       "com.google.common.collect.ImmutableSortedSet",
383:       "com.google.common.collect.RegularImmutableSortedSet",
384:       "com.google.common.collect.RegularImmutableSortedMultiset",
385:       "com.google.common.base.Converter",
386:       "com.google.common.base.Converter$FunctionBasedConverter",
387:       "com.google.common.base.Converter$IdentityConverter",
388:       "com.google.common.base.Converter$ConverterComposition",
389:       "com.google.common.truth.Correspondence$Transforming",
390:       "com.google.common.base.Functions",
391:       "com.google.common.base.Functions$IdentityFunction",
392:       "com.google.common.truth.Correspondence$ExceptionStore",
393:       "com.google.common.truth.SubjectUtils",
394:       "com.google.common.collect.Lists",
395:       "com.google.common.collect.Iterables",
396:       "com.google.common.collect.AbstractMultimap",
397:       "com.google.common.collect.AbstractMapBasedMultimap",
398:       "com.google.common.collect.AbstractListMultimap",
399:       "com.google.common.collect.ArrayListMultimapGwtSerializationDependencies",
400:       "com.google.common.collect.ArrayListMultimap",
401:       "com.google.common.collect.Platform",
402:       "com.google.common.collect.CompactHashMap",
403:       "com.google.common.primitives.IntsMethodsForWeb",
404:       "com.google.common.primitives.Ints",
405:       "com.google.common.collect.CollectPreconditions",
406:       "com.google.common.collect.CompactHashing",
407:       "com.google.common.collect.Hashing",
408:       "com.google.common.base.ExtraObjectsMethodsForWeb",
409:       "com.google.common.base.Objects",
410:       "com.google.common.truth.Fact",
411:       "com.google.common.collect.Collections2",
412:       "com.google.common.collect.AbstractMultiset",
413:       "com.google.common.collect.AbstractMapBasedMultiset",
414:       "com.google.common.collect.LinkedHashMultiset",
415:       "com.google.common.collect.ObjectCountHashMap",
416:       "com.google.common.collect.ObjectCountLinkedHashMap",
417:       "com.google.common.collect.AbstractSortedMultiset",
418:       "com.google.common.collect.TreeMultiset",
419:       "com.google.common.collect.GeneralRange",
420:       "com.google.common.collect.TreeMultiset$AvlNode",
421:       "com.google.common.collect.TreeMultiset$Reference",
422:       "com.google.common.collect.TreeMultiset$Aggregate",
423:       "com.google.common.collect.Multisets",
424:       "com.google.common.collect.Multisets$MultisetIteratorImpl",
425:       "com.google.common.collect.Sets$ImprovedAbstractSet",
426:       "com.google.common.collect.Multisets$EntrySet",
427:       "com.google.common.collect.AbstractMultiset$EntrySet",
428:       "com.google.common.collect.TreeMultiset$2",
429:       "com.google.common.base.Suppliers",
430:       "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
431:       "com.google.common.truth.Platform",
432:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
433:       "com.google.common.collect.ImmutableList$Builder",
434:       "com.google.common.collect.ObjectArrays",
435:       "com.google.common.collect.Sets",
436:       "com.google.common.base.CharMatcher",
437:       "com.google.common.base.CharMatcher$FastMatcher",
438:       "com.google.common.base.CharMatcher$Is",
439:       "com.google.common.base.CharMatcher$InRange",
440:       "com.google.common.base.CaseFormat",
441:       "com.google.common.base.Ascii",
442:       "com.google.common.collect.ConcurrentHashMultiset",
443:       "com.google.common.collect.ConcurrentHashMultiset$EntrySet",
444:       "com.google.common.collect.AbstractIterator",
445:       "com.google.common.collect.ConcurrentHashMultiset$2",
446:       "com.google.common.collect.AbstractIterator$State",
447:       "com.google.common.collect.ForwardingObject",
448:       "com.google.common.collect.ForwardingIterator",
449:       "com.google.common.collect.ConcurrentHashMultiset$3",
450:       "com.google.common.collect.AbstractIterator$1",
451:       "com.google.common.base.Strings",
452:       "com.google.common.truth.Correspondence$FromBinaryPredicate",
453:       "com.google.common.collect.Maps",
454:       "com.google.common.truth.Correspondence$FormattingDiffs",
455:       "com.google.common.collect.Lists$OnePlusArrayList",
456:       "com.google.common.truth.LazyMessage",
457:       "com.google.common.truth.StandardSubjectBuilder",
458:       "com.google.common.collect.Iterators",
459:       "com.google.common.truth.Subject$ComparisonResult",
460:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
461:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
462:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
463:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
464:       "com.google.common.truth.Correspondence$TolerantNumericEquality",
465:       "com.google.common.truth.ComparableSubject",
466:       "com.google.common.truth.DoubleSubject",
467:       "com.google.common.collect.AbstractMapBasedMultiset$Itr",
468:       "com.google.common.collect.AbstractMapBasedMultiset$2",
469:       "com.google.common.collect.BaseImmutableMultimap",
470:       "com.google.common.collect.ImmutableMultimap",
471:       "com.google.common.collect.ImmutableSetMultimap",
472:       "com.google.common.collect.ImmutableMultimap$Builder",
473:       "com.google.common.collect.ImmutableSetMultimap$Builder",
474:       "com.google.common.collect.CompactHashMap$EntrySetView",
475:       "com.google.common.collect.ImmutableMap",
476:       "com.google.common.collect.RegularImmutableMap",
477:       "com.google.common.collect.RegularImmutableSet",
478:       "com.google.common.collect.EmptyImmutableSetMultimap",
479:       "com.google.common.base.Joiner",
480:       "com.google.common.base.Joiner$1",
481:       "com.google.common.truth.Correspondence$StoredException",
482:       "com.google.common.collect.Multisets$AbstractEntry",
483:       "com.google.common.collect.ObjectCountHashMap$MapEntry",
484:       "com.google.common.collect.RegularImmutableMultiset",
485:       "com.google.common.collect.IndexedImmutableSet",
486:       "com.google.common.collect.ImmutableMultiset$EntrySet",
487:       "com.google.common.collect.ImmutableSetMultimap$EntrySet",
488:       "com.google.common.collect.ImmutableMultimap$1",
489:       "com.google.common.collect.RegularImmutableMap$EntrySet",
490:       "com.google.common.collect.CompactHashSet",
491:       "com.google.common.collect.ImmutableMap$Builder",
492:       "com.google.common.collect.CompactHashMap$Itr",
493:       "com.google.common.collect.CompactHashMap$2",
494:       "com.google.common.collect.AbstractMapEntry",
495:       "com.google.common.collect.CompactHashMap$MapEntry",
496:       "com.google.common.collect.Multisets$ImmutableEntry",
497:       "com.google.common.collect.NullnessCasts",
498:       "com.google.common.base.Converter$1",
499:       "com.google.common.base.NullnessCasts",
500:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairer",
501:       "com.google.common.base.Present",
502:       "com.google.common.base.Equivalence",
503:       "com.google.common.truth.SubjectUtils$NonHashingMultiset$1",
504:       "com.google.common.truth.SubjectUtils$NonHashingMultiset",
505:       "com.google.common.base.Equivalence$Wrapper",
506:       "com.google.common.collect.FluentIterable",
507:       "com.google.common.collect.Iterables$5",
508:       "com.google.common.collect.TransformedIterator",
509:       "com.google.common.collect.Iterators$6",
510:       "com.google.common.collect.HashMultiset",
511:       "com.google.common.base.Converter$ReverseConverter",
512:       "com.google.common.collect.SingletonImmutableSet",
513:       "com.google.common.truth.IterableSubject$UsingCorrespondence$Pairing",
514:       "com.google.common.collect.LinkedListMultimap",
515:       "com.google.common.collect.Multisets$ElementSet",
516:       "com.google.common.collect.SortedMultisets$ElementSet",
517:       "com.google.common.collect.SortedMultisets$NavigableElementSet",
518:       "com.google.common.collect.LinkedListMultimap$Node",
519:       "com.google.common.collect.LinkedListMultimap$KeyList",
520:       "com.google.common.collect.RegularImmutableList",
521:       "com.google.common.base.Throwables",
522:       "com.google.common.math.IntMath",
523:       "com.google.common.truth.SubjectUtils$DuplicateGroupedAndTyped",
524:       "com.google.common.collect.FluentIterable$3",
525:       "com.google.common.collect.FluentIterable$3$1",
526:       "com.google.common.collect.Iterators$ConcatenatedIterator",
527:       "com.google.common.collect.Iterators$ArrayItr",
528:       "com.google.common.collect.LinkedListMultimap$1KeySetImpl",
529:       "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator",
530:       "com.google.common.truth.Subject$EqualityCheck",
531:       "com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList",
532:       "com.google.common.collect.RegularImmutableMap$KeySet",
533:       "com.google.common.collect.RegularImmutableMap$EntrySet$1",
534:       "com.google.common.truth.FailureMetadata$OldAndNewValuesAreSimilar",
535:       "com.google.common.truth.GraphMatching",
536:       "com.google.common.truth.GraphMatching$HopcroftKarp",
537:       "com.google.common.collect.HashBiMap",
538:       "com.google.common.collect.ImmutableBiMap",
539:       "com.google.common.collect.HashBiMap$View",
540:       "com.google.common.collect.HashBiMap$EntrySet",
541:       "com.google.common.collect.ImmutableBiMap$Builder",
542:       "com.google.common.collect.HashBiMap$View$1",
543:       "com.google.common.collect.RegularImmutableBiMap",
544:       "com.google.common.collect.Iterators$SingletonIterator",
545:       "com.google.common.collect.ImmutableEntry",
546:       "com.google.common.base.MoreObjects",
547:       "com.google.common.collect.HashBiMap$EntryForKey",
548:       "com.google.common.collect.HashBiMap$Inverse",
549:       "com.google.common.collect.LinkedListMultimap$1",
550:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator"
551:     );
552:   }
553: }

* Writing tests to file
* Writing JUnit test case 'IterableSubject_ESTest' to evosuite-tests
* Done!

* Computation finished
