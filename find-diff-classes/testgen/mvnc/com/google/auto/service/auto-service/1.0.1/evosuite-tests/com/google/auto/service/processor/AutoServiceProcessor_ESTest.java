/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 08 02:49:06 GMT 2024
 */

package com.google.auto.service.processor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.auto.service.processor.AutoServiceProcessor;
import com.google.common.collect.ImmutableSortedSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AutoServiceProcessor_ESTest extends AutoServiceProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AutoServiceProcessor autoServiceProcessor0 = new AutoServiceProcessor();
      Set<String> set0 = autoServiceProcessor0.getSupportedOptions();
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      autoServiceProcessor0.init(processingEnvironment0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(element0).accept(any(javax.lang.model.element.ElementVisitor.class) , any());
      Stack<TypeElement> stack0 = new Stack<TypeElement>();
      Iterator<TypeElement> iterator0 = stack0.iterator();
      ImmutableSortedSet<TypeElement> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends TypeElement>) iterator0);
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      linkedHashSet0.add(element0);
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(java.lang.Class.class));
      doReturn(false).when(roundEnvironment0).processingOver();
      boolean boolean0 = autoServiceProcessor0.process(immutableSortedSet0, roundEnvironment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AutoServiceProcessor autoServiceProcessor0 = new AutoServiceProcessor();
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("debug", "");
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Messager) null, (Messager) null).when(processingEnvironment0).getMessager();
      doReturn(hashMap0).when(processingEnvironment0).getOptions();
      autoServiceProcessor0.init(processingEnvironment0);
      Stack<TypeElement> stack0 = new Stack<TypeElement>();
      Iterator<TypeElement> iterator0 = stack0.iterator();
      ImmutableSortedSet<TypeElement> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends TypeElement>) iterator0);
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(java.lang.Class.class));
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        autoServiceProcessor0.process(immutableSortedSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.service.processor.AutoServiceProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AutoServiceProcessor autoServiceProcessor0 = new AutoServiceProcessor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Messager) null).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      autoServiceProcessor0.init(processingEnvironment0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(element0).accept(any(javax.lang.model.element.ElementVisitor.class) , any());
      doReturn((List) null).when(element0).getAnnotationMirrors();
      Stack<TypeElement> stack0 = new Stack<TypeElement>();
      Iterator<TypeElement> iterator0 = stack0.iterator();
      ImmutableSortedSet<TypeElement> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends TypeElement>) iterator0);
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      linkedHashSet0.add(element0);
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(java.lang.Class.class));
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        autoServiceProcessor0.process(immutableSortedSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.service.processor.AutoServiceProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AutoServiceProcessor autoServiceProcessor0 = new AutoServiceProcessor();
      autoServiceProcessor0.getSupportedOptions();
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(0);
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Filer) null).when(processingEnvironment0).getFiler();
      doReturn((Messager) null).when(processingEnvironment0).getMessager();
      doReturn(hashMap0).when(processingEnvironment0).getOptions();
      autoServiceProcessor0.getSupportedOptions();
      autoServiceProcessor0.getSupportedAnnotationTypes();
      autoServiceProcessor0.init(processingEnvironment0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      ExecutableElement executableElement0 = mock(ExecutableElement.class, new ViolatedAssumptionAnswer());
      autoServiceProcessor0.exceptionStacks();
      autoServiceProcessor0.getSupportedAnnotationTypes();
      Stack<TypeElement> stack0 = new Stack<TypeElement>();
      Iterator<TypeElement> iterator0 = stack0.iterator();
      ImmutableSortedSet<TypeElement> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends TypeElement>) iterator0);
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(roundEnvironment0).processingOver();
      autoServiceProcessor0.process(immutableSortedSet0, roundEnvironment0);
      autoServiceProcessor0.getCompletions(executableElement0, (AnnotationMirror) null, executableElement0, "dH>zj}!t");
      autoServiceProcessor0.getSupportedSourceVersion();
      LinkedHashSet<TypeElement> linkedHashSet1 = new LinkedHashSet<TypeElement>();
      RoundEnvironment roundEnvironment1 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(roundEnvironment1).getElementsAnnotatedWith(any(java.lang.Class.class));
      doReturn(false).when(roundEnvironment1).processingOver();
      // Undeclared exception!
      try { 
        autoServiceProcessor0.process(linkedHashSet1, roundEnvironment1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.service.processor.AutoServiceProcessor", e);
      }
  }
}
