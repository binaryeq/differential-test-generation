/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:20:50 GMT 2024
 */

package com.google.auto.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.auto.common.AnnotationMirrors;
import com.google.auto.common.SimpleAnnotationMirror;
import com.google.auto.common.SimpleTypeAnnotationValue;
import java.lang.annotation.Annotation;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import org.eclipse.jdt.internal.compiler.apt.model.ErrorTypeElement;
import org.eclipse.jdt.internal.compiler.apt.model.PrimitiveTypeImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AnnotationMirrors_ESTest extends AnnotationMirrors_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(element0).getAnnotationMirrors();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotatedAnnotations(element0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.AnnotationMirrors", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(element0).getAnnotationMirrors();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotatedAnnotations(element0, typeElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.AnnotationMirrors", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotationValuesWithDefaults((AnnotationMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.AnnotationMirrors", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.ANNOTATION_TYPE;
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.SHORT;
      LinkedList<ErrorTypeElement> linkedList0 = new LinkedList<ErrorTypeElement>();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(primitiveTypeImpl0).when(typeElement0).asType();
      doReturn(elementKind0).when(typeElement0).getKind();
      doReturn(linkedList0, linkedList0).when(typeElement0).getEnclosedElements();
      HashMap<String, SimpleTypeAnnotationValue> hashMap0 = new HashMap<String, SimpleTypeAnnotationValue>();
      AnnotationMirror annotationMirror0 = SimpleAnnotationMirror.of(typeElement0, (Map<String, ? extends AnnotationValue>) hashMap0);
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotationValuesWithDefaults(annotationMirror0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // short does not represent a declared type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotationElementAndValue((AnnotationMirror) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotatedAnnotations((Element) null, "AnnotationMirrors.equivalence()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.AnnotationMirrors", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationMirrors.toString((AnnotationMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.AnnotationOutput$SourceFormVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AnnotationMirrors.equivalence();
      AnnotationMirrors.equivalence();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(element0).getAnnotationMirrors();
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotatedAnnotations(element0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.AnnotationMirrors", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnnotationMirrors.getAnnotationValue((AnnotationMirror) null, "com.google.auto.common.AnnotationMirrors");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
