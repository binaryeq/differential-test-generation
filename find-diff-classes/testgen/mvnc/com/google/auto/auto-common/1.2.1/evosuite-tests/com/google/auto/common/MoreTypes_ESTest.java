/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:27:17 GMT 2024
 */

package com.google.auto.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.auto.common.MoreTypes;
import com.google.common.base.Equivalence;
import com.google.common.collect.ImmutableSet;
import java.lang.annotation.Annotation;
import java.util.LinkedHashSet;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.NoType;
import javax.lang.model.type.NullType;
import javax.lang.model.type.PrimitiveType;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Types;
import org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl;
import org.eclipse.jdt.internal.compiler.apt.model.ElementsImpl;
import org.eclipse.jdt.internal.compiler.apt.model.NoTypeImpl;
import org.eclipse.jdt.internal.compiler.apt.model.PrimitiveTypeImpl;
import org.eclipse.jdt.internal.compiler.apt.model.TypesImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MoreTypes_ESTest extends MoreTypes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElementsImpl elementsImpl0 = ElementsImpl.create((BaseProcessingEnvImpl) null);
      TypesImpl typesImpl0 = new TypesImpl((BaseProcessingEnvImpl) null);
      // Undeclared exception!
      try { 
        MoreTypes.nonObjectSuperclass(typesImpl0, elementsImpl0, (DeclaredType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.referencedTypes((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MoreTypes.isTypeOf(class0, (TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.LONG;
      // Undeclared exception!
      try { 
        MoreTypes.isTypeOf((Class<?>) null, primitiveTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.isType((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.isConversionFromObjectUnchecked((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.lang.model.util.AbstractTypeVisitor6", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BYTE;
      // Undeclared exception!
      try { 
        MoreTypes.asWildcard(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byte does not represent a wildcard type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asTypeVariable((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<NoTypeImpl> linkedHashSet0 = new LinkedHashSet<NoTypeImpl>();
      linkedHashSet0.add((NoTypeImpl) null);
      // Undeclared exception!
      try { 
        MoreTypes.asTypeElements(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asTypeElements((Iterable<? extends TypeMirror>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asTypeElement((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_PACKAGE;
      // Undeclared exception!
      try { 
        MoreTypes.asPrimitiveType(noTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // package does not represent a primitive type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asNullType((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.LONG;
      // Undeclared exception!
      try { 
        MoreTypes.asNullType(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // long does not represent a null
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asNoType((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.DOUBLE;
      // Undeclared exception!
      try { 
        MoreTypes.asNoType(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // double does not represent a non-type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asIntersection((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asExecutable((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_PACKAGE;
      // Undeclared exception!
      try { 
        MoreTypes.asError(noTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // package does not represent a error type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.SHORT;
      // Undeclared exception!
      try { 
        MoreTypes.asElement(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // short cannot be converted to an Element
         //
         verifyException("com.google.auto.common.MoreTypes$AsElementVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asDeclared((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asArray((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asElement((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.PARAMETER;
      VariableElement variableElement0 = mock(VariableElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(variableElement0).getKind();
      doReturn((Element) null).when(variableElement0).getEnclosingElement();
      // Undeclared exception!
      try { 
        MoreTypes.asMemberOf((Types) null, (DeclaredType) null, variableElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreElements", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.METHOD;
      VariableElement variableElement0 = mock(VariableElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(variableElement0).getKind();
      // Undeclared exception!
      try { 
        MoreTypes.asMemberOf((Types) null, (DeclaredType) null, variableElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.SHORT;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.INT;
      Class<Object> class0 = Object.class;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.FLOAT;
      Class<Object> class0 = Object.class;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.DOUBLE;
      Class<Object> class0 = Object.class;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.CHAR;
      Class<NoTypeImpl> class0 = NoTypeImpl.class;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BYTE;
      Class<Object> class0 = Object.class;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.LONG;
      Class<Object> class0 = Object.class;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_VOID;
      boolean boolean0 = MoreTypes.isTypeOf(class0, noTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_PACKAGE;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MoreTypes.isTypeOf(class0, noTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // package cannot be represented as a Class<?>.
         //
         verifyException("com.google.auto.common.MoreTypes$IsTypeOf", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_PACKAGE;
      LinkedHashSet<NoTypeImpl> linkedHashSet0 = new LinkedHashSet<NoTypeImpl>();
      linkedHashSet0.add(noTypeImpl0);
      // Undeclared exception!
      try { 
        MoreTypes.asTypeElements(linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // package cannot be converted to an Element
         //
         verifyException("com.google.auto.common.MoreTypes$AsElementVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<NoTypeImpl> linkedHashSet0 = new LinkedHashSet<NoTypeImpl>();
      ImmutableSet<TypeElement> immutableSet0 = MoreTypes.asTypeElements(linkedHashSet0);
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.SHORT;
      boolean boolean0 = MoreTypes.isType(primitiveTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BYTE;
      PrimitiveType primitiveType0 = MoreTypes.asPrimitiveType(primitiveTypeImpl0);
      assertSame(primitiveTypeImpl0, primitiveType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<NoTypeImpl> class0 = NoTypeImpl.class;
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NULL_TYPE;
      // Undeclared exception!
      try { 
        MoreTypes.isTypeOf(class0, noTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null cannot be represented as a Class<?>.
         //
         verifyException("com.google.auto.common.MoreTypes$IsTypeOf", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_PACKAGE;
      NoType noType0 = MoreTypes.asNoType(noTypeImpl0);
      assertEquals(TypeKind.PACKAGE, noType0.getKind());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Equivalence<TypeMirror> equivalence0 = MoreTypes.equivalence();
      assertNotNull(equivalence0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asPrimitiveType((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BOOLEAN;
      ImmutableSet<TypeElement> immutableSet0 = MoreTypes.referencedTypes(primitiveTypeImpl0);
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BOOLEAN;
      Class<Object> class0 = Object.class;
      boolean boolean0 = MoreTypes.isTypeOf(class0, primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.SHORT;
      // Undeclared exception!
      try { 
        MoreTypes.asTypeVariable(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // short does not represent a type variable
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BYTE;
      // Undeclared exception!
      try { 
        MoreTypes.asArray(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byte does not represent a array
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NULL_TYPE;
      NullType nullType0 = MoreTypes.asNullType(noTypeImpl0);
      assertEquals(TypeKind.NULL, nullType0.getKind());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BOOLEAN;
      boolean boolean0 = MoreTypes.isConversionFromObjectUnchecked(primitiveTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.SHORT;
      // Undeclared exception!
      try { 
        MoreTypes.asDeclared(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // short does not represent a declared type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_VOID;
      // Undeclared exception!
      try { 
        MoreTypes.asIntersection(noTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // void does not represent a intersection type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BOOLEAN;
      // Undeclared exception!
      try { 
        MoreTypes.asExecutable(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // boolean does not represent a executable type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asWildcard((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_PACKAGE;
      boolean boolean0 = MoreTypes.isType(noTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreTypes.asError((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.MoreTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.INT;
      // Undeclared exception!
      try { 
        MoreTypes.asTypeElement(primitiveTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // int cannot be converted to an Element
         //
         verifyException("com.google.auto.common.MoreTypes$AsElementVisitor", e);
      }
  }
}
