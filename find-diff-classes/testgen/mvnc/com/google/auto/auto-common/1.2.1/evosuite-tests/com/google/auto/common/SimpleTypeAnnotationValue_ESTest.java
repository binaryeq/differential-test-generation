/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:30:02 GMT 2024
 */

package com.google.auto.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.auto.common.SimpleTypeAnnotationValue;
import java.lang.annotation.Annotation;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.AnnotationValueVisitor;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import org.eclipse.jdt.internal.compiler.apt.model.NoTypeImpl;
import org.eclipse.jdt.internal.compiler.apt.model.PrimitiveTypeImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleTypeAnnotationValue_ESTest extends SimpleTypeAnnotationValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleTypeAnnotationValue.of((TypeMirror) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.SimpleTypeAnnotationValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.INT;
      SimpleTypeAnnotationValue simpleTypeAnnotationValue0 = (SimpleTypeAnnotationValue)SimpleTypeAnnotationValue.of(primitiveTypeImpl0);
      PrimitiveTypeImpl primitiveTypeImpl1 = (PrimitiveTypeImpl)simpleTypeAnnotationValue0.getValue();
      assertSame(primitiveTypeImpl0, primitiveTypeImpl1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.DOUBLE;
      AnnotationValue annotationValue0 = SimpleTypeAnnotationValue.of(primitiveTypeImpl0);
      AnnotationValueVisitor<Integer, Annotation> annotationValueVisitor0 = (AnnotationValueVisitor<Integer, Annotation>) mock(AnnotationValueVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(annotationValueVisitor0).visitType(any(javax.lang.model.type.TypeMirror.class) , any(java.lang.annotation.Annotation.class));
      Integer integer0 = annotationValue0.accept(annotationValueVisitor0, (Annotation) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NoTypeImpl noTypeImpl0 = (NoTypeImpl)NoTypeImpl.NO_TYPE_NONE;
      // Undeclared exception!
      try { 
        SimpleTypeAnnotationValue.of(noTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value must be a primitive, array, or declared type, but was javax.lang.model.type.TypeKind@0000000001 (org.eclipse.jdt.internal.compiler.apt.model.NoTypeImpl@0000000002)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TypeKind typeKind0 = TypeKind.DECLARED;
      NoTypeImpl noTypeImpl0 = new NoTypeImpl(typeKind0);
      // Undeclared exception!
      try { 
        SimpleTypeAnnotationValue.of(noTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // none does not represent a declared type
         //
         verifyException("com.google.auto.common.MoreTypes$CastingTypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TypeKind typeKind0 = TypeKind.ARRAY;
      NoTypeImpl noTypeImpl0 = new NoTypeImpl(typeKind0);
      AnnotationValue annotationValue0 = SimpleTypeAnnotationValue.of(noTypeImpl0);
      assertNotNull(annotationValue0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PrimitiveTypeImpl primitiveTypeImpl0 = PrimitiveTypeImpl.BYTE;
      AnnotationValue annotationValue0 = SimpleTypeAnnotationValue.of(primitiveTypeImpl0);
      String string0 = annotationValue0.toString();
      assertEquals("byte.class", string0);
  }
}
