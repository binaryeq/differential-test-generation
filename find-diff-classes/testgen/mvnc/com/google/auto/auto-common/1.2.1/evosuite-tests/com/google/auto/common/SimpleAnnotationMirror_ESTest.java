/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:28:44 GMT 2024
 */

package com.google.auto.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.auto.common.SimpleAnnotationMirror;
import com.google.auto.common.SimpleTypeAnnotationValue;
import com.google.common.collect.ImmutableSortedMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import org.eclipse.jdt.internal.compiler.apt.model.TypeElementImpl;
import org.eclipse.jdt.internal.compiler.apt.model.VariableElementImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleAnnotationMirror_ESTest extends SimpleAnnotationMirror_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.ANNOTATION_TYPE;
      Vector<VariableElementImpl> vector0 = new Vector<VariableElementImpl>();
      Name name0 = mock(Name.class, new ViolatedAssumptionAnswer());
      doReturn('G', 'G', 'a', '@', '#').when(name0).charAt(anyInt());
      doReturn(1891, 1891, (-1), (-1)).when(name0).length();
      Name name1 = mock(Name.class, new ViolatedAssumptionAnswer());
      doReturn(1891, (-1), 0).when(name1).length();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(typeElement0).getKind();
      doReturn(vector0, vector0).when(typeElement0).getEnclosedElements();
      doReturn(name0, name0, name1).when(typeElement0).getQualifiedName();
      SimpleAnnotationMirror simpleAnnotationMirror0 = (SimpleAnnotationMirror)SimpleAnnotationMirror.of(typeElement0);
      // Undeclared exception!
      try { 
        simpleAnnotationMirror0.toString();
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end 1891, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn((ElementKind) null).when(typeElement0).getKind();
      TreeMap<String, SimpleTypeAnnotationValue> treeMap0 = new TreeMap<String, SimpleTypeAnnotationValue>();
      // Undeclared exception!
      try { 
        SimpleAnnotationMirror.of(typeElement0, (Map<String, ? extends AnnotationValue>) treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.SimpleAnnotationMirror", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn((ElementKind) null).when(typeElement0).getKind();
      // Undeclared exception!
      try { 
        SimpleAnnotationMirror.of(typeElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.auto.common.SimpleAnnotationMirror", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.TYPE_PARAMETER;
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(typeElement0).getKind();
      // Undeclared exception!
      try { 
        SimpleAnnotationMirror.of(typeElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // annotationType must be an annotation: org.evosuite.shaded.org.mockito.codegen.TypeElement$MockitoMock$1684739885@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.ANNOTATION_TYPE;
      Vector<VariableElementImpl> vector0 = new Vector<VariableElementImpl>();
      Name name0 = mock(Name.class, new ViolatedAssumptionAnswer());
      doReturn('3', '3', 'Y', 'Y', 'Y').when(name0).charAt(anyInt());
      doReturn(0, 966, 966, 966).when(name0).length();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(typeElement0).getKind();
      doReturn(vector0, vector0).when(typeElement0).getEnclosedElements();
      doReturn(name0, name0).when(typeElement0).getQualifiedName();
      SimpleAnnotationMirror simpleAnnotationMirror0 = (SimpleAnnotationMirror)SimpleAnnotationMirror.of(typeElement0);
      boolean boolean0 = simpleAnnotationMirror0.equals("@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.ANNOTATION_TYPE;
      Vector<VariableElementImpl> vector0 = new Vector<VariableElementImpl>();
      Name name0 = mock(Name.class, new ViolatedAssumptionAnswer());
      doReturn('a', 'a', 'a', 'a', 'a').when(name0).charAt(anyInt());
      doReturn(1891, 1891, (-1), (-1)).when(name0).length();
      Name name1 = mock(Name.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(name1).length();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(typeElement0).getKind();
      doReturn(vector0, vector0).when(typeElement0).getEnclosedElements();
      doReturn(name0, name0, name1).when(typeElement0).getQualifiedName();
      SimpleAnnotationMirror simpleAnnotationMirror0 = (SimpleAnnotationMirror)SimpleAnnotationMirror.of(typeElement0);
      String string0 = simpleAnnotationMirror0.toString();
      //  // Unstable assertion: assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.ANNOTATION_TYPE;
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(typeElement0).getKind();
      doReturn((List) null).when(typeElement0).getEnclosedElements();
      SimpleTypeAnnotationValue simpleTypeAnnotationValue0 = mock(SimpleTypeAnnotationValue.class, new ViolatedAssumptionAnswer());
      ImmutableSortedMap<String, SimpleTypeAnnotationValue> immutableSortedMap0 = ImmutableSortedMap.of("", simpleTypeAnnotationValue0);
      // Undeclared exception!
      try { 
        SimpleAnnotationMirror.of(typeElement0, (Map<String, ? extends AnnotationValue>) immutableSortedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.lang.model.util.ElementFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ElementKind elementKind0 = ElementKind.ANNOTATION_TYPE;
      Vector<TypeElementImpl> vector0 = new Vector<TypeElementImpl>();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(elementKind0).when(typeElement0).getKind();
      doReturn(vector0, (List) null).when(typeElement0).getEnclosedElements();
      TreeMap<String, SimpleTypeAnnotationValue> treeMap0 = new TreeMap<String, SimpleTypeAnnotationValue>();
      // Undeclared exception!
      try { 
        SimpleAnnotationMirror.of(typeElement0, (Map<String, ? extends AnnotationValue>) treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.lang.model.util.ElementFilter", e);
      }
  }
}
