/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:13:19 GMT 2024
 */

package com.google.inject.assistedinject;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.inject.Key;
import com.google.inject.MethodInterceptionTest;
import com.google.inject.TypeLiteral;
import com.google.inject.assistedinject.Assisted;
import com.google.inject.assistedinject.BindingCollector;
import com.google.inject.assistedinject.FactoryProvider2;
import java.lang.annotation.Annotation;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.Method;
import java.sql.SQLTimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FactoryProvider2_ESTest extends FactoryProvider2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        FactoryProvider2.isDefault((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.assistedinject.FactoryProvider2", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BindingCollector bindingCollector0 = new BindingCollector();
      FactoryProvider2<Annotation> factoryProvider2_0 = null;
      try {
        factoryProvider2_0 = new FactoryProvider2<Annotation>((Key<Annotation>) null, bindingCollector0, (MethodHandles.Lookup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.assistedinject.FactoryProvider2", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        FactoryProvider2.PrivateLookup.superMethodHandle((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.assistedinject.FactoryProvider2$PrivateLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        FactoryProvider2.canRethrow((Method) null, sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.assistedinject.FactoryProvider2", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("HRDCG0C)~vm`Rb");
      boolean boolean0 = FactoryProvider2.canRethrow((Method) null, mockRuntimeException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockError mockError0 = new MockError();
      boolean boolean0 = FactoryProvider2.canRethrow((Method) null, mockError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<MethodInterceptionTest.BarGetter> class0 = MethodInterceptionTest.BarGetter.class;
      Key<MethodInterceptionTest.BarGetter> key0 = Key.get(class0);
      FactoryProvider2<MethodInterceptionTest.BarGetter> factoryProvider2_0 = null;
      try {
        factoryProvider2_0 = new FactoryProvider2<MethodInterceptionTest.BarGetter>(key0, (BindingCollector) null, (MethodHandles.Lookup) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Guice configuration errors:
         // 
         // 1) MethodInterceptionTest$BarGetter must be an interface.
         // 
         // 1 error
         // 
         // ======================
         // Full classname legend:
         // ======================
         // MethodInterceptionTest$BarGetter: \"com.google.inject.MethodInterceptionTest$BarGetter\"
         // ========================
         // End of classname legend:
         // ========================
         //
         verifyException("com.google.inject.assistedinject.FactoryProvider2", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FactoryProvider2.PrivateLookup factoryProvider2_PrivateLookup0 = new FactoryProvider2.PrivateLookup();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeLiteral<Annotation> typeLiteral0 = TypeLiteral.get(class0);
      Assisted assisted0 = FactoryProvider2.DEFAULT_ANNOTATION;
      Key<Annotation> key0 = Key.get(typeLiteral0, (Annotation) assisted0);
      BindingCollector bindingCollector0 = new BindingCollector();
      Key<Annotation> key1 = key0.ofType(class0);
      bindingCollector0.addBinding(key1, typeLiteral0);
      // Undeclared exception!
      try { 
        bindingCollector0.addBinding(key0, typeLiteral0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Guice configuration errors:
         // 
         // 1) Only one implementation can be specified for Key[type=Annotation, annotation=@Assisted()]
         // 
         // 1 error
         // 
         // ======================
         // Full classname legend:
         // ======================
         // Annotation: \"java.lang.annotation.Annotation\"
         // Assisted:   \"com.google.inject.assistedinject.Assisted\"
         // ========================
         // End of classname legend:
         // ========================
         //
         verifyException("com.google.inject.assistedinject.BindingCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Key<Annotation> key0 = Key.get(class0);
      BindingCollector bindingCollector0 = new BindingCollector();
      FactoryProvider2<Annotation> factoryProvider2_0 = null;
      try {
        factoryProvider2_0 = new FactoryProvider2<Annotation>(key0, bindingCollector0, (MethodHandles.Lookup) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Guice configuration errors:
         // 
         // 1) boolean is abstract, not a concrete class.  Unable to create AssistedInject factory.
         //   while locating boolean
         //   at Annotation.equals(Annotation.java:1)
         // 
         // 2) [Guice/MissingConstructor]: No injectable constructor for type Integer.
         // 
         // class Integer does not have a @Inject annotated constructor or a no-arg constructor.
         // 
         // Requested by:
         // 1  : Integer.class(Integer.java:52)
         //      while locating Integer
         //      at Annotation.hashCode(Annotation.java:1)
         // 
         // 3) [Guice/MissingConstructor]: No injectable constructor for type MoreTypes$ParameterizedTypeImpl@0000000057.
         // 
         // class Class does not have a @Inject annotated constructor or a no-arg constructor.
         // 
         // Requested by:
         // 1  : Class.class(Class.java:155)
         //      while locating MoreTypes$ParameterizedTypeImpl@0000000057
         //      at Annotation.annotationType(Annotation.java:1)
         // 
         // 3 errors
         // 
         // ======================
         // Full classname legend:
         // ======================
         // Annotation:                      \"java.lang.annotation.Annotation\"
         // Integer:                         \"java.lang.Integer\"
         // MoreTypes$ParameterizedTypeImpl: \"com.google.inject.internal.MoreTypes$ParameterizedTypeImpl\"
         // ========================
         // End of classname legend:
         // ========================
         //
         verifyException("com.google.inject.assistedinject.FactoryProvider2", e);
      }
  }
}
