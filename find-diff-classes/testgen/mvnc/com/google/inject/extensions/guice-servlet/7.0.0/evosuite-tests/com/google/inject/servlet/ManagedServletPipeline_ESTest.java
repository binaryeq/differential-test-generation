/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:19:18 GMT 2024
 */

package com.google.inject.servlet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.inject.Binding;
import com.google.inject.Injector;
import com.google.inject.Provider;
import com.google.inject.servlet.ManagedServletPipeline;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletRequestWrapper;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpServletResponseWrapper;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ManagedServletPipeline_ESTest extends ManagedServletPipeline_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("https", "https", "https").when(httpServletRequest0).getScheme();
      doReturn("https", "https", "https").when(httpServletRequest0).getServerName();
      doReturn(3520, 48, (-1)).when(httpServletRequest0).getServerPort();
      HttpServletRequest httpServletRequest1 = ManagedServletPipeline.wrapRequest(httpServletRequest0, "https");
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest1);
      httpServletRequestWrapper0.getRequestURL();
      httpServletRequestWrapper0.getRequestURL();
      StringBuffer stringBuffer0 = httpServletRequestWrapper0.getRequestURL();
      assertEquals("https://httpshttps", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManagedServletPipeline.wrapRequest((HttpServletRequest) null, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request cannot be null
         //
         verifyException("jakarta.servlet.ServletRequestWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<Binding<Object>> stack0 = new Stack<Binding<Object>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      Provider<Object> provider0 = (Provider<Object>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Binding<Object> binding0 = (Binding<Object>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn((Provider) null).when(binding0).getProvider();
      stack0.add(binding0);
      ManagedServletPipeline managedServletPipeline0 = null;
      try {
        managedServletPipeline0 = new ManagedServletPipeline(injector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedServletPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("http").when(httpServletRequest0).getScheme();
      doReturn("http").when(httpServletRequest0).getServerName();
      doReturn(3539).when(httpServletRequest0).getServerPort();
      HttpServletRequest httpServletRequest1 = ManagedServletPipeline.wrapRequest(httpServletRequest0, "http");
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest1);
      StringBuffer stringBuffer0 = httpServletRequestWrapper0.getRequestURL();
      assertEquals("http://http:3539http", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getScheme();
      doReturn((String) null).when(httpServletRequest0).getServerName();
      doReturn(0).when(httpServletRequest0).getServerPort();
      HttpServletRequest httpServletRequest1 = ManagedServletPipeline.wrapRequest(httpServletRequest0, "");
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest1);
      StringBuffer stringBuffer0 = httpServletRequestWrapper0.getRequestURL();
      assertEquals("null://null", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Binding<Object>> stack0 = new Stack<Binding<Object>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      Provider<Object> provider0 = (Provider<Object>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Binding<Object> binding0 = (Binding<Object>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(provider0).when(binding0).getProvider();
      stack0.add(binding0);
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      // Undeclared exception!
      try { 
        managedServletPipeline0.getRequestDispatcher("jakarta.servlet.forward.servlet_path");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedServletPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      ManagedServletPipeline managedServletPipeline0 = null;
      try {
        managedServletPipeline0 = new ManagedServletPipeline(injector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedServletPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Binding<Object>> stack0 = new Stack<Binding<Object>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      Provider<Object> provider0 = (Provider<Object>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Binding<Object> binding0 = (Binding<Object>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(provider0).when(binding0).getProvider();
      stack0.add(binding0);
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      // Undeclared exception!
      try { 
        managedServletPipeline0.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedServletPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<Binding<Object>> stack0 = new Stack<Binding<Object>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      Provider<Object> provider0 = (Provider<Object>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Binding<Object> binding0 = (Binding<Object>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(provider0).when(binding0).getProvider();
      stack0.add(binding0);
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        managedServletPipeline0.service(httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedServletPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Binding<Object>> stack0 = new Stack<Binding<Object>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      Provider<Object> provider0 = (Provider<Object>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Binding<Object> binding0 = (Binding<Object>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(provider0).when(binding0).getProvider();
      stack0.add(binding0);
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      boolean boolean0 = managedServletPipeline0.hasServletsMapped();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("_AE=>&$dbY").when(httpServletRequest0).getScheme();
      doReturn("_AE=>&$dbY").when(httpServletRequest0).getServerName();
      doReturn(132).when(httpServletRequest0).getServerPort();
      HttpServletRequest httpServletRequest1 = ManagedServletPipeline.wrapRequest(httpServletRequest0, "_AE=>&$dbY");
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest1);
      StringBuffer stringBuffer0 = httpServletRequestWrapper0.getRequestURL();
      assertEquals(33, stringBuffer0.length());
  }
}
