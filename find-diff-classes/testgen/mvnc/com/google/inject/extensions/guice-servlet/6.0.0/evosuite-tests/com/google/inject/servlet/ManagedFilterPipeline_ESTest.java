/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:14:32 GMT 2024
 */

package com.google.inject.servlet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.inject.Binding;
import com.google.inject.Injector;
import com.google.inject.Key;
import com.google.inject.Provider;
import com.google.inject.TypeLiteral;
import com.google.inject.servlet.FilterChainInvocation;
import com.google.inject.servlet.FilterDefinition;
import com.google.inject.servlet.GuiceFilter;
import com.google.inject.servlet.ManagedFilterPipeline;
import com.google.inject.servlet.ManagedServletPipeline;
import com.google.inject.servlet.UriPatternMatcher;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.servlet.FilterChain;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ManagedFilterPipeline_ESTest extends ManagedFilterPipeline_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<Binding<Annotation>> arrayList0 = new ArrayList<Binding<Annotation>>();
      Vector<Binding<FilterDefinition>> vector0 = new Vector<Binding<FilterDefinition>>();
      Binding<Object> binding0 = (Binding<Object>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(binding0).acceptScopingVisitor(any(com.google.inject.spi.BindingScopingVisitor.class));
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, vector0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      doReturn(binding0).when(injector0).getBinding(any(com.google.inject.Key.class));
      Class<GuiceFilter> class0 = GuiceFilter.class;
      TypeLiteral<GuiceFilter> typeLiteral0 = TypeLiteral.get(class0);
      Key<GuiceFilter> key0 = Key.get(typeLiteral0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      GuiceFilter guiceFilter0 = new GuiceFilter();
      FilterDefinition filterDefinition0 = new FilterDefinition(key0, (UriPatternMatcher) null, hashMap0, guiceFilter0);
      Binding<FilterDefinition> binding1 = (Binding<FilterDefinition>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(filterDefinition0).when(binding1).getProvider();
      vector0.add(binding1);
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      Provider<ServletContext> provider0 = (Provider<ServletContext>) mock(Provider.class, new ViolatedAssumptionAnswer());
      ManagedFilterPipeline managedFilterPipeline0 = new ManagedFilterPipeline(injector0, managedServletPipeline0, provider0);
      // Undeclared exception!
      try { 
        managedFilterPipeline0.initPipeline((ServletContext) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Boolean
         //
         verifyException("com.google.inject.Scopes", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Stack<Binding<Object>> stack0 = new Stack<Binding<Object>>();
      Stack<Binding<FilterDefinition>> stack1 = new Stack<Binding<FilterDefinition>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(stack0, stack1).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      ManagedFilterPipeline managedFilterPipeline0 = new ManagedFilterPipeline(injector0, managedServletPipeline0, (Provider<ServletContext>) null);
      // Undeclared exception!
      try { 
        managedFilterPipeline0.dispatch((ServletRequest) null, (ServletResponse) null, (FilterChain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedFilterPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      ManagedFilterPipeline managedFilterPipeline0 = null;
      try {
        managedFilterPipeline0 = new ManagedFilterPipeline(injector0, (ManagedServletPipeline) null, (Provider<ServletContext>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedFilterPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Binding<Object>> linkedList0 = new LinkedList<Binding<Object>>();
      ArrayList<Binding<Binding<Object>>> arrayList0 = new ArrayList<Binding<Binding<Object>>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, arrayList0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      Provider<ServletContext> provider0 = (Provider<ServletContext>) mock(Provider.class, new ViolatedAssumptionAnswer());
      ManagedFilterPipeline managedFilterPipeline0 = new ManagedFilterPipeline(injector0, managedServletPipeline0, provider0);
      managedFilterPipeline0.initPipeline((ServletContext) null);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      FilterChainInvocation filterChainInvocation0 = new FilterChainInvocation((FilterDefinition[]) null, managedServletPipeline0, filterChain0);
      // Undeclared exception!
      try { 
        managedFilterPipeline0.dispatch((ServletRequest) null, (ServletResponse) null, filterChainInvocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<Binding<Annotation>> arrayList0 = new ArrayList<Binding<Annotation>>();
      Vector<Binding<FilterDefinition>> vector0 = new Vector<Binding<FilterDefinition>>();
      Binding<Object> binding0 = (Binding<Object>) mock(Binding.class, new ViolatedAssumptionAnswer());
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, vector0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      doReturn((Binding) null).when(injector0).getBinding(any(com.google.inject.Key.class));
      Class<GuiceFilter> class0 = GuiceFilter.class;
      TypeLiteral<GuiceFilter> typeLiteral0 = TypeLiteral.get(class0);
      Key<GuiceFilter> key0 = Key.get(typeLiteral0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      GuiceFilter guiceFilter0 = new GuiceFilter();
      FilterDefinition filterDefinition0 = new FilterDefinition(key0, (UriPatternMatcher) null, hashMap0, guiceFilter0);
      Binding<FilterDefinition> binding1 = (Binding<FilterDefinition>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(filterDefinition0).when(binding1).getProvider();
      vector0.add(binding1);
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      Provider<ServletContext> provider0 = (Provider<ServletContext>) mock(Provider.class, new ViolatedAssumptionAnswer());
      ManagedFilterPipeline managedFilterPipeline0 = new ManagedFilterPipeline(injector0, managedServletPipeline0, provider0);
      // Undeclared exception!
      try { 
        managedFilterPipeline0.initPipeline((ServletContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.Scopes", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Binding<Object>> linkedList0 = new LinkedList<Binding<Object>>();
      ArrayList<Binding<Binding<Object>>> arrayList0 = new ArrayList<Binding<Binding<Object>>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, arrayList0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      Provider<ServletContext> provider0 = (Provider<ServletContext>) mock(Provider.class, new ViolatedAssumptionAnswer());
      ManagedFilterPipeline managedFilterPipeline0 = new ManagedFilterPipeline(injector0, managedServletPipeline0, provider0);
      managedFilterPipeline0.initPipeline((ServletContext) null);
      managedFilterPipeline0.initPipeline((ServletContext) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Stack<Binding<FilterDefinition>> stack0 = new Stack<Binding<FilterDefinition>>();
      ArrayList<Binding<Object>> arrayList0 = new ArrayList<Binding<Object>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      Injector injector1 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(injector1).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      ManagedServletPipeline managedServletPipeline1 = null;
      try {
        managedServletPipeline1 = new ManagedServletPipeline(injector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.servlet.ManagedServletPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ArrayList<Binding<Annotation>> arrayList0 = new ArrayList<Binding<Annotation>>();
      Vector<Binding<FilterDefinition>> vector0 = new Vector<Binding<FilterDefinition>>();
      Injector injector0 = mock(Injector.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, vector0).when(injector0).findBindingsByType(any(com.google.inject.TypeLiteral.class));
      Class<GuiceFilter> class0 = GuiceFilter.class;
      TypeLiteral<GuiceFilter> typeLiteral0 = TypeLiteral.get(class0);
      Key<GuiceFilter> key0 = Key.get(typeLiteral0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      GuiceFilter guiceFilter0 = new GuiceFilter();
      FilterDefinition filterDefinition0 = new FilterDefinition(key0, (UriPatternMatcher) null, hashMap0, guiceFilter0);
      Binding<FilterDefinition> binding0 = (Binding<FilterDefinition>) mock(Binding.class, new ViolatedAssumptionAnswer());
      doReturn(filterDefinition0).when(binding0).getProvider();
      vector0.add(binding0);
      ManagedServletPipeline managedServletPipeline0 = new ManagedServletPipeline(injector0);
      Provider<ServletContext> provider0 = (Provider<ServletContext>) mock(Provider.class, new ViolatedAssumptionAnswer());
      ManagedFilterPipeline managedFilterPipeline0 = new ManagedFilterPipeline(injector0, managedServletPipeline0, provider0);
      managedFilterPipeline0.destroyPipeline();
  }
}
