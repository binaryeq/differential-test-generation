/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 23 18:15:46 GMT 2024
 */

package com.google.inject.servlet;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ManagedServletPipeline_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.google.inject.servlet.ManagedServletPipeline"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/inject/extensions/guice-servlet/6.0.0"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.collect.Hashing",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "com.google.common.base.CharMatcher$Whitespace",
      "com.google.inject.spi.ElementVisitor",
      "com.google.common.base.CharMatcher$ForPredicate",
      "com.google.common.base.JdkPattern",
      "com.google.inject.spi.ProviderInstanceBinding",
      "com.google.common.base.CharMatcher$JavaDigit",
      "com.google.inject.servlet.ManagedServletPipeline$RequestDispatcherRequestWrapper",
      "com.google.inject.Key$AnnotationStrategy",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "com.google.common.collect.RegularImmutableMap$KeySet",
      "com.google.common.collect.Sets$2",
      "com.google.common.collect.Sets$3",
      "com.google.common.collect.Sets$1",
      "com.google.common.base.CharMatcher$IsNot",
      "com.google.common.base.CharMatcher$JavaLetter",
      "com.google.common.base.CharMatcher$InRange",
      "com.google.common.base.CharMatcher$JavaLetterOrDigit",
      "com.google.common.collect.RegularImmutableMap",
      "com.google.common.base.CharMatcher$NegatedFastMatcher",
      "com.google.common.collect.SortedMapDifference",
      "com.google.common.base.CommonPattern",
      "com.google.common.collect.AbstractMapEntry",
      "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
      "com.google.common.base.Predicate",
      "com.google.common.base.CharMatcher$IsEither",
      "com.google.inject.ScopeAnnotation",
      "com.google.common.base.CharMatcher$Invisible",
      "com.google.common.base.CharMatcher$None",
      "com.google.inject.TypeLiteral",
      "com.google.inject.servlet.UriPatternMatcher",
      "com.google.inject.spi.BindingScopingVisitor",
      "com.google.inject.Singleton",
      "com.google.common.base.Joiner",
      "com.google.inject.spi.HasDependencies",
      "com.google.common.base.CharMatcher$Any",
      "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet",
      "com.google.common.collect.Sets$SetView",
      "com.google.common.collect.ImmutableSet$CachingAsList",
      "com.google.inject.servlet.InstanceServletBinding",
      "com.google.inject.internal.MoreTypes",
      "com.google.common.collect.ImmutableMapEntrySet",
      "com.google.common.collect.Lists$Partition",
      "com.google.common.collect.Lists",
      "com.google.inject.Binder",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "com.google.common.collect.Sets$4",
      "com.google.common.collect.Maps$BiMapConverter",
      "com.google.inject.servlet.ServletDefinition",
      "com.google.common.base.CharMatcher",
      "com.google.inject.servlet.LinkedServletBinding",
      "com.google.common.base.CharMatcher$And",
      "com.google.inject.Scope",
      "com.google.common.collect.MapDifference",
      "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
      "com.google.common.base.CharMatcher$AnyOf",
      "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.inject.MembersInjector",
      "com.google.common.base.CharMatcher$1",
      "com.google.common.collect.ImmutableEntry",
      "com.google.common.base.CharMatcher$FastMatcher",
      "com.google.inject.Module",
      "com.google.inject.servlet.ServletModuleBinding",
      "com.google.common.base.CharMatcher$JavaIsoControl",
      "com.google.common.base.Joiner$1",
      "com.google.common.base.Joiner$2",
      "com.google.inject.Key",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableEnumMap",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "com.google.common.collect.ImmutableEnumSet",
      "com.google.common.base.CharMatcher$BitSetMatcher",
      "com.google.common.base.CharMatcher$RangesMatcher",
      "com.google.common.base.Splitter",
      "com.google.common.base.CharMatcher$JavaUpperCase",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.base.Converter",
      "com.google.common.collect.Maps$8",
      "com.google.common.collect.BiMap",
      "com.google.common.collect.IndexedImmutableSet",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.base.Function",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "com.google.common.collect.ImmutableMap",
      "com.google.common.collect.ImmutableMapEntry",
      "com.google.inject.ConfigurationException",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.base.CharMatcher$NamedFastMatcher",
      "com.google.inject.Binding",
      "com.google.common.collect.Sets",
      "com.google.inject.servlet.ManagedServletPipeline",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.base.CharMatcher$Is",
      "com.google.inject.spi.Element",
      "com.google.common.collect.Lists$2",
      "com.google.common.base.CharMatcher$SingleWidth",
      "com.google.common.base.CharMatcher$JavaLowerCase",
      "com.google.common.base.Splitter$Strategy",
      "com.google.common.collect.ImmutableMap$1",
      "com.google.common.collect.Lists$1",
      "com.google.inject.spi.BindingTargetVisitor",
      "com.google.errorprone.annotations.CheckReturnValue",
      "com.google.inject.servlet.ManagedServletPipeline$1",
      "com.google.common.collect.ImmutableBiMap",
      "com.google.inject.servlet.ServletUtils",
      "com.google.common.base.Splitter$1$1",
      "com.google.common.collect.ImmutableList",
      "com.google.inject.spi.TypeConverterBinding",
      "com.google.common.collect.ImmutableBiMapFauxverideShim",
      "com.google.inject.Key$NullAnnotationStrategy",
      "com.google.common.base.CharMatcher$Negated",
      "com.google.common.base.CharMatcher$Ascii",
      "com.google.inject.spi.ProviderWithExtensionVisitor",
      "com.google.common.collect.ImmutableMap$Builder",
      "com.google.common.collect.Maps",
      "com.google.common.base.CharMatcher$Or",
      "com.google.common.base.Splitter$1",
      "com.google.inject.Injector",
      "com.google.inject.Provider",
      "com.google.common.collect.Maps$EntryTransformer",
      "com.google.inject.spi.InjectionPoint",
      "jakarta.inject.Provider",
      "com.google.common.base.Splitter$SplittingIterator",
      "com.google.common.base.AbstractIterator",
      "com.google.common.base.CharMatcher$Digit",
      "com.google.common.collect.RegularImmutableMap$Values"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.google.inject.Binding", false, ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.google.inject.Injector", false, ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.google.inject.Provider", false, ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.ServletResponse", false, ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.http.HttpServlet", false, ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.http.HttpServletRequest", false, ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ManagedServletPipeline_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.inject.TypeLiteral",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.ImmutableMap$Builder",
      "com.google.common.collect.ImmutableMap",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.collect.RegularImmutableMap",
      "com.google.common.collect.AbstractMapEntry",
      "com.google.common.collect.ImmutableEntry",
      "com.google.common.collect.ImmutableMapEntry",
      "com.google.common.collect.Hashing",
      "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
      "com.google.inject.internal.MoreTypes",
      "com.google.inject.servlet.ManagedServletPipeline",
      "com.google.inject.servlet.ManagedServletPipeline$1",
      "com.google.inject.servlet.ManagedServletPipeline$RequestDispatcherRequestWrapper",
      "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "com.google.inject.RestrictedBindingSource$RestrictionLevel",
      "org.checkerframework.framework.qual.TypeUseLocation",
      "org.checkerframework.framework.qual.LiteralKind",
      "org.checkerframework.checker.units.qual.Prefix",
      "org.checkerframework.framework.qual.TypeKind",
      "com.google.common.collect.Lists",
      "com.google.common.collect.Sets",
      "com.google.common.collect.Maps",
      "com.google.inject.Key",
      "com.google.inject.Key$NullAnnotationStrategy",
      "com.google.common.cache.CacheBuilder$1",
      "com.google.common.base.Suppliers",
      "com.google.common.base.Suppliers$SupplierOfInstance",
      "com.google.common.cache.CacheStats",
      "com.google.common.cache.CacheBuilder$2",
      "com.google.common.base.Ticker$1",
      "com.google.common.base.Ticker",
      "com.google.common.cache.CacheBuilder$3",
      "com.google.common.cache.CacheBuilder",
      "com.google.common.cache.LocalCache$Strength",
      "com.google.common.cache.CacheLoader",
      "com.google.inject.internal.Annotations$1",
      "com.google.common.cache.LocalCache$LocalManualCache",
      "com.google.common.cache.LocalCache$LocalLoadingCache",
      "com.google.common.cache.LocalCache$1",
      "com.google.common.cache.LocalCache$2",
      "com.google.common.cache.LocalCache",
      "com.google.common.base.MoreObjects",
      "com.google.common.base.Equivalence",
      "com.google.common.base.Equivalence$Identity",
      "com.google.common.base.Equivalence$Equals",
      "com.google.common.cache.CacheBuilder$OneWeigher",
      "com.google.common.cache.CacheBuilder$NullListener",
      "com.google.common.cache.LocalCache$EntryFactory",
      "com.google.common.cache.LocalCache$Segment",
      "com.google.common.base.Joiner",
      "com.google.common.base.Joiner$MapJoiner",
      "com.google.inject.internal.Annotations$AnnotationToStringConfig",
      "com.google.inject.internal.Annotations$AnnotationChecker",
      "com.google.inject.internal.Annotations$AnnotationChecker$1",
      "com.google.inject.internal.Annotations",
      "com.google.common.base.Strings",
      "com.google.common.hash.BloomFilter",
      "com.google.common.hash.BloomFilterStrategies",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "com.google.common.math.LongMath",
      "com.google.common.math.LongMath$1",
      "com.google.common.primitives.IntsMethodsForWeb",
      "com.google.common.primitives.Ints",
      "com.google.common.hash.Striped64$1",
      "com.google.common.hash.Striped64",
      "com.google.common.hash.LongAdder",
      "com.google.common.hash.LongAddables$1",
      "com.google.common.hash.LongAddables",
      "com.google.inject.servlet.ServletDefinition",
      "com.google.common.base.Splitter",
      "com.google.common.base.CharMatcher",
      "com.google.common.base.CharMatcher$FastMatcher",
      "com.google.common.base.CharMatcher$Is",
      "com.google.common.base.Splitter$1",
      "com.google.common.base.CharMatcher$NamedFastMatcher",
      "com.google.common.base.CharMatcher$None",
      "com.google.inject.servlet.ServletUtils",
      "com.google.common.collect.AbstractMultimap",
      "com.google.common.collect.AbstractMapBasedMultimap",
      "com.google.common.collect.AbstractSetMultimap",
      "com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies",
      "com.google.common.collect.LinkedHashMultimap",
      "com.google.common.collect.Platform",
      "com.google.common.collect.LinkedHashMultimap$ValueEntry",
      "com.google.inject.internal.CycleDetectingLock$CycleDetectingLockFactory",
      "com.google.inject.internal.SingletonScope",
      "com.google.inject.Scopes$1",
      "com.google.inject.Scopes$2",
      "com.google.inject.Scopes",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.base.Converter$ConverterComposition",
      "com.google.common.collect.BoundType",
      "com.google.inject.servlet.ServletDefinition$2"
    );
  }
}
