/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:38:22 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.jimfs.Options;
import java.nio.file.CopyOption;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOptionArray0[0];
      ImmutableSet<CopyOption> immutableSet0 = Options.getCopyOptions(linkOptionArray0);
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      copyOptionArray0[1] = (CopyOption) linkOption0;
      copyOptionArray0[2] = (CopyOption) linkOption0;
      ImmutableSet<CopyOption> immutableSet0 = Options.getMoveOptions(copyOptionArray0);
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Options.getOptionsForOutputStream((OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Options.getOptionsForInputStream((OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      // Undeclared exception!
      try { 
        Options.getOptionsForInputStream(linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Options.getOptionsForChannel((Set<? extends OpenOption>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Options.getLinkOptions((LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Options.getCopyOptions((CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        Options.getCopyOptions(linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        Options.getCopyOptions(copyOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'ATOMIC_MOVE' not allowed
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.READ;
      OpenOption[] openOptionArray0 = new OpenOption[7];
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      openOptionArray0[2] = (OpenOption) standardOpenOption0;
      openOptionArray0[3] = (OpenOption) standardOpenOption0;
      openOptionArray0[4] = (OpenOption) linkOption0;
      openOptionArray0[5] = (OpenOption) standardOpenOption0;
      openOptionArray0[6] = (OpenOption) linkOption0;
      // Undeclared exception!
      try { 
        Options.getOptionsForOutputStream(openOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'READ' not allowed
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOptionArray0[1];
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForOutputStream(linkOptionArray0);
      assertEquals(2, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForOutputStream(linkOptionArray0);
      assertEquals(3, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[7];
      // Undeclared exception!
      try { 
        Options.getOptionsForOutputStream(openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      // Undeclared exception!
      try { 
        Options.getOptionsForInputStream(openOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'SYNC' not allowed
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForInputStream(openOptionArray0);
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      OpenOption[] openOptionArray0 = new OpenOption[1];
      openOptionArray0[0] = (OpenOption) linkOption0;
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForInputStream(openOptionArray0);
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      ImmutableSet<StandardOpenOption> immutableSet0 = ImmutableSet.of(standardOpenOption0, standardOpenOption0, standardOpenOption0, standardOpenOption0);
      ImmutableSet<OpenOption> immutableSet1 = Options.getOptionsForChannel(immutableSet0);
      assertEquals(1, immutableSet1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<StandardOpenOption> class0 = StandardOpenOption.class;
      EnumSet<StandardOpenOption> enumSet0 = EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        Options.getOptionsForChannel(enumSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'READ' + 'APPEND' not allowed
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.READ;
      ImmutableSortedSet<StandardOpenOption> immutableSortedSet0 = ImmutableSortedSet.of(standardOpenOption0, standardOpenOption1, standardOpenOption0, standardOpenOption0);
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForChannel(immutableSortedSet0);
      assertEquals(2, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
      ImmutableSortedSet<StandardOpenOption> immutableSortedSet0 = ImmutableSortedSet.of(standardOpenOption0, standardOpenOption0, standardOpenOption0, standardOpenOption0);
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForChannel(immutableSortedSet0);
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<StandardOpenOption> treeSet0 = new TreeSet<StandardOpenOption>();
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForChannel(treeSet0);
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashSet<LinkOption> hashSet0 = new HashSet<LinkOption>();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      hashSet0.add(linkOption0);
      ImmutableSet<OpenOption> immutableSet0 = Options.getOptionsForChannel(hashSet0);
      assertEquals(2, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      ImmutableSet<LinkOption> immutableSet0 = Options.getLinkOptions(linkOptionArray0);
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      ImmutableSet<LinkOption> immutableSet0 = Options.getLinkOptions(linkOptionArray0);
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      // Undeclared exception!
      try { 
        Options.getMoveOptions(copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 1
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }
}
