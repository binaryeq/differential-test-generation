/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:30:25 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.jimfs.AttributeProvider;
import com.google.common.jimfs.AttributeService;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.Feature;
import com.google.common.jimfs.FileFactory;
import com.google.common.jimfs.FileSystemState;
import com.google.common.jimfs.FileSystemView;
import com.google.common.jimfs.FileTree;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.JimfsFileStore;
import com.google.common.jimfs.JimfsFileSystem;
import com.google.common.jimfs.JimfsFileSystemProvider;
import com.google.common.jimfs.JimfsPath;
import com.google.common.jimfs.Name;
import com.google.common.jimfs.PathService;
import com.google.common.jimfs.PollingWatchService;
import com.google.common.jimfs.WatchServiceConfiguration;
import java.net.URI;
import java.nio.file.ClosedFileSystemException;
import java.nio.file.FileStore;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.attribute.UserPrincipalLookupService;
import java.util.HashMap;
import java.util.ServiceLoader;
import java.util.concurrent.ExecutorService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JimfsFileSystem_ESTest extends JimfsFileSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      JimfsPath jimfsPath1 = jimfsFileSystem0.getWorkingDirectory();
      assertTrue(jimfsPath1.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0, feature0, feature0);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "e&#4";
      stringArray0[3] = "bFy5bLFp:]1@";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "e&#4";
      JimfsPath jimfsPath1 = jimfsFileSystem0.getPath("bFy5bLFp:]1@", stringArray0);
      assertFalse(jimfsPath1.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0, feature0, feature0);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      // Undeclared exception!
      try { 
        jimfsFileSystem0.toPath(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uriPath (java.lang.String@0000000030) must start with /
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      // Undeclared exception!
      try { 
        jimfsFileSystem0.getPathMatcher("r`\"S!jtyqV'VA:$P");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Invalid syntax: r`\"S!jtyqV'VA:$P
         //
         verifyException("com.google.common.jimfs.PathMatchers", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("e&#4");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e&#4";
      // Undeclared exception!
      try { 
        jimfsFileSystem0.getPath("bFy5bLFp:]1@", stringArray0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <:> at index 9: bFy5bLFp:]1@\\e&#4
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0, feature0, feature0);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      String[] stringArray0 = new String[7];
      jimfsFileSystem0.close();
      // Undeclared exception!
      try { 
        jimfsFileSystem0.getPath("bFy5bLFp:]1@", stringArray0);
        fail("Expecting exception: ClosedFileSystemException");
      
      } catch(ClosedFileSystemException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.FileSystemState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0, feature0, feature0);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        jimfsFileSystem0.getPath("e&#4", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      fileSystemState0.close();
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      // Undeclared exception!
      try { 
        jimfsFileSystem0.getDefaultThreadPool();
        fail("Expecting exception: ClosedFileSystemException");
      
      } catch(ClosedFileSystemException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.FileSystemState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      WatchServiceConfiguration watchServiceConfiguration0 = WatchServiceConfiguration.DEFAULT;
      JimfsFileSystem jimfsFileSystem0 = null;
      try {
        jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, (URI) null, (JimfsFileStore) null, (PathService) null, (FileSystemView) null, watchServiceConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = pathService0.name("");
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      hashMap0.put(name0, directory0);
      FileTree fileTree1 = new FileTree(hashMap0);
      JimfsFileStore jimfsFileStore1 = new JimfsFileStore(fileTree1, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore1, pathService0, fileSystemView0, watchServiceConfiguration0);
      ImmutableSortedSet<Path> immutableSortedSet0 = jimfsFileSystem0.getRootDirectories();
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      ExecutorService executorService0 = jimfsFileSystem0.getDefaultThreadPool();
      ExecutorService executorService1 = jimfsFileSystem0.getDefaultThreadPool();
      assertSame(executorService1, executorService0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      PollingWatchService pollingWatchService0 = (PollingWatchService)jimfsFileSystem0.newWatchService();
      assertTrue(pollingWatchService0.isOpen());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("VJYoQFOMf>lTD:yx");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      ImmutableSet<FileStore> immutableSet1 = jimfsFileSystem0.getFileStores();
      assertEquals(1, immutableSet1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      boolean boolean0 = jimfsFileSystem0.isReadOnly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      ImmutableSet<String> immutableSet1 = jimfsFileSystem0.supportedFileAttributeViews();
      assertEquals(0, immutableSet1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      JimfsFileStore jimfsFileStore1 = jimfsFileSystem0.getFileStore();
      assertEquals("jimfs", jimfsFileStore1.name());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      JimfsPath jimfsPath1 = jimfsFileSystem0.toPath(uRI0);
      assertNotSame(jimfsPath0, jimfsPath1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      String string0 = jimfsFileSystem0.getSeparator();
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      URI uRI1 = jimfsFileSystem0.getUri();
      assertNull(uRI1.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      // Undeclared exception!
      try { 
        jimfsFileSystem0.getPath("e&#4", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      PathService pathService1 = jimfsFileSystem0.getPathService();
      assertSame(pathService1, pathService0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = ImmutableSet.of(feature0, feature0, feature0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      // Undeclared exception!
      try { 
        jimfsFileSystem0.toUri(jimfsPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      FileSystemView fileSystemView1 = jimfsFileSystem0.getDefaultView();
      assertSame(fileSystemView1, fileSystemView0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = configuration0.watchServiceConfig;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      // Undeclared exception!
      try { 
        jimfsFileSystem0.getPathMatcher("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be of the form 'syntax:pattern': java.lang.String@0000000032
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = WatchServiceConfiguration.DEFAULT;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      boolean boolean0 = jimfsFileSystem0.isOpen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = WatchServiceConfiguration.DEFAULT;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      JimfsPath jimfsPath1 = jimfsFileSystem0.getWorkingDirectory();
      assertSame(jimfsPath1, jimfsPath0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = WatchServiceConfiguration.DEFAULT;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      JimfsFileSystemProvider jimfsFileSystemProvider1 = jimfsFileSystem0.provider();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("e&#4");
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Class<AttributeProvider> class0 = AttributeProvider.class;
      ServiceLoader<AttributeProvider> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashMap<String, JimfsFileSystemProvider> hashMap1 = new HashMap<String, JimfsFileSystemProvider>();
      AttributeService attributeService0 = new AttributeService(serviceLoader0, hashMap1);
      MockThread mockThread0 = new MockThread("");
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      WatchServiceConfiguration watchServiceConfiguration0 = WatchServiceConfiguration.DEFAULT;
      ImmutableSet<Feature> immutableSet0 = configuration0.supportedFeatures;
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSet0, fileSystemState0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsFileSystem jimfsFileSystem0 = new JimfsFileSystem(jimfsFileSystemProvider0, uRI0, jimfsFileStore0, pathService0, fileSystemView0, watchServiceConfiguration0);
      UserPrincipalLookupService userPrincipalLookupService0 = jimfsFileSystem0.getUserPrincipalLookupService();
      assertNotNull(userPrincipalLookupService0);
  }
}
