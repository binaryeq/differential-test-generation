/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:34:51 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.JimfsFileSystemProvider;
import com.google.common.jimfs.JimfsFileSystems;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JimfsFileSystems_ESTest extends JimfsFileSystems_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        JimfsFileSystems.newFileSystem(jimfsFileSystemProvider0, (URI) null, (Configuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.PathService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      URI uRI0 = MockURI.aHttpURI;
      Configuration configuration0 = Configuration.unix();
      // Undeclared exception!
      try { 
        JimfsFileSystems.newFileSystem(jimfsFileSystemProvider0, uRI0, configuration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no provider found for attribute view 'basic'
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }
}
