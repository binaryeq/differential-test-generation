/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:37:13 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.jimfs.AttributeProvider;
import com.google.common.jimfs.AttributeService;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.Feature;
import com.google.common.jimfs.FileFactory;
import com.google.common.jimfs.FileSystemState;
import com.google.common.jimfs.FileSystemView;
import com.google.common.jimfs.FileTree;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.JimfsFileStore;
import com.google.common.jimfs.JimfsPath;
import com.google.common.jimfs.JimfsSecureDirectoryStream;
import com.google.common.jimfs.Name;
import com.google.common.jimfs.PathService;
import java.lang.reflect.Array;
import java.nio.file.ClosedDirectoryStreamException;
import java.nio.file.ClosedFileSystemException;
import java.nio.file.DirectoryStream;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.ProviderMismatchException;
import java.nio.file.SecureDirectoryStream;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileAttributeView;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JimfsSecureDirectoryStream_ESTest extends JimfsSecureDirectoryStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = fileFactory0.createDirectory();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("l");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream1 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      try { 
        jimfsSecureDirectoryStream0.move((Path) jimfsPath0, (SecureDirectoryStream<Path>) jimfsSecureDirectoryStream1, (Path) jimfsPath0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // l
         //
         verifyException("com.google.common.jimfs.FileTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.SYMBOLIC_LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      JimfsPath jimfsPath1 = pathService0.createRoot(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath1);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      try { 
        jimfsSecureDirectoryStream0.move((Path) jimfsPath0, (SecureDirectoryStream<Path>) jimfsSecureDirectoryStream0, (Path) jimfsPath1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("com.google.common.jimfs.FileTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      Directory directory0 = Directory.create(36);
      PathService pathService0 = new PathService(configuration0);
      ImmutableSortedSet<Name> immutableSortedSet1 = jimfsFileStore0.getRootDirectoryNames();
      TreeSet<Name> treeSet0 = new TreeSet<Name>((SortedSet<Name>) immutableSortedSet1);
      JimfsPath jimfsPath0 = new JimfsPath(pathService0, (Name) null, treeSet0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = null;
      try {
        jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, (DirectoryStream.Filter<? super Path>) null, fileSystemState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("ql");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      jimfsSecureDirectoryStream0.checkOpen();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = pathService0.name("2l");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.newDirectoryStream((Path) null, linkOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      LinkedHashSet<AttributeProvider> linkedHashSet0 = new LinkedHashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableMap0);
      MockThread mockThread0 = new MockThread();
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("ql");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      jimfsSecureDirectoryStream0.close();
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.newDirectoryStream((Path) jimfsPath0, linkOptionArray0);
        fail("Expecting exception: ClosedDirectoryStreamException");
      
      } catch(ClosedDirectoryStreamException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      LinkedBlockingQueue<Name> linkedBlockingQueue0 = new LinkedBlockingQueue<Name>();
      JimfsPath jimfsPath0 = pathService0.createPath(name0, linkedBlockingQueue0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      ImmutableSet<LinkOption> immutableSet0 = ImmutableSet.of(linkOption0);
      FileAttribute<JimfsSecureDirectoryStream>[] fileAttributeArray0 = (FileAttribute<JimfsSecureDirectoryStream>[]) Array.newInstance(FileAttribute.class, 9);
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.newByteChannel((Path) null, (Set<? extends OpenOption>) immutableSet0, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      Name name0 = Name.create("h+", "h+");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 4);
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.newByteChannel((Path) jimfsPath0, (Set<? extends OpenOption>) null, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("2l");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      Class<FileAttributeView> class0 = FileAttributeView.class;
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.getFileAttributeView((Path) jimfsPath0, class0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = fileFactory0.createDirectory();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      try { 
        jimfsSecureDirectoryStream0.deleteDirectory((Path) jimfsPath0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("com.google.common.jimfs.FileTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      MockThread mockThread0 = new MockThread();
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Directory directory0 = fileFactory0.createDirectory();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      fileSystemState0.close();
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = null;
      try {
        jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
        fail("Expecting exception: ClosedFileSystemException");
      
      } catch(ClosedFileSystemException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.FileSystemState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("com.google.common.collect.Cut$BelowValue");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.SYMBOLIC_LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      Directory directory0 = Directory.createRoot((-109), name0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = null;
      try {
        jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, (FileSystemState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("2l");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.move((Path) jimfsPath0, (SecureDirectoryStream<Path>) null, (Path) jimfsPath0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // targetDir isn't a secure directory stream associated with this file system
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.SYMBOLIC_LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      jimfsSecureDirectoryStream0.iterator();
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.iterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // iterator() has already been called once
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      LinkedHashSet<AttributeProvider> linkedHashSet0 = new LinkedHashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("ql");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.SYMBOLIC_LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.deleteDirectory((Path) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>(0, 1.0F);
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Feature feature0 = Feature.SYMBOLIC_LINKS;
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      ImmutableSortedSet<StandardOpenOption> immutableSortedSet1 = ImmutableSortedSet.of(standardOpenOption0, standardOpenOption0, standardOpenOption0);
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 9);
      try { 
        jimfsSecureDirectoryStream0.newByteChannel((Path) jimfsPath0, (Set<? extends OpenOption>) immutableSortedSet1, (FileAttribute<?>[]) fileAttributeArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("com.google.common.jimfs.FileTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.create((-3592));
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      PathService pathService0 = new PathService(configuration0);
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      try { 
        jimfsSecureDirectoryStream0.deleteFile((Path) jimfsPath0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
         //
         // 
         //
         verifyException("com.google.common.jimfs.FileTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>(0, 1.0F);
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Feature feature0 = Feature.SYMBOLIC_LINKS;
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      LinkOption[] linkOptionArray0 = new LinkOption[5];
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.newDirectoryStream((Path) jimfsPath0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      Class<FileAttributeView> class0 = FileAttributeView.class;
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.getFileAttributeView(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("");
      Feature feature0 = Feature.SECURE_DIRECTORY_STREAM;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      LinkedBlockingQueue<Name> linkedBlockingQueue0 = new LinkedBlockingQueue<Name>();
      JimfsPath jimfsPath0 = pathService0.createPath(name0, linkedBlockingQueue0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      Class<FileAttributeView> class0 = FileAttributeView.class;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      FileAttributeView fileAttributeView0 = jimfsSecureDirectoryStream0.getFileAttributeView((Path) jimfsPath0, class0, linkOptionArray0);
      assertNull(fileAttributeView0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      LinkedHashSet<AttributeProvider> linkedHashSet0 = new LinkedHashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableMap0);
      MockThread mockThread0 = new MockThread();
      FileSystemState fileSystemState0 = new FileSystemState(mockThread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("ql");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      jimfsSecureDirectoryStream0.close();
      // Undeclared exception!
      try { 
        jimfsSecureDirectoryStream0.iterator();
        fail("Expecting exception: ClosedDirectoryStreamException");
      
      } catch(ClosedDirectoryStreamException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsSecureDirectoryStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Name, Directory> hashMap0 = new HashMap<Name, Directory>();
      FileTree fileTree0 = new FileTree(hashMap0);
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      HashSet<AttributeProvider> hashSet0 = new HashSet<AttributeProvider>();
      ImmutableMap<String, Object> immutableMap0 = configuration0.defaultAttributeValues;
      AttributeService attributeService0 = new AttributeService(hashSet0, immutableMap0);
      Thread thread0 = MockThread.currentThread();
      FileSystemState fileSystemState0 = new FileSystemState(thread0);
      Directory directory0 = Directory.create(0);
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.simple("ql");
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = JimfsSecureDirectoryStream.ALWAYS_TRUE_FILTER;
      Feature feature0 = Feature.LINKS;
      ImmutableSortedSet<Feature> immutableSortedSet0 = ImmutableSortedSet.of(feature0, feature0);
      JimfsFileStore jimfsFileStore0 = new JimfsFileStore(fileTree0, fileFactory0, heapDisk0, attributeService0, immutableSortedSet0, fileSystemState0);
      FileSystemView fileSystemView0 = new FileSystemView(jimfsFileStore0, directory0, jimfsPath0);
      JimfsSecureDirectoryStream jimfsSecureDirectoryStream0 = new JimfsSecureDirectoryStream(fileSystemView0, directoryStream_Filter0, fileSystemState0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jimfsSecureDirectoryStream0.forEach(consumer0);
  }
}
