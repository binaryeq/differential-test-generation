/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:24:12 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedMap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.jimfs.AttributeCopyOption;
import com.google.common.jimfs.AttributeProvider;
import com.google.common.jimfs.AttributeService;
import com.google.common.jimfs.BasicAttributeProvider;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.File;
import com.google.common.jimfs.FileFactory;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.RegularFile;
import com.google.common.jimfs.UnixAttributeProvider;
import java.lang.reflect.Array;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileAttributeView;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttributeService_ESTest extends AttributeService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Directory directory0 = Directory.create(885);
      // Undeclared exception!
      try { 
        attributeService0.setAttribute(directory0, "': ", "': ", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // cannot set attribute '': '
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Directory directory0 = Directory.create(885);
      Directory directory1 = Directory.create(885);
      AttributeCopyOption attributeCopyOption0 = AttributeCopyOption.BASIC;
      attributeService0.copyAttributes(directory0, directory1, attributeCopyOption0);
      assertEquals(885, directory0.id());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(50, heapDisk0);
      FileAttribute<String>[] fileAttributeArray0 = (FileAttribute<String>[]) Array.newInstance(FileAttribute.class, 19);
      FileAttribute<String> fileAttribute0 = (FileAttribute<String>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      doReturn("!Q6PppI(DOiBBKuK").when(fileAttribute0).name();
      doReturn((String) null).when(fileAttribute0).value();
      fileAttributeArray0[0] = fileAttribute0;
      // Undeclared exception!
      try { 
        attributeService0.setInitialAttributes(regularFile0, fileAttributeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // cannot set attribute 'basic:!Q6PppI(DOiBBKuK'
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Configuration configuration0 = Configuration.forCurrentPlatform();
      configuration0.toBuilder();
      AttributeService attributeService0 = null;
      try {
        attributeService0 = new AttributeService(configuration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no provider found for attribute view 'basic'
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Directory directory0 = Directory.create(50);
      // Undeclared exception!
      try { 
        attributeService0.readAttributes((File) directory0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Directory directory0 = Directory.create(885);
      // Undeclared exception!
      try { 
        attributeService0.getAttribute((File) directory0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      linkedHashSet0.add((UnixAttributeProvider) null);
      AttributeService attributeService0 = null;
      try {
        attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttributeService attributeService0 = null;
      try {
        attributeService0 = new AttributeService((Configuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Configuration configuration0 = Configuration.osX();
      configuration0.toBuilder();
      AttributeService attributeService0 = null;
      try {
        attributeService0 = new AttributeService(configuration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no provider found for attribute view 'basic'
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(50, heapDisk0);
      // Undeclared exception!
      try { 
        attributeService0.getAttribute((File) regularFile0, "ARpLbN:)\"u,iF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must specify a single attribute: ARpLbN:)\"u,iF
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Configuration configuration0 = Configuration.osX();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedSet<AttributeProvider> immutableSortedSet0 = ImmutableSortedSet.of();
      ImmutableList<AttributeProvider> immutableList0 = immutableSortedSet0.asList();
      AttributeService attributeService0 = new AttributeService(immutableList0, immutableSortedMap0);
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(1658, heapDisk0);
      // Undeclared exception!
      try { 
        attributeService0.getAttribute((File) regularFile0, ";F9rW\"H]aDLWu:>_>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid attribute for view ';F9rW\"H]aDLWu': >_>
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Directory directory0 = Directory.create(50);
      // Undeclared exception!
      try { 
        attributeService0.setAttribute(directory0, ":", "fLV?vURVe>,>R\"!{}", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal attribute format: :
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(50, heapDisk0);
      // Undeclared exception!
      try { 
        attributeService0.getAttribute((File) regularFile0, "<Gxou5|:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal attribute format: <Gxou5|:
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Configuration configuration0 = Configuration.unix();
      configuration0.toBuilder();
      AttributeService attributeService0 = null;
      try {
        attributeService0 = new AttributeService(configuration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no provider found for attribute view 'basic'
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(50, heapDisk0);
      // Undeclared exception!
      try { 
        attributeService0.readAttributes((File) regularFile0, "com.google.common.jimfs.AttributeService$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid attribute for view 'basic': com.google.common.jimfs.AttributeService$1
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSet<BasicAttributeProvider> immutableSet0 = ImmutableSet.of();
      AttributeService attributeService0 = new AttributeService(immutableSet0, immutableSortedMap0);
      AttributeCopyOption attributeCopyOption0 = AttributeCopyOption.BASIC;
      // Undeclared exception!
      try { 
        attributeService0.copyAttributes((File) null, (File) null, attributeCopyOption0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      AttributeCopyOption attributeCopyOption0 = AttributeCopyOption.NONE;
      attributeService0.copyAttributes(directory0, directory0, attributeCopyOption0);
      assertFalse(directory0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(50, heapDisk0);
      FileAttribute<String>[] fileAttributeArray0 = (FileAttribute<String>[]) Array.newInstance(FileAttribute.class, 1);
      // Undeclared exception!
      try { 
        attributeService0.setInitialAttributes(regularFile0, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Directory directory0 = Directory.create(50);
      FileAttribute<FileAttributeView>[] fileAttributeArray0 = (FileAttribute<FileAttributeView>[]) Array.newInstance(FileAttribute.class, 0);
      attributeService0.setInitialAttributes(directory0, fileAttributeArray0);
      assertEquals(1, directory0.links());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      UnixAttributeProvider unixAttributeProvider0 = new UnixAttributeProvider();
      linkedHashSet0.add(unixAttributeProvider0);
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      Class<FileAttributeView> class0 = FileAttributeView.class;
      boolean boolean0 = attributeService0.supportsFileAttributeView(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Configuration configuration0 = Configuration.forCurrentPlatform();
      AttributeService attributeService0 = null;
      try {
        attributeService0 = new AttributeService(configuration0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // no provider found for attribute view 'basic'
         //
         verifyException("com.google.common.jimfs.AttributeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<UnixAttributeProvider> linkedHashSet0 = new LinkedHashSet<UnixAttributeProvider>();
      ImmutableSortedMap<String, BasicAttributeProvider.Attributes> immutableSortedMap0 = ImmutableSortedMap.of();
      AttributeService attributeService0 = new AttributeService(linkedHashSet0, immutableSortedMap0);
      ImmutableSet<String> immutableSet0 = attributeService0.supportedFileAttributeViews();
      assertEquals(0, immutableSet0.size());
  }
}
