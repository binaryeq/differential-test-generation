/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:28:03 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableSet;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.DirectoryEntry;
import com.google.common.jimfs.File;
import com.google.common.jimfs.FileFactory;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.JimfsPath;
import com.google.common.jimfs.Name;
import com.google.common.jimfs.PathService;
import com.google.common.jimfs.RegularFile;
import com.google.common.jimfs.SymbolicLink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class File_ESTest extends File_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Directory directory0 = Directory.create((-1849));
      directory0.setCreationTime(0L);
      directory0.copyAttributes(directory0);
      assertEquals(0L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Directory directory0 = Directory.create((-1849));
      directory0.setLastModifiedTime(100L);
      directory0.copyAttributes(directory0);
      assertEquals(100L, directory0.getLastModifiedTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Name name0 = Name.SELF;
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      DirectoryEntry directoryEntry0 = directory0.get(name0);
      directory0.linked(directoryEntry0);
      assertEquals(3, directory0.links());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = heapDisk0.blockCache;
      Directory directory0 = Directory.create((-1584));
      directory0.copyBasicAttributes(regularFile0);
      assertEquals(1, directory0.links());
      assertEquals((-1584), directory0.id());
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Directory directory0 = Directory.create(10);
      directory0.setLastAccessTime(229);
      assertEquals(229L, directory0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Directory directory0 = Directory.create(10);
      directory0.incrementLinkCount();
      assertEquals(2, directory0.links());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.decrementLinkCount();
      assertEquals(0, directory0.links());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HeapDisk heapDisk0 = new HeapDisk(3270, 3270, 58);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      Name name0 = Name.EMPTY;
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      directory0.link(name0, regularFile0);
      assertEquals(1, regularFile0.links());
      assertEquals(0, directory0.id());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      byte[][] byteArray0 = new byte[5][3];
      RegularFile regularFile0 = new RegularFile(3591, heapDisk0, byteArray0, (byte)1, 66L);
      regularFile0.size();
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
      assertEquals(3591, regularFile0.id());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Configuration configuration0 = Configuration.unix();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      int int0 = regularFile0.links();
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
      assertEquals(0, int0);
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
      assertEquals(0, regularFile0.id());
      assertEquals(1392409281320L, regularFile0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      SymbolicLink symbolicLink0 = SymbolicLink.create(1, jimfsPath0);
      symbolicLink0.isSymbolicLink();
      assertEquals(1, symbolicLink0.id());
      assertEquals(1392409281320L, symbolicLink0.getCreationTime());
      assertEquals(1392409281320L, symbolicLink0.getLastModifiedTime());
      assertEquals(1392409281320L, symbolicLink0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      regularFile0.isRegularFile();
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals(0, regularFile0.id());
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Configuration configuration0 = Configuration.unix();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      regularFile0.isDirectory();
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
      assertEquals(0, regularFile0.id());
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Directory directory0 = Directory.create(0);
      int int0 = directory0.id();
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Directory directory0 = Directory.create(10);
      int int0 = directory0.id();
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1655L));
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      long long0 = regularFile0.getLastModifiedTime();
      assertEquals((-1655L), long0);
      assertEquals((-1655L), regularFile0.getCreationTime());
      assertEquals(0, regularFile0.id());
      assertEquals((-1655L), regularFile0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-1849));
      Configuration configuration0 = Configuration.unix();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      long long0 = regularFile0.getLastAccessTime();
      assertEquals((-1849L), long0);
      assertEquals((-1849L), regularFile0.getCreationTime());
      assertEquals((-1849L), regularFile0.getLastModifiedTime());
      assertEquals(0, regularFile0.id());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.setAttribute("", "", "");
      directory0.getAttribute("", "");
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.id());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      byte[][] byteArray0 = new byte[6][1];
      RegularFile regularFile0 = new RegularFile((-716), heapDisk0, byteArray0, 0, (byte)4);
      regularFile0.contentLock();
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals((-716), regularFile0.id());
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      // Undeclared exception!
      try { 
        directory0.linked((DirectoryEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Directory directory0 = Directory.create((-1849));
      // Undeclared exception!
      try { 
        directory0.isRootDirectory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Directory directory0 = Directory.create((-2324));
      // Undeclared exception!
      try { 
        directory0.copyBasicAttributes((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      // Undeclared exception!
      try { 
        directory0.copyAttributes((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Directory directory0 = Directory.create((-1));
      directory0.isDirectory();
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.links());
      assertEquals((-1), directory0.id());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.createRoot((-1849), name0);
      int int0 = directory0.id();
      assertEquals((-1849), int0);
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(2, directory0.links());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.setAttribute("", "", "");
      Directory directory1 = Directory.create(1);
      directory0.copyAttributes(directory1);
      directory1.copyAttributes(directory0);
      assertEquals(1392409281320L, directory1.getLastAccessTime());
      assertEquals(1, directory1.links());
      assertEquals(1, directory1.id());
      assertEquals(1392409281320L, directory1.getCreationTime());
      assertEquals(1392409281320L, directory1.getLastModifiedTime());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.setAttribute("", "", "");
      directory0.copyAttributes(directory0);
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.id());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.setAttribute("", "", "");
      directory0.deleteAttribute("m", "");
      assertEquals(1, directory0.id());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Directory directory0 = Directory.create((-1870));
      directory0.deleteAttribute("", "");
      assertEquals((-1870), directory0.id());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.setAttribute("", "", "");
      // Undeclared exception!
      try { 
        directory0.setAttribute("", "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Name name0 = Name.SELF;
      Directory directory0 = Directory.createRoot(0, name0);
      directory0.getAttribute(";Q1Zs_nh!j@W", "com.google.common.jimfs.File");
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(0, directory0.id());
      assertEquals(2, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.setAttribute("H", "H", "H");
      Object object0 = directory0.getAttribute("H", "");
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertNull(object0);
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.id());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Directory directory0 = Directory.create((-1870));
      directory0.getAttributeKeys();
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals((-1870), directory0.id());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Directory directory0 = Directory.create((-1888));
      BoundType boundType0 = BoundType.OPEN;
      directory0.setAttribute(")1f(x6@]W>nSRCe7zR@", ".", boundType0);
      ImmutableSet<String> immutableSet0 = directory0.getAttributeKeys();
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1, immutableSet0.size());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1, directory0.links());
      assertEquals((-1888), directory0.id());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.getAttributeNames((String) null);
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.id());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1, directory0.links());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Directory directory0 = Directory.create((-1893));
      Object object0 = new Object();
      directory0.setAttribute("", "", object0);
      // Undeclared exception!
      try { 
        directory0.getAttributeNames((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Name name0 = Name.SELF;
      Directory directory0 = Directory.createRoot(109, name0);
      Directory directory1 = directory0.copyWithoutContent(109);
      DirectoryEntry directoryEntry0 = directory0.remove(name0);
      directory1.linked(directoryEntry0);
      boolean boolean0 = directory1.isRootDirectory();
      assertEquals(2, directory0.links());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Configuration configuration0 = Configuration.forCurrentPlatform();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      boolean boolean0 = regularFile0.isRootDirectory();
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
      assertFalse(boolean0);
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals(0, regularFile0.id());
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.isSymbolicLink();
      assertEquals(1, directory0.links());
      assertEquals(1, directory0.id());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      long long0 = regularFile0.getLastModifiedTime();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
      assertEquals(0, regularFile0.id());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Directory directory0 = Directory.create((-1373));
      directory0.closed();
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals((-1373), directory0.id());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Directory directory0 = Directory.create(65);
      directory0.copyContentTo(directory0);
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(65, directory0.id());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      long long0 = directory0.size();
      assertEquals(1, directory0.id());
      assertEquals(0L, long0);
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HeapDisk heapDisk0 = new HeapDisk(2167, 405, 1);
      RegularFile regularFile0 = heapDisk0.blockCache;
      // Undeclared exception!
      try { 
        regularFile0.linked((DirectoryEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.contentLock();
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1, directory0.links());
      assertEquals(1, directory0.id());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Directory directory0 = Directory.create((-2046));
      long long0 = directory0.getLastAccessTime();
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1, directory0.links());
      assertEquals((-2046), directory0.id());
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      RegularFile regularFile0 = fileFactory0.createRegularFile();
      regularFile0.unlinked();
      assertEquals(1392409281320L, regularFile0.getLastAccessTime());
      assertEquals(1392409281320L, regularFile0.getLastModifiedTime());
      assertEquals(1392409281320L, regularFile0.getCreationTime());
      assertEquals(0, regularFile0.id());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Directory directory0 = Directory.create((-1870));
      directory0.deleted();
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals((-1870), directory0.id());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Directory directory0 = Directory.create((-2781));
      String string0 = directory0.toString();
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals("Directory{id=-2781}", string0);
      assertEquals(1392409281320L, directory0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      int int0 = directory0.links();
      assertEquals(1, int0);
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1, directory0.id());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Directory directory0 = Directory.create((-1856));
      directory0.updateModifiedTime();
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals((-1856), directory0.id());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Name name0 = Name.SELF;
      Directory directory0 = Directory.createRoot(109, name0);
      boolean boolean0 = directory0.isRootDirectory();
      assertTrue(boolean0);
      assertEquals(2, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(109, directory0.id());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.updateAccessTime();
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1, directory0.id());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Name name0 = Name.SELF;
      Directory directory0 = Directory.createRoot(8192, name0);
      directory0.isRegularFile();
      assertEquals(8192, directory0.id());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(2, directory0.links());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      long long0 = directory0.getCreationTime();
      assertEquals(1, directory0.links());
      assertEquals(1, directory0.id());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      directory0.opened();
      assertEquals(1, directory0.id());
      assertEquals(1, directory0.links());
      assertEquals(1392409281320L, directory0.getCreationTime());
      assertEquals(1392409281320L, directory0.getLastAccessTime());
      assertEquals(1392409281320L, directory0.getLastModifiedTime());
  }
}
