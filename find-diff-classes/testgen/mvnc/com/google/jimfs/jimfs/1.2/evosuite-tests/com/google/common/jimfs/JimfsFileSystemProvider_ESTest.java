/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:33:44 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Range;
import com.google.common.jimfs.BasicAttributeProvider;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.JimfsFileSystemProvider;
import com.google.common.jimfs.JimfsPath;
import com.google.common.jimfs.Name;
import com.google.common.jimfs.PathNormalization;
import com.google.common.jimfs.PathService;
import com.google.common.jimfs.PathType;
import com.google.common.jimfs.UnixPathType;
import com.google.common.jimfs.WindowsPathType;
import java.lang.reflect.Array;
import java.net.URI;
import java.nio.file.AccessMode;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.ProviderMismatchException;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileAttributeView;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JimfsFileSystemProvider_ESTest extends JimfsFileSystemProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE_NEW;
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption0);
      
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = (FileAttribute<BasicAttributeProvider.Attributes>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<BasicAttributeProvider.Attributes> fileAttribute0 = (FileAttribute<BasicAttributeProvider.Attributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createDirectory((Path) null, fileAttributeArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray0);
      assertFalse(boolean0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE_NEW;
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newOutputStream(jimfsPath0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE_NEW;
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newOutputStream((Path) null, linkOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.getFileSystem((URI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This method should not be called directly; use FileSystems.getFileSystem(URI) instead.
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption1;
      java.io.File file0 = MockFile.createTempFile("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.getName());
      assertEquals("/tmp/com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "");
      assertTrue(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.getName());
      assertEquals("/tmp/com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      LinkedHashSet<StandardOpenOption> linkedHashSet0 = new LinkedHashSet<StandardOpenOption>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      FileAttribute<StandardOpenOption>[] fileAttributeArray0 = (FileAttribute<StandardOpenOption>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newByteChannel((Path) null, linkedHashSet0, fileAttributeArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      Name name0 = Name.EMPTY;
      assertEquals("", name0.toString());
      assertNotNull(name0);
      
      Name name1 = Name.EMPTY;
      assertSame(name1, name0);
      assertEquals("", name1.toString());
      assertNotNull(name1);
      
      HashSet<PathNormalization> hashSet0 = new HashSet<PathNormalization>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.delete(jimfsPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.forCurrentPlatform();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7~T";
      stringArray0[1] = "7~T";
      stringArray0[2] = "7~T";
      stringArray0[3] = "7~T";
      stringArray0[4] = "com.google.common.jimfs.JimfsFileSystemProvider";
      stringArray0[5] = "7~T";
      stringArray0[6] = "7~T";
      stringArray0[7] = "7~T";
      JimfsPath jimfsPath0 = pathService0.parsePath("7~T", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.delete(jimfsPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.copy(jimfsPath0, jimfsPath0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      Class<BasicAttributeProvider.Attributes> class0 = BasicAttributeProvider.Attributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption1;
      java.io.File file0 = MockFile.createTempFile("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable");
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp/com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "");
      assertTrue(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path1 = mockFile0.toPath();
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp/com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp/com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable0com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(path1);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.copy((Path) null, path1, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 2
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      TreeSet<LinkOption> treeSet0 = new TreeSet<LinkOption>();
      assertNotNull(treeSet0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.getFileStore((Path) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.isHidden((Path) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = null;
      TreeSet<LinkOption> treeSet0 = new TreeSet<LinkOption>();
      assertNotNull(treeSet0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      PathType pathType0 = PathType.windows();
      assertEquals("/", pathType0.getOtherSeparators());
      assertTrue(pathType0.allowsMultipleRoots());
      assertNotNull(pathType0);
      
      PathNormalization pathNormalization0 = PathNormalization.NFC;
      Range<PathNormalization> range0 = Range.closedOpen(pathNormalization0, pathNormalization0);
      assertNotNull(range0);
      
      DiscreteDomain<PathNormalization> discreteDomain0 = (DiscreteDomain<PathNormalization>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      ContiguousSet<PathNormalization> contiguousSet0 = ContiguousSet.create(range0, discreteDomain0);
      assertEquals(0, contiguousSet0.size());
      assertNotNull(contiguousSet0);
      assertFalse(contiguousSet0.contains(pathNormalization0));
      
      PathNormalization pathNormalization1 = PathNormalization.CASE_FOLD_UNICODE;
      ContiguousSet<PathNormalization> contiguousSet1 = contiguousSet0.subSet(pathNormalization0, true, pathNormalization1, true);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertSame(contiguousSet0, contiguousSet1);
      assertSame(contiguousSet1, contiguousSet0);
      assertEquals(0, contiguousSet0.size());
      assertEquals(0, contiguousSet1.size());
      assertNotNull(contiguousSet1);
      assertFalse(contiguousSet0.contains(pathNormalization0));
      assertFalse(contiguousSet1.contains(pathNormalization0));
      
      PathNormalization pathNormalization2 = PathNormalization.CASE_FOLD_UNICODE;
      ContiguousSet<PathNormalization> contiguousSet2 = contiguousSet1.headSet(pathNormalization2);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization0.equals((Object)pathNormalization2));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertFalse(pathNormalization2.equals((Object)pathNormalization0));
      assertSame(contiguousSet0, contiguousSet2);
      assertSame(contiguousSet0, contiguousSet1);
      assertSame(pathNormalization1, pathNormalization2);
      assertSame(contiguousSet1, contiguousSet2);
      assertSame(contiguousSet1, contiguousSet0);
      assertSame(pathNormalization2, pathNormalization1);
      assertSame(contiguousSet2, contiguousSet0);
      assertSame(contiguousSet2, contiguousSet1);
      assertEquals(0, contiguousSet0.size());
      assertEquals(0, contiguousSet1.size());
      assertEquals(0, contiguousSet2.size());
      assertNotNull(contiguousSet2);
      assertFalse(contiguousSet0.contains(pathNormalization0));
      assertFalse(contiguousSet1.contains(pathNormalization0));
      assertFalse(contiguousSet2.contains(pathNormalization0));
      
      PathService pathService0 = new PathService(pathType0, contiguousSet2, contiguousSet1, false);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization0.equals((Object)pathNormalization2));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertFalse(pathNormalization2.equals((Object)pathNormalization0));
      assertEquals("/", pathType0.getOtherSeparators());
      assertTrue(pathType0.allowsMultipleRoots());
      assertEquals(0, contiguousSet0.size());
      assertEquals(0, contiguousSet1.size());
      assertEquals(0, contiguousSet2.size());
      assertNotNull(pathService0);
      assertFalse(contiguousSet0.contains(pathNormalization0));
      assertFalse(contiguousSet1.contains(pathNormalization0));
      assertFalse(contiguousSet2.contains(pathNormalization0));
      
      String[] stringArray0 = new String[0];
      JimfsPath jimfsPath0 = pathService0.parsePath("", stringArray0);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization0.equals((Object)pathNormalization2));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertFalse(pathNormalization2.equals((Object)pathNormalization0));
      assertEquals(0, stringArray0.length);
      assertSame(contiguousSet0, contiguousSet2);
      assertSame(contiguousSet0, contiguousSet1);
      assertSame(pathNormalization1, pathNormalization2);
      assertSame(contiguousSet1, contiguousSet2);
      assertSame(contiguousSet1, contiguousSet0);
      assertSame(pathNormalization2, pathNormalization1);
      assertSame(contiguousSet2, contiguousSet0);
      assertSame(contiguousSet2, contiguousSet1);
      assertFalse(jimfsPath0.isAbsolute());
      assertEquals("/", pathType0.getOtherSeparators());
      assertTrue(pathType0.allowsMultipleRoots());
      assertEquals(0, contiguousSet0.size());
      assertEquals(0, contiguousSet1.size());
      assertEquals(0, contiguousSet2.size());
      assertNotNull(jimfsPath0);
      assertFalse(contiguousSet0.contains(pathNormalization0));
      assertFalse(contiguousSet1.contains(pathNormalization0));
      assertFalse(contiguousSet2.contains(pathNormalization0));
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[4];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      copyOptionArray0[2] = (CopyOption) standardCopyOption0;
      copyOptionArray0[3] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.move(jimfsPath0, (Path) null, copyOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[1] = linkOption0;
      Name name0 = Name.EMPTY;
      assertEquals("", name0.toString());
      assertNotNull(name0);
      
      HashSet<PathNormalization> hashSet0 = new HashSet<PathNormalization>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.delete((Path) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      assertSame(linkOption1, linkOption0);
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption1;
      linkOptionArray0[2] = linkOption0;
      TreeSet<LinkOption> treeSet0 = new TreeSet<LinkOption>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(linkOption1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.delete((Path) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.copy((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.copy(jimfsPath0, jimfsPath0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = null;
      TreeSet<LinkOption> treeSet0 = new TreeSet<LinkOption>();
      assertNotNull(treeSet0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      boolean boolean0 = treeSet0.add(linkOption0);
      assertTrue(boolean0);
      assertTrue(treeSet0.contains(linkOption0));
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      CopyOption[] copyOptionArray0 = new CopyOption[9];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      copyOptionArray0[1] = (CopyOption) linkOption0;
      copyOptionArray0[2] = (CopyOption) linkOption0;
      copyOptionArray0[3] = (CopyOption) linkOption0;
      copyOptionArray0[4] = (CopyOption) linkOption0;
      copyOptionArray0[5] = (CopyOption) linkOption0;
      copyOptionArray0[6] = (CopyOption) linkOption0;
      copyOptionArray0[7] = (CopyOption) linkOption0;
      copyOptionArray0[8] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.copy((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      UnixPathType unixPathType0 = (UnixPathType)UnixPathType.INSTANCE;
      assertFalse(unixPathType0.allowsMultipleRoots());
      assertEquals("", unixPathType0.getOtherSeparators());
      assertNotNull(unixPathType0);
      
      SynchronousQueue<PathNormalization> synchronousQueue0 = new SynchronousQueue<PathNormalization>(true);
      assertNotNull(synchronousQueue0);
      
      PathService pathService0 = new PathService(unixPathType0, synchronousQueue0, synchronousQueue0, false);
      assertFalse(unixPathType0.allowsMultipleRoots());
      assertEquals("", unixPathType0.getOtherSeparators());
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(unixPathType0.allowsMultipleRoots());
      assertEquals("", unixPathType0.getOtherSeparators());
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = (FileAttribute<BasicAttributeProvider.Attributes>[]) Array.newInstance(FileAttribute.class, 1);
      FileAttribute<BasicAttributeProvider.Attributes> fileAttribute0 = (FileAttribute<BasicAttributeProvider.Attributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOption1;
      Class<FileAttributeView> class0 = FileAttributeView.class;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.getFileAttributeView((Path) null, class0, linkOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createLink((Path) null, (Path) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createLink((Path) null, (Path) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      TreeSet<LinkOption> treeSet0 = new TreeSet<LinkOption>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      FileAttribute<LinkOption>[] fileAttributeArray0 = (FileAttribute<LinkOption>[]) Array.newInstance(FileAttribute.class, 4);
      FileAttribute<LinkOption> fileAttribute0 = (FileAttribute<LinkOption>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.newAsynchronousFileChannel(jimfsPath0, treeSet0, forkJoinPool0, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.unix();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption0);
      
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption1);
      
      StandardOpenOption standardOpenOption2 = StandardOpenOption.CREATE_NEW;
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption2);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newInputStream(jimfsPath0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      PathNormalization pathNormalization0 = PathNormalization.NFD;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ImmutableSortedSet<PathNormalization> immutableSortedSet0 = ImmutableSortedSet.of(pathNormalization0, pathNormalization0, pathNormalization0);
      assertEquals(1, immutableSortedSet0.size());
      assertNotNull(immutableSortedSet0);
      assertTrue(immutableSortedSet0.contains(pathNormalization0));
      
      Comparator<JimfsPath> comparator0 = pathService0.reversed();
      assertNotNull(comparator0);
      
      Name name0 = Name.SELF;
      assertEquals(".", name0.toString());
      assertNotNull(name0);
      
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(name0));
      
      Name name1 = Name.create("|%9%Zt:<V |1rT", "");
      assertFalse(name1.equals((Object)name0));
      assertNotSame(name1, name0);
      assertEquals("|%9%Zt:<V |1rT", name1.toString());
      assertNotNull(name1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newInputStream(jimfsPath0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      SynchronousQueue<PathNormalization> synchronousQueue0 = new SynchronousQueue<PathNormalization>();
      assertNotNull(synchronousQueue0);
      
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertNotNull(windowsPathType0);
      
      PathService pathService0 = new PathService(windowsPathType0, synchronousQueue0, synchronousQueue0, true);
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      ImmutableSortedSet<LinkOption> immutableSortedSet0 = ImmutableSortedSet.of();
      assertEquals(0, immutableSortedSet0.size());
      assertNotNull(immutableSortedSet0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newByteChannel(jimfsPath0, immutableSortedSet0, (FileAttribute<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      PathNormalization pathNormalization0 = PathNormalization.NFD;
      ImmutableSortedSet<PathNormalization> immutableSortedSet0 = ImmutableSortedSet.of(pathNormalization0, pathNormalization0, pathNormalization0);
      assertEquals(1, immutableSortedSet0.size());
      assertNotNull(immutableSortedSet0);
      assertTrue(immutableSortedSet0.contains(pathNormalization0));
      
      Name name0 = Name.SELF;
      assertEquals(".", name0.toString());
      assertNotNull(name0);
      
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(name0));
      
      LinkedBlockingQueue<Name> linkedBlockingQueue0 = new LinkedBlockingQueue<Name>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(linkedBlockingQueue0);
      assertFalse(arrayList0.contains(name0));
      assertFalse(linkedBlockingQueue0.contains(name0));
      
      Name name1 = Name.create("|%9%Zt:<V |1rT", "");
      assertFalse(name1.equals((Object)name0));
      assertNotSame(name1, name0);
      assertEquals("|%9%Zt:<V |1rT", name1.toString());
      assertNotNull(name1);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.DSYNC;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.SPARSE;
      ImmutableSortedSet<StandardOpenOption> immutableSortedSet1 = ImmutableSortedSet.of(standardOpenOption1, standardOpenOption0, standardOpenOption1, standardOpenOption1, standardOpenOption2);
      assertFalse(standardOpenOption0.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption0.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption0, standardOpenOption1);
      assertNotSame(standardOpenOption0, standardOpenOption2);
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertNotSame(standardOpenOption1, standardOpenOption2);
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(3, immutableSortedSet1.size());
      assertNotNull(immutableSortedSet1);
      assertTrue(immutableSortedSet1.contains(standardOpenOption0));
      
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = (FileAttribute<BasicAttributeProvider.Attributes>[]) Array.newInstance(FileAttribute.class, 8);
      FileAttribute<BasicAttributeProvider.Attributes> fileAttribute0 = (FileAttribute<BasicAttributeProvider.Attributes>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      fileAttributeArray0[7] = fileAttribute0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newByteChannel(jimfsPath0, immutableSortedSet1, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = new JimfsFileSystemProvider();
      assertFalse(jimfsFileSystemProvider1.equals((Object)jimfsFileSystemProvider0));
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption0);
      
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption1);
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertSame(standardOpenOption2, standardOpenOption1);
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption2);
      
      StandardOpenOption standardOpenOption3 = StandardOpenOption.CREATE_NEW;
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertNotSame(standardOpenOption3, standardOpenOption1);
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption3);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.newInputStream(jimfsPath0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BNG)c?l1:?_";
      stringArray0[1] = "|gJK";
      stringArray0[2] = "BNG)c?l1:?_";
      Configuration configuration1 = Configuration.windows();
      assertFalse(configuration1.equals((Object)configuration0));
      assertNotSame(configuration1, configuration0);
      assertNotNull(configuration1);
      
      stringArray0[3] = "";
      stringArray0[4] = "BNG)c?l1:?_";
      stringArray0[5] = "BNG)c?l1:?_";
      stringArray0[6] = "BNG)c?l1:?_";
      stringArray0[7] = "BNG)c?l1:?_";
      JimfsPath jimfsPath0 = pathService0.parsePath("BNG)c?l1:?_", stringArray0);
      assertFalse(configuration0.equals((Object)configuration1));
      assertEquals(8, stringArray0.length);
      assertNotSame(configuration0, configuration1);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createDirectory(jimfsPath0, (FileAttribute<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertNotNull(windowsPathType0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertEquals("", uRI1.getRawPath());
      assertEquals("http://foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertEquals("foo.bar", uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertNotNull(uRI1);
      
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>(4);
      assertNotNull(priorityBlockingQueue0);
      
      Vector<String> vector0 = new Vector<String>(priorityBlockingQueue0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      URI uRI2 = windowsPathType0.toUri(uRI1, "", vector0, true);
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(uRI2.equals((Object)uRI0));
      assertSame(uRI0, uRI1);
      assertNotSame(uRI0, uRI2);
      assertNotSame(uRI1, uRI2);
      assertSame(uRI1, uRI0);
      assertNotSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertEquals("", uRI1.getRawPath());
      assertEquals("http://foo.bar", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertEquals("foo.bar", uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(uRI2.isOpaque());
      assertEquals("http://foo.bar/", uRI2.toString());
      assertTrue(uRI2.isAbsolute());
      assertEquals("foo.bar", uRI2.getHost());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("http", uRI2.getScheme());
      assertNull(uRI2.getRawFragment());
      assertEquals((-1), uRI2.getPort());
      assertEquals("foo.bar", uRI2.getRawAuthority());
      assertNull(uRI2.getRawQuery());
      assertEquals("/", uRI2.getRawPath());
      assertNotNull(uRI2);
      assertFalse(priorityBlockingQueue0.contains(""));
      assertFalse(vector0.contains(""));
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.getPath(uRI2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This method should not be called directly; use Paths.get(URI) instead.
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.getPath(uRI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This method should not be called directly; use Paths.get(URI) instead.
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.APPEND;
      ImmutableSet<StandardOpenOption> immutableSet0 = ImmutableSet.of(standardOpenOption0, standardOpenOption1);
      assertFalse(standardOpenOption0.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption0, standardOpenOption1);
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(2, immutableSet0.size());
      assertNotNull(immutableSet0);
      assertTrue(immutableSet0.contains(standardOpenOption0));
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.newFileChannel(jimfsPath0, immutableSet0, (FileAttribute<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.DELETE_ON_CLOSE;
      ImmutableSet<StandardOpenOption> immutableSet0 = ImmutableSet.of(standardOpenOption0, standardOpenOption1);
      assertFalse(standardOpenOption0.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption0, standardOpenOption1);
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(2, immutableSet0.size());
      assertNotNull(immutableSet0);
      assertTrue(immutableSet0.contains(standardOpenOption0));
      
      FileAttribute<StandardOpenOption>[] fileAttributeArray0 = (FileAttribute<StandardOpenOption>[]) Array.newInstance(FileAttribute.class, 1);
      FileAttribute<StandardOpenOption> fileAttribute0 = (FileAttribute<StandardOpenOption>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      FileAttribute<StandardOpenOption>[] fileAttributeArray1 = (FileAttribute<StandardOpenOption>[]) Array.newInstance(FileAttribute.class, 1);
      assertFalse(fileAttributeArray1.equals((Object)fileAttributeArray0));
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newFileChannel(jimfsPath0, (Set<? extends OpenOption>) null, fileAttributeArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption0);
      
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption1);
      
      StandardOpenOption standardOpenOption2 = StandardOpenOption.READ;
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.READ, standardOpenOption2);
      
      StandardOpenOption standardOpenOption3 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertSame(standardOpenOption3, standardOpenOption1);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption3);
      
      StandardOpenOption standardOpenOption4 = StandardOpenOption.CREATE_NEW;
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption3));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption4, standardOpenOption0);
      assertNotSame(standardOpenOption4, standardOpenOption2);
      assertNotSame(standardOpenOption4, standardOpenOption3);
      assertNotSame(standardOpenOption4, standardOpenOption1);
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption4);
      
      AccessMode accessMode0 = AccessMode.READ;
      AccessMode[] accessModeArray0 = new AccessMode[2];
      accessModeArray0[0] = accessMode0;
      accessModeArray0[1] = accessMode0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.checkAccess((Path) null, accessModeArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BNG)c?l1:?_";
      stringArray0[1] = "|gJK";
      stringArray0[2] = "BNG)c?l1:?_";
      stringArray0[3] = "";
      stringArray0[4] = "BNG)c?l1:?_";
      stringArray0[5] = "BNG)c?l1:?_";
      stringArray0[6] = "BNG)c?l1:?_";
      stringArray0[7] = "BNG)c?l1:?_";
      JimfsPath jimfsPath0 = pathService0.parsePath("BNG)c?l1:?_", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.move(jimfsPath0, jimfsPath0, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      JimfsFileSystemProvider jimfsFileSystemProvider1 = new JimfsFileSystemProvider();
      assertFalse(jimfsFileSystemProvider1.equals((Object)jimfsFileSystemProvider0));
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      copyOptionArray0[0] = (CopyOption) linkOption0;
      copyOptionArray0[1] = (CopyOption) linkOption0;
      copyOptionArray0[2] = (CopyOption) linkOption1;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.move((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption1;
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      assertNotNull(comparator0);
      
      ArrayList<StandardOpenOption> arrayList0 = new ArrayList<StandardOpenOption>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      Iterator<StandardOpenOption> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      ImmutableSortedSet<StandardOpenOption> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super StandardOpenOption>) comparator0, (Iterator<? extends StandardOpenOption>) iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, immutableSortedSet0.size());
      assertNotNull(immutableSortedSet0);
      
      PriorityQueue<OpenOption> priorityQueue0 = new PriorityQueue<OpenOption>((Collection<? extends OpenOption>) immutableSortedSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, immutableSortedSet0.size());
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ImmutableSortedSet<OpenOption> immutableSortedSet1 = ImmutableSortedSet.copyOf((Comparator<? super OpenOption>) comparator0, (Iterable<? extends OpenOption>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, immutableSortedSet1.size());
      assertNotNull(immutableSortedSet1);
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      URI uRI0 = MockURI.URI("");
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertFalse(uRI0.isAbsolute());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This method should not be called directly;use an overload of Jimfs.newFileSystem() to create a FileSystem.
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      LinkOption[] linkOptionArray0 = null;
      Class<BasicAttributeProvider.Attributes> class0 = BasicAttributeProvider.Attributes.class;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.readAttributes((Path) jimfsPath0, class0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BNG)c?l1:?_";
      stringArray0[1] = "|gJK";
      stringArray0[2] = "BNG)c?l1:?_";
      stringArray0[3] = "";
      stringArray0[4] = "BNG)c?l1:?_";
      stringArray0[5] = "BNG)c?l1:?_";
      stringArray0[6] = "BNG)c?l1:?_";
      stringArray0[7] = "BNG)c?l1:?_";
      JimfsPath jimfsPath0 = pathService0.parsePath("BNG)c?l1:?_", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      Class<BasicAttributeProvider.Attributes> class0 = BasicAttributeProvider.Attributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption1;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.readAttributes((Path) jimfsPath0, class0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.unix();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "|gJK";
      stringArray0[2] = "";
      stringArray0[3] = "NgHT-+g";
      stringArray0[4] = "|gJK";
      stringArray0[5] = "|gJK";
      stringArray0[6] = "";
      JimfsPath jimfsPath0 = pathService0.parsePath("|gJK", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = new JimfsFileSystemProvider();
      assertFalse(jimfsFileSystemProvider1.equals((Object)jimfsFileSystemProvider0));
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = (FileAttribute<BasicAttributeProvider.Attributes>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.createSymbolicLink((Path) null, jimfsPath0, fileAttributeArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption1);
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.READ;
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.READ, standardOpenOption2);
      
      StandardOpenOption standardOpenOption3 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      assertSame(standardOpenOption3, standardOpenOption1);
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption3);
      
      StandardOpenOption standardOpenOption4 = StandardOpenOption.CREATE_NEW;
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption3));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption2));
      assertNotSame(standardOpenOption4, standardOpenOption1);
      assertNotSame(standardOpenOption4, standardOpenOption3);
      assertNotSame(standardOpenOption4, standardOpenOption0);
      assertNotSame(standardOpenOption4, standardOpenOption2);
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption4);
      
      JimfsFileSystemProvider jimfsFileSystemProvider2 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider2, jimfsFileSystemProvider1);
      assertSame(jimfsFileSystemProvider2, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider2.getScheme());
      assertNotNull(jimfsFileSystemProvider2);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider2.newInputStream(jimfsPath0, openOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'TRUNCATE_EXISTING' not allowed
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      assertEquals(StandardOpenOption.TRUNCATE_EXISTING, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption1.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption1, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption1);
      
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.READ;
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption1));
      assertNotSame(standardOpenOption2, standardOpenOption0);
      assertNotSame(standardOpenOption2, standardOpenOption1);
      assertEquals(StandardOpenOption.READ, standardOpenOption2);
      
      openOptionArray0[2] = (OpenOption) standardOpenOption2;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.SPARSE;
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption2));
      assertFalse(standardOpenOption3.equals((Object)standardOpenOption0));
      assertNotSame(standardOpenOption3, standardOpenOption2);
      assertSame(standardOpenOption3, standardOpenOption1);
      assertNotSame(standardOpenOption3, standardOpenOption0);
      assertEquals(StandardOpenOption.SPARSE, standardOpenOption3);
      
      openOptionArray0[3] = (OpenOption) standardOpenOption3;
      StandardOpenOption standardOpenOption4 = StandardOpenOption.CREATE_NEW;
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption1));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption0));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption3));
      assertFalse(standardOpenOption4.equals((Object)standardOpenOption2));
      assertNotSame(standardOpenOption4, standardOpenOption1);
      assertNotSame(standardOpenOption4, standardOpenOption0);
      assertNotSame(standardOpenOption4, standardOpenOption3);
      assertNotSame(standardOpenOption4, standardOpenOption2);
      assertEquals(StandardOpenOption.CREATE_NEW, standardOpenOption4);
      
      openOptionArray0[4] = (OpenOption) standardOpenOption4;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.newInputStream(jimfsPath0, openOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'TRUNCATE_EXISTING' not allowed
         //
         verifyException("com.google.common.jimfs.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.checkAccess(jimfsPath0, (AccessMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BNG)c?l1:?_";
      stringArray0[1] = "|gJK";
      stringArray0[2] = "BNG)c?l1:?_";
      stringArray0[3] = "";
      stringArray0[4] = "BNG)c?l1:?_";
      stringArray0[5] = "BNG)c?l1:?_";
      stringArray0[6] = "BNG)c?l1:?_";
      stringArray0[7] = "BNG)c?l1:?_";
      JimfsPath jimfsPath0 = pathService0.parsePath("BNG)c?l1:?_", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      AccessMode accessMode0 = AccessMode.EXECUTE;
      AccessMode[] accessModeArray0 = new AccessMode[5];
      accessModeArray0[0] = accessMode0;
      accessModeArray0[1] = accessMode0;
      AccessMode accessMode1 = AccessMode.WRITE;
      accessModeArray0[2] = accessMode1;
      accessModeArray0[3] = accessMode0;
      accessModeArray0[4] = accessMode0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.checkAccess(jimfsPath0, accessModeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      WindowsPathType windowsPathType0 = (WindowsPathType)configuration0.pathType;
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertNotNull(windowsPathType0);
      
      PathNormalization pathNormalization0 = PathNormalization.NFD;
      PathNormalization pathNormalization1 = PathNormalization.CASE_FOLD_ASCII;
      ImmutableSet<PathNormalization> immutableSet0 = ImmutableSet.of(pathNormalization0, pathNormalization0, pathNormalization1);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertEquals(2, immutableSet0.size());
      assertNotNull(immutableSet0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      
      Vector<PathNormalization> vector0 = new Vector<PathNormalization>(immutableSet0);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertEquals(2, immutableSet0.size());
      assertEquals(2, vector0.capacity());
      assertEquals("[NFD, CASE_FOLD_ASCII]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertNotNull(vector0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      assertTrue(vector0.contains(pathNormalization1));
      
      PathService pathService0 = new PathService(windowsPathType0, vector0, immutableSet0, false);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertEquals(2, immutableSet0.size());
      assertEquals(2, vector0.capacity());
      assertEquals("[NFD, CASE_FOLD_ASCII]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertNotNull(pathService0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      assertTrue(vector0.contains(pathNormalization1));
      
      Name name0 = Name.SELF;
      assertEquals(".", name0.toString());
      assertNotNull(name0);
      
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(name0));
      
      LinkedBlockingQueue<Name> linkedBlockingQueue0 = new LinkedBlockingQueue<Name>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(linkedBlockingQueue0);
      assertFalse(arrayList0.contains(name0));
      assertFalse(linkedBlockingQueue0.contains(name0));
      
      JimfsPath jimfsPath0 = pathService0.createRoot(name0);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertEquals(2, immutableSet0.size());
      assertEquals(2, vector0.capacity());
      assertEquals("[NFD, CASE_FOLD_ASCII]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(".", name0.toString());
      assertTrue(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      assertTrue(vector0.contains(pathNormalization1));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "y!K";
      stringArray0[2] = "y!K";
      stringArray0[3] = "y!K";
      stringArray0[4] = "";
      stringArray0[5] = "y!K";
      stringArray0[6] = "y!K";
      JimfsPath jimfsPath1 = pathService0.parsePath("y!K", stringArray0);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertEquals(7, stringArray0.length);
      assertNotSame(jimfsPath1, jimfsPath0);
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertFalse(jimfsPath1.isAbsolute());
      assertEquals(2, immutableSet0.size());
      assertEquals(2, vector0.capacity());
      assertEquals("[NFD, CASE_FOLD_ASCII]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertNotNull(jimfsPath1);
      assertTrue(immutableSet0.contains(pathNormalization1));
      assertTrue(vector0.contains(pathNormalization1));
      
      FileAttribute<Delayed>[] fileAttributeArray0 = (FileAttribute<Delayed>[]) Array.newInstance(FileAttribute.class, 7);
      FileAttribute<Delayed> fileAttribute0 = (FileAttribute<Delayed>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      fileAttributeArray0[1] = fileAttribute0;
      fileAttributeArray0[2] = fileAttribute0;
      fileAttributeArray0[3] = fileAttribute0;
      fileAttributeArray0[4] = fileAttribute0;
      fileAttributeArray0[5] = fileAttribute0;
      fileAttributeArray0[6] = fileAttribute0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createSymbolicLink(jimfsPath1, jimfsPath0, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      TreeSet<LinkOption> treeSet0 = new TreeSet<LinkOption>();
      assertNotNull(treeSet0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      JimfsFileSystemProvider jimfsFileSystemProvider1 = JimfsFileSystemProvider.instance();
      assertSame(jimfsFileSystemProvider1, jimfsFileSystemProvider0);
      assertEquals("jimfs", jimfsFileSystemProvider1.getScheme());
      assertNotNull(jimfsFileSystemProvider1);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider1.newAsynchronousFileChannel((Path) null, treeSet0, forkJoinPool0, (FileAttribute<?>[]) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      assertNotNull(comparator0);
      
      ArrayList<StandardOpenOption> arrayList0 = new ArrayList<StandardOpenOption>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Iterator<StandardOpenOption> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      ImmutableSortedSet<StandardOpenOption> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super StandardOpenOption>) comparator0, (Iterator<? extends StandardOpenOption>) iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, immutableSortedSet0.size());
      assertNotNull(immutableSortedSet0);
      
      PriorityQueue<OpenOption> priorityQueue0 = new PriorityQueue<OpenOption>((Collection<? extends OpenOption>) immutableSortedSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, immutableSortedSet0.size());
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ImmutableSortedSet<OpenOption> immutableSortedSet1 = ImmutableSortedSet.copyOf((Comparator<? super OpenOption>) comparator0, (Iterable<? extends OpenOption>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, immutableSortedSet1.size());
      assertNotNull(immutableSortedSet1);
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newAsynchronousFileChannel((Path) null, immutableSortedSet0, scheduledThreadPoolExecutor0, (FileAttribute<?>[]) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      assertSame(linkOption2, linkOption0);
      assertSame(linkOption2, linkOption1);
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption2);
      
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      assertEquals(StandardCopyOption.COPY_ATTRIBUTES, standardCopyOption0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.move((Path) null, (Path) null, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 3
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.move(jimfsPath0, jimfsPath0, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      assertEquals(LinkOption.NOFOLLOW_LINKS, linkOption0);
      
      String string0 = jimfsFileSystemProvider0.getScheme();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(string0);
      assertEquals("jimfs", string0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This method should not be called directly;use an overload of Jimfs.newFileSystem() to create a FileSystem.
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      String string0 = jimfsFileSystemProvider0.getScheme();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(string0);
      assertEquals("jimfs", string0);
      
      Configuration configuration0 = Configuration.forCurrentPlatform();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      Name name0 = pathService0.name("jimfs");
      assertEquals("jimfs", name0.toString());
      assertNotNull(name0);
      
      LinkedList<Name> linkedList0 = new LinkedList<Name>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(name0));
      
      Iterator<Name> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(name0));
      
      ImmutableSortedSet<Name> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends Name>) iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, immutableSortedSet0.size());
      assertNotNull(immutableSortedSet0);
      assertFalse(linkedList0.contains(name0));
      assertFalse(immutableSortedSet0.contains(name0));
      
      JimfsPath jimfsPath0 = pathService0.createPathInternal(name0, immutableSortedSet0);
      assertEquals("jimfs", name0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, immutableSortedSet0.size());
      assertTrue(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      assertFalse(linkedList0.contains(name0));
      assertFalse(immutableSortedSet0.contains(name0));
      
      CopyOption[] copyOptionArray0 = new CopyOption[8];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.REPLACE_EXISTING;
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption0);
      
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      StandardCopyOption standardCopyOption1 = StandardCopyOption.REPLACE_EXISTING;
      assertSame(standardCopyOption1, standardCopyOption0);
      assertEquals(StandardCopyOption.REPLACE_EXISTING, standardCopyOption1);
      
      copyOptionArray0[1] = (CopyOption) standardCopyOption1;
      // Undeclared exception!
      try { 
        LinkOption.valueOf("jimfs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.jimfs
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      Name name0 = Name.EMPTY;
      assertEquals("", name0.toString());
      assertNotNull(name0);
      
      JimfsPath jimfsPath1 = pathService0.createFileName(name0);
      assertNotSame(jimfsPath1, jimfsPath0);
      assertEquals("", name0.toString());
      assertFalse(jimfsPath1.isAbsolute());
      assertNotNull(jimfsPath1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.setAttribute(jimfsPath1, "H)yICcuU", object0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      linkOptionArray0[1] = linkOption0;
      Path path0 = null;
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.setAttribute((Path) null, "c|AFU6!", linkOption0, linkOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.windows();
      assertNotNull(configuration0);
      
      WindowsPathType windowsPathType0 = (WindowsPathType)configuration0.pathType;
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertNotNull(windowsPathType0);
      
      PathNormalization pathNormalization0 = PathNormalization.NFC;
      PathNormalization pathNormalization1 = PathNormalization.CASE_FOLD_ASCII;
      ImmutableSet<PathNormalization> immutableSet0 = ImmutableSet.of(pathNormalization0, pathNormalization0, pathNormalization1);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertEquals(2, immutableSet0.size());
      assertNotNull(immutableSet0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      
      Vector<PathNormalization> vector0 = new Vector<PathNormalization>(immutableSet0);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertEquals(2, immutableSet0.size());
      assertEquals("[NFC, CASE_FOLD_ASCII]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertNotNull(vector0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      assertTrue(vector0.contains(pathNormalization1));
      
      PathService pathService0 = new PathService(windowsPathType0, vector0, immutableSet0, false);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertEquals(2, immutableSet0.size());
      assertEquals("[NFC, CASE_FOLD_ASCII]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertNotNull(pathService0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      assertTrue(vector0.contains(pathNormalization1));
      
      Name name0 = Name.SELF;
      assertEquals(".", name0.toString());
      assertNotNull(name0);
      
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(name0));
      
      LinkedBlockingQueue<Name> linkedBlockingQueue0 = new LinkedBlockingQueue<Name>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(linkedBlockingQueue0);
      assertFalse(arrayList0.contains(name0));
      assertFalse(linkedBlockingQueue0.contains(name0));
      
      JimfsPath jimfsPath0 = pathService0.createPath(name0, linkedBlockingQueue0);
      assertFalse(pathNormalization0.equals((Object)pathNormalization1));
      assertFalse(pathNormalization1.equals((Object)pathNormalization0));
      assertEquals("/", windowsPathType0.getOtherSeparators());
      assertTrue(windowsPathType0.allowsMultipleRoots());
      assertEquals(2, immutableSet0.size());
      assertEquals("[NFC, CASE_FOLD_ASCII]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(".", name0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      assertTrue(immutableSet0.contains(pathNormalization1));
      assertTrue(vector0.contains(pathNormalization1));
      assertFalse(arrayList0.contains(name0));
      assertFalse(linkedBlockingQueue0.contains(name0));
      
      Name name1 = Name.create("", "");
      assertFalse(name1.equals((Object)name0));
      assertNotSame(name1, name0);
      assertEquals("", name1.toString());
      assertNotNull(name1);
      
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.setAttribute(jimfsPath0, "", name1, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BNG)c?l1:?_";
      stringArray0[1] = "|gJK";
      stringArray0[2] = "BNG)c?l1:?_";
      stringArray0[3] = "";
      stringArray0[4] = "BNG)c?l1:?_";
      stringArray0[5] = "BNG)c?l1:?_";
      stringArray0[6] = "BNG)c?l1:?_";
      stringArray0[7] = "BNG)c?l1:?_";
      JimfsPath jimfsPath0 = pathService0.parsePath("W8h*TDz", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createSymbolicLink(jimfsPath0, jimfsPath0, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BNG)c?l1:?_";
      stringArray0[1] = "|gJK";
      stringArray0[2] = "BNG)c?l1:?_";
      stringArray0[3] = "";
      stringArray0[4] = "BNG)c?l1:?_";
      stringArray0[5] = "BNG)c?l1:?_";
      stringArray0[6] = "BNG)c?l1:?_";
      stringArray0[7] = "BNG)c?l1:?_";
      JimfsPath jimfsPath0 = pathService0.parsePath("BNG)c?l1:?_", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 1);
      FileAttribute<Object> fileAttribute0 = (FileAttribute<Object>) mock(FileAttribute.class, new ViolatedAssumptionAnswer());
      fileAttributeArray0[0] = fileAttribute0;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createSymbolicLink(jimfsPath0, jimfsPath0, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.unix();
      assertNotNull(configuration0);
      
      PathService pathService0 = new PathService(configuration0);
      assertNotNull(pathService0);
      
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      assertFalse(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.isHidden(jimfsPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Class<BasicAttributeProvider.Attributes> class0 = BasicAttributeProvider.Attributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[7];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      LinkOption linkOption1 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[1] = linkOption1;
      LinkOption linkOption2 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[2] = linkOption2;
      LinkOption linkOption3 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[3] = linkOption3;
      LinkOption linkOption4 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[4] = linkOption4;
      LinkOption linkOption5 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[5] = linkOption5;
      LinkOption linkOption6 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[6] = linkOption6;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.readAttributes((Path) null, class0, linkOptionArray0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Class<BasicAttributeProvider.Attributes> class0 = BasicAttributeProvider.Attributes.class;
      LinkOption[] linkOptionArray0 = null;
      Path path0 = null;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.readAttributes((Path) null, class0, (LinkOption[]) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Path path0 = null;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.isSameFile((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      java.io.File file0 = MockFile.createTempFile("&x].bw3-w", "D3ev=CO");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("&x].bw3-w0D3ev=CO", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/&x].bw3-w0D3ev=CO", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "jimfs");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("&x].bw3-w0D3ev=CO", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/&x].bw3-w0D3ev=CO", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/&x].bw3-w0D3ev=CO/jimfs", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/&x].bw3-w0D3ev=CO", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("jimfs", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNotNull(path0);
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.readSymbolicLink(path0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path /tmp/&x].bw3-w0D3ev=CO/jimfs is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      assertEquals("jimfs", jimfsFileSystemProvider0.getScheme());
      assertNotNull(jimfsFileSystemProvider0);
      
      Configuration configuration0 = Configuration.osX();
      assertNotNull(configuration0);
      
      UnixPathType unixPathType0 = (UnixPathType)configuration0.pathType;
      assertEquals("", unixPathType0.getOtherSeparators());
      assertFalse(unixPathType0.allowsMultipleRoots());
      assertNotNull(unixPathType0);
      
      HashSet<PathNormalization> hashSet0 = new HashSet<PathNormalization>(0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PathService pathService0 = new PathService(unixPathType0, hashSet0, hashSet0, true);
      assertEquals("", unixPathType0.getOtherSeparators());
      assertFalse(unixPathType0.allowsMultipleRoots());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(pathService0);
      
      Name name0 = Name.create("52PqV", "52PqV");
      assertEquals("52PqV", name0.toString());
      assertNotNull(name0);
      
      LinkedBlockingDeque<Name> linkedBlockingDeque0 = new LinkedBlockingDeque<Name>();
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(name0));
      
      LinkedTransferQueue<Name> linkedTransferQueue0 = new LinkedTransferQueue<Name>(linkedBlockingDeque0);
      assertNotNull(linkedTransferQueue0);
      assertFalse(linkedBlockingDeque0.contains(name0));
      assertFalse(linkedTransferQueue0.contains(name0));
      
      JimfsPath jimfsPath0 = pathService0.createPath(name0, linkedTransferQueue0);
      assertEquals("", unixPathType0.getOtherSeparators());
      assertFalse(unixPathType0.allowsMultipleRoots());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("52PqV", name0.toString());
      assertTrue(jimfsPath0.isAbsolute());
      assertNotNull(jimfsPath0);
      assertFalse(linkedBlockingDeque0.contains(name0));
      assertFalse(linkedTransferQueue0.contains(name0));
      
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.readSymbolicLink(jimfsPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newInputStream((Path) null, (OpenOption[]) null);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      Path path0 = null;
      DirectoryStream.Filter<Object> directoryStream_Filter0 = (DirectoryStream.Filter<Object>) mock(DirectoryStream.Filter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newDirectoryStream((Path) null, directoryStream_Filter0);
        fail("Expecting exception: ProviderMismatchException");
      
      } catch(ProviderMismatchException e) {
         //
         // path null is not associated with a Jimfs file system
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      PathType pathType0 = PathType.windows();
      PathNormalization[] pathNormalizationArray0 = new PathNormalization[3];
      PathNormalization pathNormalization0 = PathNormalization.NFD;
      pathNormalizationArray0[0] = pathNormalization0;
      PathNormalization pathNormalization1 = PathNormalization.NONE;
      pathNormalizationArray0[1] = pathNormalization1;
      PathNormalization pathNormalization2 = PathNormalization.NFC;
      pathNormalizationArray0[2] = pathNormalization2;
      ImmutableSet<PathNormalization> immutableSet0 = ImmutableSet.copyOf(pathNormalizationArray0);
      EnumSet<PathNormalization> enumSet0 = EnumSet.of(pathNormalization2, pathNormalizationArray0);
      PathService pathService0 = new PathService(pathType0, immutableSet0, enumSet0, false);
      Name name0 = Name.SELF;
      Class<Name> class0 = Name.class;
      ServiceLoader<Name> serviceLoader0 = ServiceLoader.load(class0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      pathService0.thenComparingDouble(toDoubleFunction0);
      JimfsPath jimfsPath0 = new JimfsPath(pathService0, name0, serviceLoader0);
      DirectoryStream.Filter<Object> directoryStream_Filter0 = (DirectoryStream.Filter<Object>) mock(DirectoryStream.Filter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.newDirectoryStream(jimfsPath0, directoryStream_Filter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JimfsFileSystemProvider.instance();
      Configuration configuration0 = Configuration.forCurrentPlatform();
      UnixPathType unixPathType0 = (UnixPathType)configuration0.pathType;
      Vector<PathNormalization> vector0 = new Vector<PathNormalization>();
      PathService pathService0 = new PathService(unixPathType0, vector0, vector0, true);
      pathService0.emptyPath();
      String string0 = "@dh@R!LjX2:kV'RL:";
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      MockThread mockThread1 = new MockThread(mockThread0, "@dh@R!LjX2:kV'RL:");
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread1, 0, 0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      Configuration configuration0 = Configuration.windows();
      PathService pathService0 = new PathService(configuration0);
      JimfsPath jimfsPath0 = pathService0.emptyPath();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.createDirectory(jimfsPath0, fileAttributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = JimfsFileSystemProvider.instance();
      LinkOption[] linkOptionArray0 = new LinkOption[4];
      Name name0 = Name.EMPTY;
      Configuration configuration0 = Configuration.osX();
      configuration0.toBuilder();
      PathService pathService0 = new PathService(configuration0);
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      Class<FileAttributeView> class0 = FileAttributeView.class;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.getFileAttributeView((Path) jimfsPath0, class0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JimfsFileSystemProvider jimfsFileSystemProvider0 = new JimfsFileSystemProvider();
      PathType pathType0 = PathType.windows();
      PathNormalization pathNormalization0 = PathNormalization.NFC;
      PathNormalization[] pathNormalizationArray0 = new PathNormalization[8];
      pathNormalizationArray0[0] = pathNormalization0;
      pathNormalizationArray0[1] = pathNormalization0;
      pathNormalizationArray0[2] = pathNormalization0;
      pathNormalizationArray0[3] = pathNormalization0;
      PathNormalization pathNormalization1 = PathNormalization.NFD;
      pathNormalizationArray0[4] = pathNormalization1;
      pathNormalizationArray0[5] = pathNormalization0;
      pathNormalizationArray0[6] = pathNormalization0;
      pathNormalizationArray0[7] = pathNormalization0;
      EnumSet<PathNormalization> enumSet0 = EnumSet.of(pathNormalization0, pathNormalizationArray0);
      EnumSet<PathNormalization> enumSet1 = EnumSet.complementOf(enumSet0);
      PathService pathService0 = new PathService(pathType0, enumSet1, enumSet0, true);
      Name name0 = Name.EMPTY;
      JimfsPath jimfsPath0 = pathService0.createFileName(name0);
      Class<FileAttributeView> class0 = FileAttributeView.class;
      // Undeclared exception!
      try { 
        jimfsFileSystemProvider0.getFileAttributeView((Path) jimfsPath0, class0, (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.JimfsFileSystemProvider", e);
      }
  }
}
