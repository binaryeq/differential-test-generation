/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:49:00 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.jimfs.PathType;
import com.google.common.jimfs.WindowsPathType;
import java.nio.file.InvalidPathException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WindowsPathType_ESTest extends WindowsPathType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parseUriPath("\\vfFS?+A'rP4;]0%4(");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <?> at index 4: vfFS?+A'rP4;]0%4(
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      String string0 = windowsPathType0.toUriPath("The separator may not be the empty string.", set0, true);
      assertEquals("/The separator may not be the empty string./", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("//Chd/");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // UNC path is missing sharename: //Chd/
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parseUriPath("/M:\\>/");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <>> at index 3: M:\\>\\
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("\\)i}pv\u0005v!<FPc<9");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Jimfs does not currently support the Windows syntax for an absolute path on the current drive (e.g. \"\\foo\\bar\"): \\)i}pv\u0005v!<FPc<9
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("/g*+ /KWh9DOL$7<xcq#/");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Jimfs does not currently support the Windows syntax for an absolute path on the current drive (e.g. \"\\foo\\bar\"): /g*+ /KWh9DOL$7<xcq#/
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      String string0 = windowsPathType0.toString("", (Iterable<String>) set0);
      assertFalse(set0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      PathType.ParseResult pathType_ParseResult0 = windowsPathType0.parseUriPath("M:\\");
      assertEquals("M:\\", pathType_ParseResult0.root());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        windowsPathType0.toUriPath((String) null, arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      // Undeclared exception!
      try { 
        windowsPathType0.toString("[", (Iterable<String>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parseUriPath("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parseUriPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parseUriPath("\\\\Q");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // UNC path is missing sharename: \\\\Q
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      String string0 = windowsPathType0.toUriPath("CharMatcher.is('", arrayDeque0, false);
      assertEquals("/CharMatcher.is('", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("//");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // UNC path is missing hostname: //
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      PathType.ParseResult pathType_ParseResult0 = windowsPathType0.parsePath("");
      assertFalse(pathType_ParseResult0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("e:RtT,04MoIG<)LF@");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Jimfs does not currently support the Windows syntax for a relative path on a specific drive (e.g. \"C:foo\\bar\"): e:RtT,04MoIG<)LF@
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.add("/");
      arrayDeque0.add("/");
      String string0 = windowsPathType0.toUriPath("/", arrayDeque0, true);
      assertEquals("/////", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      HashSet<String> hashSet0 = new HashSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(hashSet0);
      arrayList0.add("");
      String string0 = windowsPathType0.toUriPath("\\Chd", arrayList0, true);
      assertEquals("//Chd/", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      String string0 = windowsPathType0.toUriPath("", set0, true);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      HashSet<String> hashSet0 = new HashSet<String>(102, 102);
      String string0 = windowsPathType0.toString("d`A+%};G??OVyh0>", (Iterable<String>) hashSet0);
      assertEquals("d`A+%};G??OVyh0>", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.toString((String) null, (Iterable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Joiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("|?MabV~!=A1N%j9");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <|> at index 0: |?MabV~!=A1N%j9
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("4,bbAx?^,Z7N?ALk\"Ek");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <?> at index 6: 4,bbAx?^,Z7N?ALk\"Ek
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("f;D06{/ZEQkYL+Hc<x(");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <<> at index 16: f;D06{/ZEQkYL+Hc<x(
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("must be greater than zero: %s");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <:> at index 25: must be greater than zero: %s
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("@,N.6}*u2*@vh2Kx[i");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <*> at index 6: @,N.6}*u2*@vh2Kx[i
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("Jimfs does not currently support the Windows syntax for a relative path on a specific drive (e.g. \"C:foo\bar\")");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <\"> at index 98: Jimfs does not currently support the Windows syntax for a relative path on a specific drive (e.g. \"C:foo\bar\")
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("at index ");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Trailing char < > at index 8: at index 
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parsePath("\u0000\u00AD\u0600\u061C\u06DD\u070F\u08E2\u1680\u180E\u2000\u2028\u205F\u2066\u3000\uD800\uFEFF\uFFF9");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Illegal char <\u0000> at index 0: \u0000\u00AD\u0600\u061C\u06DD\u070F\u08E2\u1680\u180E\u2000\u2028\u205F\u2066\u3000\uD800\uFEFF\uFFF9
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      PathType.ParseResult pathType_ParseResult0 = windowsPathType0.parseUriPath("\\XabvK4A]4Ihfw");
      assertFalse(pathType_ParseResult0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      PathType.ParseResult pathType_ParseResult0 = windowsPathType0.parsePath("M:\\");
      assertTrue(pathType_ParseResult0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WindowsPathType windowsPathType0 = WindowsPathType.INSTANCE;
      // Undeclared exception!
      try { 
        windowsPathType0.parseUriPath("e:RtT,04MoIG<)LF@");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
         //
         // Jimfs does not currently support the Windows syntax for a relative path on a specific drive (e.g. \"C:foo\\bar\"): e:RtT,04MoIG<)LF@
         //
         verifyException("com.google.common.jimfs.WindowsPathType", e);
      }
  }
}
