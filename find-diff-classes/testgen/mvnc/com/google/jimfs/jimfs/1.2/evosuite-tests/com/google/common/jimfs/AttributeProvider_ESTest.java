/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:22:54 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.jimfs.AclAttributeProvider;
import com.google.common.jimfs.AttributeProvider;
import com.google.common.jimfs.BasicAttributeProvider;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.File;
import com.google.common.jimfs.FileFactory;
import com.google.common.jimfs.FileLookup;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.Name;
import com.google.common.jimfs.OwnerAttributeProvider;
import com.google.common.jimfs.PathService;
import com.google.common.jimfs.PosixAttributeProvider;
import com.google.common.jimfs.RegularFile;
import com.google.common.jimfs.UnixAttributeProvider;
import com.google.common.jimfs.UserDefinedAttributeProvider;
import java.lang.reflect.Array;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileAttributeView;
import java.util.Map;
import java.util.concurrent.Delayed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttributeProvider_ESTest extends AttributeProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Class<Delayed> class0 = Delayed.class;
      // Undeclared exception!
      try { 
        AttributeProvider.checkType("@uLYP-fzADIyu5", "'&x0k ;UZ)&_&d-q", (Object) posixAttributeProvider0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type class com.google.common.jimfs.PosixAttributeProvider for attribute '@uLYP-fzADIyu5:'&x0k ;UZ)&_&d-q': expected interface java.util.concurrent.Delayed
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnixAttributeProvider unixAttributeProvider0 = new UnixAttributeProvider();
      HeapDisk heapDisk0 = new HeapDisk(2967, 51, 65535);
      byte[][] byteArray0 = new byte[1][3];
      RegularFile regularFile0 = new RegularFile(2967, heapDisk0, byteArray0, 2967, 1539L);
      Name name0 = Name.PARENT;
      // Undeclared exception!
      try { 
        unixAttributeProvider0.set(regularFile0, "$#JOx/^;t9K", "one of ", name0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // cannot set attribute '$#JOx/^;t9K:one of ' during file creation
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeProvider.unsettable("'", ",aR=", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot set attribute '':,aR='
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeProvider.checkNotCreate("R(F@]SH5F![lE", "6J8[z", false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      Class<? extends FileAttributeView> class0 = ownerAttributeProvider0.viewType();
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      FileLookup fileLookup0 = mock(FileLookup.class, new ViolatedAssumptionAnswer());
      FileAttributeView fileAttributeView0 = ownerAttributeProvider0.view(fileLookup0, (ImmutableMap<String, FileAttributeView>) null);
      assertNotNull(fileAttributeView0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      boolean boolean0 = ownerAttributeProvider0.supports("ndu5bu{k~MH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      String string0 = ownerAttributeProvider0.name();
      assertEquals("owner", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicAttributeProvider basicAttributeProvider0 = new BasicAttributeProvider();
      Configuration configuration0 = Configuration.forCurrentPlatform();
      PathService pathService0 = new PathService(configuration0);
      Name name0 = pathService0.name("cannot set attribute '");
      Directory directory0 = Directory.createRoot(1328, name0);
      Object object0 = basicAttributeProvider0.get(directory0, "cannot set attribute '");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Class<? extends BasicFileAttributes> class0 = posixAttributeProvider0.attributesType();
      assertTrue(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeProvider.unsettable((String) null, (String) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // cannot set attribute 'null:null' during file creation
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      // Undeclared exception!
      try { 
        AttributeProvider.invalidType((String) null, "'", (Object) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      // Undeclared exception!
      try { 
        ownerAttributeProvider0.defaultValues((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.OwnerAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        AttributeProvider.checkType("ku4R(yz", "ku4R(yz", (Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<BasicAttributeProvider.Attributes>[] classArray0 = (Class<BasicAttributeProvider.Attributes>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        AttributeProvider.invalidType("R(F@]SH5F![lE", "R(F@]SH5F![lE", "user", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type class java.lang.String for attribute 'R(F@]SH5F![lE:R(F@]SH5F![lE': expected one of []
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = AttributeProvider.checkType("0V[5Qyn\u0002l!W-G:", "BIWwg,HLl{", (Object) "BIWwg,HLl{", class0);
      assertEquals("BIWwg,HLl{", object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        AttributeProvider.checkNotCreate((String) null, (String) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // cannot set attribute 'null:null' during file creation
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnixAttributeProvider unixAttributeProvider0 = new UnixAttributeProvider();
      HeapDisk heapDisk0 = new HeapDisk(1168, 1168, 1103);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Name name0 = Name.EMPTY;
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      // Undeclared exception!
      try { 
        unixAttributeProvider0.readAttributes(directory0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicAttributeProvider basicAttributeProvider0 = new BasicAttributeProvider();
      ImmutableSet<String> immutableSet0 = basicAttributeProvider0.attributes((File) null);
      assertEquals(9, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      boolean boolean0 = ownerAttributeProvider0.supports("owner");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      Class<? extends BasicFileAttributes> class0 = ownerAttributeProvider0.attributesType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OwnerAttributeProvider ownerAttributeProvider0 = new OwnerAttributeProvider();
      ImmutableSet<String> immutableSet0 = ownerAttributeProvider0.inherits();
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserDefinedAttributeProvider userDefinedAttributeProvider0 = new UserDefinedAttributeProvider();
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      ImmutableMap<String, Object> immutableMap0 = ImmutableMap.of("6J8[z", (Object) aclAttributeProvider0);
      ImmutableMap<String, ?> immutableMap1 = userDefinedAttributeProvider0.defaultValues(immutableMap0);
      assertEquals(0, immutableMap1.size());
  }
}
