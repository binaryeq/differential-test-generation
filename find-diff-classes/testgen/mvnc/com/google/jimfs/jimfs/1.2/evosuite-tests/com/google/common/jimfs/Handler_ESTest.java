/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:29:09 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.jimfs.Handler;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Handler_ESTest extends Handler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Handler> class0 = Handler.class;
      Handler.register(class0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Handler.register((Class<? extends URLStreamHandler>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Handler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Handler handler0 = new Handler();
      // Undeclared exception!
      try { 
        handler0.openConnection((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Handler handler0 = new Handler();
      InetAddress inetAddress0 = handler0.getHostAddress((URL) null);
      assertNull(inetAddress0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Handler.register();
      Handler.register();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = MockURL.URL("vev]`d@}=P", "vev]`d@}=P", 3762, "vev]`d@}=P", (URLStreamHandler) handler0);
      URLConnection uRLConnection0 = handler0.openConnection(uRL0);
      assertTrue(uRLConnection0.getUseCaches());
  }
}
