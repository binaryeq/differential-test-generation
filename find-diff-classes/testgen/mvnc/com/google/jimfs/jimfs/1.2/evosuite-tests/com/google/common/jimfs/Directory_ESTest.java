/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:26:43 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.DirectoryEntry;
import com.google.common.jimfs.File;
import com.google.common.jimfs.FileFactory;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.Name;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Directory_ESTest extends Directory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.createRoot(0, name0);
      assertTrue(directory0.isEmpty());
      
      directory0.link(name0, directory0);
      boolean boolean0 = directory0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Directory directory0 = Directory.create((-2295));
      Name name0 = Name.SELF;
      DirectoryEntry directoryEntry0 = directory0.remove(name0);
      directory0.put(directoryEntry0);
      assertEquals((-2295), directory0.id());
      assertFalse(directory0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.createRoot(0, name0);
      DirectoryEntry directoryEntry0 = directory0.entryInParent();
      directory0.linked(directoryEntry0);
      assertEquals(0, directory0.id());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name name0 = Name.simple("f[+y)");
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      directory0.link(name0, directory0);
      Directory directory1 = directory0.parent();
      assertEquals(0, directory1.id());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name name0 = Name.SELF;
      Directory directory0 = Directory.createRoot((-1268), name0);
      Directory directory1 = directory0.parent();
      assertEquals((-1268), directory1.id());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Name name0 = Name.create(": ", "ZLo&zE|aET^9");
      Directory directory0 = Directory.createRoot(3382, name0);
      Directory directory1 = directory0.parent();
      assertEquals(3382, directory1.id());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-2824L));
      HeapDisk heapDisk0 = new HeapDisk(381, 518, 518);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Name name0 = Name.PARENT;
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      Directory directory1 = directory0.parent();
      assertEquals(0, directory1.id());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Name name0 = Name.SELF;
      Directory directory0 = Directory.createRoot((-1268), name0);
      Directory directory1 = directory0.copyWithoutContent((-1268));
      directory1.remove(name0);
      int int0 = directory1.entryCount();
      assertEquals(0, int0);
      assertTrue(directory0.isEmpty());
      assertEquals((-1268), directory1.id());
      assertEquals((-1268), directory0.id());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Directory directory0 = Directory.create(4);
      int int0 = directory0.entryCount();
      assertEquals(1, int0);
      assertEquals(4, directory0.id());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = Name.SELF;
      System.setCurrentTimeMillis((-1763L));
      Directory directory0 = Directory.createRoot(1176, name0);
      assertEquals(1176, directory0.id());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Directory directory0 = Directory.create(0);
      assertEquals(0, directory0.id());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Directory directory0 = Directory.create((-739));
      assertEquals((-739), directory0.id());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-2496L));
      Directory directory0 = Directory.create(2835);
      assertEquals(2835, directory0.id());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Name name0 = Name.create(": ", "ZLo&zE|aET^9");
      Directory directory0 = Directory.createRoot(3382, name0);
      Directory directory1 = directory0.copyWithoutContent((-547));
      assertEquals((-547), directory1.id());
      assertEquals(3382, directory0.id());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HeapDisk heapDisk0 = new HeapDisk(41, 15, 940);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      System.setCurrentTimeMillis((-4437L));
      Directory directory1 = directory0.copyWithoutContent(361);
      assertEquals(361, directory1.id());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Directory directory0 = Directory.create((-7));
      // Undeclared exception!
      try { 
        directory0.unlinked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Directory directory0 = Directory.create((-21));
      // Undeclared exception!
      try { 
        directory0.unlink((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Directory directory0 = Directory.create(2697);
      // Undeclared exception!
      try { 
        directory0.remove((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.create((-3794));
      // Undeclared exception!
      try { 
        directory0.remove(name0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no entry matching '' in this directory
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Directory directory0 = Directory.create(1);
      // Undeclared exception!
      try { 
        directory0.put((DirectoryEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Directory directory0 = Directory.create((-1875));
      // Undeclared exception!
      try { 
        directory0.parent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Directory directory0 = Directory.create(19);
      // Undeclared exception!
      try { 
        directory0.linked((DirectoryEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Directory directory0 = Directory.create((-7));
      // Undeclared exception!
      try { 
        directory0.link((Name) null, directory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Directory directory0 = Directory.create(3);
      Name name0 = Name.EMPTY;
      // Undeclared exception!
      try { 
        directory0.link(name0, (File) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Directory directory0 = Directory.create(1869);
      // Undeclared exception!
      try { 
        directory0.get((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Directory.createRoot((-2425), (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Name name0 = Name.create(": ", "ZLo&zE|aET^9");
      Directory directory0 = Directory.createRoot(3382, name0);
      directory0.iterator();
      assertEquals(3382, directory0.id());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.createRoot((-7), name0);
      Name name1 = Name.simple("NR!nT_[7?D)%h");
      directory0.link(name1, directory0);
      directory0.unlink(name1);
      assertTrue(directory0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.createRoot((-7), name0);
      Name name1 = Name.simple("NR!nT_[7?D)%h");
      // Undeclared exception!
      try { 
        directory0.unlink(name1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no entry matching 'NR!nT_[7?D)%h' in this directory
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.create((-7));
      Name name1 = Name.simple("NR!nT_[7?D)%h");
      directory0.link(name1, directory0);
      directory0.link(name0, directory0);
      assertEquals((-7), directory0.id());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.create((-7));
      directory0.link(name0, directory0);
      // Undeclared exception!
      try { 
        directory0.link(name0, directory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // entry '' already exists
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Directory directory0 = Directory.create(4);
      Name name0 = Name.SELF;
      // Undeclared exception!
      try { 
        directory0.link(name0, directory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot link: .
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Name name0 = Name.simple("f[+y)");
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      directory0.link(name0, directory0);
      ImmutableSortedSet<Name> immutableSortedSet0 = directory0.snapshot();
      assertEquals(0, directory0.id());
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Directory directory0 = Directory.create(11);
      Name name0 = Name.SELF;
      DirectoryEntry directoryEntry0 = directory0.get(name0);
      // Undeclared exception!
      try { 
        directory0.put(directoryEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // entry '.' already exists
         //
         verifyException("com.google.common.jimfs.Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Directory directory0 = Directory.create(2);
      Name name0 = Name.simple("com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture");
      DirectoryEntry directoryEntry0 = directory0.get(name0);
      assertEquals(2, directory0.id());
      assertNull(directoryEntry0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Name name0 = Name.SELF;
      Configuration configuration0 = Configuration.windows();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createRootDirectory(name0);
      Directory directory1 = directory0.copyWithoutContent(0);
      boolean boolean0 = directory1.isEmpty();
      assertEquals(0, directory0.id());
      assertTrue(directory0.isEmpty());
      assertEquals(0, directory1.id());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HeapDisk heapDisk0 = new HeapDisk(41, 15, 940);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      directory0.entryInParent();
      assertEquals(0, directory0.id());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Name name0 = Name.simple("NR!nT_[7?D)%h");
      Directory directory0 = Directory.createRoot(4, name0);
      boolean boolean0 = directory0.isEmpty();
      assertEquals(4, directory0.id());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Name name0 = Name.EMPTY;
      Directory directory0 = Directory.createRoot((-7), name0);
      directory0.unlinked();
      directory0.link(name0, directory0);
      directory0.unlinked();
      directory0.unlink(name0);
      directory0.parent();
      assertTrue(directory0.isEmpty());
  }
}
