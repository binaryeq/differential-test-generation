/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:44:20 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.File;
import com.google.common.jimfs.FileFactory;
import com.google.common.jimfs.FileLookup;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.Name;
import com.google.common.jimfs.PosixAttributeProvider;
import com.google.common.jimfs.RegularFile;
import java.nio.file.attribute.FileAttributeView;
import java.nio.file.attribute.GroupPrincipal;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributes;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.UserPrincipal;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PosixAttributeProvider_ESTest extends PosixAttributeProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Configuration configuration0 = Configuration.unix();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      posixAttributeProvider0.set(directory0, "8Ot", "", "", true);
      assertTrue(directory0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      // Undeclared exception!
      try { 
        posixAttributeProvider0.view((FileLookup) null, (ImmutableMap<String, FileAttributeView>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.PosixAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      // Undeclared exception!
      try { 
        posixAttributeProvider0.set(directory0, (String) null, (String) null, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.PosixAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      // Undeclared exception!
      try { 
        posixAttributeProvider0.readAttributes((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.BasicAttributeProvider$Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      // Undeclared exception!
      try { 
        posixAttributeProvider0.get(directory0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.PosixAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      // Undeclared exception!
      try { 
        posixAttributeProvider0.defaultValues((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.PosixAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Directory directory0 = Directory.create(529);
      Object object0 = posixAttributeProvider0.get(directory0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      FileFactory fileFactory0 = new FileFactory(heapDisk0);
      Directory directory0 = fileFactory0.createDirectory();
      Object object0 = posixAttributeProvider0.get(directory0, "permissions");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      ImmutableMap<String, Object> immutableMap0 = ImmutableMap.of();
      ImmutableMap<String, ?> immutableMap1 = posixAttributeProvider0.defaultValues(immutableMap0);
      // Undeclared exception!
      try { 
        posixAttributeProvider0.defaultValues(immutableMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type com.google.common.jimfs.UserLookupService$JimfsGroupPrincipal for attribute 'posix:group': should be one of class java.lang.String or interface java.nio.file.attribute.GroupPrincipal
         //
         verifyException("com.google.common.jimfs.PosixAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Configuration configuration0 = Configuration.unix();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(1864, heapDisk0);
      PosixAttributeProvider.Attributes posixAttributeProvider_Attributes0 = new PosixAttributeProvider.Attributes(regularFile0);
      UserPrincipal userPrincipal0 = posixAttributeProvider_Attributes0.owner();
      assertNull(userPrincipal0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Directory directory0 = Directory.create(529);
      PosixAttributeProvider.Attributes posixAttributeProvider_Attributes0 = new PosixAttributeProvider.Attributes(directory0);
      GroupPrincipal groupPrincipal0 = posixAttributeProvider_Attributes0.group();
      assertNull(groupPrincipal0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name name0 = Name.SELF;
      Directory directory0 = Directory.createRoot((-2284), name0);
      PosixAttributeProvider.Attributes posixAttributeProvider_Attributes0 = new PosixAttributeProvider.Attributes(directory0);
      ImmutableSet<PosixFilePermission> immutableSet0 = posixAttributeProvider_Attributes0.permissions();
      assertNull(immutableSet0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      String string0 = posixAttributeProvider0.name();
      assertEquals("posix", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      ImmutableSet<String> immutableSet0 = posixAttributeProvider0.fixedAttributes();
      assertEquals(2, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Class<PosixFileAttributes> class0 = posixAttributeProvider0.attributesType();
      assertEquals(1537, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      ImmutableSet<String> immutableSet0 = posixAttributeProvider0.inherits();
      assertEquals(2, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      ImmutableBiMap<String, FileAttributeView> immutableBiMap0 = ImmutableBiMap.of();
      FileLookup fileLookup0 = mock(FileLookup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        posixAttributeProvider0.view(fileLookup0, immutableBiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Directory directory0 = Directory.create(529);
      PosixFileAttributes posixFileAttributes0 = posixAttributeProvider0.readAttributes(directory0);
      assertFalse(posixFileAttributes0.isOther());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PosixAttributeProvider posixAttributeProvider0 = new PosixAttributeProvider();
      Class<PosixFileAttributeView> class0 = posixAttributeProvider0.viewType();
      assertEquals(1537, class0.getModifiers());
  }
}
