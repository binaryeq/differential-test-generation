/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:45:32 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSet;
import com.google.common.jimfs.BasicAttributeProvider;
import com.google.common.jimfs.SystemJimfsFileSystemProvider;
import java.lang.reflect.Array;
import java.net.URI;
import java.nio.file.AccessMode;
import java.nio.file.CopyOption;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileAttributeView;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SystemJimfsFileSystemProvider_ESTest extends SystemJimfsFileSystemProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, BasicAttributeProvider.Attributes> hashMap0 = new HashMap<String, BasicAttributeProvider.Attributes>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // env map (java.util.HashMap@0000000002) must contain key 'java.lang.String@0000000003' mapped to an instance of java.lang.Class@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      HashMap<String, BasicAttributeProvider.Attributes> hashMap0 = new HashMap<String, BasicAttributeProvider.Attributes>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem((Path) null, (Map<String, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getPath((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileSystem((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("file", "Ny", (String) null, "Ny", "file");
      HashMap<String, BasicAttributeProvider.Attributes> hashMap0 = new HashMap<String, BasicAttributeProvider.Attributes>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri (java.net.URI@0000000002) may not have a path, query or fragment
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.URI("fileSystem", "fileSystem", "fileSystem");
      HashMap<String, FileAttributeView> hashMap0 = new HashMap<String, FileAttributeView>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri (java.net.URI@0000000002) may not have a path, query or fragment
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, BasicAttributeProvider.Attributes> hashMap0 = new HashMap<String, BasicAttributeProvider.Attributes>();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(uRI0, (Map<String, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri (java.net.URI@0000000002) may not have a path, query or fragment
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getPath(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uri must have a path: java.net.URI@0000000002
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileSystem(uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // ftp://foo.bar
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileStore((Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.delete((Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.isSameFile((Path) null, (Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      ImmutableSet<StandardOpenOption> immutableSet0 = ImmutableSet.of(standardOpenOption0);
      FileAttribute<BasicAttributeProvider.Attributes>[] fileAttributeArray0 = (FileAttribute<BasicAttributeProvider.Attributes>[]) Array.newInstance(FileAttribute.class, 0);
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newByteChannel((Path) null, immutableSet0, fileAttributeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.move((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      String string0 = systemJimfsFileSystemProvider0.getScheme();
      assertEquals("jimfs", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.copy((Path) null, (Path) null, (CopyOption[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.createDirectory((Path) null, (FileAttribute<?>[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      Class<FileAttributeView> class0 = FileAttributeView.class;
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.getFileAttributeView((Path) null, class0, linkOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.setAttribute((Path) null, (String) null, object0, (LinkOption[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newDirectoryStream((Path) null, (DirectoryStream.Filter<? super Path>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      Class<BasicAttributeProvider.Attributes> class0 = BasicAttributeProvider.Attributes.class;
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.readAttributes((Path) null, class0, linkOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.checkAccess((Path) null, (AccessMode[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Runnable runnable0 = SystemJimfsFileSystemProvider.removeFileSystemRunnable(uRI0);
      assertNotNull(runnable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      MockFile mockFile0 = new MockFile("dos");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.newFileSystem(path0, (Map<String, ?>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.isHidden((Path) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemJimfsFileSystemProvider systemJimfsFileSystemProvider0 = new SystemJimfsFileSystemProvider();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        systemJimfsFileSystemProvider0.readAttributes((Path) null, "expectedSize", linkOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.SystemJimfsFileSystemProvider", e);
      }
  }
}
