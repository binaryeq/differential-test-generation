/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:21:39 GMT 2024
 */

package com.google.common.jimfs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.jimfs.AclAttributeProvider;
import com.google.common.jimfs.Configuration;
import com.google.common.jimfs.Directory;
import com.google.common.jimfs.File;
import com.google.common.jimfs.FileLookup;
import com.google.common.jimfs.HeapDisk;
import com.google.common.jimfs.RegularFile;
import java.nio.file.attribute.AclFileAttributeView;
import java.nio.file.attribute.FileAttributeView;
import java.util.Map;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AclAttributeProvider_ESTest extends AclAttributeProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      ImmutableSet<String> immutableSet0 = aclAttributeProvider0.fixedAttributes();
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      // Undeclared exception!
      try { 
        aclAttributeProvider0.view((FileLookup) null, (ImmutableMap<String, FileAttributeView>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AclAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      Configuration configuration0 = Configuration.unix();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = RegularFile.create(32768, heapDisk0);
      String string0 = "&\\up:836k_h1\\";
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        aclAttributeProvider0.set(regularFile0, string0, "acl", scheduledFuture0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // cannot set attribute '&\\up:836k_h1\\:acl' during file creation
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      Configuration configuration0 = Configuration.unix();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = heapDisk0.blockCache;
      // Undeclared exception!
      try { 
        aclAttributeProvider0.set(regularFile0, "aja", (String) null, heapDisk0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      // Undeclared exception!
      try { 
        aclAttributeProvider0.get((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      // Undeclared exception!
      try { 
        aclAttributeProvider0.defaultValues((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.jimfs.AclAttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      Directory directory0 = Directory.create(630);
      // Undeclared exception!
      try { 
        aclAttributeProvider0.set(directory0, "", "acl", "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid type class java.lang.String for attribute ':acl': expected interface java.util.List
         //
         verifyException("com.google.common.jimfs.AttributeProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      aclAttributeProvider0.set((File) null, "acl:acl", "acl:acl", (Object) null, false);
      assertEquals("acl", aclAttributeProvider0.name());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      Configuration configuration0 = Configuration.osX();
      HeapDisk heapDisk0 = new HeapDisk(configuration0);
      RegularFile regularFile0 = heapDisk0.blockCache;
      Object object0 = aclAttributeProvider0.get(regularFile0, "acl");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      Object object0 = aclAttributeProvider0.get((File) null, "F");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      ImmutableBiMap<String, Delayed> immutableBiMap0 = ImmutableBiMap.of();
      ImmutableMap<String, ?> immutableMap0 = aclAttributeProvider0.defaultValues(immutableBiMap0);
      ImmutableMap<String, ?> immutableMap1 = aclAttributeProvider0.defaultValues(immutableMap0);
      assertNotSame(immutableMap0, immutableMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      ImmutableBiMap<String, FileAttributeView> immutableBiMap0 = ImmutableBiMap.of();
      FileLookup fileLookup0 = mock(FileLookup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        aclAttributeProvider0.view(fileLookup0, immutableBiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      ImmutableSet<String> immutableSet0 = aclAttributeProvider0.inherits();
      assertEquals(1, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      String string0 = aclAttributeProvider0.name();
      assertEquals("acl", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AclAttributeProvider aclAttributeProvider0 = new AclAttributeProvider();
      Class<AclFileAttributeView> class0 = aclAttributeProvider0.viewType();
      assertFalse(class0.isArray());
  }
}
