/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 20:37:01 GMT 2024
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.net.ftp.FTPFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FTPFile_ESTest extends FTPFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      // Undeclared exception!
      try { 
        fTPFile0.setPermission(0, 52, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      // Undeclared exception!
      try { 
        fTPFile0.setPermission(3, 32, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("visitFileFailed");
      fTPFile0.setType(63);
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals(63, fTPFile0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType((-1));
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals((-1), fTPFile0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType((-2629));
      boolean boolean0 = fTPFile0.isFile();
      assertEquals((-2629), fTPFile0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.toString();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setRawListing("?---------    0                         -1 null");
      fTPFile0.toString();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, true);
      boolean boolean0 = fTPFile0.hasPermission(0, 0);
      assertEquals(3, fTPFile0.getType());
      assertTrue(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setUser((String) null);
      fTPFile0.getUser();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setUser(" %4d");
      fTPFile0.getUser();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isFile());
      
      fTPFile0.setType(0);
      int int0 = fTPFile0.getType();
      assertTrue(fTPFile0.isFile());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType((-4066));
      int int0 = fTPFile0.getType();
      assertEquals((-4066), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, 2);
      mockGregorianCalendar0.setLenient(false);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 3);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 2);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      mockGregorianCalendar0.setFirstDayOfWeek((-373));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals((-1L), fTPFile0.getSize());
      
      fTPFile0.setSize(0);
      fTPFile0.getSize();
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals((-1L), fTPFile0.getSize());
      
      fTPFile0.setSize(1L);
      long long0 = fTPFile0.getSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getRawListing();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("visitFileFailed");
      fTPFile0.getRawListing();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("jwir3;kl/ ?}V)j");
      fTPFile0.setName("jwir3;kl/ ?}V)j");
      fTPFile0.getName();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setLink("J1lLf(");
      fTPFile0.getLink();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setLink("");
      fTPFile0.getLink();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setHardLinkCount(179);
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals(179, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setHardLinkCount((-1182));
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals((-1182), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setGroup((String) null);
      fTPFile0.getGroup();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("prefixes");
      fTPFile0.setGroup("h8D.Pi4)Yh(1#^=");
      fTPFile0.getGroup();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, (-1403));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        fTPFile0.toFormattedString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 0, 2, 1, 1);
      mockGregorianCalendar0.setTimeZone((TimeZone) null);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        fTPFile0.toFormattedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, 2);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        fTPFile0.toFormattedString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("(R^ 5R[v}=J/~H");
      // Undeclared exception!
      try { 
        fTPFile0.setPermission(0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 2, 2, 2, 0);
      mockGregorianCalendar0.clear();
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("");
      assertEquals("?---------    0                         -1 1970-01-01 null", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1254), 3, 2582, 2582, 2721, 11);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString((String) null);
      assertEquals("?---------    0                         -1 1248-08-12 11:21:11 GMT null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("nkK[QR]$B}[`iWZ0");
      String string0 = fTPFile0.toFormattedString("$@u");
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("[Invalid: could not parse file entry]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("prefixes");
      boolean boolean0 = fTPFile0.isValid();
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isValid();
      assertTrue(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission(3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      long long0 = fTPFile0.getSize();
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.getUser();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.getRawListing();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals(0, int0);
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getGroup();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getTimestamp();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getName();
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?---------    0                         -1 0002-12-31 00:00:00 GMT null", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "A0<^F3<$");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("?---------    0                         -1 2014-02-14 20:21:21.320 GMT+00:00 null");
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(2, 2, true);
      String string0 = fTPFile0.toFormattedString("#{iMqUd VQ6[,NzX.F");
      assertEquals("?--------x    0                         -1 null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, true);
      String string0 = fTPFile0.toFormattedString();
      assertEquals("?r--------    0                         -1 null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isFile());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals(0, fTPFile0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isSymbolicLink());
      
      fTPFile0.setType(2);
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals(2, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isFile();
      assertEquals(0, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isFile();
      assertFalse(boolean0);
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isDirectory());
      
      fTPFile0.setType(1);
      boolean boolean0 = fTPFile0.isDirectory();
      assertEquals(1, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isDirectory();
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("Q'I*T");
      boolean boolean0 = fTPFile0.hasPermission(0, 0);
      assertFalse(boolean0);
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getTimestampInstant();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), 3);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      Instant instant0 = fTPFile0.getTimestampInstant();
      assertEquals((-1L), fTPFile0.getSize());
      assertNotNull(instant0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType(2);
      fTPFile0.toFormattedString();
      assertFalse(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType(1);
      fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType(0);
      fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getLink();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.toString();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setName("");
      fTPFile0.getName();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      int int0 = fTPFile0.getType();
      assertEquals(3, int0);
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(1, 1, true);
      String string0 = fTPFile0.toFormattedString();
      assertEquals("?----w----    0                         -1 null", string0);
      assertTrue(fTPFile0.isUnknown());
  }
}
