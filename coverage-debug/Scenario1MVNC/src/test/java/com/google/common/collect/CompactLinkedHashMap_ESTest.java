/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:46:40 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.CompactLinkedHashMap;
import com.google.common.collect.DescendingImmutableSortedSet;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import java.util.function.BinaryOperator;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompactLinkedHashMap_ESTest extends CompactLinkedHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompactLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> compactLinkedHashMap0 = new CompactLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1161);
      int int0 = compactLinkedHashMap0.adjustAfterRemove((-2182), 3);
      assertEquals((-2182), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompactLinkedHashMap<BoundType, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, Integer>();
      BoundType boundType0 = BoundType.CLOSED;
      Integer integer0 = new Integer(664);
      ImmutableList<BoundType> immutableList0 = ImmutableList.of(boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<BoundType> regularImmutableSortedSet0 = new RegularImmutableSortedSet<BoundType>(immutableList0, comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BinaryOperator<Integer> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Integer>) comparator1);
      Integer integer1 = compactLinkedHashMap0.merge(boundType0, integer0, binaryOperator0);
      BoundType boundType1 = BoundType.OPEN;
      Integer integer2 = compactLinkedHashMap0.putIfAbsent(boundType1, integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompactLinkedHashMap<BoundType, BoundType> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, BoundType>(322);
      compactLinkedHashMap0.init(322);
      assertEquals(0, compactLinkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      compactLinkedHashMap0.accessEntry((-547));
      assertEquals(0, compactLinkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompactLinkedHashMap<Comparable<Integer>, BoundType> compactLinkedHashMap0 = CompactLinkedHashMap.create();
      compactLinkedHashMap0.allocArrays();
      compactLinkedHashMap0.resizeEntries(6);
      assertTrue(compactLinkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(32);
      BoundType boundType0 = BoundType.OPEN;
      CompactLinkedHashMap<BoundType, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, Integer>(32);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Integer> binaryOperator0 = BinaryOperator.maxBy((Comparator<? super Integer>) comparator0);
      compactLinkedHashMap0.merge(boundType0, integer0, binaryOperator0);
      int int0 = compactLinkedHashMap0.getSuccessor(6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompactLinkedHashMap<Integer, Integer> compactLinkedHashMap0 = CompactLinkedHashMap.create();
      Integer integer0 = new Integer(3);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      compactLinkedHashMap0.computeIfAbsent(integer0, unaryOperator0);
      int int0 = compactLinkedHashMap0.firstEntryIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompactLinkedHashMap<Integer, Integer> compactLinkedHashMap0 = CompactLinkedHashMap.create();
      int int0 = compactLinkedHashMap0.firstEntryIndex();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompactLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> compactLinkedHashMap0 = new CompactLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> map0 = compactLinkedHashMap0.createHashFloodingResistantDelegate(57);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompactLinkedHashMap<BoundType, BoundType> compactLinkedHashMap0 = CompactLinkedHashMap.create();
      BoundType boundType0 = BoundType.CLOSED;
      compactLinkedHashMap0.putIfAbsent(boundType0, boundType0);
      compactLinkedHashMap0.convertToHashFloodingResistantImplementation();
      assertFalse(compactLinkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompactLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> compactLinkedHashMap0 = new CompactLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(16);
      int int0 = compactLinkedHashMap0.adjustAfterRemove(117, 669);
      assertEquals(669, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompactLinkedHashMap<DescendingImmutableSortedSet<BoundType>, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<DescendingImmutableSortedSet<BoundType>, Integer>();
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.moveLastEntry(799, 799);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompactLinkedHashMap<BoundType, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, Integer>();
      BoundType boundType0 = BoundType.CLOSED;
      Integer integer0 = new Integer((-813));
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.insertEntry((-813), boundType0, integer0, (-813), (-1659));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompactLinkedHashMap<Object, Object> compactLinkedHashMap0 = new CompactLinkedHashMap<Object, Object>();
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.init((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompactLinkedHashMap<BoundType, DescendingImmutableSortedSet<Integer>> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, DescendingImmutableSortedSet<Integer>>();
      compactLinkedHashMap0.allocArrays();
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.getSuccessor(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactLinkedHashMap.createWithExpectedSize((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompactLinkedHashMap<Integer, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<Integer, Integer>(5950);
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.createHashFloodingResistantDelegate((-849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -849
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompactLinkedHashMap<Integer, Comparable<Integer>> compactLinkedHashMap0 = CompactLinkedHashMap.createWithExpectedSize(1183);
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.convertToHashFloodingResistantImplementation();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2147483648
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompactLinkedHashMap<Object, Object> compactLinkedHashMap0 = new CompactLinkedHashMap<Object, Object>(1140);
      compactLinkedHashMap0.convertToHashFloodingResistantImplementation();
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.allocArrays();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Arrays already allocated
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(3695, true);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = new Integer(3695);
      compactLinkedHashMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.accessEntry(3695);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> compactLinkedHashMap0 = null;
      try {
        compactLinkedHashMap0 = new CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>((-1429), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompactLinkedHashMap<Integer, Integer> compactLinkedHashMap0 = null;
      try {
        compactLinkedHashMap0 = new CompactLinkedHashMap<Integer, Integer>((-321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompactLinkedHashMap<Integer, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<Integer, Integer>(37);
      compactLinkedHashMap0.convertToHashFloodingResistantImplementation();
      compactLinkedHashMap0.clear();
      assertEquals(0, compactLinkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Comparable<Integer>> compactLinkedHashMap0 = CompactLinkedHashMap.createWithExpectedSize(6);
      compactLinkedHashMap0.clear();
      assertEquals(0, compactLinkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompactLinkedHashMap<BoundType, DescendingImmutableSortedSet<Integer>> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, DescendingImmutableSortedSet<Integer>>();
      compactLinkedHashMap0.allocArrays();
      compactLinkedHashMap0.clear();
      assertTrue(compactLinkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompactLinkedHashMap<BoundType, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, Integer>(0);
      int int0 = compactLinkedHashMap0.adjustAfterRemove(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompactLinkedHashMap<BoundType, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<BoundType, Integer>(32);
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.getSuccessor(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompactLinkedHashMap<Comparable<Integer>, BoundType> compactLinkedHashMap0 = CompactLinkedHashMap.create();
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.resizeEntries(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(3695, true);
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.accessEntry(3695);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<BoundType> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super BoundType>) comparator0);
      DescendingImmutableSortedSet<BoundType> descendingImmutableSortedSet0 = new DescendingImmutableSortedSet<BoundType>(regularImmutableSortedSet0);
      Integer integer0 = new Integer(3);
      CompactLinkedHashMap<DescendingImmutableSortedSet<BoundType>, Integer> compactLinkedHashMap0 = new CompactLinkedHashMap<DescendingImmutableSortedSet<BoundType>, Integer>();
      compactLinkedHashMap0.put(descendingImmutableSortedSet0, integer0);
      // Undeclared exception!
      try { 
        compactLinkedHashMap0.moveLastEntry(3, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.common.collect.CompactHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompactLinkedHashMap<BoundType, DescendingImmutableSortedSet<Integer>> compactLinkedHashMap0 = CompactLinkedHashMap.create();
      Set<BoundType> set0 = compactLinkedHashMap0.createKeySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompactLinkedHashMap<UnmodifiableSortedMultiset<Integer>, UnmodifiableSortedMultiset<BoundType>> compactLinkedHashMap0 = CompactLinkedHashMap.createWithExpectedSize(3916);
      Set<Map.Entry<UnmodifiableSortedMultiset<Integer>, UnmodifiableSortedMultiset<BoundType>>> set0 = (Set<Map.Entry<UnmodifiableSortedMultiset<Integer>, UnmodifiableSortedMultiset<BoundType>>>)compactLinkedHashMap0.createEntrySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompactLinkedHashMap<Integer, BoundType> compactLinkedHashMap0 = new CompactLinkedHashMap<Integer, BoundType>();
      Collection<BoundType> collection0 = compactLinkedHashMap0.createValues();
      assertNotNull(collection0);
  }
}
