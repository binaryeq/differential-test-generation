/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:55:35 GMT 2024
 */

package com.google.common.primitives;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.primitives.UnsignedInts;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnsignedInts_ESTest extends UnsignedInts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      UnsignedInts.sortDescending(intArray0);
      assertArrayEquals(new int[] {12}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      UnsignedInts.LexicographicalComparator unsignedInts_LexicographicalComparator0 = UnsignedInts.LexicographicalComparator.INSTANCE;
      int[] intArray1 = new int[8];
      int int0 = unsignedInts_LexicographicalComparator0.compare(intArray0, intArray1);
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnsignedInts.LexicographicalComparator unsignedInts_LexicographicalComparator0 = UnsignedInts.LexicographicalComparator.INSTANCE;
      int[] intArray0 = new int[6];
      intArray0[0] = 1094;
      int[] intArray1 = new int[3];
      int int0 = unsignedInts_LexicographicalComparator0.compare(intArray0, intArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = UnsignedInts.saturatedCast(4294967300L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = UnsignedInts.saturatedCast((-3989L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.checkedCast(4294967296L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range: java.lang.Long@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = UnsignedInts.toLong(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = UnsignedInts.remainder(8287, 1761);
      assertEquals(1243, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = UnsignedInts.remainder((-1777), (-170));
      assertEquals((-1777), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = UnsignedInts.parseUnsignedInt("0", 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = UnsignedInts.parseUnsignedInt("12", 15);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = UnsignedInts.parseUnsignedInt("0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = UnsignedInts.parseUnsignedInt("1884");
      assertEquals(1884, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = UnsignedInts.parseUnsignedInt("4294965961");
      assertEquals((-1335), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1094;
      intArray0[1] = (-2147481914);
      intArray0[2] = (-2147478553);
      intArray0[3] = 527;
      intArray0[4] = (-582);
      intArray0[5] = 3940;
      int int0 = UnsignedInts.min(intArray0);
      assertEquals(527, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2880);
      intArray0[1] = (-518);
      intArray0[2] = (-1092);
      int int0 = UnsignedInts.min(intArray0);
      assertEquals((-2880), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1734;
      int int0 = UnsignedInts.max(intArray0);
      assertEquals(1734, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = UnsignedInts.flip(Integer.MIN_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = UnsignedInts.flip((-2146945430));
      assertEquals(538218, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = UnsignedInts.flip(5);
      assertEquals((-2147483643), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = UnsignedInts.divide((-2147477888), (-2099));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = UnsignedInts.divide((-5614), (-5614));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = UnsignedInts.divide((-100), 1);
      assertEquals((-100), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = UnsignedInts.decode("2");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = UnsignedInts.decode("4294963211");
      assertEquals((-4085), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = UnsignedInts.compare((-662), 171);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = UnsignedInts.compare(0, (-2705));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = UnsignedInts.checkedCast(3940);
      assertEquals(3940, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = UnsignedInts.checkedCast(4294967295L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.sortDescending((int[]) null, 1395, 1395);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        UnsignedInts.sortDescending(intArray0, (-1072), (-1072));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.sortDescending((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.sort((int[]) null, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        UnsignedInts.sort(intArray0, 2147480008, 2147480008);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be greater than size (java.lang.Integer@0000000003)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.sort((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.remainder(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.primitives.UnsignedInts", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.parseUnsignedInt("dwtkId", (-171));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -171 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.parseUnsignedInt((String) null, (-5226));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.parseUnsignedInt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.min((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.UnsignedInts", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.max((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.UnsignedInts", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.join("", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.UnsignedInts", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.join((String) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.ParseRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = UnsignedInts.parseUnsignedInt("2147483651", 10);
      assertEquals((-2147483645), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[4];
      UnsignedInts.sortDescending(intArray0, 0, 4);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[7];
      UnsignedInts.sort(intArray0, 0, 1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = UnsignedInts.toString((-2147483645), 10);
      assertEquals("2147483651", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = UnsignedInts.toLong(941);
      assertEquals(941L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = UnsignedInts.compare(10, 10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = UnsignedInts.toString(435);
      assertEquals("435", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.parseUnsignedInt("INSTANCE", 32);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Input INSTANCE in base 32 is not in the range of an unsigned integer
         //
         verifyException("com.google.common.primitives.UnsignedInts", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = UnsignedInts.decode("0000000000");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.decode("tM<Y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Error parsing value: tM<Y
         //
         verifyException("com.google.common.primitives.UnsignedInts", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = UnsignedInts.join("", intArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2147483632);
      int int0 = UnsignedInts.max(intArray0);
      assertEquals((-2147483632), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = UnsignedInts.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        UnsignedInts.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3018);
      int int0 = UnsignedInts.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        UnsignedInts.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = UnsignedInts.saturatedCast(4294967296L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = UnsignedInts.saturatedCast(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = UnsignedInts.saturatedCast(3L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = UnsignedInts.checkedCast(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.checkedCast((-1500L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out of range: java.lang.Long@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparator<int[]> comparator0 = UnsignedInts.lexicographicalComparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = UnsignedInts.remainder(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.parseUnsignedInt("com.google.common.base.CharMatcher$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.google.common.base.CharMatcher$1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[2];
      UnsignedInts.sort(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[13];
      UnsignedInts.LexicographicalComparator unsignedInts_LexicographicalComparator0 = UnsignedInts.LexicographicalComparator.INSTANCE;
      int[] intArray1 = new int[1];
      intArray1[0] = 13;
      int int0 = unsignedInts_LexicographicalComparator0.compare(intArray0, intArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnsignedInts.divide(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.primitives.UnsignedInts", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[10];
      String string0 = UnsignedInts.join("", intArray0);
      assertEquals("0000000000", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UnsignedInts.LexicographicalComparator unsignedInts_LexicographicalComparator0 = UnsignedInts.LexicographicalComparator.INSTANCE;
      String string0 = unsignedInts_LexicographicalComparator0.toString();
      assertEquals("UnsignedInts.lexicographicalComparator()", string0);
  }
}
