/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:54:25 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.util.concurrent.AbstractFuture;
import com.google.common.util.concurrent.ImmediateFuture;
import com.google.common.util.concurrent.ListenableFutureTask;
import com.google.common.util.concurrent.ListeningExecutorService;
import com.google.common.util.concurrent.ListeningScheduledExecutorService;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.common.util.concurrent.TrustedListenableFutureTask;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.time.Duration;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MoreExecutors_ESTest extends MoreExecutors_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2713, threadFactory0, threadPoolExecutor_AbortPolicy0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      MoreExecutors.Application moreExecutors_Application0 = new MoreExecutors.Application();
      moreExecutors_Application0.getExitingScheduledExecutorService(scheduledThreadPoolExecutor0, 2339L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MoreExecutors.Application moreExecutors_Application0 = new MoreExecutors.Application();
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4, threadFactory0);
      moreExecutors_Application0.getExitingScheduledExecutorService(scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MoreExecutors.Application moreExecutors_Application0 = new MoreExecutors.Application();
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4, threadFactory0);
      moreExecutors_Application0.getExitingExecutorService(scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      MoreExecutors.Application moreExecutors_Application0 = new MoreExecutors.Application();
      moreExecutors_Application0.addDelayedShutdownHook(scheduledThreadPoolExecutor0, 3759L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MoreExecutors.Application moreExecutors_Application0 = new MoreExecutors.Application();
      Callable<ScheduledThreadPoolExecutor> callable0 = (Callable<ScheduledThreadPoolExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ListenableFutureTask<ScheduledThreadPoolExecutor> listenableFutureTask0 = new ListenableFutureTask<ScheduledThreadPoolExecutor>(callable0);
      Thread thread0 = MoreExecutors.newThread("", listenableFutureTask0);
      moreExecutors_Application0.addShutdownHook(thread0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      Duration duration0 = Duration.ofDays(2);
      Callable<ScheduledThreadPoolExecutor> callable0 = (Callable<ScheduledThreadPoolExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(scheduledThreadPoolExecutor0).when(callable0).call();
      ImmutableSet<Callable<ScheduledThreadPoolExecutor>> immutableSet0 = ImmutableSet.of(callable0, callable0, callable0, callable0);
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.listeningDecorator((ExecutorService) scheduledThreadPoolExecutor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = MoreExecutors.invokeAnyImpl(listeningExecutorService0, (Collection<? extends Callable<ScheduledThreadPoolExecutor>>) immutableSet0, true, duration0);
      assertSame(scheduledThreadPoolExecutor1, scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(14, threadFactory0);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Duration duration0 = Duration.of(0L, chronoUnit0);
      ScheduledExecutorService scheduledExecutorService0 = MoreExecutors.getExitingScheduledExecutorService(scheduledThreadPoolExecutor0, duration0);
      assertNotNull(scheduledExecutorService0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6, threadFactory0);
      // Undeclared exception!
      try { 
        MoreExecutors.shutdownAndAwaitTermination((ExecutorService) scheduledThreadPoolExecutor0, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MoreExecutors.renamingDecorator((ScheduledExecutorService) null, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MoreExecutors.renamingDecorator((ExecutorService) null, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      ListeningScheduledExecutorService listeningScheduledExecutorService0 = MoreExecutors.listeningDecorator((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        MoreExecutors.rejectionPropagatingExecutor(listeningScheduledExecutorService0, (AbstractFuture<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        MoreExecutors.newThread((String) null, mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreExecutors.listeningDecorator((ScheduledExecutorService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L);
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.newDirectExecutorService();
      // Undeclared exception!
      try { 
        MoreExecutors.invokeAnyImpl(listeningExecutorService0, (Collection<? extends Callable<Object>>) null, true, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.MoreExecutors", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmutableList<Callable<ScheduledThreadPoolExecutor>> immutableList0 = ImmutableList.of();
      Duration duration0 = Duration.ofSeconds(1022L, (-2175L));
      // Undeclared exception!
      try { 
        MoreExecutors.invokeAnyImpl((ListeningExecutorService) null, (Collection<? extends Callable<ScheduledThreadPoolExecutor>>) immutableList0, false, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5);
      // Undeclared exception!
      try { 
        MoreExecutors.getExitingExecutorService((ThreadPoolExecutor) scheduledThreadPoolExecutor0, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        MoreExecutors.getExitingExecutorService((ThreadPoolExecutor) null, 0L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.MoreExecutors", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2713, threadFactory0, threadPoolExecutor_AbortPolicy0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = MoreExecutors.shutdownAndAwaitTermination((ExecutorService) scheduledThreadPoolExecutor0, 2339L, timeUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(14, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ExecutorService executorService0 = MoreExecutors.getExitingExecutorService((ThreadPoolExecutor) scheduledThreadPoolExecutor0, (-537L), timeUnit0);
      assertNotNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledExecutorService scheduledExecutorService0 = MoreExecutors.getExitingScheduledExecutorService(scheduledThreadPoolExecutor0, (long) 0, timeUnit0);
      assertNotNull(scheduledExecutorService0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Duration duration0 = Duration.ofDays(0);
      Callable<ScheduledThreadPoolExecutor> callable0 = (Callable<ScheduledThreadPoolExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ImmutableSet<Callable<ScheduledThreadPoolExecutor>> immutableSet0 = ImmutableSet.of(callable0, callable0, callable0, callable0);
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.listeningDecorator((ExecutorService) scheduledThreadPoolExecutor0);
      try { 
        MoreExecutors.invokeAnyImpl(listeningExecutorService0, (Collection<? extends Callable<ScheduledThreadPoolExecutor>>) immutableSet0, true, duration0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.MoreExecutors", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Duration duration0 = Duration.ofSeconds(2301L, 562L);
      ListeningScheduledExecutorService listeningScheduledExecutorService0 = MoreExecutors.listeningDecorator((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      Callable<ScheduledThreadPoolExecutor> callable0 = (Callable<ScheduledThreadPoolExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Callable<ScheduledThreadPoolExecutor> callable1 = (Callable<ScheduledThreadPoolExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      ImmutableSet<Callable<ScheduledThreadPoolExecutor>> immutableSet0 = ImmutableSet.of(callable0, callable0, callable1, callable1);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = MoreExecutors.invokeAnyImpl((ListeningExecutorService) listeningScheduledExecutorService0, (Collection<? extends Callable<ScheduledThreadPoolExecutor>>) immutableSet0, false, duration0);
      assertNull(scheduledThreadPoolExecutor1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Duration duration0 = Duration.ofDays(0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(callable0).call();
      ImmutableList<Callable<Object>> immutableList0 = ImmutableList.of(callable0, callable0, callable0, callable0, callable0, callable0);
      ListeningScheduledExecutorService listeningScheduledExecutorService0 = MoreExecutors.listeningDecorator((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      Object object0 = MoreExecutors.invokeAnyImpl((ListeningExecutorService) listeningScheduledExecutorService0, (Collection<? extends Callable<Object>>) immutableList0, false, duration0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.newDirectExecutorService();
      Vector<Callable<ScheduledThreadPoolExecutor>> vector0 = new Vector<Callable<ScheduledThreadPoolExecutor>>();
      // Undeclared exception!
      try { 
        MoreExecutors.invokeAnyImpl(listeningExecutorService0, (Collection<? extends Callable<ScheduledThreadPoolExecutor>>) vector0, true, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      ListeningScheduledExecutorService listeningScheduledExecutorService0 = MoreExecutors.listeningDecorator((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      ListeningScheduledExecutorService listeningScheduledExecutorService1 = MoreExecutors.listeningDecorator((ScheduledExecutorService) listeningScheduledExecutorService0);
      assertSame(listeningScheduledExecutorService0, listeningScheduledExecutorService1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreExecutors.listeningDecorator((ExecutorService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.listeningDecorator((ExecutorService) scheduledThreadPoolExecutor0);
      ListeningExecutorService listeningExecutorService1 = MoreExecutors.listeningDecorator((ExecutorService) listeningExecutorService0);
      assertSame(listeningExecutorService1, listeningExecutorService0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(24);
      ListeningScheduledExecutorService listeningScheduledExecutorService0 = MoreExecutors.listeningDecorator((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      MoreExecutors.addDelayedShutdownHook((ExecutorService) listeningScheduledExecutorService0, 1000L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Duration duration0 = Duration.ofDays(0);
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.listeningDecorator((ExecutorService) scheduledThreadPoolExecutor0);
      boolean boolean0 = MoreExecutors.shutdownAndAwaitTermination((ExecutorService) listeningExecutorService0, duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.newDirectExecutorService();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "Bi,/FD}%+p-/06");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Bi,/FD}%+p-/06", hashMap0, sQLIntegrityConstraintViolationException0);
      ImmediateFuture.ImmediateFailedFuture<ScheduledThreadPoolExecutor> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<ScheduledThreadPoolExecutor>(sQLClientInfoException0);
      Executor executor0 = MoreExecutors.rejectionPropagatingExecutor(listeningExecutorService0, immediateFuture_ImmediateFailedFuture0);
      assertNotNull(executor0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(9);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Executor executor0 = MoreExecutors.renamingDecorator(scheduledThreadPoolExecutor0, supplier0);
      assertNotNull(executor0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(14, threadFactory0);
      ExecutorService executorService0 = MoreExecutors.getExitingExecutorService((ThreadPoolExecutor) scheduledThreadPoolExecutor0);
      assertNotNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      Duration duration0 = Duration.of((-2566L), temporalUnit0);
      MoreExecutors.addDelayedShutdownHook((ExecutorService) forkJoinPool0, duration0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ScheduledExecutorService scheduledExecutorService0 = MoreExecutors.renamingDecorator(scheduledThreadPoolExecutor0, supplier0);
      assertNotNull(scheduledExecutorService0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.newDirectExecutorService();
      Executor executor0 = MoreExecutors.newSequentialExecutor(listeningExecutorService0);
      assertNotNull(executor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.newDirectExecutorService();
      Duration duration0 = Duration.ofMinutes(0L);
      boolean boolean0 = MoreExecutors.shutdownAndAwaitTermination((ExecutorService) listeningExecutorService0, duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.ofDays(1000L);
      // Undeclared exception!
      try { 
        MoreExecutors.getExitingScheduledExecutorService((ScheduledThreadPoolExecutor) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.MoreExecutors", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MoreExecutors.renamingDecorator((Executor) null, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Duration duration0 = Duration.ofDays(0);
      ExecutorService executorService0 = MoreExecutors.getExitingExecutorService((ThreadPoolExecutor) scheduledThreadPoolExecutor0, duration0);
      assertNotNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThreadFactory threadFactory0 = MoreExecutors.platformThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4, threadFactory0);
      ScheduledExecutorService scheduledExecutorService0 = MoreExecutors.getExitingScheduledExecutorService(scheduledThreadPoolExecutor0);
      assertNotNull(scheduledExecutorService0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListeningExecutorService listeningExecutorService0 = MoreExecutors.newDirectExecutorService();
      Duration duration0 = Duration.ofSeconds((-833L), 461845907L);
      Callable<ScheduledThreadPoolExecutor> callable0 = (Callable<ScheduledThreadPoolExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ImmutableSet<Callable<ScheduledThreadPoolExecutor>> immutableSet0 = ImmutableSet.of(callable0, callable0, callable0, callable0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = MoreExecutors.invokeAnyImpl(listeningExecutorService0, (Collection<? extends Callable<ScheduledThreadPoolExecutor>>) immutableSet0, true, duration0);
      assertNull(scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(45);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ExecutorService executorService0 = MoreExecutors.renamingDecorator(scheduledThreadPoolExecutor0, supplier0);
      assertNotNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Executor executor0 = MoreExecutors.directExecutor();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(callable0);
      Executor executor1 = MoreExecutors.rejectionPropagatingExecutor(executor0, trustedListenableFutureTask0);
      assertSame(executor1, executor0);
  }
}
