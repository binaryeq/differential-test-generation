/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:09:13 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMapEntry;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Multisets;
import com.google.common.collect.RegularImmutableMap;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.io.InvalidObjectException;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmutableListMultimap_ESTest extends ImmutableListMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, boundType1, boundType0, boundType0, boundType0, boundType1, boundType0, boundType1, boundType0, boundType1);
      assertEquals(5, immutableListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, boundType1, boundType0, boundType0, boundType0, boundType1, boundType0, boundType0, boundType1, boundType1);
      assertEquals(5, immutableListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmutableListMultimap.Builder<InvalidObjectException, Locale.Category> immutableListMultimap_Builder0 = ImmutableListMultimap.builder();
      InvalidObjectException invalidObjectException0 = new InvalidObjectException((String) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ImmutableListMultimap.Builder<InvalidObjectException, Locale.Category> immutableListMultimap_Builder1 = immutableListMultimap_Builder0.put(invalidObjectException0, locale_Category0);
      assertSame(immutableListMultimap_Builder1, immutableListMultimap_Builder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmutableListMultimap<AbstractMap.SimpleImmutableEntry<InvalidObjectException, Locale.FilteringMode>, Locale.FilteringMode> immutableListMultimap0 = ImmutableListMultimap.of();
      ImmutableListMultimap<Locale.FilteringMode, AbstractMap.SimpleImmutableEntry<InvalidObjectException, Locale.FilteringMode>> immutableListMultimap1 = immutableListMultimap0.inverse();
      assertEquals(0, immutableListMultimap1.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImmutableListMultimap<Comparable<InvalidObjectException>, Locale.FilteringMode> immutableListMultimap0 = ImmutableListMultimap.of();
      Comparable<InvalidObjectException> comparable0 = (Comparable<InvalidObjectException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ImmutableList<Locale.FilteringMode> immutableList0 = immutableListMultimap0.get(comparable0);
      assertEquals(0, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      ImmutableListMultimap<BoundType, BoundType> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0);
      ImmutableList<BoundType> immutableList0 = immutableListMultimap0.get(boundType0);
      assertTrue(immutableList0.contains(boundType0));
      assertEquals(5, immutableListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ImmutableListMultimap.Builder<AbstractMap.SimpleImmutableEntry<InvalidObjectException, Locale.Category>, UnmodifiableSortedMultiset<InvalidObjectException>> immutableListMultimap_Builder0 = ImmutableListMultimap.builder();
      Comparator<UnmodifiableSortedMultiset<InvalidObjectException>> comparator0 = (Comparator<UnmodifiableSortedMultiset<InvalidObjectException>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableListMultimap.Builder<AbstractMap.SimpleImmutableEntry<InvalidObjectException, Locale.Category>, UnmodifiableSortedMultiset<InvalidObjectException>> immutableListMultimap_Builder1 = immutableListMultimap_Builder0.orderValuesBy(comparator0);
      assertSame(immutableListMultimap_Builder0, immutableListMultimap_Builder1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ImmutableListMultimap.Builder<Locale.FilteringMode, Locale.FilteringMode> immutableListMultimap_Builder0 = new ImmutableListMultimap.Builder<Locale.FilteringMode, Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Map.Entry<Locale.FilteringMode, Locale.FilteringMode> map_Entry0 = ImmutableMap.entryOf(locale_FilteringMode0, locale_FilteringMode0);
      ImmutableMapEntry<Locale.FilteringMode, Locale.FilteringMode> immutableMapEntry0 = RegularImmutableMap.makeImmutable((Map.Entry<Locale.FilteringMode, Locale.FilteringMode>) map_Entry0);
      ImmutableListMultimap.Builder<Locale.FilteringMode, Locale.FilteringMode> immutableListMultimap_Builder1 = immutableListMultimap_Builder0.put((Map.Entry<? extends Locale.FilteringMode, ? extends Locale.FilteringMode>) immutableMapEntry0);
      // Undeclared exception!
      try { 
        immutableListMultimap_Builder1.combine(immutableListMultimap_Builder0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ImmutableListMultimap.Builder<AbstractMap.SimpleImmutableEntry<InvalidObjectException, Locale.Category>, UnmodifiableSortedMultiset<InvalidObjectException>> immutableListMultimap_Builder0 = ImmutableListMultimap.builder();
      ImmutableSetMultimap.Builder<AbstractMap.SimpleImmutableEntry<InvalidObjectException, Locale.Category>, UnmodifiableSortedMultiset<InvalidObjectException>> immutableSetMultimap_Builder0 = ImmutableSetMultimap.builder();
      ImmutableListMultimap.Builder<AbstractMap.SimpleImmutableEntry<InvalidObjectException, Locale.Category>, UnmodifiableSortedMultiset<InvalidObjectException>> immutableListMultimap_Builder1 = immutableListMultimap_Builder0.combine(immutableSetMultimap_Builder0);
      assertSame(immutableListMultimap_Builder1, immutableListMultimap_Builder0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Comparator<InvalidObjectException> comparator0 = (Comparator<InvalidObjectException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<InvalidObjectException> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super InvalidObjectException>) comparator0);
      long[] longArray0 = new long[2];
      RegularImmutableSortedMultiset<InvalidObjectException> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<InvalidObjectException>(regularImmutableSortedSet0, longArray0, 0, 0);
      UnmodifiableSortedMultiset<InvalidObjectException> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<InvalidObjectException>(regularImmutableSortedMultiset0);
      // Undeclared exception!
      try { 
        ImmutableListMultimap.of((AbstractMap.SimpleImmutableEntry<BoundType, Multisets.UnmodifiableMultiset>) null, (Multisets.UnmodifiableMultiset<InvalidObjectException>) unmodifiableSortedMultiset0, (AbstractMap.SimpleImmutableEntry<BoundType, Multisets.UnmodifiableMultiset>) null, (Multisets.UnmodifiableMultiset<InvalidObjectException>) unmodifiableSortedMultiset0, (AbstractMap.SimpleImmutableEntry<BoundType, Multisets.UnmodifiableMultiset>) null, (Multisets.UnmodifiableMultiset<InvalidObjectException>) unmodifiableSortedMultiset0, (AbstractMap.SimpleImmutableEntry<BoundType, Multisets.UnmodifiableMultiset>) null, (Multisets.UnmodifiableMultiset<InvalidObjectException>) unmodifiableSortedMultiset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=com.google.common.collect.RegularImmutableSortedMultiset@0000000002
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }
}
