/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:56:46 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.CharMatcher;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.BoundType;
import com.google.common.collect.FilteredKeyListMultimap;
import com.google.common.collect.FilteredKeyMultimap;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.Range;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnel;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilteredKeyMultimap_ESTest extends FilteredKeyMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1871L);
      CharMatcher charMatcher0 = CharMatcher.forPredicate(bloomFilter0);
      ImmutableSetMultimap<CharMatcher, CharMatcher> immutableSetMultimap0 = ImmutableSetMultimap.of(charMatcher0, charMatcher0);
      FilteredKeyMultimap<CharMatcher, CharMatcher> filteredKeyMultimap0 = new FilteredKeyMultimap<CharMatcher, CharMatcher>(immutableSetMultimap0, bloomFilter0);
      Collection<CharMatcher> collection0 = filteredKeyMultimap0.removeAll(charMatcher0);
      assertFalse(collection0.contains(charMatcher0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMultimap<Locale.Category, Locale.Category> hashMultimap0 = HashMultimap.create();
      ArrayListMultimap<Locale.Category, Locale.Category> arrayListMultimap0 = ArrayListMultimap.create((Multimap<? extends Locale.Category, ? extends Locale.Category>) hashMultimap0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Range<Locale.Category> range0 = Range.atMost(locale_Category0);
      FilteredKeyListMultimap<Locale.Category, Locale.Category> filteredKeyListMultimap0 = new FilteredKeyListMultimap<Locale.Category, Locale.Category>(arrayListMultimap0, range0);
      boolean boolean0 = filteredKeyListMultimap0.containsKey(locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<CharMatcher> linkedList0 = new LinkedList<CharMatcher>();
      FilteredKeyMultimap.AddRejectingList<LinkedList<CharMatcher>, CharMatcher> filteredKeyMultimap_AddRejectingList0 = new FilteredKeyMultimap.AddRejectingList<LinkedList<CharMatcher>, CharMatcher>(linkedList0);
      // Undeclared exception!
      try { 
        filteredKeyMultimap_AddRejectingList0.remove(486);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      FilteredKeyMultimap.AddRejectingList<CharMatcher, BoundType> filteredKeyMultimap_AddRejectingList0 = new FilteredKeyMultimap.AddRejectingList<CharMatcher, BoundType>(charMatcher0);
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedMultiset<BoundType> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<BoundType>(comparator0);
      // Undeclared exception!
      try { 
        filteredKeyMultimap_AddRejectingList0.addAll((Collection<? extends BoundType>) regularImmutableSortedMultiset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key does not satisfy predicate: CharMatcher.whitespace()
         //
         verifyException("com.google.common.collect.FilteredKeyMultimap$AddRejectingList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FilteredKeyMultimap.AddRejectingList<Locale.Category, CharMatcher> filteredKeyMultimap_AddRejectingList0 = new FilteredKeyMultimap.AddRejectingList<Locale.Category, CharMatcher>(locale_Category0);
      CharMatcher charMatcher0 = CharMatcher.is('\\');
      // Undeclared exception!
      try { 
        filteredKeyMultimap_AddRejectingList0.add(charMatcher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key does not satisfy predicate: DISPLAY
         //
         verifyException("com.google.common.collect.FilteredKeyMultimap$AddRejectingList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comparable<CharMatcher> comparable0 = (Comparable<CharMatcher>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      FilteredKeyMultimap.AddRejectingSet<Comparable<CharMatcher>, CharMatcher> filteredKeyMultimap_AddRejectingSet0 = new FilteredKeyMultimap.AddRejectingSet<Comparable<CharMatcher>, CharMatcher>(comparable0);
      Set<CharMatcher> set0 = filteredKeyMultimap_AddRejectingSet0.delegate();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1871L);
      CharMatcher charMatcher0 = CharMatcher.forPredicate(bloomFilter0);
      Comparable<CharMatcher> comparable0 = (Comparable<CharMatcher>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      FilteredKeyMultimap.AddRejectingSet<Comparable<CharMatcher>, CharMatcher> filteredKeyMultimap_AddRejectingSet0 = new FilteredKeyMultimap.AddRejectingSet<Comparable<CharMatcher>, CharMatcher>(comparable0);
      // Undeclared exception!
      try { 
        filteredKeyMultimap_AddRejectingSet0.add(charMatcher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key does not satisfy predicate: null
         //
         verifyException("com.google.common.collect.FilteredKeyMultimap$AddRejectingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      ImmutableMultimap<CharMatcher, CharMatcher> immutableMultimap0 = ImmutableMultimap.of(charMatcher0, charMatcher0, charMatcher0, charMatcher0, charMatcher0, charMatcher0, charMatcher0, charMatcher0);
      Funnel<CharMatcher> funnel0 = (Funnel<CharMatcher>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<CharMatcher> bloomFilter0 = BloomFilter.create((Funnel<? super CharMatcher>) funnel0, 0);
      FilteredKeyMultimap<CharMatcher, CharMatcher> filteredKeyMultimap0 = new FilteredKeyMultimap<CharMatcher, CharMatcher>(immutableMultimap0, bloomFilter0);
      Map<CharMatcher, Collection<CharMatcher>> map0 = filteredKeyMultimap0.createAsMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ImmutableListMultimap<Locale.FilteringMode, Locale.FilteringMode> immutableListMultimap0 = ImmutableListMultimap.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Range<Locale.FilteringMode> range0 = Range.all();
      FilteredKeyListMultimap<Locale.FilteringMode, Locale.FilteringMode> filteredKeyListMultimap0 = new FilteredKeyListMultimap<Locale.FilteringMode, Locale.FilteringMode>(immutableListMultimap0, range0);
      // Undeclared exception!
      try { 
        filteredKeyListMultimap0.entryIterator();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // should never be called
         //
      }
  }
}
