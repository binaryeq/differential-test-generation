/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:22:49 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableCollection;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.JdkBackedImmutableMap;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JdkBackedImmutableMap_ESTest extends JdkBackedImmutableMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        JdkBackedImmutableMap.create((-1), (Map.Entry<Object, Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -1
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ImmutableMap<Object, Comparable<Object>> immutableMap0 = ImmutableMap.of();
      JdkBackedImmutableMap<Object, Comparable<Object>> jdkBackedImmutableMap0 = new JdkBackedImmutableMap<Object, Comparable<Object>>(immutableMap0, (ImmutableList<Map.Entry<Object, Comparable<Object>>>) null);
      ImmutableCollection<Comparable<Object>> immutableCollection0 = jdkBackedImmutableMap0.createValues();
      assertNotNull(immutableCollection0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmutableMap<Object, Comparable<Object>> immutableMap0 = ImmutableMap.of();
      JdkBackedImmutableMap<Object, Comparable<Object>> jdkBackedImmutableMap0 = new JdkBackedImmutableMap<Object, Comparable<Object>>(immutableMap0, (ImmutableList<Map.Entry<Object, Comparable<Object>>>) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jdkBackedImmutableMap0.forEach(biConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.JdkBackedImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmutableMap<Object, Comparable<Object>> immutableMap0 = ImmutableMap.of();
      JdkBackedImmutableMap<Object, Comparable<Object>> jdkBackedImmutableMap0 = new JdkBackedImmutableMap<Object, Comparable<Object>>(immutableMap0, (ImmutableList<Map.Entry<Object, Comparable<Object>>>) null);
      ImmutableSet<Map.Entry<Object, Comparable<Object>>> immutableSet0 = (ImmutableSet<Map.Entry<Object, Comparable<Object>>>)jdkBackedImmutableMap0.createEntrySet();
      assertNotNull(immutableSet0);
  }
}
