/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:33:21 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ByFunctionOrdering;
import com.google.common.collect.ComparatorOrdering;
import com.google.common.collect.NullsFirstOrdering;
import com.google.common.collect.Ordering;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Locale;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NullsFirstOrdering_ESTest extends NullsFirstOrdering_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorOrdering<Object> comparatorOrdering0 = new ComparatorOrdering<Object>(comparator0);
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>(comparatorOrdering0);
      NullsFirstOrdering<ByFunctionOrdering<Object, Object>> nullsFirstOrdering1 = new NullsFirstOrdering<ByFunctionOrdering<Object, Object>>(nullsFirstOrdering0);
      nullsFirstOrdering1.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.usingToString();
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>(ordering0);
      NullsFirstOrdering<NullsFirstOrdering<Object>> nullsFirstOrdering1 = new NullsFirstOrdering<NullsFirstOrdering<Object>>(ordering0);
      NullsFirstOrdering<Object> nullsFirstOrdering2 = new NullsFirstOrdering<Object>(ordering0);
      int int0 = nullsFirstOrdering0.compare(nullsFirstOrdering2, nullsFirstOrdering1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullsFirstOrdering<Integer> nullsFirstOrdering0 = new NullsFirstOrdering<Integer>((Ordering<? super Integer>) null);
      // Undeclared exception!
      try { 
        nullsFirstOrdering0.reverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.NullsFirstOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>((Ordering<? super Object>) null);
      // Undeclared exception!
      try { 
        nullsFirstOrdering0.nullsLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.NullsFirstOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>((Ordering<? super Object>) null);
      NullsFirstOrdering<BoundType> nullsFirstOrdering1 = new NullsFirstOrdering<BoundType>((Ordering<? super BoundType>) null);
      // Undeclared exception!
      try { 
        nullsFirstOrdering0.compare(nullsFirstOrdering1, nullsFirstOrdering0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.NullsFirstOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.arbitrary();
      NullsFirstOrdering<BoundType> nullsFirstOrdering0 = new NullsFirstOrdering<BoundType>(ordering0);
      BoundType boundType0 = BoundType.CLOSED;
      boolean boolean0 = nullsFirstOrdering0.equals(boundType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.allEqual();
      NullsFirstOrdering<BoundType> nullsFirstOrdering0 = new NullsFirstOrdering<BoundType>(ordering0);
      NullsFirstOrdering<BoundType>[] nullsFirstOrderingArray0 = (NullsFirstOrdering<BoundType>[]) Array.newInstance(NullsFirstOrdering.class, 4);
      nullsFirstOrderingArray0[0] = nullsFirstOrdering0;
      nullsFirstOrderingArray0[1] = nullsFirstOrdering0;
      nullsFirstOrderingArray0[2] = nullsFirstOrdering0;
      nullsFirstOrderingArray0[3] = nullsFirstOrdering0;
      // Undeclared exception!
      try { 
        Ordering.explicit(nullsFirstOrdering0, nullsFirstOrderingArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: Ordering.allEqual().nullsFirst()=1 and Ordering.allEqual().nullsFirst()=0
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.usingToString();
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>(ordering0);
      NullsFirstOrdering<Object> nullsFirstOrdering1 = new NullsFirstOrdering<Object>(ordering0);
      boolean boolean0 = nullsFirstOrdering1.equals(nullsFirstOrdering0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>((Ordering<? super Object>) null);
      int int0 = nullsFirstOrdering0.compare((Object) null, locale_FilteringMode0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.arbitrary();
      NullsFirstOrdering<BoundType> nullsFirstOrdering0 = new NullsFirstOrdering<BoundType>(ordering0);
      BoundType boundType0 = BoundType.CLOSED;
      int int0 = nullsFirstOrdering0.compare(boundType0, boundType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.arbitrary();
      NullsFirstOrdering<Integer> nullsFirstOrdering0 = new NullsFirstOrdering<Integer>(ordering0);
      Ordering<Integer> ordering1 = nullsFirstOrdering0.nullsLast();
      assertNotNull(ordering1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>((Ordering<? super Object>) null);
      NullsFirstOrdering<Locale.FilteringMode> nullsFirstOrdering1 = new NullsFirstOrdering<Locale.FilteringMode>(nullsFirstOrdering0);
      Ordering<Locale.FilteringMode> ordering0 = nullsFirstOrdering1.nullsFirst();
      assertNotNull(ordering0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.usingToString();
      NullsFirstOrdering<Comparable<Object>> nullsFirstOrdering0 = new NullsFirstOrdering<Comparable<Object>>(ordering0);
      String string0 = nullsFirstOrdering0.toString();
      assertEquals("Ordering.usingToString().nullsFirst()", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.arbitrary();
      NullsFirstOrdering<Object> nullsFirstOrdering0 = new NullsFirstOrdering<Object>(ordering0);
      Ordering<NullsFirstOrdering<BoundType>> ordering1 = nullsFirstOrdering0.reverse();
      assertNotNull(ordering1);
  }
}
