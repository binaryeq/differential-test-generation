/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:24:02 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyContiguousSet;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.LexicographicalOrdering;
import com.google.common.collect.Ordering;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.util.Comparator;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LexicographicalOrdering_ESTest extends LexicographicalOrdering_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comparator<Object> comparator0 = Comparator.nullsLast((Comparator<? super Object>) null);
      LexicographicalOrdering<BoundType> lexicographicalOrdering0 = new LexicographicalOrdering<BoundType>(comparator0);
      EmptyContiguousSet<BoundType> emptyContiguousSet0 = new EmptyContiguousSet<BoundType>((DiscreteDomain<BoundType>) null);
      ImmutableList<BoundType> immutableList0 = emptyContiguousSet0.asList();
      int int0 = lexicographicalOrdering0.compare((Iterable<BoundType>) immutableList0, (Iterable<BoundType>) emptyContiguousSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.usingToString();
      LexicographicalOrdering<SQLNonTransientConnectionException> lexicographicalOrdering0 = new LexicographicalOrdering<SQLNonTransientConnectionException>(ordering0);
      SQLDataException sQLDataException0 = new SQLDataException("Ay<I]v$", "TF_j~Nd{@JLV#", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R", sQLDataException0);
      boolean boolean0 = lexicographicalOrdering0.equals(sQLNonTransientConnectionException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      LexicographicalOrdering<UnmodifiableSortedMultiset<Object>> lexicographicalOrdering0 = new LexicographicalOrdering<UnmodifiableSortedMultiset<Object>>(comparator0);
      LexicographicalOrdering<UnmodifiableSortedMultiset<SQLNonTransientConnectionException>> lexicographicalOrdering1 = new LexicographicalOrdering<UnmodifiableSortedMultiset<SQLNonTransientConnectionException>>(comparator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) lexicographicalOrdering1;
      objectArray0[1] = (Object) lexicographicalOrdering0;
      // Undeclared exception!
      try { 
        Ordering.explicit((Object) lexicographicalOrdering0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: java.util.Comparator$$Lambda$148/1040131394@414b3f9d.lexicographical()=2 and java.util.Comparator$$Lambda$148/1040131394@414b3f9d.lexicographical()=0
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.usingToString();
      LexicographicalOrdering<BoundType> lexicographicalOrdering0 = new LexicographicalOrdering<BoundType>(ordering0);
      LexicographicalOrdering<BoundType> lexicographicalOrdering1 = new LexicographicalOrdering<BoundType>(ordering0);
      boolean boolean0 = lexicographicalOrdering0.equals(lexicographicalOrdering1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      LexicographicalOrdering<LexicographicalOrdering<Object>> lexicographicalOrdering0 = new LexicographicalOrdering<LexicographicalOrdering<Object>>(comparator0);
      LexicographicalOrdering<Object> lexicographicalOrdering1 = new LexicographicalOrdering<Object>(comparator0);
      ImmutableMultiset<LexicographicalOrdering<Object>> immutableMultiset0 = ImmutableMultiset.of(lexicographicalOrdering1, lexicographicalOrdering1);
      int int0 = lexicographicalOrdering0.compare((Iterable<LexicographicalOrdering<Object>>) immutableMultiset0, (Iterable<LexicographicalOrdering<Object>>) immutableMultiset0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.usingToString();
      LexicographicalOrdering<Object> lexicographicalOrdering0 = new LexicographicalOrdering<Object>(ordering0);
      lexicographicalOrdering0.hashCode();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      LexicographicalOrdering<Object> lexicographicalOrdering0 = new LexicographicalOrdering<Object>(comparator0);
      String string0 = lexicographicalOrdering0.toString();
      assertNotNull(string0);
  }
}
