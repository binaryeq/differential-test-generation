/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:52:33 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.ImmutableRangeMap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Range;
import com.google.common.collect.RangeMap;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.SortedMultiset;
import com.google.common.collect.TreeRangeMap;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeRangeMap_ESTest extends TreeRangeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.greaterThan(integer0);
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      treeRangeMap0.putCoalescing(range0, integer0);
      Integer integer1 = new Integer((-867));
      BoundType boundType0 = BoundType.CLOSED;
      Range<Integer> range1 = Range.upTo(integer1, boundType0);
      RangeMap<Integer, Object> rangeMap0 = treeRangeMap0.subRangeMap(range1);
      treeRangeMap0.putAll(rangeMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeRangeMap<Integer, Range<Integer>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer(0);
      Range<Integer> range0 = Range.openClosed(integer0, integer1);
      BiFunction<Object, Object, Range<Integer>> biFunction0 = (BiFunction<Object, Object, Range<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeRangeMap0.merge(range0, range0, biFunction0);
      Integer integer2 = new Integer(1503);
      Range<Integer> range1 = Range.open(integer0, integer2);
      BiFunction<Object, Object, Range<Integer>> biFunction1 = (BiFunction<Object, Object, Range<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      treeRangeMap0.merge(range1, range1, biFunction1);
      assertTrue(range1.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeRangeMap<Integer, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.lessThan(integer0);
      UnmodifiableSortedMultiset<Locale.FilteringMode> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<Locale.FilteringMode>((SortedMultiset<Locale.FilteringMode>) null);
      treeRangeMap0.putCoalescing(range0, unmodifiableSortedMultiset0);
      BoundType boundType0 = BoundType.CLOSED;
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(46);
      Range<Integer> range1 = Range.range(integer1, boundType0, integer2, boundType0);
      treeRangeMap0.remove(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      Map<Range<Integer>, Object> map0 = treeRangeMap0.asMapOfRanges();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.greaterThan(integer0);
      TreeRangeMap<Integer, ContiguousSet<Integer>> treeRangeMap0 = TreeRangeMap.create();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      treeRangeMap0.putCoalescing(range0, regularContiguousSet0);
      Range<Integer> range1 = treeRangeMap0.span();
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.lessThan(integer0);
      TreeRangeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> treeRangeMap0 = TreeRangeMap.create();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      ImmutableRangeMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> immutableRangeMap0 = ImmutableRangeMap.of(range0, abstractMap_SimpleImmutableEntry0);
      treeRangeMap0.putAll(immutableRangeMap0);
      Range<Integer> range1 = treeRangeMap0.span();
      assertTrue(range1.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.subRangeMap((Range<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeRangeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeRangeMap<Integer, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.remove((Range<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeRangeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-862048943));
      // Undeclared exception!
      try { 
        treeRangeMap0.putCoalescing((Range<Integer>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeRangeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1214));
      Range<Integer> range0 = Range.atMost(integer0);
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.putCoalescing(range0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.putAll((RangeMap<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeRangeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.put((Range<Integer>) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeRangeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Range<Integer> range0 = Range.all();
      // Undeclared exception!
      try { 
        treeRangeMap0.put(range0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        treeRangeMap0.merge((Range<Integer>) null, integer0, (BiFunction<? super Integer, ? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeRangeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.getEntry((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.get((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeRangeMap<Integer, Locale.FilteringMode> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-150));
      Range<Integer> range0 = Range.greaterThan(integer0);
      treeRangeMap0.remove(range0);
      assertTrue(range0.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(45);
      BoundType boundType0 = BoundType.OPEN;
      BoundType boundType1 = BoundType.CLOSED;
      Range<Integer> range0 = Range.range(integer0, boundType0, integer0, boundType1);
      treeRangeMap0.put(range0, (Object) null);
      assertTrue(range0.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-862048943));
      Range<Integer> range0 = Range.atMost(integer0);
      treeRangeMap0.put(range0, integer0);
      Integer integer1 = new Integer((-3255));
      Map.Entry<Range<Integer>, Integer> map_Entry0 = treeRangeMap0.getEntry(integer1);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeRangeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(721);
      Map.Entry<Range<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> map_Entry0 = treeRangeMap0.getEntry(integer0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-862048943));
      Range<Integer> range0 = Range.atMost(integer0);
      treeRangeMap0.put(range0, integer0);
      Map.Entry<Range<Integer>, Integer> map_Entry0 = treeRangeMap0.getEntry(integer0);
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeRangeMap<Integer, ContiguousSet<Integer>> treeRangeMap0 = TreeRangeMap.create();
      TreeRangeMap<Locale.FilteringMode, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap1 = TreeRangeMap.create();
      boolean boolean0 = treeRangeMap1.equals(treeRangeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = treeRangeMap0.equals(locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.greaterThan(integer0);
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      treeRangeMap0.putCoalescing(range0, integer0);
      BoundType boundType0 = BoundType.CLOSED;
      Range<Integer> range1 = Range.upTo(integer0, boundType0);
      RangeMap<Integer, Object> rangeMap0 = treeRangeMap0.subRangeMap(range1);
      treeRangeMap0.putAll(rangeMap0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.greaterThan(integer0);
      treeRangeMap0.putCoalescing(range0, integer0);
      RangeMap<Integer, Object> rangeMap0 = treeRangeMap0.subRangeMap(range0);
      treeRangeMap0.putAll(rangeMap0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeRangeMap<Integer, ContiguousSet<Integer>> treeRangeMap0 = TreeRangeMap.create();
      Range<Integer> range0 = Range.all();
      RangeMap<Integer, ContiguousSet<Integer>> rangeMap0 = treeRangeMap0.subRangeMap(range0);
      assertNotNull(rangeMap0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeRangeMap<Integer, Range<Integer>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer(0);
      Range<Integer> range0 = Range.openClosed(integer0, integer1);
      BiFunction<Object, Object, Range<Integer>> biFunction0 = (BiFunction<Object, Object, Range<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeRangeMap0.merge(range0, range0, biFunction0);
      BiFunction<Object, Object, Range<Integer>> biFunction1 = (BiFunction<Object, Object, Range<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      treeRangeMap0.merge(range0, range0, biFunction1);
      assertTrue(range0.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-862048943));
      Range<Integer> range0 = Range.atMost(integer0);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeRangeMap0.merge(range0, (Integer) null, biFunction0);
      assertTrue(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Range<Integer> range0 = Range.openClosed(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Range<Integer>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Range<Integer>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      BinaryOperator<Integer> binaryOperator0 = BinaryOperator.maxBy((Comparator<? super Integer>) comparator1);
      treeRangeMap0.merge(range0, integer0, binaryOperator0);
      assertFalse(regularImmutableSortedSet0.contains(range0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.atMost(integer0);
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      treeRangeMap0.put(range0, integer0);
      Range<Integer> range1 = Range.singleton(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      BinaryOperator<Integer> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Integer>) comparator0);
      treeRangeMap0.merge(range1, integer0, binaryOperator0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeRangeMap<Integer, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.lessThan(integer0);
      UnmodifiableSortedMultiset<Locale.FilteringMode> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<Locale.FilteringMode>((SortedMultiset<Locale.FilteringMode>) null);
      treeRangeMap0.putCoalescing(range0, unmodifiableSortedMultiset0);
      BoundType boundType0 = BoundType.CLOSED;
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(530);
      Range<Integer> range1 = Range.range(integer1, boundType0, integer2, boundType0);
      treeRangeMap0.remove(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.greaterThan(integer0);
      Integer integer1 = new Integer(2544);
      UnmodifiableSortedMultiset<Locale.FilteringMode> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<Locale.FilteringMode>((SortedMultiset<Locale.FilteringMode>) null);
      TreeRangeMap<Integer, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap0 = TreeRangeMap.create();
      treeRangeMap0.putCoalescing(range0, unmodifiableSortedMultiset0);
      BoundType boundType0 = BoundType.CLOSED;
      Range<Integer> range1 = Range.range(integer1, boundType0, integer1, boundType0);
      treeRangeMap0.remove(range1);
      assertTrue(range1.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeRangeMap<Integer, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.lessThan(integer0);
      UnmodifiableSortedMultiset<Locale.FilteringMode> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<Locale.FilteringMode>((SortedMultiset<Locale.FilteringMode>) null);
      treeRangeMap0.putCoalescing(range0, unmodifiableSortedMultiset0);
      BoundType boundType0 = BoundType.CLOSED;
      Range<Integer> range1 = Range.range(integer0, boundType0, integer0, boundType0);
      treeRangeMap0.remove(range1);
      assertTrue(range1.hasLowerBound());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeRangeMap<Integer, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(0);
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      Range<Integer> range0 = Range.range(integer0, boundType0, integer0, boundType1);
      treeRangeMap0.remove(range0);
      assertTrue(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeRangeMap<Integer, ContiguousSet<Integer>> treeRangeMap0 = TreeRangeMap.create();
      // Undeclared exception!
      try { 
        treeRangeMap0.span();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeRangeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeRangeMap<Integer, ContiguousSet<Integer>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = Integer.getInteger("iSW|+wO4X7", (-193));
      Range<Integer> range0 = Range.singleton(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      treeRangeMap0.put(range0, regularContiguousSet0);
      ContiguousSet<Integer> contiguousSet0 = regularContiguousSet0.subSet(integer0, false, integer0, false);
      treeRangeMap0.putCoalescing(range0, contiguousSet0);
      assertTrue(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-862048943));
      Range<Integer> range0 = Range.atMost(integer0);
      treeRangeMap0.put(range0, integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = treeRangeMap0.get(integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer((-862048943));
      Range<Integer> range0 = Range.atMost(integer0);
      treeRangeMap0.put(range0, integer0);
      Integer integer1 = treeRangeMap0.get(integer0);
      assertEquals((-862048943), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      String string0 = treeRangeMap0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Integer> range0 = Range.greaterThan(integer0);
      Integer integer1 = new Integer(2544);
      Range<Integer> range1 = Range.lessThan(integer1);
      UnmodifiableSortedMultiset<Locale.FilteringMode> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<Locale.FilteringMode>((SortedMultiset<Locale.FilteringMode>) null);
      TreeRangeMap<Integer, UnmodifiableSortedMultiset<Locale.FilteringMode>> treeRangeMap0 = TreeRangeMap.create();
      treeRangeMap0.putCoalescing(range0, unmodifiableSortedMultiset0);
      treeRangeMap0.remove(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeRangeMap<Integer, ContiguousSet<Integer>> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = Integer.getInteger("", (-193));
      Range<Integer> range0 = Range.singleton(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      treeRangeMap0.put(range0, regularContiguousSet0);
      treeRangeMap0.putCoalescing(range0, regularContiguousSet0);
      assertTrue(range0.hasUpperBound());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      treeRangeMap0.clear();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      Map<Range<Integer>, Object> map0 = treeRangeMap0.asDescendingMapOfRanges();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TreeRangeMap<Integer, Integer> treeRangeMap0 = TreeRangeMap.create();
      treeRangeMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TreeRangeMap<Integer, Object> treeRangeMap0 = TreeRangeMap.create();
      Integer integer0 = new Integer(1);
      Range<Integer> range0 = Range.greaterThan(integer0);
      RangeMap<Integer, Object> rangeMap0 = treeRangeMap0.subRangeMap(range0);
      ImmutableRangeMap<Integer, Object> immutableRangeMap0 = ImmutableRangeMap.copyOf((RangeMap<Integer, ?>) rangeMap0);
      assertNotNull(immutableRangeMap0);
  }
}
