/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:55:06 GMT 2024
 */

package com.google.common.escape;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.escape.CharEscaper;
import com.google.common.escape.Escaper;
import com.google.common.escape.Escapers;
import com.google.common.escape.UnicodeEscaper;
import com.google.common.net.PercentEscaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Escapers_ESTest extends Escapers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Escapers.Builder escapers_Builder0 = Escapers.builder();
      Escapers.Builder escapers_Builder1 = escapers_Builder0.setSafeRange('Q', 'Q');
      escapers_Builder0.setUnsafeReplacement("");
      Escaper escaper0 = escapers_Builder1.build();
      UnicodeEscaper unicodeEscaper0 = Escapers.asUnicodeEscaper(escaper0);
      String string0 = Escapers.computeReplacement(unicodeEscaper0, (-1133));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharEscaper charEscaper0 = mock(CharEscaper.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(charEscaper0).escape(anyChar());
      String string0 = Escapers.computeReplacement(charEscaper0, 'X');
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharEscaper charEscaper0 = mock(CharEscaper.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(charEscaper0).escape(anyChar());
      String string0 = Escapers.computeReplacement(charEscaper0, 'X');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Escapers.computeReplacement((UnicodeEscaper) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.escape.Escapers", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Escaper escaper0 = Escapers.nullEscaper();
      UnicodeEscaper unicodeEscaper0 = Escapers.asUnicodeEscaper(escaper0);
      // Undeclared exception!
      try { 
        Escapers.computeReplacement(unicodeEscaper0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      // Undeclared exception!
      try { 
        Escapers.computeReplacement((UnicodeEscaper) percentEscaper0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid unicode character value 2147483647
         //
         verifyException("com.google.common.net.PercentEscaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", true);
      // Undeclared exception!
      try { 
        Escapers.computeReplacement((UnicodeEscaper) percentEscaper0, (-597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -597
         //
         verifyException("com.google.common.net.PercentEscaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Escapers.computeReplacement((CharEscaper) null, 'F');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.escape.Escapers", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Escapers.asUnicodeEscaper((Escaper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Escapers.Builder escapers_Builder0 = Escapers.builder();
      Escapers.Builder escapers_Builder1 = escapers_Builder0.setUnsafeReplacement(".SLR]7i");
      escapers_Builder0.setSafeRange('[', 'b');
      Escaper escaper0 = escapers_Builder1.build();
      UnicodeEscaper unicodeEscaper0 = Escapers.asUnicodeEscaper(escaper0);
      String string0 = Escapers.computeReplacement(unicodeEscaper0, 65562);
      assertEquals(".SLR]7i.SLR]7i", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Escapers.Builder escapers_Builder0 = Escapers.builder();
      Escaper escaper0 = escapers_Builder0.build();
      UnicodeEscaper unicodeEscaper0 = Escapers.asUnicodeEscaper(escaper0);
      UnicodeEscaper unicodeEscaper1 = Escapers.asUnicodeEscaper(unicodeEscaper0);
      assertSame(unicodeEscaper1, unicodeEscaper0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Escapers.Builder escapers_Builder0 = Escapers.builder();
      Escapers.Builder escapers_Builder1 = escapers_Builder0.addEscape('S', ".SLR]7i");
      assertSame(escapers_Builder1, escapers_Builder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Escaper escaper0 = Escapers.nullEscaper();
      UnicodeEscaper unicodeEscaper0 = Escapers.asUnicodeEscaper(escaper0);
      String string0 = Escapers.computeReplacement(unicodeEscaper0, 859);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharEscaper charEscaper0 = mock(CharEscaper.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(charEscaper0).escape(anyChar());
      String string0 = Escapers.computeReplacement(charEscaper0, 'y');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Escapers.Builder escapers_Builder0 = Escapers.builder();
      Escapers.Builder escapers_Builder1 = escapers_Builder0.setSafeRange('$', '$');
      Escaper escaper0 = escapers_Builder1.build();
      UnicodeEscaper unicodeEscaper0 = Escapers.asUnicodeEscaper(escaper0);
      String string0 = Escapers.computeReplacement(unicodeEscaper0, 65536);
      assertNull(string0);
  }
}
