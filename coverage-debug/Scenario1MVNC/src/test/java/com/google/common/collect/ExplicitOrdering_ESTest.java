/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:54:10 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ExplicitOrdering;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedMap;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.SingletonImmutableList;
import com.google.common.collect.SingletonImmutableSet;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExplicitOrdering_ESTest extends ExplicitOrdering_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      SingletonImmutableSet<Object> singletonImmutableSet0 = new SingletonImmutableSet<Object>(singletonImmutableList0);
      ImmutableList<Object> immutableList0 = singletonImmutableSet0.asList();
      ExplicitOrdering<Object> explicitOrdering0 = new ExplicitOrdering<Object>(immutableList0);
      BoundType boundType1 = BoundType.CLOSED;
      BoundType[] boundTypeArray0 = new BoundType[5];
      // Undeclared exception!
      try { 
        explicitOrdering0.max(boundType0, boundType1, boundType1, boundTypeArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Cannot compare value: OPEN
         //
         verifyException("com.google.common.collect.ExplicitOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0);
      ImmutableSortedMap<Integer, Integer> immutableSortedMap0 = new ImmutableSortedMap<Integer, Integer>((RegularImmutableSortedSet<Integer>) null, immutableList0);
      ExplicitOrdering<Integer> explicitOrdering0 = new ExplicitOrdering<Integer>(immutableSortedMap0);
      // Undeclared exception!
      try { 
        explicitOrdering0.compare(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      ExplicitOrdering<BoundType> explicitOrdering0 = new ExplicitOrdering<BoundType>(singletonImmutableList0);
      Object object0 = new Object();
      boolean boolean0 = explicitOrdering0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      ExplicitOrdering<BoundType> explicitOrdering0 = new ExplicitOrdering<BoundType>(singletonImmutableList0);
      explicitOrdering0.hashCode();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Stack<ExplicitOrdering<BoundType>> stack0 = new Stack<ExplicitOrdering<BoundType>>();
      ExplicitOrdering<ExplicitOrdering<BoundType>> explicitOrdering0 = new ExplicitOrdering<ExplicitOrdering<BoundType>>(stack0);
      String string0 = explicitOrdering0.toString();
      assertEquals("Ordering.explicit([])", string0);
  }
}
