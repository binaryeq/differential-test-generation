/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:06:23 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.HashMap;
import java.util.Locale;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractValueGraph_ESTest extends AbstractValueGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      Integer integer0 = new Integer(993);
      StandardValueGraph<Integer, GraphConnections<Integer, Integer>> standardValueGraph0 = new StandardValueGraph<Integer, GraphConnections<Integer, Integer>>(networkBuilder0);
      ImmutableValueGraph<Integer, GraphConnections<Integer, Integer>> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Integer, GraphConnections<Integer, Integer>>) standardValueGraph0);
      Integer integer1 = Integer.getInteger((String) null, (-1));
      Optional<GraphConnections<Integer, Integer>> optional0 = immutableValueGraph0.edgeValue(integer0, integer1);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      Graph<Comparable<Integer>> graph0 = standardValueGraph0.asGraph();
      StandardValueGraph<EndpointPair<Integer>, Integer> standardValueGraph1 = new StandardValueGraph<EndpointPair<Integer>, Integer>(networkBuilder0);
      Integer integer0 = new Integer((-2969));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer0);
      EndpointPair<EndpointPair<Integer>> endpointPair1 = EndpointPair.of((Graph<?>) graph0, endpointPair0, endpointPair0);
      Optional<Integer> optional0 = standardValueGraph1.edgeValue(endpointPair1);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.edgeValue((Comparable<Integer>) null, (Comparable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableValueGraph<Locale.FilteringMode, Locale.FilteringMode> standardMutableValueGraph0 = new StandardMutableValueGraph<Locale.FilteringMode, Locale.FilteringMode>(networkBuilder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EndpointPair<Locale.FilteringMode> endpointPair0 = EndpointPair.unordered(locale_FilteringMode0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.edgeValue(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch: unordered endpoints cannot be used with directed graphs
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph1 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      assertTrue(standardValueGraph1.equals((Object)standardValueGraph0));
      
      standardValueGraph1.edgeCount = (-2147483648L);
      boolean boolean0 = standardValueGraph1.equals(standardValueGraph0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Object, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Object>(networkBuilder0);
      HashMap<Object, GraphConnections<Object, Integer>> hashMap0 = new HashMap<Object, GraphConnections<Object, Integer>>();
      StandardValueGraph<Object, Integer> standardValueGraph0 = new StandardValueGraph<Object, Integer>(networkBuilder0, hashMap0, 0L);
      ValueGraphBuilder<Object, Integer> valueGraphBuilder0 = ValueGraphBuilder.from((ValueGraph<Object, Integer>) standardValueGraph0);
      StandardMutableValueGraph<Optional<Object>, Optional<Object>> standardMutableValueGraph1 = new StandardMutableValueGraph<Optional<Object>, Optional<Object>>(valueGraphBuilder0);
      Optional<Object> optional0 = Optional.of((Object) standardMutableValueGraph0);
      standardMutableValueGraph1.addNode(optional0);
      StandardMutableValueGraph<Optional<Object>, ImmutableValueGraph<Object, Object>> standardMutableValueGraph2 = new StandardMutableValueGraph<Optional<Object>, ImmutableValueGraph<Object, Object>>(networkBuilder0);
      boolean boolean0 = standardMutableValueGraph2.equals(standardMutableValueGraph1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(valueGraphBuilder0);
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph1 = new StandardValueGraph<Comparable<Integer>, Object>(graphBuilder0);
      boolean boolean0 = standardValueGraph0.equals(standardValueGraph1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      boolean boolean0 = standardValueGraph0.equals(networkBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      boolean boolean0 = standardValueGraph0.equals(standardValueGraph0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      Graph<Comparable<Integer>> graph0 = standardValueGraph0.asGraph();
      StandardMutableValueGraph<Object, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Object>(networkBuilder0);
      Object object0 = standardMutableValueGraph0.removeEdge((Object) standardValueGraph0, (Object) graph0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      standardValueGraph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<EndpointPair<Object>, GraphConnections<Object, Object>> standardMutableValueGraph0 = new StandardMutableValueGraph<EndpointPair<Object>, GraphConnections<Object, Object>>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.edgeValue((EndpointPair<EndpointPair<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<Object, ImmutableValueGraph<Object, Object>> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, ImmutableValueGraph<Object, Object>>(graphBuilder0);
      String string0 = standardMutableValueGraph0.toString();
      assertEquals("isDirected: true, allowsSelfLoops: false, nodes: [], edges: {}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      StandardValueGraph<Comparable<Integer>, Object> standardValueGraph1 = new StandardValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      boolean boolean0 = standardValueGraph1.equals(standardValueGraph0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<Object, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Object>(graphBuilder0);
      Graph<Object> graph0 = standardMutableValueGraph0.asGraph();
      GraphBuilder<Object> graphBuilder1 = GraphBuilder.from(graph0);
      assertNotSame(graphBuilder0, graphBuilder1);
  }
}
