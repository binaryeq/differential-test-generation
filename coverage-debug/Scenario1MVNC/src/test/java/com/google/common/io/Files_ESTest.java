/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:32:20 GMT 2024
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.graph.Traverser;
import com.google.common.hash.HashCode;
import com.google.common.hash.HashFunction;
import com.google.common.hash.Hasher;
import com.google.common.io.ByteProcessor;
import com.google.common.io.ByteSink;
import com.google.common.io.ByteSource;
import com.google.common.io.FileWriteMode;
import com.google.common.io.Files;
import com.google.common.io.LineProcessor;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.nio.file.StandardOpenOption;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Files_ESTest extends Files_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Files.getNameWithoutExtension("/../");
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Files.getNameWithoutExtension("/../{OaK{j`{&whhS-:x#:|");
      assertEquals("{OaK{j`{&whhS-:x#:|", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"");
      MockFile mockFile1 = new MockFile("iy'KKHxnhFp\u0006@1>+v", "com.google.common.collect.AbstractIterator");
      Files.touch(mockFile1);
      Files.move(mockFile1, mockFile0);
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = MockFile.createTempFile("0zdywpJA1OU0", "0zdywpJA1OU0");
      File file1 = Files.createTempDir();
      try { 
        Files.move(file0, file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Enums.stringConverter(", "Enums.stringConverter(");
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_WRITE;
      MappedByteBuffer mappedByteBuffer0 = Files.map((File) mockFile0, fileChannel_MapMode0, 81L);
      assertEquals(81, mappedByteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile("../{K`A&ahhS-::Z", "../{K`A&ahhS-::Z");
      MockFile mockFile0 = new MockFile("zf$D");
      Files.copy(file0, (File) mockFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile("{OaK", "{OaK");
      Charset charset0 = Charset.defaultCharset();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Files.copy(file0, charset0, (Appendable) charArrayWriter0);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      File file0 = MockFile.createTempFile("Im^<=%%y", (String) null);
      String string0 = Files.toString(file0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X&J5,J1(d>R");
      MockFile mockFile0 = new MockFile(uRI0);
      byte[] byteArray0 = Files.toByteArray(mockFile0);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ml82y9WR=^z", "Ml82y9WR=^z");
      Charset charset0 = Charset.defaultCharset();
      LineProcessor<FileChannel> lineProcessor0 = (LineProcessor<FileChannel>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lineProcessor0).getResult();
      FileChannel fileChannel0 = Files.readLines(file0, charset0, lineProcessor0);
      assertNull(fileChannel0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ml82y9WR=^z", "Ml82y9WR=^z");
      Charset charset0 = Charset.defaultCharset();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/../{OaK{j`{&whhS-:x#:|");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      LineProcessor<FileChannel> lineProcessor0 = (LineProcessor<FileChannel>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      doReturn(fileChannel0).when(lineProcessor0).getResult();
      FileChannel fileChannel1 = Files.readLines(file0, charset0, lineProcessor0);
      assertSame(fileChannel0, fileChannel1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile("<lM9+x*5", "sDios>");
      Charset charset0 = Charset.defaultCharset();
      String string0 = Files.readFirstLine(file0, charset0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockFile mockFile0 = new MockFile("/..", "/..");
      Files.write(byteArray0, (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      BufferedReader bufferedReader0 = Files.newReader(mockFile0, charset0);
      assertNotNull(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = MockFile.createTempFile("0zdywpJA1OU0", "0zdywpJA1OU0");
      Hasher hasher0 = mock(Hasher.class, new ViolatedAssumptionAnswer());
      doReturn((HashCode) null).when(hasher0).hash();
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn(hasher0).when(hashFunction0).newHasher();
      HashCode hashCode0 = Files.hash(file0, hashFunction0);
      assertNull(hashCode0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Files.getFileExtension("/../com.google.common.collect.FluentIterable$FromIterableFunction");
      assertEquals("FluentIterable$FromIterableFunction", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      File file0 = Files.createTempDir();
      assertEquals("0-0", file0.getName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      System.setCurrentTimeMillis((-3124L));
      File file0 = Files.createTempDir();
      assertEquals("-3124-0", file0.getName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = Files.createTempDir();
      file0.setWritable(false);
      File file1 = Files.createTempDir();
      assertEquals("1392409281320-0", file1.getName());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = Files.createTempDir();
      file0.setReadable(false);
      File file1 = Files.createTempDir();
      assertEquals("/tmp/1392409281320-0", file1.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = Files.createTempDir();
      file0.setExecutable(false);
      File file1 = Files.createTempDir();
      assertEquals("/tmp/1392409281320-0", file1.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = Files.createTempDir();
      Charset charset0 = Charset.defaultCharset();
      Files.asCharSource(file0, charset0);
      assertEquals("/tmp/1392409281320-0", file0.toString());
      assertEquals("1392409281320-0", file0.getName());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = Files.createTempDir();
      Charset charset0 = Charset.defaultCharset();
      FileWriteMode[] fileWriteModeArray0 = new FileWriteMode[0];
      Files.asCharSink(file0, charset0, fileWriteModeArray0);
      assertEquals("/tmp/1392409281320-0", file0.toString());
      assertEquals("1392409281320-0", file0.getName());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Files.asByteSink(", "Files.asByteSink(");
      ByteSource byteSource0 = Files.asByteSource(mockFile0);
      assertNotNull(byteSource0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("0zdywpJA1OU0", "0zdywpJA1OU0");
      FileWriteMode[] fileWriteModeArray0 = new FileWriteMode[2];
      FileWriteMode fileWriteMode0 = FileWriteMode.APPEND;
      fileWriteModeArray0[0] = fileWriteMode0;
      fileWriteModeArray0[1] = fileWriteModeArray0[0];
      ByteSink byteSink0 = Files.asByteSink(file0, fileWriteModeArray0);
      assertNotNull(byteSink0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      File file0 = MockFile.createTempFile("/..", "/..");
      MockFile mockFile0 = new MockFile(file0, "/..");
      try { 
        Files.write(byteArray0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        Files.touch(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.common.collect.FluentIterable$FromIterableFunction", "com.google.common.collect.FluentIterable$FromIterableFunction");
      MockFile mockFile0 = new MockFile(file0, "com.google.common.collect.FluentIterable$FromIterableFunction");
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        Files.touch(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative time
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = Files.createTempDir();
      Charset charset0 = Charset.defaultCharset();
      try { 
        Files.toString(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.toByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("9\":G", "9\":G", (File) mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Files.toByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = Files.createTempDir();
      try { 
        Files.toByteArray(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.simplifyPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = Files.createTempDir();
      Charset charset0 = Charset.defaultCharset();
      LineProcessor<Object> lineProcessor0 = (LineProcessor<Object>) mock(LineProcessor.class, new ViolatedAssumptionAnswer());
      try { 
        Files.readLines(file0, charset0, lineProcessor0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Files.readLines((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Files.readFirstLine((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.readBytes(file0, (ByteProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = MockFile.createTempFile("eZ0,~R$Zfji+j{ZB`H_l", "eZ0,~R$Zfji+j{ZB`H_l");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteProcessor<StandardOpenOption> byteProcessor0 = (ByteProcessor<StandardOpenOption>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      try { 
        Files.readBytes(file0, byteProcessor0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = Files.createTempDir();
      ByteProcessor<Object> byteProcessor0 = (ByteProcessor<Object>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      try { 
        Files.readBytes(file0, byteProcessor0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.newWriter(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = Files.createTempDir();
      Charset charset0 = Charset.defaultCharset();
      try { 
        Files.newWriter(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = Files.createTempDir();
      Charset charset0 = Charset.defaultCharset();
      try { 
        Files.newReader(file0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.move((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FH]R&?G ,");
      Files.touch(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Files.move(mockFile0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_ONLY;
      // Undeclared exception!
      try { 
        Files.map((File) null, fileChannel_MapMode0, 661L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/../{OaK");
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_ONLY;
      try { 
        Files.map((File) mockFile0, fileChannel_MapMode0, 0L);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.map(file0, (FileChannel.MapMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = Files.createTempDir();
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.PRIVATE;
      try { 
        Files.map(file0, fileChannel_MapMode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S=QAR`^Ji?nt");
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_ONLY;
      try { 
        Files.map((File) mockFile0, fileChannel_MapMode0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.map((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = Files.createTempDir();
      try { 
        Files.map(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{OiaK");
      try { 
        Files.map((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.common.io.Files$2", "com.google.common.io.Files$2");
      // Undeclared exception!
      try { 
        Files.hash(mockFile0, (HashFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = Files.createTempDir();
      Hasher hasher0 = mock(Hasher.class, new ViolatedAssumptionAnswer());
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn(hasher0).when(hashFunction0).newHasher();
      try { 
        Files.hash(file0, hashFunction0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.getNameWithoutExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.getFileExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.equal((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.createParentDirs((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~8");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Files.copy((File) mockFile0, charset0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ZS[6T%+aQ5GiEw%");
      // Undeclared exception!
      try { 
        Files.copy((File) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = Files.createTempDir();
      MockPrintStream mockPrintStream0 = new MockPrintStream("/../");
      try { 
        Files.copy(file0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.copy((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L#pH[q+Orjt}");
      Files.touch(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Files.copy((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Z8m]=0Me]h8");
      try { 
        Files.copy((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("l%/");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Files.asCharSink(mockFile0, charset0, (FileWriteMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileWriteMode[] fileWriteModeArray0 = new FileWriteMode[1];
      // Undeclared exception!
      try { 
        Files.asByteSink((File) null, fileWriteModeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("numHashFunctions (%s) must be > 0", "com.google.common.io.Files$FilePredicate");
      mockFile0.mkdirs();
      Charset charset0 = Charset.defaultCharset();
      try { 
        Files.append("numHashFunctions (%s) must be > 0", mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.copy(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.asByteSink(file0, (FileWriteMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileWriteMode[] fileWriteModeArray0 = new FileWriteMode[0];
      // Undeclared exception!
      try { 
        Files.asCharSink((File) null, charset0, fileWriteModeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Files.asCharSource((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.asByteSource((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Files.getNameWithoutExtension(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Files.getFileExtension("Unable to create parent directories of ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Files.simplifyPath(".");
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Files.simplifyPath("/../");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Files.simplifyPath("/");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Files.simplifyPath("?..//../.Q/{aK{j`{&whhS-:H:|");
      assertEquals(".Q/{aK{j`{&whhS-:H:|", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Files.simplifyPath("/..//../../{aK{j`{&whhS-:x:|");
      assertEquals("/{aK{j`{&whhS-:x:|", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Files.simplifyPath("");
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = Files.createTempDir();
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.PRIVATE;
      MappedByteBuffer mappedByteBuffer0 = Files.map(file0, fileChannel_MapMode0);
      //  // Unstable assertion: assertEquals(585, mappedByteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = Files.createTempDir();
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_ONLY;
      try { 
        Files.map(file0, fileChannel_MapMode0, 585L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = Files.createTempDir();
      FileChannel.MapMode fileChannel_MapMode0 = FileChannel.MapMode.READ_ONLY;
      // Undeclared exception!
      try { 
        Files.map(file0, fileChannel_MapMode0, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size (java.lang.Long@0000000001) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = Files.createTempDir();
      assertFalse(file0.isFile());
      
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Files.move(file0, mockFile0);
      assertEquals("1392409281320-0", file0.getName());
      assertEquals("/tmp/1392409281320-0", file0.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.move(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source org.evosuite.runtime.mock.java.io.MockFile@0000000001 and destination org.evosuite.runtime.mock.java.io.MockFile@0000000001 must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("{OaK", "{OaK");
      MockFile mockFile0 = new MockFile(file0, "sDios>");
      try { 
        Files.createParentDirs(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create parent directories of /tmp/{OaK0{OaK/sDios>
         //
         verifyException("com.google.common.io.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = MockFile.createTempFile("/../", "/../", (File) null);
      Files.createParentDirs(file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = MockFile.createTempFile("{OaK", "{OaK");
      Files.createParentDirs(file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.common.collect.FluentIterable$FromIterableFunction", "com.google.common.collect.FluentIterable$FromIterableFunction");
      MockFile mockFile0 = new MockFile(file0, "com.google.common.collect.FluentIterable$FromIterableFunction");
      try { 
        Files.touch(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to update modification time of /tmp/com.google.common.collect.FluentIterable$FromIterableFunction0com.google.common.collect.FluentIterable$FromIterableFunction/com.google.common.collect.FluentIterable$FromIterableFunction
         //
         verifyException("com.google.common.io.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      // Undeclared exception!
      Files.createTempDir();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = Files.createTempDir();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X&J5,J1(d>R");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        Files.equal(mockFile0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = Files.createTempDir();
      File file1 = Files.createTempDir();
      boolean boolean0 = Files.equal(file1, file0);
      assertTrue(boolean0);
      assertEquals("/tmp/1392409281320-0", file1.toString());
      assertFalse(file1.isFile());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = Files.createTempDir();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        Files.equal(mockFile0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      boolean boolean0 = Files.equal(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.copy(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source org.evosuite.runtime.mock.java.io.MockFile@0000000001 and destination org.evosuite.runtime.mock.java.io.MockFile@0000000001 must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X&J5,J1(d>R");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = Files.readLines((File) mockFile0, charset0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("uz@P's%S<fKN");
      File file0 = MockFile.createTempFile("{OaK", "{OaK", (File) mockFile0);
      Charset charset0 = Charset.defaultCharset();
      List<String> list0 = Files.readLines(file0, charset0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Predicate<File> predicate0 = Files.isDirectory();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("uz@P's%S<fKN");
      Charset charset0 = Charset.defaultCharset();
      try { 
        Files.readLines((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = Files.createTempDir();
      MappedByteBuffer mappedByteBuffer0 = Files.map(file0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(mappedByteBuffer0);
      try { 
        Files.copy(file0, charset0, (Appendable) charBuffer0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = Files.createTempDir();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Files.readLines(file0, charset0, (LineProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n.$3s~MKz0", "n.$3s~MKz0");
      Charset charset0 = Charset.defaultCharset();
      try { 
        Files.readFirstLine(mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Traverser<File> traverser0 = Files.fileTraverser();
      assertNotNull(traverser0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.newReader(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("numHashFunctions (%s) must be > 0", "com.google.common.io.Files$FilePredicate");
      Charset charset0 = Charset.defaultCharset();
      Files.append("numHashFunctions (%s) must be > 0", mockFile0, charset0);
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = MockFile.createTempFile("{OaK", "{OaK");
      byte[] byteArray0 = Files.toByteArray(file0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = MockFile.createTempFile("eZ0,~R$Zfji+j{ZB`H_l", "eZ0,~R$Zfji+j{ZB`H_l");
      ByteProcessor<StandardOpenOption> byteProcessor0 = (ByteProcessor<StandardOpenOption>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(byteProcessor0).getResult();
      Files.readBytes(file0, byteProcessor0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ml82y9WR=^z", "Ml82y9WR=^z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Files.copy(file0, (OutputStream) mockPrintStream0);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = MockFile.createTempFile("{OaK", "{OaK");
      Charset charset0 = Charset.defaultCharset();
      BufferedWriter bufferedWriter0 = Files.newWriter(file0, charset0);
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Predicate<File> predicate0 = Files.isFile();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{OaK{j`{&whhS-:x#:|");
      Charset charset0 = Charset.defaultCharset();
      Files.write((CharSequence) "{OaK{j`{&whhS-:x#:|", (File) mockFile0, charset0);
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = MockFile.createTempFile("0zdywpJA1OU0", "0zdywpJA1OU0");
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Hasher) null).when(hashFunction0).newHasher();
      // Undeclared exception!
      try { 
        Files.hash(file0, hashFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = Files.createTempDir();
      // Undeclared exception!
      try { 
        Files.toString(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
