/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:59:44 GMT 2024
 */

package com.google.common.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.io.ByteSource;
import com.google.common.reflect.ClassPath;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLStreamHandler;
import java.net.URLStreamHandlerFactory;
import java.nio.charset.Charset;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.TreeSet;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassPath_ESTest extends ClassPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("43B)");
      ClassPath.ResourceInfo classPath_ResourceInfo0 = ClassPath.ResourceInfo.of(mockFile0, "jdk/nashorn/internal/scripts/JS.class", uRLClassLoader0);
      classPath_ResourceInfo0.url();
      assertEquals("jdk.nashorn.internal.scripts.JS", classPath_ResourceInfo0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ImmutableSet<ClassPath.LocationInfo> immutableSet0 = ClassPath.locationsFrom(classLoader0);
      //  // Unstable assertion: assertEquals(14, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Sfyi%h", "Sfyi%h");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.ResourceInfo classPath_ResourceInfo0 = ClassPath.ResourceInfo.of(mockFile0, "=QsUwRV.class", classLoader0);
      // Undeclared exception!
      try { 
        classPath_ResourceInfo0.url();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // =QsUwRV.class
         //
         verifyException("com.google.common.reflect.ClassPath$ResourceInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.ResourceInfo.of((File) null, "Invali Class-Path entry: ", (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL[] uRLArray0 = new URL[7];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("&'gzWv#");
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(mockFile0, "&'gzWv#", uRLClassLoader0);
      boolean boolean0 = classPath_ClassInfo0.isTopLevel();
      assertTrue(boolean0);
      assertEquals("&", classPath_ClassInfo0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("FM$FUp=BoR{*W", "Suppliers.supplierFunction()");
      MockFile mockFile0 = new MockFile(file0, "Suppliers.supplierFunction()");
      URL uRL0 = mockFile0.toURL();
      File file1 = ClassPath.toFile(uRL0);
      assertEquals(0L, file1.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ClassPath.getClassName("&'gzWv#");
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ClassPath.getClassName(".class");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.toFile((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        ClassPath.toFile(uRL0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.locationsFrom((ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      // Undeclared exception!
      try { 
        ClassPath.locationsFrom(uRLClassLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/nashorn.jar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.google.common.reflect.ClassPath$ClassInfo");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath classPath0 = ClassPath.from(classLoader0);
      classPath0.getTopLevelClassesRecursive(" (");
      // Undeclared exception!
      classPath0.getTopLevelClassesRecursive(".jdk.internal.dynalink.support.CompositeGuardingDynamicLinker");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader0);
      // Undeclared exception!
      try { 
        classPath0.getTopLevelClassesRecursive((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/nashorn.jar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "!t");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath classPath0 = ClassPath.from(classLoader0);
      classPath0.getTopLevelClassesRecursive("!t");
      // Undeclared exception!
      classPath0.getTopLevelClasses("/$iw4Qi[,.r");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader0);
      // Undeclared exception!
      try { 
        classPath0.getTopLevelClasses((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/cldrdata.jar");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader0);
      // Undeclared exception!
      classPath0.getTopLevelClasses();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("43B)");
      try { 
        ClassPath.getClassPathEntry(mockFile0, (String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.getClassPathEntry((File) null, "di+zty1z^lf}z{YT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.getClassPathEntries((ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      // Undeclared exception!
      try { 
        ClassPath.getClassPathEntries(uRLClassLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.getClassName("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.getClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/nashorn.jar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "!t");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath classPath0 = ClassPath.from(classLoader0);
      // Undeclared exception!
      classPath0.getAllClasses();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "43B)");
      // Undeclared exception!
      ClassPath.from(uRLClassLoader0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassPath.from((ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      // Undeclared exception!
      try { 
        ClassPath.from(uRLClassLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      URL[] uRLArray0 = new URL[3];
      URL uRL0 = ClassPath.getClassPathEntry(mockFile0, "");
      uRLArray0[0] = uRL0;
      URL uRL1 = MockURL.getFileExample();
      uRLArray0[1] = uRL1;
      uRLArray0[2] = uRL1;
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      // Undeclared exception!
      try { 
        ClassPath.from(uRLClassLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI has an authority component
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ImmutableMap<File, ClassLoader> immutableMap0 = ClassPath.getClassPathEntries(classLoader0);
      //  // Unstable assertion: assertEquals(14, immutableMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("32r>iqR");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.LocationInfo classPath_LocationInfo0 = new ClassPath.LocationInfo(mockFile0, classLoader0);
      File file0 = classPath_LocationInfo0.file();
      assertEquals("32r>iqR", file0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("32r>iqR");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.LocationInfo classPath_LocationInfo0 = new ClassPath.LocationInfo(mockFile0, classLoader0);
      TreeSet<File> treeSet0 = new TreeSet<File>();
      ImmutableSet<ClassPath.ResourceInfo> immutableSet0 = classPath_LocationInfo0.scanResources((Set<File>) treeSet0);
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("FM$FUp=BoR{*W");
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(mockFile0, "v{P}(X]\"pj8", uRLClassLoader0);
      String string0 = classPath_ClassInfo0.getName();
      assertEquals("v{P}(", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("32r>iqR");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(mockFile0, "#T`\u0001-eK\"/gO>)}6q9$", classLoader0);
      classPath_ClassInfo0.getPackageName();
      assertEquals("#T`\u0001-eK\".gO>", classPath_ClassInfo0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader0);
      ImmutableSet<ClassPath.ClassInfo> immutableSet0 = classPath0.getTopLevelClasses();
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImmutableList<URL> immutableList0 = ClassPath.parseJavaClassPath();
      assertEquals(1, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.google.common.collect.RangeGwtSerializationDependencies", "com.google.common.collect.RangeGwtSerializationDependencies", 1183, "com.google.common.collect.RangeGwtSerializationDependencies", uRLStreamHandler0);
      uRLArray0[0] = uRL0;
      MockFile mockFile0 = new MockFile("com.google.common.collect.RangeGwtSerializationDependencies");
      URL uRL1 = mockFile0.toURL();
      uRLArray0[1] = uRL1;
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      URLStreamHandlerFactory uRLStreamHandlerFactory0 = mock(URLStreamHandlerFactory.class, new ViolatedAssumptionAnswer());
      doReturn((URLStreamHandler) null).when(uRLStreamHandlerFactory0).createURLStreamHandler(anyString());
      URLClassLoader uRLClassLoader1 = new URLClassLoader(uRLArray0, uRLClassLoader0, uRLStreamHandlerFactory0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader1);
      assertNotNull(classPath0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImmutableSet<File> immutableSet0 = ClassPath.getClassPathFromManifest((File) null, (Manifest) null);
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T{8S.D^o}");
      URL[] uRLArray0 = new URL[2];
      URL uRL0 = MockURL.getFileExample();
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath.LocationInfo classPath_LocationInfo0 = new ClassPath.LocationInfo(mockFile0, uRLClassLoader0);
      boolean boolean0 = classPath_LocationInfo0.equals(uRL0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("FM$FUp=BoR{*W");
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(mockFile0, "sun/text/resources/cldr/teo/FormatData_teo.class", uRLClassLoader0);
      String string0 = classPath_ClassInfo0.getSimpleName();
      assertEquals("sun.text.resources.cldr.teo.FormatData_teo", classPath_ClassInfo0.toString());
      assertEquals("FormatData_teo", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      MockFile mockFile0 = new MockFile("FM$FUp=BoR{*W");
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(mockFile0, "FM$FUp=BoR{*W", classLoader0);
      String string0 = classPath_ClassInfo0.getSimpleName();
      assertEquals("FM$FUp=", classPath_ClassInfo0.getName());
      assertEquals("FUp=", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL[] uRLArray0 = new URL[8];
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      MockFile mockFile0 = new MockFile("P{ZogP?>sj/Gec.class", "/?9_");
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(mockFile0, "*Exf>c+s{7UA_=V+", uRLClassLoader0);
      String string0 = classPath_ClassInfo0.getSimpleName();
      assertEquals("*Exf>c+s{7", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("43B)");
      ClassPath.ResourceInfo classPath_ResourceInfo0 = new ClassPath.ResourceInfo(mockFile0, "The length may not be less than 1", uRLClassLoader0);
      boolean boolean0 = classPath_ResourceInfo0.equals(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("tr_cg-#.IN^Jf,`", "tr_cg-#.IN^Jf,`");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.LocationInfo classPath_LocationInfo0 = new ClassPath.LocationInfo(file0, classLoader0);
      ImmutableSet<ClassPath.ResourceInfo> immutableSet0 = classPath_LocationInfo0.scanResources();
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/nashorn.jar");
      URL uRL0 = MockURL.getFtpExample();
      FileSystemHandling.createFolder(evoSuiteFile0);
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader0);
      assertNotNull(classPath0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      File file0 = MockFile.createTempFile("tr_cg-#.IN^Jf,`", "tr_cg-#.IN^Jf,`");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.LocationInfo classPath_LocationInfo0 = new ClassPath.LocationInfo(file0, classLoader0);
      String string0 = classPath_LocationInfo0.toString();
      assertEquals("/tmp/tr_cg-#.IN^Jf,`0tr_cg-#.IN^Jf,`", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath classPath0 = ClassPath.from(classLoader0);
      ImmutableSet<ClassPath.ClassInfo> immutableSet0 = classPath0.getAllClasses();
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader0);
      ImmutableSet<ClassPath.ResourceInfo> immutableSet0 = classPath0.getResources();
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1yBQQHqm [dI");
      URL[] uRLArray0 = new URL[1];
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath.ResourceInfo classPath_ResourceInfo0 = new ClassPath.ResourceInfo(mockFile0, ";5N|%m", uRLClassLoader0);
      String string0 = classPath_ResourceInfo0.toString();
      assertEquals(";5N|%m", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("FM$FUp=BoR{*W");
      ClassPath.ResourceInfo classPath_ResourceInfo0 = new ClassPath.ResourceInfo(mockFile0, "sun/text/resources/cldr/teo/FormatData_teo.class", uRLClassLoader0);
      ByteSource byteSource0 = classPath_ResourceInfo0.asByteSource();
      assertNotNull(byteSource0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("43B)");
      ClassPath.ResourceInfo classPath_ResourceInfo0 = new ClassPath.ResourceInfo(mockFile0, "G$lse", uRLClassLoader0);
      File file0 = classPath_ResourceInfo0.getFile();
      assertNull(file0.getParent());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath.ResourceInfo classPath_ResourceInfo0 = new ClassPath.ResourceInfo(mockFile0, "", uRLClassLoader0);
      String string0 = classPath_ResourceInfo0.getResourceName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("32r>iqR");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.ResourceInfo classPath_ResourceInfo0 = new ClassPath.ResourceInfo(mockFile0, "", classLoader0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        classPath_ResourceInfo0.asCharSource(charset0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // 
         //
         verifyException("com.google.common.reflect.ClassPath$ResourceInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/nashorn.jar");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URL uRL0 = MockURL.getFtpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      URLClassLoader uRLClassLoader0 = URLClassLoader.newInstance(uRLArray0);
      ClassPath classPath0 = ClassPath.from(uRLClassLoader0);
      ImmutableSet<ClassPath.ClassInfo> immutableSet0 = classPath0.getTopLevelClasses("com.google.common.reflect.ClassPath$LocationInfo");
      assertEquals(0, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      File file0 = MockFile.createTempFile("tr_cg-#.IN^Jf,`", "tr_cg-#.IN^Jf,`");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(file0, "tr_cg-#.IN^Jf,`", classLoader0);
      String string0 = classPath_ClassInfo0.toString();
      assertEquals("tr_cg-#.I", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      MockFile mockFile0 = new MockFile("43B)");
      ClassPath.ClassInfo classPath_ClassInfo0 = new ClassPath.ClassInfo(mockFile0, "com.google.common.collect.ObjectArrays", uRLClassLoader0);
      // Undeclared exception!
      try { 
        classPath_ClassInfo0.load();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.lang.ClassNotFoundException: com.google.common.collect.Object
         //
         verifyException("com.google.common.reflect.ClassPath$ClassInfo", e);
      }
  }
}
