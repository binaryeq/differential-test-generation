/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:23:44 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.util.concurrent.AggregateFuture;
import com.google.common.util.concurrent.AsyncCallable;
import com.google.common.util.concurrent.CombinedFuture;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.TrustedListenableFutureTask;
import java.lang.reflect.Array;
import java.time.ZoneOffset;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AggregateFuture_ESTest extends AggregateFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AggregateFuture<Throwable, Throwable> aggregateFuture0 = (AggregateFuture<Throwable, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      AggregateFuture<Throwable, Throwable> aggregateFuture1 = (AggregateFuture<Throwable, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      AggregateFuture<Throwable, Throwable>[] aggregateFutureArray0 = (AggregateFuture<Throwable, Throwable>[]) Array.newInstance(AggregateFuture.class, 5);
      aggregateFutureArray0[0] = aggregateFuture0;
      aggregateFutureArray0[1] = aggregateFuture1;
      aggregateFutureArray0[2] = aggregateFuture1;
      aggregateFuture0.pendingToString();
      aggregateFutureArray0[3] = aggregateFuture0;
      aggregateFutureArray0[4] = aggregateFuture0;
      ImmutableSet<Throwable> immutableSet0 = ImmutableSet.of();
      aggregateFuture1.decrementRemainingAndGet();
      // Undeclared exception!
      try { 
        aggregateFuture1.addInitialException(immutableSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ZoneOffset> trustedListenableFutureTask0 = new TrustedListenableFutureTask<ZoneOffset>(callable0);
      ImmutableMultiset<ListenableFuture<ZoneOffset>> immutableMultiset0 = ImmutableMultiset.of((ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Comparable<Delayed>> callable1 = (Callable<Comparable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CombinedFuture<Comparable<Delayed>> combinedFuture0 = new CombinedFuture<Comparable<Delayed>>(immutableMultiset0, false, forkJoinPool0, callable1);
      combinedFuture0.interruptTask();
      Callable<Comparable<Throwable>> callable2 = (Callable<Comparable<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Throwable>> combinedFuture1 = new CombinedFuture<Comparable<Throwable>>(immutableMultiset0, true, forkJoinPool0, callable2);
      Callable<ListenableFuture<Object>> callable3 = (Callable<ListenableFuture<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture2 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, false, forkJoinPool0, callable3);
      combinedFuture2.cancel(true);
      combinedFuture2.afterDone();
      System.setCurrentTimeMillis((-1549L));
      AsyncCallable<ImmutableSortedMultiset<Throwable>> asyncCallable0 = (AsyncCallable<ImmutableSortedMultiset<Throwable>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncCallable0).call();
      CombinedFuture<ImmutableSortedMultiset<Throwable>> combinedFuture3 = new CombinedFuture<ImmutableSortedMultiset<Throwable>>(immutableMultiset0, false, forkJoinPool0, asyncCallable0);
      // Undeclared exception!
      try { 
        combinedFuture3.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TrustedListenableFutureTask<ZoneOffset> trustedListenableFutureTask0 = new TrustedListenableFutureTask<ZoneOffset>(callable0);
      ImmutableMultiset<ListenableFuture<ZoneOffset>> immutableMultiset0 = ImmutableMultiset.of((ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(93);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(trustedListenableFutureTask0, (-191L), 93, timeUnit0);
      Callable<Comparable<Delayed>> callable1 = (Callable<Comparable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(scheduledFuture0).when(callable1).call();
      CombinedFuture<Comparable<Delayed>> combinedFuture0 = new CombinedFuture<Comparable<Delayed>>(immutableMultiset0, false, forkJoinPool0, callable1);
      combinedFuture0.interruptTask();
      Callable<Comparable<Throwable>> callable2 = (Callable<Comparable<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable2).call();
      CombinedFuture<Comparable<Throwable>> combinedFuture1 = new CombinedFuture<Comparable<Throwable>>(immutableMultiset0, true, forkJoinPool0, callable2);
      Callable<ListenableFuture<Object>> callable3 = (Callable<ListenableFuture<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture2 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, false, forkJoinPool0, callable3);
      combinedFuture2.cancel(true);
      combinedFuture2.afterDone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ZoneOffset> trustedListenableFutureTask0 = new TrustedListenableFutureTask<ZoneOffset>(callable0);
      ImmutableMultiset<ListenableFuture<ZoneOffset>> immutableMultiset0 = ImmutableMultiset.of((ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Comparable<Throwable>> callable1 = (Callable<Comparable<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CombinedFuture<Comparable<Throwable>> combinedFuture0 = new CombinedFuture<Comparable<Throwable>>(immutableMultiset0, false, forkJoinPool0, callable1);
      Callable<ListenableFuture<Object>> callable2 = (Callable<ListenableFuture<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture1 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, true, forkJoinPool0, callable2);
      combinedFuture1.cancel(true);
      combinedFuture1.afterDone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AggregateFuture<Throwable, Delayed> aggregateFuture0 = (AggregateFuture<Throwable, Delayed>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableMultiset<AggregateFuture<Throwable, Delayed>> immutableMultiset0 = ImmutableMultiset.of(aggregateFuture0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      Callable<Comparable<Delayed>> callable0 = (Callable<Comparable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Delayed>> combinedFuture0 = new CombinedFuture<Comparable<Delayed>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable0);
      combinedFuture0.interruptTask();
      Callable<Comparable<Throwable>> callable1 = (Callable<Comparable<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Throwable>> combinedFuture1 = new CombinedFuture<Comparable<Throwable>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable1);
      Callable<ListenableFuture<Object>> callable2 = (Callable<ListenableFuture<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture2 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable2);
      combinedFuture2.set((ListenableFuture<Object>) null);
      combinedFuture2.afterDone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ZoneOffset> trustedListenableFutureTask0 = new TrustedListenableFutureTask<ZoneOffset>(callable0);
      ImmutableMultiset<ListenableFuture<ZoneOffset>> immutableMultiset0 = ImmutableMultiset.of((ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<ListenableFuture<Throwable>> callable1 = (Callable<ListenableFuture<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<ListenableFuture<Object>> callable2 = (Callable<ListenableFuture<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture0 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, false, forkJoinPool0, callable2);
      combinedFuture0.cancel(false);
      combinedFuture0.afterDone();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AggregateFuture<Throwable, Delayed> aggregateFuture0 = (AggregateFuture<Throwable, Delayed>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableMultiset<AggregateFuture<Throwable, Delayed>> immutableMultiset0 = ImmutableMultiset.of(aggregateFuture0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      Callable<Comparable<Delayed>> callable0 = (Callable<Comparable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Delayed>> combinedFuture0 = new CombinedFuture<Comparable<Delayed>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable0);
      combinedFuture0.interruptTask();
      Callable<Comparable<Throwable>> callable1 = (Callable<Comparable<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Throwable>> combinedFuture1 = new CombinedFuture<Comparable<Throwable>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable1);
      Callable<ListenableFuture<Object>> callable2 = (Callable<ListenableFuture<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture2 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable2);
      combinedFuture2.afterDone();
      combinedFuture1.init();
      Callable<Comparable<Object>> callable3 = (Callable<Comparable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Object>> combinedFuture3 = new CombinedFuture<Comparable<Object>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable3);
      combinedFuture3.collectOneValue(0, immutableMultiset0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ZoneOffset> trustedListenableFutureTask0 = new TrustedListenableFutureTask<ZoneOffset>(callable0);
      ImmutableMultiset<ListenableFuture<ZoneOffset>> immutableMultiset0 = ImmutableMultiset.of((ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<ListenableFuture<Throwable>> callable1 = (Callable<ListenableFuture<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Throwable>> combinedFuture0 = new CombinedFuture<ListenableFuture<Throwable>>(immutableMultiset0, false, forkJoinPool0, callable1);
      Object object0 = new Object();
      combinedFuture0.collectOneValue(25, object0);
      Callable<AggregateFuture<Throwable, Throwable>> callable2 = (Callable<AggregateFuture<Throwable, Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<AggregateFuture<Throwable, Throwable>> combinedFuture1 = new CombinedFuture<AggregateFuture<Throwable, Throwable>>(immutableMultiset0, false, forkJoinPool0, callable2);
      AggregateFuture.ReleaseResourcesReason aggregateFuture_ReleaseResourcesReason0 = AggregateFuture.ReleaseResourcesReason.OUTPUT_FUTURE_DONE;
      combinedFuture1.releaseResources(aggregateFuture_ReleaseResourcesReason0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ZoneOffset> trustedListenableFutureTask0 = new TrustedListenableFutureTask<ZoneOffset>(callable0);
      ImmutableMultiset<ListenableFuture<ZoneOffset>> immutableMultiset0 = ImmutableMultiset.of((ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<ListenableFuture<Throwable>> callable1 = (Callable<ListenableFuture<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Throwable>> combinedFuture0 = new CombinedFuture<ListenableFuture<Throwable>>(immutableMultiset0, false, forkJoinPool0, callable1);
      combinedFuture0.toString();
      forkJoinPool0.getFactory();
      Object object0 = new Object();
      combinedFuture0.collectOneValue(25, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      AggregateFuture<Delayed, Delayed> aggregateFuture0 = (AggregateFuture<Delayed, Delayed>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableMultiset<AggregateFuture<Delayed, Delayed>> immutableMultiset0 = ImmutableMultiset.of(aggregateFuture0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      AsyncCallable<Delayed> asyncCallable0 = (AsyncCallable<Delayed>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Delayed> combinedFuture0 = new CombinedFuture<Delayed>(immutableMultiset0, true, forkJoinPool0, asyncCallable0);
      combinedFuture0.toString();
      combinedFuture0.isCancelled();
      AggregateFuture<Delayed, Delayed> aggregateFuture1 = (AggregateFuture<Delayed, Delayed>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      // Undeclared exception!
      try { 
        immutableMultiset0.add(aggregateFuture1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AggregateFuture<Throwable, Object> aggregateFuture0 = (AggregateFuture<Throwable, Object>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableSet<AggregateFuture<Throwable, Object>> immutableSet0 = ImmutableSet.of(aggregateFuture0, aggregateFuture0);
      ImmutableSet<AggregateFuture<Throwable, Object>> immutableSet1 = ImmutableSet.copyOf((Collection<? extends AggregateFuture<Throwable, Object>>) immutableSet0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Callable<Throwable>> priorityQueue0 = new PriorityQueue<Callable<Throwable>>(comparator0);
      ImmutableSortedMultiset<Callable<Throwable>> immutableSortedMultiset0 = ImmutableSortedMultiset.copyOf((Comparator<? super Callable<Throwable>>) comparator0, (Iterable<? extends Callable<Throwable>>) priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      forkJoinPool0.invokeAll((Collection<? extends Callable<Throwable>>) immutableSortedMultiset0, (-2210L), timeUnit0);
      CombinedFuture<Object> combinedFuture0 = new CombinedFuture<Object>(immutableSet1, true, forkJoinPool0, callable0);
      combinedFuture0.afterDone();
      combinedFuture0.interruptTask();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AggregateFuture<Throwable, Throwable> aggregateFuture0 = (AggregateFuture<Throwable, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      AggregateFuture<Throwable, Throwable> aggregateFuture1 = (AggregateFuture<Throwable, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      AggregateFuture<Throwable, Throwable>[] aggregateFutureArray0 = (AggregateFuture<Throwable, Throwable>[]) Array.newInstance(AggregateFuture.class, 20);
      aggregateFutureArray0[0] = aggregateFuture0;
      aggregateFutureArray0[1] = aggregateFuture1;
      aggregateFutureArray0[2] = aggregateFuture0;
      aggregateFutureArray0[3] = aggregateFuture0;
      aggregateFutureArray0[4] = aggregateFuture0;
      ImmutableSet<Throwable> immutableSet0 = ImmutableSet.of();
      aggregateFuture1.decrementRemainingAndGet();
      // Undeclared exception!
      try { 
        aggregateFuture0.addInitialException(immutableSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AggregateFuture<Throwable, Throwable> aggregateFuture0 = (AggregateFuture<Throwable, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      AggregateFuture<Throwable, Throwable> aggregateFuture1 = (AggregateFuture<Throwable, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      AggregateFuture<Throwable, Throwable>[] aggregateFutureArray0 = (AggregateFuture<Throwable, Throwable>[]) Array.newInstance(AggregateFuture.class, 5);
      aggregateFutureArray0[0] = aggregateFuture0;
      aggregateFutureArray0[1] = aggregateFuture1;
      aggregateFutureArray0[2] = aggregateFuture1;
      aggregateFutureArray0[3] = aggregateFuture0;
      aggregateFutureArray0[4] = aggregateFuture0;
      ImmutableSet<Throwable> immutableSet0 = ImmutableSet.of();
      aggregateFuture1.decrementRemainingAndGet();
      // Undeclared exception!
      try { 
        aggregateFuture1.addInitialException(immutableSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayDeque<ListenableFuture<Throwable>> arrayDeque0 = new ArrayDeque<ListenableFuture<Throwable>>(1843);
      ImmutableSet<ListenableFuture<Throwable>> immutableSet0 = ImmutableSet.copyOf((Iterable<? extends ListenableFuture<Throwable>>) arrayDeque0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(984);
      forkJoinPool0.getActiveThreadCount();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CombinedFuture<ZoneOffset> combinedFuture0 = new CombinedFuture<ZoneOffset>(immutableSet0, false, forkJoinPool0, callable0);
      AggregateFuture.ReleaseResourcesReason.values();
      ForkJoinPool forkJoinPool1 = ForkJoinPool.commonPool();
      Callable<Throwable> callable1 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CombinedFuture<Throwable> combinedFuture1 = new CombinedFuture<Throwable>(immutableSet0, false, forkJoinPool1, callable1);
      combinedFuture1.collectOneValue(0, combinedFuture0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AggregateFuture<Delayed, Throwable> aggregateFuture0 = (AggregateFuture<Delayed, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      AggregateFuture<Delayed, Throwable> aggregateFuture1 = (AggregateFuture<Delayed, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableList<AggregateFuture<Delayed, Throwable>> immutableList0 = ImmutableList.of(aggregateFuture0, aggregateFuture0, aggregateFuture0, aggregateFuture0, aggregateFuture0, aggregateFuture0, aggregateFuture0, aggregateFuture0, aggregateFuture1);
      immutableList0.spliterator();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Throwable> combinedFuture0 = new CombinedFuture<Throwable>(immutableList0, true, forkJoinPool0, asyncCallable0);
      Callable<ImmutableSortedMultiset<Delayed>> callable0 = (Callable<ImmutableSortedMultiset<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ImmutableSortedMultiset<Delayed>> combinedFuture1 = new CombinedFuture<ImmutableSortedMultiset<Delayed>>(immutableList0, true, forkJoinPool0, callable0);
      AggregateFuture.ReleaseResourcesReason aggregateFuture_ReleaseResourcesReason0 = AggregateFuture.ReleaseResourcesReason.OUTPUT_FUTURE_DONE;
      combinedFuture1.releaseResources(aggregateFuture_ReleaseResourcesReason0);
      AggregateFuture.ReleaseResourcesReason.values();
      AsyncCallable<Delayed> asyncCallable1 = (AsyncCallable<Delayed>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Delayed> combinedFuture2 = new CombinedFuture<Delayed>(immutableList0, true, forkJoinPool0, asyncCallable1);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(745);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread1, 0, 745, timeUnit0);
      combinedFuture2.collectOneValue(0, scheduledFuture0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AggregateFuture.ReleaseResourcesReason.values();
      Callable<ZoneOffset> callable0 = (Callable<ZoneOffset>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<ZoneOffset> trustedListenableFutureTask0 = new TrustedListenableFutureTask<ZoneOffset>(callable0);
      ImmutableMultiset<ListenableFuture<ZoneOffset>> immutableMultiset0 = ImmutableMultiset.of((ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0, (ListenableFuture<ZoneOffset>) trustedListenableFutureTask0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      AsyncCallable<ListenableFuture<Object>> asyncCallable0 = (AsyncCallable<ListenableFuture<Object>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture0 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, false, forkJoinPool0, asyncCallable0);
      combinedFuture0.afterDone();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AggregateFuture<Throwable, Delayed> aggregateFuture0 = (AggregateFuture<Throwable, Delayed>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableMultiset<AggregateFuture<Throwable, Delayed>> immutableMultiset0 = ImmutableMultiset.of(aggregateFuture0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      Callable<Comparable<Delayed>> callable0 = (Callable<Comparable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Delayed>> combinedFuture0 = new CombinedFuture<Comparable<Delayed>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable0);
      combinedFuture0.interruptTask();
      Callable<Comparable<Throwable>> callable1 = (Callable<Comparable<Throwable>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Comparable<Throwable>> combinedFuture1 = new CombinedFuture<Comparable<Throwable>>(immutableMultiset0, true, scheduledThreadPoolExecutor0, callable1);
      Object object0 = new Object();
      combinedFuture1.collectOneValue(0, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AggregateFuture<Throwable, Object> aggregateFuture0 = (AggregateFuture<Throwable, Object>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableSet<AggregateFuture<Throwable, Object>> immutableSet0 = ImmutableSet.of(aggregateFuture0, aggregateFuture0);
      ImmutableSet<AggregateFuture<Throwable, Object>> immutableSet1 = ImmutableSet.copyOf((Collection<? extends AggregateFuture<Throwable, Object>>) immutableSet0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<Object> combinedFuture0 = new CombinedFuture<Object>(immutableSet1, true, forkJoinPool0, callable0);
      combinedFuture0.interruptTask();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImmutableMultiset<ListenableFuture<Throwable>> immutableMultiset0 = ImmutableMultiset.of();
      AsyncCallable<ListenableFuture<Object>> asyncCallable0 = (AsyncCallable<ListenableFuture<Object>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      CombinedFuture<ListenableFuture<Object>> combinedFuture0 = null;
      try {
        combinedFuture0 = new CombinedFuture<ListenableFuture<Object>>(immutableMultiset0, true, (Executor) null, asyncCallable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AggregateFuture<Throwable, Throwable> aggregateFuture0 = (AggregateFuture<Throwable, Throwable>) mock(AggregateFuture.class, CALLS_REAL_METHODS);
      ImmutableSet<AggregateFuture<Throwable, Throwable>> immutableSet0 = ImmutableSet.of(aggregateFuture0, aggregateFuture0);
      CombinedFuture<AggregateFuture<Throwable, Throwable>> combinedFuture0 = null;
      try {
        combinedFuture0 = new CombinedFuture<AggregateFuture<Throwable, Throwable>>(immutableSet0, false, (Executor) null, (Callable<AggregateFuture<Throwable, Throwable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
