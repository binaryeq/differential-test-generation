/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:07:39 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.BoundType;
import com.google.common.graph.DirectedGraphConnections;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirectedGraphConnections_ESTest extends DirectedGraphConnections_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      directedGraphConnections0.addPredecessor(integer0, comparable1);
      directedGraphConnections0.addSuccessor(integer0, comparable0);
      directedGraphConnections0.addPredecessor(integer0, (Comparable<Object>) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer((-1410));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      directedGraphConnections0.addSuccessor(integer0, comparable0);
      Integer integer1 = new Integer(1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      directedGraphConnections0.addSuccessor(integer1, comparable1);
      Comparable<Object> comparable2 = directedGraphConnections0.removeSuccessor(integer1);
      assertSame(comparable2, comparable1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElementOrder<Comparable<Locale.FilteringMode>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Comparable<Locale.FilteringMode>, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      directedGraphConnections0.addPredecessor(locale_FilteringMode1, locale_FilteringMode0);
      directedGraphConnections0.addPredecessor(locale_FilteringMode0, locale_FilteringMode1);
      directedGraphConnections0.removePredecessor(locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElementOrder<Comparable<Locale.FilteringMode>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Comparable<Locale.FilteringMode>, Integer> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      // Undeclared exception!
      try { 
        directedGraphConnections0.value((Comparable<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElementOrder<Locale.FilteringMode> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Locale.FilteringMode, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      // Undeclared exception!
      try { 
        directedGraphConnections0.removeSuccessor((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElementOrder<Comparable<Object>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Comparable<Object>, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      // Undeclared exception!
      try { 
        directedGraphConnections0.removePredecessor((Comparable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Stack<EndpointPair<HashMap<Integer, Integer>>> stack0 = new Stack<EndpointPair<HashMap<Integer, Integer>>>();
      // Undeclared exception!
      try { 
        DirectedGraphConnections.ofImmutable(hashMap0, (Iterable<EndpointPair<HashMap<Integer, Integer>>>) stack0, (Function<HashMap<Integer, Integer>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DirectedGraphConnections.of((ElementOrder<EndpointPair<BoundType>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.DirectedGraphConnections", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElementOrder<Comparable<Integer>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Comparable<Integer>, Comparable<Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      // Undeclared exception!
      try { 
        directedGraphConnections0.incidentEdgeIterator((Comparable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      TreeSet<EndpointPair<Locale.FilteringMode>> treeSet0 = new TreeSet<EndpointPair<Locale.FilteringMode>>();
      Converter<Locale.FilteringMode, Locale.FilteringMode> converter0 = Converter.identity();
      DirectedGraphConnections<Locale.FilteringMode, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.ofImmutable(locale_FilteringMode0, (Iterable<EndpointPair<Locale.FilteringMode>>) treeSet0, (Function<Locale.FilteringMode, Locale.FilteringMode>) converter0);
      // Undeclared exception!
      try { 
        directedGraphConnections0.addSuccessor(locale_FilteringMode0, locale_FilteringMode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElementOrder<EndpointPair<BoundType>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<EndpointPair<BoundType>, NetworkBuilder<BoundType, Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      // Undeclared exception!
      try { 
        directedGraphConnections0.addSuccessor((EndpointPair<BoundType>) null, (NetworkBuilder<BoundType, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      HashSet<EndpointPair<Locale.FilteringMode>> hashSet0 = new HashSet<EndpointPair<Locale.FilteringMode>>(2, 2);
      Converter<Locale.FilteringMode, Locale.FilteringMode> converter0 = Converter.identity();
      DirectedGraphConnections<Locale.FilteringMode, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.ofImmutable(locale_FilteringMode0, (Iterable<EndpointPair<Locale.FilteringMode>>) hashSet0, (Function<Locale.FilteringMode, Locale.FilteringMode>) converter0);
      // Undeclared exception!
      try { 
        directedGraphConnections0.addPredecessor(locale_FilteringMode0, locale_FilteringMode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElementOrder<EndpointPair<Locale.FilteringMode>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<EndpointPair<Locale.FilteringMode>, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        directedGraphConnections0.addPredecessor((EndpointPair<Locale.FilteringMode>) null, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementOrder<EndpointPair<Locale.FilteringMode>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<Locale.FilteringMode>, EndpointPair<Locale.FilteringMode>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      directedGraphConnections0.addPredecessor((EndpointPair<Locale.FilteringMode>) null, (EndpointPair<Locale.FilteringMode>) null);
      Set<EndpointPair<Locale.FilteringMode>> set0 = directedGraphConnections0.predecessors();
      Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>> function0 = (Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) mock(Function.class, new ViolatedAssumptionAnswer());
      directedGraphConnections0.addSuccessor((EndpointPair<Locale.FilteringMode>) null, (EndpointPair<Locale.FilteringMode>) null);
      Function<NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode> function1 = (Function<NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>> converter0 = Converter.from((Function<? super Locale.FilteringMode, ? extends NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) function0, (Function<? super NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, ? extends Locale.FilteringMode>) function1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        DirectedGraphConnections.ofImmutable(locale_FilteringMode0, (Iterable<EndpointPair<Locale.FilteringMode>>) set0, (Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.DirectedGraphConnections", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElementOrder<EndpointPair<BoundType>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<BoundType>, NetworkBuilder<BoundType, Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<BoundType, Integer> standardMutableNetwork0 = new StandardMutableNetwork<BoundType, Integer>(networkBuilder0);
      NetworkBuilder<BoundType, Integer> networkBuilder1 = NetworkBuilder.from((Network<BoundType, Integer>) standardMutableNetwork0);
      directedGraphConnections0.addSuccessor((EndpointPair<BoundType>) null, networkBuilder1);
      NetworkBuilder<BoundType, Integer> networkBuilder2 = directedGraphConnections0.addSuccessor((EndpointPair<BoundType>) null, (NetworkBuilder<BoundType, Integer>) null);
      assertSame(networkBuilder2, networkBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("ElementOrder{type=STABLE}").when(comparable0).toString();
      directedGraphConnections0.addSuccessor(integer0, comparable0);
      directedGraphConnections0.addPredecessor(integer0, (Comparable<Object>) null);
      Comparable<Object> comparable1 = directedGraphConnections0.addSuccessor(integer0, (Comparable<Object>) null);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      directedGraphConnections0.addPredecessor(integer0, comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      directedGraphConnections0.addPredecessor(integer0, comparable1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EndpointPair<Locale.FilteringMode> endpointPair0 = EndpointPair.ordered(locale_FilteringMode0, locale_FilteringMode0);
      Stack<EndpointPair<EndpointPair<Locale.FilteringMode>>> stack0 = new Stack<EndpointPair<EndpointPair<Locale.FilteringMode>>>();
      Converter<EndpointPair<Locale.FilteringMode>, EndpointPair<Locale.FilteringMode>> converter0 = Converter.identity();
      EndpointPair<EndpointPair<Locale.FilteringMode>> endpointPair1 = EndpointPair.unordered(endpointPair0, endpointPair0);
      stack0.add(endpointPair1);
      DirectedGraphConnections<EndpointPair<Locale.FilteringMode>, EndpointPair<Locale.FilteringMode>> directedGraphConnections0 = DirectedGraphConnections.ofImmutable(endpointPair0, (Iterable<EndpointPair<EndpointPair<Locale.FilteringMode>>>) stack0, (Function<EndpointPair<Locale.FilteringMode>, EndpointPair<Locale.FilteringMode>>) converter0);
      directedGraphConnections0.addPredecessor(endpointPair0, endpointPair0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(2);
      ElementOrder<Integer> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      directedGraphConnections0.addSuccessor(integer0, comparable0);
      Comparable<Object> comparable1 = directedGraphConnections0.removeSuccessor(integer0);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(8287);
      directedGraphConnections0.addPredecessor(integer0, (Comparable<Object>) null);
      Comparable<Object> comparable0 = directedGraphConnections0.removeSuccessor(integer0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(1);
      Comparable<Object> comparable0 = directedGraphConnections0.removeSuccessor(integer0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ElementOrder<Locale.FilteringMode> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Locale.FilteringMode, EndpointPair<Locale.FilteringMode>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      directedGraphConnections0.removePredecessor(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ElementOrder<Comparable<Locale.FilteringMode>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Comparable<Locale.FilteringMode>, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      directedGraphConnections0.addPredecessor(locale_FilteringMode0, locale_FilteringMode0);
      directedGraphConnections0.removePredecessor(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ElementOrder<Locale.FilteringMode> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Locale.FilteringMode, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      directedGraphConnections0.addPredecessor(locale_FilteringMode0, locale_FilteringMode0);
      directedGraphConnections0.value(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ElementOrder<EndpointPair<BoundType>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<EndpointPair<BoundType>, NetworkBuilder<BoundType, Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      BoundType boundType0 = BoundType.OPEN;
      Set<EndpointPair<BoundType>> set0 = directedGraphConnections0.successors();
      LinkedHashSet<EndpointPair<BoundType>> linkedHashSet0 = new LinkedHashSet<EndpointPair<BoundType>>(set0);
      Converter<BoundType, BoundType> converter0 = Converter.identity();
      DirectedGraphConnections<BoundType, BoundType> directedGraphConnections1 = DirectedGraphConnections.ofImmutable(boundType0, (Iterable<EndpointPair<BoundType>>) linkedHashSet0, (Function<BoundType, BoundType>) converter0);
      directedGraphConnections1.value(boundType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ElementOrder<EndpointPair<BoundType>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<BoundType>, NetworkBuilder<BoundType, Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      directedGraphConnections0.addPredecessor((EndpointPair<BoundType>) null, (NetworkBuilder<BoundType, Integer>) null);
      directedGraphConnections0.addSuccessor((EndpointPair<BoundType>) null, (NetworkBuilder<BoundType, Integer>) null);
      Set<EndpointPair<BoundType>> set0 = directedGraphConnections0.successors();
      LinkedHashSet<EndpointPair<BoundType>> linkedHashSet0 = new LinkedHashSet<EndpointPair<BoundType>>(set0);
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ElementOrder<EndpointPair<BoundType>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<BoundType>, NetworkBuilder<BoundType, Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      directedGraphConnections0.addSuccessor((EndpointPair<BoundType>) null, (NetworkBuilder<BoundType, Integer>) null);
      Set<EndpointPair<BoundType>> set0 = directedGraphConnections0.successors();
      LinkedHashSet<EndpointPair<BoundType>> linkedHashSet0 = new LinkedHashSet<EndpointPair<BoundType>>(set0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ElementOrder<EndpointPair<Locale.FilteringMode>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<Locale.FilteringMode>, EndpointPair<Locale.FilteringMode>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Set<EndpointPair<Locale.FilteringMode>> set0 = directedGraphConnections0.predecessors();
      Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>> function0 = (Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) mock(Function.class, new ViolatedAssumptionAnswer());
      directedGraphConnections0.addSuccessor((EndpointPair<Locale.FilteringMode>) null, (EndpointPair<Locale.FilteringMode>) null);
      Function<NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode> function1 = (Function<NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>> converter0 = Converter.from((Function<? super Locale.FilteringMode, ? extends NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) function0, (Function<? super NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, ? extends Locale.FilteringMode>) function1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      DirectedGraphConnections<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>> directedGraphConnections1 = DirectedGraphConnections.ofImmutable(locale_FilteringMode0, (Iterable<EndpointPair<Locale.FilteringMode>>) set0, (Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) converter0);
      assertNotNull(directedGraphConnections1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ElementOrder<EndpointPair<Locale.FilteringMode>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<Locale.FilteringMode>, EndpointPair<Locale.FilteringMode>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      directedGraphConnections0.addPredecessor((EndpointPair<Locale.FilteringMode>) null, (EndpointPair<Locale.FilteringMode>) null);
      Set<EndpointPair<Locale.FilteringMode>> set0 = directedGraphConnections0.predecessors();
      Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>> function0 = (Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode> function1 = (Function<NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>> converter0 = Converter.from((Function<? super Locale.FilteringMode, ? extends NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) function0, (Function<? super NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>, ? extends Locale.FilteringMode>) function1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        DirectedGraphConnections.ofImmutable(locale_FilteringMode0, (Iterable<EndpointPair<Locale.FilteringMode>>) set0, (Function<Locale.FilteringMode, NetworkBuilder<Locale.FilteringMode, Locale.FilteringMode>>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.DirectedGraphConnections", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ElementOrder<HashMap<Integer, Integer>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<HashMap<Integer, Integer>, Integer> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Set<HashMap<Integer, Integer>> set0 = directedGraphConnections0.adjacentNodes();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(3738);
      Integer integer1 = new Integer((-19));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer1);
      EndpointPair<EndpointPair<Integer>> endpointPair1 = EndpointPair.ordered(endpointPair0, endpointPair0);
      Converter<Integer, Integer> converter0 = Converter.identity();
      // Undeclared exception!
      try { 
        DirectedGraphConnections.ofImmutable(integer1, (Iterable<EndpointPair<Integer>>) endpointPair1, (Function<Integer, Integer>) converter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(3738);
      Integer integer1 = new Integer((-223));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer1);
      EndpointPair<EndpointPair<Integer>> endpointPair1 = EndpointPair.ordered(endpointPair0, endpointPair0);
      Converter<Integer, Integer> converter0 = Converter.identity();
      // Undeclared exception!
      try { 
        DirectedGraphConnections.ofImmutable(integer0, (Iterable<EndpointPair<Integer>>) endpointPair1, (Function<Integer, Integer>) converter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Stack<EndpointPair<Locale.FilteringMode>> stack0 = new Stack<EndpointPair<Locale.FilteringMode>>();
      Converter<Locale.FilteringMode, Locale.FilteringMode> converter0 = Converter.identity();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EndpointPair<Locale.FilteringMode> endpointPair0 = EndpointPair.unordered(locale_FilteringMode1, locale_FilteringMode0);
      stack0.add(endpointPair0);
      DirectedGraphConnections<Locale.FilteringMode, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.ofImmutable(locale_FilteringMode0, (Iterable<EndpointPair<Locale.FilteringMode>>) stack0, (Function<Locale.FilteringMode, Locale.FilteringMode>) converter0);
      assertNotNull(directedGraphConnections0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Converter<Integer, Integer> converter0 = Converter.identity();
      Integer integer0 = new Integer(2);
      ArrayDeque<EndpointPair<Integer>> arrayDeque0 = new ArrayDeque<EndpointPair<Integer>>();
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<Object, Object> standardValueGraph0 = new StandardValueGraph<Object, Object>(valueGraphBuilder0);
      ImmutableValueGraph<Object, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Object, Object>) standardValueGraph0);
      ImmutableGraph<Object> immutableGraph0 = new ImmutableGraph<Object>(immutableValueGraph0);
      Integer integer1 = new Integer(0);
      EndpointPair<Integer> endpointPair0 = EndpointPair.of((Graph<?>) immutableGraph0, integer0, integer1);
      arrayDeque0.add(endpointPair0);
      DirectedGraphConnections<Integer, Integer> directedGraphConnections0 = DirectedGraphConnections.ofImmutable(integer0, (Iterable<EndpointPair<Integer>>) arrayDeque0, (Function<Integer, Integer>) converter0);
      assertNotNull(directedGraphConnections0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ElementOrder<EndpointPair<Object>> elementOrder0 = ElementOrder.insertion();
      // Undeclared exception!
      try { 
        DirectedGraphConnections.of(elementOrder0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // INSERTION
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ElementOrder<Integer> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Integer, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Integer integer0 = new Integer(26);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      directedGraphConnections0.addPredecessor(integer0, comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("ElementOrder{type=STABLE}").when(comparable1).toString();
      directedGraphConnections0.addSuccessor(integer0, comparable1);
      Comparable<Object> comparable2 = directedGraphConnections0.removeSuccessor(integer0);
      assertSame(comparable2, comparable1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ElementOrder<Comparable<Locale.FilteringMode>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Comparable<Locale.FilteringMode>, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = directedGraphConnections0.addSuccessor(locale_FilteringMode0, locale_FilteringMode0);
      directedGraphConnections0.addPredecessor(locale_FilteringMode0, locale_FilteringMode1);
      directedGraphConnections0.removePredecessor(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ElementOrder<EndpointPair<Object>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<EndpointPair<Object>, Comparable<Object>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Set<EndpointPair<Object>> set0 = directedGraphConnections0.adjacentNodes();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ElementOrder<Locale.FilteringMode> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<Locale.FilteringMode, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Iterator<EndpointPair<Locale.FilteringMode>> iterator0 = directedGraphConnections0.incidentEdgeIterator(locale_FilteringMode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ElementOrder<EndpointPair<BoundType>> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<EndpointPair<BoundType>, NetworkBuilder<BoundType, Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Object, Object> standardMutableNetwork0 = new StandardMutableNetwork<Object, Object>(networkBuilder0);
      BoundType boundType0 = BoundType.OPEN;
      EndpointPair<BoundType> endpointPair0 = EndpointPair.of((Network<?, ?>) standardMutableNetwork0, boundType0, boundType0);
      directedGraphConnections0.addSuccessor(endpointPair0, (NetworkBuilder<BoundType, Integer>) null);
      Set<EndpointPair<BoundType>> set0 = directedGraphConnections0.successors();
      LinkedHashSet<EndpointPair<BoundType>> linkedHashSet0 = new LinkedHashSet<EndpointPair<BoundType>>(set0);
      Converter<BoundType, BoundType> converter0 = Converter.identity();
      DirectedGraphConnections<BoundType, BoundType> directedGraphConnections1 = DirectedGraphConnections.ofImmutable(boundType0, (Iterable<EndpointPair<BoundType>>) linkedHashSet0, (Function<BoundType, BoundType>) converter0);
      directedGraphConnections1.value(boundType0);
      assertTrue(linkedHashSet0.contains(endpointPair0));
      assertFalse(set0.contains(endpointPair0));
      assertFalse(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ElementOrder<Locale.FilteringMode> elementOrder0 = ElementOrder.stable();
      DirectedGraphConnections<Locale.FilteringMode, Locale.FilteringMode> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Iterator<EndpointPair<Locale.FilteringMode>> iterator0 = directedGraphConnections0.incidentEdgeIterator(locale_FilteringMode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ElementOrder<EndpointPair<Locale.FilteringMode>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<Locale.FilteringMode>, EndpointPair<Locale.FilteringMode>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Set<EndpointPair<Locale.FilteringMode>> set0 = directedGraphConnections0.predecessors();
      TreeSet<EndpointPair<Locale.FilteringMode>> treeSet0 = new TreeSet<EndpointPair<Locale.FilteringMode>>(set0);
  }
}
