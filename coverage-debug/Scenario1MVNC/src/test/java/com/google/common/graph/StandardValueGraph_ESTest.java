/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:10:06 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.Range;
import com.google.common.graph.AbstractGraphBuilder;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardValueGraph_ESTest extends StandardValueGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      Integer integer0 = new Integer(10);
      Range<Integer> range0 = Range.atMost(integer0);
      standardMutableValueGraph0.addNode(integer0);
      Integer integer1 = new Integer(10);
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.unordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer1);
      Object object0 = standardMutableValueGraph0.edgeValueOrDefault(endpointPair0, (Object) range0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      standardMutableValueGraph0.addNode(integer0);
      Integer integer1 = new Integer(1);
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer1);
      boolean boolean0 = standardMutableValueGraph0.hasEdgeConnecting(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      Integer integer0 = Integer.getInteger((String) null, (-682));
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(valueGraphBuilder0);
      ImmutableGraph<Object> immutableGraph0 = ImmutableGraph.copyOf((Graph<Object>) standardMutableGraph0);
      EndpointPair<Integer> endpointPair0 = EndpointPair.of((Graph<?>) standardMutableGraph0, integer0, integer0);
      StandardValueGraph<EndpointPair<Integer>, EndpointPair<Integer>> standardValueGraph0 = new StandardValueGraph<EndpointPair<Integer>, EndpointPair<Integer>>(valueGraphBuilder0);
      ImmutableValueGraph<EndpointPair<Integer>, EndpointPair<Integer>> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<EndpointPair<Integer>, EndpointPair<Integer>>) standardValueGraph0);
      EndpointPair<Integer> endpointPair1 = EndpointPair.of((Graph<?>) immutableGraph0, integer0, integer0);
      boolean boolean0 = immutableValueGraph0.hasEdgeConnecting(endpointPair0, endpointPair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, Comparable<Integer>> standardValueGraph0 = new StandardValueGraph<Object, Comparable<Integer>>(graphBuilder0);
      Set<Object> set0 = standardValueGraph0.nodes();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, EndpointPair<Integer>> standardValueGraph0 = new StandardValueGraph<Object, EndpointPair<Integer>>(graphBuilder0);
      ElementOrder<Object> elementOrder0 = standardValueGraph0.nodeOrder();
      assertEquals(ElementOrder.Type.INSERTION, elementOrder0.type());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, Object> standardValueGraph0 = new StandardValueGraph<Object, Object>(graphBuilder0);
      ImmutableValueGraph<Object, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Object, Object>) standardValueGraph0);
      boolean boolean0 = immutableValueGraph0.isDirected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Locale.Category, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Locale.Category, Integer>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = standardMutableValueGraph0.edgeValueOrDefault(locale_Category0, locale_Category0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<Integer, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Object>(graphBuilder0);
      ImmutableValueGraph<Integer, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Integer, Object>) standardMutableValueGraph0);
      Integer integer0 = new Integer(288);
      StandardMutableValueGraph standardMutableValueGraph1 = (StandardMutableValueGraph)immutableValueGraph0.edgeValueOrDefault(integer0, integer0, (Object) standardMutableValueGraph0);
      assertFalse(standardMutableValueGraph1.isDirected());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<EndpointPair<Integer>, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<EndpointPair<Integer>, Integer>(graphBuilder0);
      long long0 = standardMutableValueGraph0.edgeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      HashMap<Object, GraphConnections<Object, Object>> hashMap0 = new HashMap<Object, GraphConnections<Object, Object>>();
      StandardValueGraph<Object, Object> standardValueGraph0 = new StandardValueGraph<Object, Object>(graphBuilder0, hashMap0, 1L);
      ImmutableValueGraph<Object, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Object, Object>) standardValueGraph0);
      long long0 = immutableValueGraph0.edgeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Object, Comparable<Integer>> standardValueGraph0 = new StandardValueGraph<Object, Comparable<Integer>>(networkBuilder0);
      boolean boolean0 = standardValueGraph0.containsNode(networkBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      valueGraphBuilder0.allowsSelfLoops(true);
      HashMap<EndpointPair<Integer>, GraphConnections<EndpointPair<Integer>, Object>> hashMap0 = new HashMap<EndpointPair<Integer>, GraphConnections<EndpointPair<Integer>, Object>>();
      StandardValueGraph<EndpointPair<Integer>, Object> standardValueGraph0 = new StandardValueGraph<EndpointPair<Integer>, Object>(valueGraphBuilder0, hashMap0, 10);
      boolean boolean0 = standardValueGraph0.allowsSelfLoops();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      StandardValueGraph<Integer, Integer> standardValueGraph0 = new StandardValueGraph<Integer, Integer>(valueGraphBuilder0);
      Integer integer0 = new Integer((-344));
      // Undeclared exception!
      try { 
        standardValueGraph0.successors(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node -344 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      TreeMap<Object, GraphConnections<Object, TreeMap<Object, Object>>> treeMap0 = new TreeMap<Object, GraphConnections<Object, TreeMap<Object, Object>>>();
      StandardValueGraph<Object, TreeMap<Object, Object>> standardValueGraph0 = new StandardValueGraph<Object, TreeMap<Object, Object>>(graphBuilder0, treeMap0, 1897L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        standardValueGraph0.successors(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Integer>, Comparable<Object>> standardValueGraph0 = new StandardValueGraph<Comparable<Integer>, Comparable<Object>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.predecessors((Comparable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardMutableValueGraph<Comparable<Object>, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Object>, Integer>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.incidentEdges((Comparable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardValueGraph<Integer, Comparable<Object>> standardValueGraph0 = new StandardValueGraph<Integer, Comparable<Object>>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.hasEdgeConnecting((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.hasEdgeConnecting((EndpointPair<Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.maxValue();
      StandardValueGraph<Object, Comparable<Integer>> standardValueGraph0 = new StandardValueGraph<Object, Comparable<Integer>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.edgeValueOrDefault((Object) null, (Object) discreteDomain0, (Comparable<Integer>) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      TreeMap<Object, GraphConnections<Object, Comparable<Integer>>> treeMap0 = new TreeMap<Object, GraphConnections<Object, Comparable<Integer>>>();
      StandardValueGraph<Object, Comparable<Integer>> standardValueGraph0 = new StandardValueGraph<Object, Comparable<Integer>>(networkBuilder0, treeMap0, 0L);
      // Undeclared exception!
      try { 
        standardValueGraph0.edgeValueOrDefault((Object) discreteDomain0, (Object) integer0, (Comparable<Integer>) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.DiscreteDomain$IntegerDomain cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardValueGraph<Integer, Integer> standardValueGraph0 = new StandardValueGraph<Integer, Integer>(graphBuilder0);
      Integer integer0 = new Integer(2038);
      // Undeclared exception!
      try { 
        standardValueGraph0.edgeValueOrDefault((EndpointPair<Integer>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.unordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.edgeValueOrDefault(endpointPair0, (Object) networkBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch: unordered endpoints cannot be used with directed graphs
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      TreeMap<TreeMap<Integer, Integer>, GraphConnections<TreeMap<Integer, Integer>, Integer>> treeMap0 = new TreeMap<TreeMap<Integer, Integer>, GraphConnections<TreeMap<Integer, Integer>, Integer>>();
      StandardValueGraph<TreeMap<Integer, Integer>, Integer> standardValueGraph0 = new StandardValueGraph<TreeMap<Integer, Integer>, Integer>(networkBuilder0, treeMap0, 1119L);
      TreeMap<Integer, Integer> treeMap1 = new TreeMap<Integer, Integer>();
      EndpointPair<TreeMap<Integer, Integer>> endpointPair0 = EndpointPair.unordered(treeMap1, treeMap1);
      // Undeclared exception!
      try { 
        standardValueGraph0.edgeValueOrDefault(endpointPair0, (Integer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Integer, Integer> standardValueGraph0 = new StandardValueGraph<Integer, Integer>(networkBuilder0);
      ImmutableValueGraph<Integer, Integer> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Integer, Integer>) standardValueGraph0);
      // Undeclared exception!
      try { 
        immutableValueGraph0.adjacentNodes((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(networkBuilder0);
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.from((Graph<Object>) standardMutableGraph0);
      TreeMap<TreeMap<Integer, Object>, GraphConnections<TreeMap<Integer, Object>, Object>> treeMap0 = new TreeMap<TreeMap<Integer, Object>, GraphConnections<TreeMap<Integer, Object>, Object>>();
      StandardValueGraph<TreeMap<Integer, Object>, Object> standardValueGraph0 = new StandardValueGraph<TreeMap<Integer, Object>, Object>(graphBuilder0, treeMap0, 0L);
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>();
      // Undeclared exception!
      try { 
        standardValueGraph0.adjacentNodes(treeMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Comparable<Object>, GraphConnections<Comparable<Object>, Integer>> hashMap0 = new HashMap<Comparable<Object>, GraphConnections<Comparable<Object>, Integer>>();
      StandardValueGraph<Comparable<Object>, Integer> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<Comparable<Object>, Integer>((AbstractGraphBuilder<? super Comparable<Object>>) null, hashMap0, 539L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardValueGraph<Integer, Comparable<Integer>> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<Integer, Comparable<Integer>>(networkBuilder0, (Map<Integer, GraphConnections<Integer, Comparable<Integer>>>) null, 9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      TreeMap<Comparable<Object>, GraphConnections<Comparable<Object>, Integer>> treeMap0 = new TreeMap<Comparable<Object>, GraphConnections<Comparable<Object>, Integer>>();
      StandardValueGraph<Comparable<Object>, Integer> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<Comparable<Object>, Integer>(networkBuilder0, treeMap0, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not true that java.lang.Long@0000000007 is non-negative.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardValueGraph<Comparable<Object>, Integer> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<Comparable<Object>, Integer>((AbstractGraphBuilder<? super Comparable<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      standardMutableValueGraph0.addNode(integer0);
      Set<Comparable<Integer>> set0 = standardMutableValueGraph0.adjacentNodes(integer0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<TreeMap<Locale.FilteringMode, Locale.FilteringMode>, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<TreeMap<Locale.FilteringMode, Locale.FilteringMode>, Integer>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.successors((TreeMap<Locale.FilteringMode, Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(graphBuilder0);
      GraphBuilder<Object> graphBuilder1 = GraphBuilder.undirected();
      StandardMutableValueGraph<Integer, TreeMap<Integer, Integer>> standardMutableValueGraph1 = new StandardMutableValueGraph<Integer, TreeMap<Integer, Integer>>(graphBuilder1);
      Graph<Integer> graph0 = standardMutableValueGraph1.asGraph();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.of((Graph<?>) graph0, (Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      boolean boolean0 = standardMutableValueGraph0.hasEdgeConnecting(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      TreeMap<Object, GraphConnections<Object, Integer>> treeMap0 = new TreeMap<Object, GraphConnections<Object, Integer>>();
      StandardValueGraph<Object, Integer> standardValueGraph0 = new StandardValueGraph<Object, Integer>(networkBuilder0, treeMap0, 0);
      Object object0 = new Object();
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>();
      EndpointPair<Object> endpointPair0 = EndpointPair.ordered(object0, (Object) treeMap1);
      // Undeclared exception!
      try { 
        standardValueGraph0.hasEdgeConnecting(endpointPair0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Comparable<Object>, Integer> standardValueGraph0 = new StandardValueGraph<Comparable<Object>, Integer>(networkBuilder0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      // Undeclared exception!
      try { 
        standardValueGraph0.incidentEdges(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node  is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      standardMutableValueGraph0.addNode(integer0);
      StandardValueGraph<Object, TreeMap<Integer, Integer>> standardValueGraph0 = new StandardValueGraph<Object, TreeMap<Integer, Integer>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.predecessors(standardMutableValueGraph0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node isDirected: false, allowsSelfLoops: false, nodes: [-2147483648], edges: {} is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      StandardMutableValueGraph<Comparable<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.adjacentNodes(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node -2147483648 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }
}
