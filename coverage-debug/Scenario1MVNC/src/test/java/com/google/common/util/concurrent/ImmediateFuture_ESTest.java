/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:43:10 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.ImmediateFuture;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.util.concurrent.CancellationException;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.FutureTask;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmediateFuture_ESTest extends ImmediateFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ImmediateFuture<SQLTransactionRollbackException> immediateFuture0 = new ImmediateFuture<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Thread thread0 = MockThread.currentThread();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(406, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      immediateFuture0.addListener(thread0, forkJoinPool0);
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qWJReF[=Z");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.google.common.util.concurrent.ImmediateFuture@1[status=SUCCESS, result=[java.lang.Object@e605ad9]]", "qWJReF[=Z", 0, sQLTimeoutException0);
      ImmediateFuture<SQLTransactionRollbackException> immediateFuture0 = new ImmediateFuture<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = immediateFuture0.get();
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmediateFuture<Object> immediateFuture0 = new ImmediateFuture<Object>((Object) null);
      Object object0 = immediateFuture0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmediateFuture<Object> immediateFuture0 = new ImmediateFuture<Object>((Object) null);
      immediateFuture0.isDone();
      ImmediateFuture<ImmediateFuture<Object>> immediateFuture1 = new ImmediateFuture<ImmediateFuture<Object>>(immediateFuture0);
      MockThread mockThread0 = new MockThread("com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImmediateFuture<Object> immediateFuture0 = new ImmediateFuture<Object>((Object) null);
      immediateFuture0.cancel(false);
      ImmediateFuture<ImmediateFuture<Object>> immediateFuture1 = new ImmediateFuture<ImmediateFuture<Object>>(immediateFuture0);
      MockThread mockThread0 = new MockThread("com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture");
      FutureTask<Object> futureTask0 = new FutureTask<Object>(mockThread0, mockThread0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      ImmediateFuture<Object> immediateFuture0 = new ImmediateFuture<Object>(object0);
      immediateFuture0.toString();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qWJReF[=Z");
      ImmediateFuture<ImmediateFuture<Object>> immediateFuture1 = new ImmediateFuture<ImmediateFuture<Object>>(immediateFuture0);
      MockThread mockThread0 = new MockThread("com.google.common.util.concurrent.ImmediateFuture@2[status=SUCCESS, result=[null]]");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Object object0 = new Object();
      ImmediateFuture<Object> immediateFuture0 = new ImmediateFuture<Object>(object0);
      immediateFuture0.get((-54L), timeUnit0);
      boolean boolean0 = immediateFuture0.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ImmediateFuture<SQLTransactionRollbackException> immediateFuture0 = new ImmediateFuture<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      immediateFuture0.get((-54L), timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        immediateFuture0.addListener((Runnable) null, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Runnable was null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("<-a;7'w*vdep@", "<-a;7'w*vdep@");
      sQLRecoverableException0.printStackTrace();
      ImmediateFuture.ImmediateFailedFuture<SQLTransactionRollbackException> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<SQLTransactionRollbackException>(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("5");
      assertEquals("java.sql.SQLTransactionRollbackException: 5", sQLTransactionRollbackException0.toString());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Object> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Object>();
      long long0 = (-406L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        immediateFuture_ImmediateCancelledFuture0.get((-406L), timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // Task was cancelled.
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }
}
