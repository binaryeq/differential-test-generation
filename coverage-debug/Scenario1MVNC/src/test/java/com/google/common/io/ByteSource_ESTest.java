/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:25:24 GMT 2024
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.hash.HashCode;
import com.google.common.hash.HashFunction;
import com.google.common.hash.Hasher;
import com.google.common.io.ByteProcessor;
import com.google.common.io.ByteSink;
import com.google.common.io.ByteSource;
import com.google.common.io.CharSource;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteSource_ESTest extends ByteSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      assertNotNull(byteSource0);
      
      ByteSource byteSource1 = byteSource0.slice(1084818905618843912L, 1084818905618843912L);
      Class<ByteSource> class0 = ByteSource.class;
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      boolean boolean0 = byteSource1.isEmpty();
      assertTrue(boolean0);
      
      ByteSource byteSource3 = byteSource2.slice(1084818905618843912L, 2L);
      byte[] byteArray0 = byteSource3.read();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ByteSource> class0 = ByteSource.class;
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      ByteSource byteSource1 = byteSource0.slice(1084818905618843912L, 2L);
      byte[] byteArray0 = byteSource1.read();
      assertEquals(0, byteArray0.length);
      
      long long0 = byteSource0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      assertNotNull(byteSource0);
      
      byteSource0.openStream();
      Class<ByteSource> class0 = ByteSource.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      byteSource1.openStream();
      byteSource0.openBufferedStream();
      byteSource1.read();
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      byteSource0.slice(884L, 1344L);
      ByteSource byteSource1 = byteSource0.slice(884L, 262L);
      Class<ByteSource> class0 = ByteSource.class;
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      byteSource1.isEmpty();
      byteSource1.slice(884L, 379L);
      byte[] byteArray0 = byteSource2.read();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      ByteSource byteSource1 = ByteSource.wrap(byteArray0);
      boolean boolean0 = byteSource0.contentEquals(byteSource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)15;
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      ByteSource byteSource1 = ByteSource.empty();
      byteSource0.contentEquals(byteSource1);
      // Undeclared exception!
      try { 
        byteSource0.read((ByteProcessor<ByteSource>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      ByteSource[] byteSourceArray0 = new ByteSource[4];
      ByteSource byteSource0 = ByteSource.empty();
      byteSourceArray0[0] = byteSource0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-76);
      ByteSource byteSource1 = ByteSource.wrap(byteArray0);
      byteSourceArray0[1] = byteSource1;
      ByteSource byteSource2 = ByteSource.wrap(byteArray0);
      byteSourceArray0[2] = byteSource2;
      ByteSource byteSource3 = ByteSource.concat((Iterable<? extends ByteSource>) linkedList0);
      byteSourceArray0[3] = byteSource3;
      ByteSource byteSource4 = ByteSource.concat(byteSourceArray0);
      byteSource3.slice((byte)29, 824L);
      byteSource1.slice((byte)29, 9223372036854775807L);
      byteSource3.openStream();
      byte[] byteArray1 = byteSource4.read();
      assertEquals(14, byteArray1.length);
      
      byteSource0.read();
      long long0 = byteSource3.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      assertFalse(stack0.contains(byteSource0));
      
      byteSource0.isEmpty();
      ByteSource byteSource1 = byteSource0.slice(571L, 571L);
      byteSource0.openStream();
      byteSource1.sizeIfKnown();
      // Undeclared exception!
      try { 
        byteSource1.slice(571L, (-1347L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (java.lang.Long@0000000006) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      ByteSource byteSource1 = byteSource0.slice(0L, 0L);
      byteSource1.openStream();
      byteSource0.contentEquals(byteSource1);
      byteSource0.openStream();
      // Undeclared exception!
      try { 
        byteSource1.slice(0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (java.lang.Long@0000000010) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      byteSource0.read();
      byteSource0.slice(3498L, 3498L);
      Class<ByteSource> class0 = ByteSource.class;
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      byteSource1.sizeIfKnown();
      // Undeclared exception!
      try { 
        byteSource0.read((ByteProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ByteSource> class0 = ByteSource.class;
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoader0.reload();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      byteSource0.size();
      byteSource0.read();
      long long0 = byteSource0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource1 = ByteSource.concat(byteSourceArray0);
      byteSource1.openStream();
      byteSource0.read();
      byteSource1.isEmpty();
      ByteProcessor<MockFileInputStream> byteProcessor0 = (ByteProcessor<MockFileInputStream>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(byteProcessor0).getResult();
      byteSource1.read(byteProcessor0);
      ByteSource.concat(byteSourceArray0);
      ByteSource byteSource2 = ByteSource.wrap(byteArray0);
      assertFalse(byteSource2.equals((Object)byteSource0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteSource[] byteSourceArray0 = new ByteSource[4];
      ByteSource byteSource0 = ByteSource.empty();
      byteSourceArray0[0] = byteSource0;
      ByteSource byteSource1 = ByteSource.empty();
      byteSourceArray0[1] = byteSource1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)0;
      ByteSource byteSource2 = ByteSource.wrap(byteArray0);
      byteSourceArray0[2] = byteSource2;
      ByteSource byteSource3 = ByteSource.wrap(byteArray0);
      byteSourceArray0[3] = byteSource3;
      ByteSource byteSource4 = ByteSource.concat(byteSourceArray0);
      long long0 = byteSource4.size();
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      ByteSource byteSource1 = byteSource0.slice(884L, 1084818905618843912L);
      ByteSource byteSource2 = byteSource1.slice(884L, 262L);
      byteSource1.openStream();
      byte[] byteArray0 = byteSource1.read();
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = byteSource1.read();
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = byteSource2.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      byteSource0.contentEquals(byteSource0);
      ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      byteSource0.openStream();
      ByteSource byteSource1 = byteSource0.slice(1L, 1L);
      byteSource1.read();
      byteSource1.read();
      Hasher hasher0 = mock(Hasher.class, new ViolatedAssumptionAnswer());
      doReturn((HashCode) null).when(hasher0).hash();
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn(hasher0).when(hashFunction0).newHasher();
      HashCode hashCode0 = byteSource1.hash(hashFunction0);
      assertNull(hashCode0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.openStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D&.TP?`Bxq`ogQJ[;", true);
      byteSource0.copyTo((OutputStream) mockFileOutputStream0);
      ByteSource byteSource1 = ByteSource.empty();
      ByteProcessor<Object> byteProcessor0 = (ByteProcessor<Object>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(byteProcessor0).getResult();
      doReturn(false).when(byteProcessor0).processBytes(any(byte[].class) , anyInt() , anyInt());
      byteSource1.read(byteProcessor0);
      ByteSource byteSource2 = ByteSource.empty();
      assertSame(byteSource2, byteSource1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      ByteSource byteSource1 = byteSource0.slice(571L, 571L);
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) linkedList0);
      ByteSource[] byteSourceArray0 = new ByteSource[9];
      byteSourceArray0[0] = byteSource1;
      byteSourceArray0[1] = byteSource0;
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource3 = ByteSource.concat(iterator0);
      byteSourceArray0[2] = byteSource3;
      byteSourceArray0[3] = byteSource0;
      ByteSource byteSource4 = ByteSource.concat(iterator0);
      byteSourceArray0[4] = byteSource4;
      byteSourceArray0[5] = byteSource2;
      ByteSource byteSource5 = ByteSource.concat(iterator0);
      byteSourceArray0[6] = byteSource5;
      byteSourceArray0[7] = byteSource2;
      byteSourceArray0[8] = byteSource0;
      ByteSource byteSource6 = ByteSource.concat(byteSourceArray0);
      boolean boolean0 = byteSource6.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-101);
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      boolean boolean0 = byteSource0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteSource.concat((Iterable<? extends ByteSource>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      InputStream inputStream0 = byteSource0.openStream();
      assertFalse(inputStream0.markSupported());
      
      ByteSource byteSource1 = byteSource0.slice(1L, 1L);
      boolean boolean0 = byteSource1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)125;
      ByteSource byteSource1 = ByteSource.wrap(byteArray0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource.concat(byteSourceArray0);
      // Undeclared exception!
      try { 
        byteSource1.read((ByteProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      ByteSource byteSource1 = byteSource0.slice(884L, 1084818905618843912L);
      ByteSource byteSource2 = byteSource1.slice(907L, 907L);
      byteSource2.sizeIfKnown();
      byteSource1.openBufferedStream();
      Optional<Long> optional0 = byteSource1.sizeIfKnown();
      Optional<Long> optional1 = byteSource0.sizeIfKnown();
      assertTrue(optional1.equals((Object)optional0));
      assertNotSame(optional1, optional0);
      
      byteSource1.read();
      InputStream inputStream0 = byteSource1.openBufferedStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      byteSource0.isEmpty();
      ByteSource byteSource1 = byteSource0.slice(571L, 571L);
      byteSource1.size();
      ByteSource.empty();
      ByteProcessor<Object> byteProcessor0 = null;
      // Undeclared exception!
      try { 
        byteSource1.slice((-5435081209227447693L), (-1236L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset (java.lang.Long@0000000005) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      ByteSource byteSource1 = byteSource0.slice(1084818905618843912L, 1084818905618843912L);
      byteSource0.openStream();
      byteSource0.read();
      // Undeclared exception!
      try { 
        byteSource1.slice((-838L), (-838L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset (java.lang.Long@0000000007) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      ByteSource[] byteSourceArray0 = new ByteSource[3];
      ByteSource byteSource0 = ByteSource.empty();
      ByteSource byteSource1 = byteSource0.slice(9223372036854775807L, 1425L);
      stack0.add(byteSource1);
      byteSourceArray0[0] = byteSource1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteSource byteSource2 = ByteSource.wrap(byteArray0);
      byteSourceArray0[1] = byteSource2;
      ByteSource byteSource3 = byteSource2.slice((byte)0, 2417L);
      byteSourceArray0[2] = byteSource3;
      ByteSource byteSource4 = ByteSource.concat(byteSourceArray0);
      stack0.push(byteSource4);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray1 = new ByteSource[0];
      ByteSource byteSource5 = ByteSource.concat(byteSourceArray1);
      linkedHashSet0.add(byteSource5);
      ByteSource byteSource6 = byteSource5.slice(0L, 0L);
      byteSource6.openStream();
      ByteSource byteSource7 = byteSource6.slice(0L, 0L);
      byteSource7.sizeIfKnown();
      byteSource7.sizeIfKnown();
      byte[] byteArray1 = byteSource6.read();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      Iterator<ByteSource> iterator1 = stack0.iterator();
      ByteSource byteSource1 = ByteSource.concat(iterator1);
      byteSource1.read();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSource1.read();
      byteSource1.openBufferedStream();
      byteSource0.openBufferedStream();
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) linkedList0);
      byteSource2.openBufferedStream();
      ByteSource.concat(iterator0);
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Hasher) null).when(hashFunction0).newHasher();
      // Undeclared exception!
      try { 
        byteSource2.hash(hashFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource1 = ByteSource.concat(iterator0);
      stack0.add(byteSource1);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.openStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rISyP8Ci2;\"HSlW6+Ux", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)10;
      ByteSource byteSource2 = ByteSource.wrap(byteArray0);
      byteSource2.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        ByteSource.concat(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSource byteSource0 = ByteSource.empty();
      // Undeclared exception!
      try { 
        byteSource0.read((ByteProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      linkedHashSet0.add(byteSource0);
      ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource1 = byteSource0.slice(884L, 1084818905618843912L);
      byteSource1.size();
      ByteSource byteSource2 = ByteSource.empty();
      // Undeclared exception!
      try { 
        byteSource2.read((ByteProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.openStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D&.TP?`Bxq`ogQJ[;", true);
      ByteSource byteSource1 = ByteSource.empty();
      byteSource0.asCharSource(charset0);
      byteSource_AsCharSource0.read();
      boolean boolean0 = byteSource0.contentEquals(byteSource1);
      assertTrue(boolean0);
      
      ByteSource.AsCharSource byteSource_AsCharSource1 = byteSource0.new AsCharSource(charset0);
      ByteSource byteSource2 = byteSource_AsCharSource0.asByteSource(charset0);
      assertTrue(stack0.contains(byteSource2));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      ByteSource.empty();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      ByteSource byteSource1 = ByteSource.empty();
      ByteSource byteSource2 = byteSource1.slice(0L, 0L);
      ByteSource byteSource3 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource3.new AsCharSource(charset0);
      byteSource_AsCharSource0.read();
      byteSource2.openBufferedStream();
      InputStream inputStream0 = byteSource0.openStream();
      assertFalse(inputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) linkedList0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.asByteSource(charset0);
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Hasher) null).when(hashFunction0).newHasher();
      // Undeclared exception!
      try { 
        byteSource0.hash(hashFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      byteSource0.contentEquals(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Hasher) null).when(hashFunction0).newHasher();
      // Undeclared exception!
      try { 
        byteSource1.hash(hashFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ByteSource byteSource1 = ByteSource.empty();
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource2 = ByteSource.concat(iterator0);
      byteSource0.contentEquals(byteSource2);
      ByteSource byteSource3 = ByteSource.concat(iterator0);
      byteSource3.contentEquals(byteSource0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("nZ>eU,NcVu(E");
      ByteSink byteSink0 = mock(ByteSink.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileOutputStream0).when(byteSink0).openStream();
      byteSource3.copyTo(byteSink0);
      Charset charset0 = null;
      ByteSource.AsCharSource byteSource_AsCharSource0 = null;
      try {
        byteSource_AsCharSource0 = byteSource1.new AsCharSource((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      byteSource0.openStream();
      byteSource0.isEmpty();
      // Undeclared exception!
      try { 
        byteSource0.contentEquals((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSource byteSource0 = ByteSource.empty();
      // Undeclared exception!
      try { 
        byteSource0.asCharSource((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      linkedHashSet0.add(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource2 = byteSource0.slice(884L, 1084818905618843912L);
      byteSource2.slice(884L, 262L);
      byteSource2.openStream();
      byteSource2.slice(884L, 2419L);
      byteSource1.sizeIfKnown();
      byteSource1.sizeIfKnown();
      byteSource2.read();
      // Undeclared exception!
      try { 
        Charset.forName("...");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ...
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      byteSource0.contentEquals(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource2 = byteSource1.slice(0L, 1702L);
      ByteSource[] byteSourceArray0 = new ByteSource[2];
      byteSourceArray0[0] = byteSource1;
      byteSourceArray0[1] = byteSource2;
      ByteSource.concat(byteSourceArray0);
      byteSource2.openStream();
      // Undeclared exception!
      try { 
        byteSource0.slice(0L, (-140L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (java.lang.Long@0000000014) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      boolean boolean0 = byteSource0.contentEquals(byteSource0);
      assertTrue(boolean0);
      
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource2 = byteSource1.slice(1084818905618843912L, 0L);
      byteSource0.openStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.common.base.CharMatcher$Negated", false);
      byteSource0.copyTo((OutputStream) mockFileOutputStream0);
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource.concat(iterator0);
      byte[] byteArray0 = byteSource2.read();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-1);
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      // Undeclared exception!
      try { 
        byteSource0.copyTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      linkedHashSet0.add(byteSource0);
      ByteSource byteSource1 = byteSource0.slice(0L, 0L);
      InputStream inputStream0 = byteSource1.openStream();
      assertEquals(0, inputStream0.available());
      
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = byteSource1.isEmpty();
      assertTrue(boolean0);
      
      long long0 = byteSource2.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      byteSource0.isEmpty();
      ByteSource byteSource1 = byteSource0.slice(571L, 571L);
      byteSource1.sizeIfKnown();
      byteSource1.sizeIfKnown();
      byteSource1.sizeIfKnown();
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) stack0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource2.new AsCharSource(charset0);
      String string0 = byteSource_AsCharSource0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      boolean boolean0 = byteSource0.contentEquals(byteSource0);
      assertTrue(boolean0);
      
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource2 = byteSource1.slice(1084818905618843912L, 0L);
      byteSource0.openStream();
      ByteSource byteSource3 = byteSource0.slice(1L, 1L);
      Optional<Long> optional0 = byteSource2.sizeIfKnown();
      Optional<Long> optional1 = byteSource2.sizeIfKnown();
      assertNotSame(optional1, optional0);
      
      byte[] byteArray0 = byteSource3.read();
      assertEquals(0, byteArray0.length);
      
      long long0 = byteSource2.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      byte[] byteArray0 = byteSource0.read();
      assertEquals(0, byteArray0.length);
      
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      InputStream inputStream0 = byteSource1.openBufferedStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      byteSource0.contentEquals(byteSource0);
      byteSource0.openStream();
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource1 = ByteSource.concat(byteSourceArray0);
      // Undeclared exception!
      try { 
        byteSource1.asCharSource((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      byteSource0.asCharSource(charset0);
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.openBufferedStream();
      ByteSource byteSource1 = byteSource_AsCharSource0.asByteSource(charset0);
      byteSource1.openStream();
      ByteSource byteSource2 = byteSource0.slice(0L, 0L);
      byteSource0.read();
      byteSource_AsCharSource0.openStream();
      byteSource1.sizeIfKnown();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteSource byteSource3 = ByteSource.wrap(byteArray0);
      byteSource3.sizeIfKnown();
      byteSource1.sizeIfKnown();
      byteSource1.slice((byte)1, 1373L);
      byteSource0.read();
      byteSource3.asCharSource(charset0);
      ByteSource byteSource4 = byteSource3.slice(1373L, 884L);
      assertFalse(byteSource4.equals((Object)byteSource2));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      linkedHashSet0.add(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      byteSource0.openStream();
      byte[] byteArray0 = byteSource1.read();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource.concat(iterator0);
      TreeSet<ByteSource> treeSet0 = new TreeSet<ByteSource>();
      PriorityQueue<ByteSource> priorityQueue0 = new PriorityQueue<ByteSource>((SortedSet<? extends ByteSource>) treeSet0);
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      long long0 = (-5L);
      long long1 = (-423L);
      // Undeclared exception!
      try { 
        byteSource0.slice((-5L), (-423L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset (java.lang.Long@0000000004) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      // Undeclared exception!
      try { 
        byteSource0.slice((-19L), (-19L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset (java.lang.Long@0000000003) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.openStream();
      // Undeclared exception!
      try { 
        ByteSource.concat(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      boolean boolean0 = byteSource0.isEmpty();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        byteSource0.copyTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.openStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D&.TP?`Bxq`ogQJ[;", true);
      byteSource0.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        ByteSource.concat(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      byteSource0.asCharSource(charset0);
      Charset.defaultCharset();
      byteSource0.isEmpty();
      long long0 = 571L;
      long long1 = (-7286425919675154353L);
      // Undeclared exception!
      try { 
        byteSource0.slice((-7286425919675154353L), (-1453L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset (java.lang.Long@0000000001) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      boolean boolean0 = byteSource0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[4];
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      byteSourceArray0[0] = byteSource0;
      TreeSet<ByteSource> treeSet0 = new TreeSet<ByteSource>();
      PriorityQueue<ByteSource> priorityQueue0 = new PriorityQueue<ByteSource>((SortedSet<? extends ByteSource>) treeSet0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) priorityQueue0);
      byteSourceArray0[1] = byteSource1;
      ByteSource byteSource2 = byteSource1.slice(0L, 0L);
      byteSourceArray0[2] = byteSource2;
      ByteSource byteSource3 = ByteSource.concat((Iterable<? extends ByteSource>) priorityQueue0);
      byteSourceArray0[3] = byteSource3;
      byteSource2.slice(2131L, 2131L);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      // Undeclared exception!
      try { 
        byteSource0.slice(524288L, (-1481L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (java.lang.Long@0000000003) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      byteSource0.isEmpty();
      // Undeclared exception!
      try { 
        byteSource0.slice(571L, (-1512L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (java.lang.Long@0000000003) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      byteSource0.asCharSource(charset0);
      Charset charset1 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset1);
      PriorityQueue<ByteSource> priorityQueue0 = new PriorityQueue<ByteSource>(448);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) priorityQueue0);
      byteSource1.slice(128L, 448);
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) priorityQueue0);
      ByteSource[] byteSourceArray0 = new ByteSource[1];
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource3 = ByteSource.concat(iterator0);
      byteSourceArray0[0] = byteSource3;
      ByteSource.concat(byteSourceArray0);
      boolean boolean0 = byteSource2.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      byteSource0.isEmpty();
      ByteSource byteSource1 = ByteSource.concat(iterator0);
      byteSource1.size();
      ByteProcessor<Object> byteProcessor0 = (ByteProcessor<Object>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      doReturn(byteSource0).when(byteProcessor0).getResult();
      byteSource0.read(byteProcessor0);
      byteSource0.isEmpty();
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource0.size();
      byteSource_AsCharSource0.openStream();
      // Undeclared exception!
      try { 
        byteSource0.hash((HashFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteSource.concat((Iterator<? extends ByteSource>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      byteSource0.asCharSource(charset0);
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.openBufferedStream();
      ByteSource byteSource1 = byteSource_AsCharSource0.asByteSource(charset0);
      byteSource1.openStream();
      byteSource0.slice(0L, 0L);
      byteSource0.read();
      byteSource_AsCharSource0.openStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      byte[] byteArray0 = byteSource0.read();
      assertEquals(0, byteArray0.length);
      
      long long0 = byteSource0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[7];
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) stack0);
      byteSourceArray0[0] = byteSource0;
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource1 = ByteSource.concat(iterator0);
      byteSourceArray0[1] = byteSource1;
      ByteSource byteSource2 = ByteSource.empty();
      byteSourceArray0[2] = byteSource2;
      ByteSource byteSource3 = byteSource2.slice(0L, 0L);
      byteSourceArray0[3] = byteSource3;
      byte[] byteArray0 = null;
      byteSource3.read();
      // Undeclared exception!
      try { 
        ByteSource.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.empty();
      ByteSource byteSource1 = byteSource0.slice(0L, 0L);
      InputStream inputStream0 = byteSource1.openStream();
      assertEquals(0, inputStream0.available());
      
      byte[] byteArray0 = byteSource1.read();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn((HashCode) null).when(hashFunction0).hashBytes(any(byte[].class) , anyInt() , anyInt());
      byteSource0.hash(hashFunction0);
      ByteSource byteSource1 = byteSource0.slice(128L, 128L);
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource byteSource2 = ByteSource.concat(iterator0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource2.new AsCharSource(charset0);
      byteSource_AsCharSource0.openStream();
      ByteSource[] byteSourceArray0 = new ByteSource[7];
      byteSourceArray0[0] = byteSource1;
      byteSourceArray0[1] = byteSource0;
      // Undeclared exception!
      try { 
        byteSource0.slice(128L, (-35L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (java.lang.Long@0000000005) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      byteSource0.read();
      ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      // Undeclared exception!
      try { 
        byteSource0.slice(733L, (-1976L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length (java.lang.Long@0000000002) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      linkedHashSet0.add(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource2 = byteSource1.slice(0L, 0L);
      byteSource2.openStream();
      byteSource2.slice(0L, 0L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-6);
      ByteSource.wrap(byteArray0);
      ByteSource byteSource3 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      byteSource3.size();
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource3.new AsCharSource(charset0);
      byteSource_AsCharSource0.toString();
      ByteSource.empty();
      CharSource charSource0 = byteSource3.asCharSource(charset0);
      assertFalse(charSource0.equals((Object)byteSource_AsCharSource0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      byteSource0.isEmpty();
      ByteSource byteSource1 = ByteSource.concat(iterator0);
      byteSource1.size();
      ByteProcessor<Object> byteProcessor0 = (ByteProcessor<Object>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(byteProcessor0).getResult();
      byteSource0.read(byteProcessor0);
      byteSource0.isEmpty();
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource0.size();
      byteSource_AsCharSource0.openStream();
      // Undeclared exception!
      try { 
        byteSource0.hash((HashFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ByteSource> class0 = ByteSource.class;
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      long long0 = byteSource0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      boolean boolean0 = byteSource0.isEmpty();
      assertTrue(boolean0);
      
      ByteSource byteSource1 = byteSource0.slice(571L, 571L);
      byteSource1.sizeIfKnown();
      Optional<Long> optional0 = byteSource1.sizeIfKnown();
      Optional<Long> optional1 = byteSource1.sizeIfKnown();
      assertNotSame(optional1, optional0);
      
      byte[] byteArray0 = byteSource1.read();
      assertEquals(0, byteArray0.length);
      
      byteSource1.openBufferedStream();
      InputStream inputStream0 = byteSource0.openStream();
      assertFalse(inputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      ByteSource byteSource1 = byteSource_AsCharSource0.asByteSource(charset0);
      assertSame(byteSource1, byteSource0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)18;
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      byteSourceArray0[0] = byteSource0;
      ByteSource byteSource1 = ByteSource.concat(byteSourceArray0);
      ByteProcessor<Object> byteProcessor0 = (ByteProcessor<Object>) mock(ByteProcessor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(byteProcessor0).getResult();
      doReturn(false).when(byteProcessor0).processBytes(any(byte[].class) , anyInt() , anyInt());
      Object object0 = byteSource1.read(byteProcessor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      // Undeclared exception!
      try { 
        byteSource0.read((ByteProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      linkedHashSet0.add(byteSource0);
      ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      byteSource0.slice(0L, 0L);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource.concat(byteSourceArray0);
      boolean boolean0 = byteSource1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      arrayList0.add((ByteSource) null);
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      // Undeclared exception!
      try { 
        byteSource0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ConcatenatedByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      stack0.add(byteSource0);
      boolean boolean0 = byteSource0.isEmpty();
      ByteSource byteSource1 = byteSource0.slice(571L, 571L);
      Optional<Long> optional0 = byteSource1.sizeIfKnown();
      Optional<Long> optional1 = byteSource1.sizeIfKnown();
      Optional<Long> optional2 = byteSource0.sizeIfKnown();
      assertTrue(optional2.equals((Object)optional1));
      assertNotSame(optional2, optional0);
      
      byteSource1.read();
      InputStream inputStream0 = byteSource1.openBufferedStream();
      assertEquals(0, inputStream0.available());
      
      boolean boolean1 = byteSource1.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[4];
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      byteSourceArray0[0] = byteSource0;
      TreeSet<ByteSource> treeSet0 = new TreeSet<ByteSource>();
      PriorityQueue<ByteSource> priorityQueue0 = new PriorityQueue<ByteSource>((SortedSet<? extends ByteSource>) treeSet0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) priorityQueue0);
      byteSourceArray0[1] = byteSource1;
      ByteSource byteSource2 = byteSource1.slice(0L, 0L);
      byteSourceArray0[2] = byteSource2;
      ByteSource byteSource3 = ByteSource.concat((Iterable<? extends ByteSource>) priorityQueue0);
      byteSourceArray0[3] = byteSource3;
      ByteSource byteSource4 = ByteSource.concat(byteSourceArray0);
      boolean boolean0 = byteSource4.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      // Undeclared exception!
      try { 
        byteSource0.slice((-776L), (-255L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset (java.lang.Long@0000000001) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      // Undeclared exception!
      try { 
        byteSource0.slice((-2281L), (-2281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset (java.lang.Long@0000000001) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Charset charset0 = Charset.defaultCharset();
      ByteSource byteSource0 = ByteSource.empty();
      CharSource charSource0 = byteSource0.asCharSource(charset0);
      assertNotNull(charSource0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      byteSource_AsCharSource0.length();
      ByteSource byteSource1 = byteSource_AsCharSource0.asByteSource(charset0);
      assertSame(byteSource0, byteSource1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      // Undeclared exception!
      try { 
        byteSource0.copyTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      byteSource0.asCharSource(charset0);
      Charset charset1 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset1);
      byteSource_AsCharSource0.openStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D&.TP?`Bxq`ogQJ[;", true);
      try { 
        byteSource0.copyTo((OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      ByteSource byteSource1 = byteSource0.slice((byte)7, (byte)29);
      HashFunction hashFunction0 = mock(HashFunction.class, new ViolatedAssumptionAnswer());
      doReturn((HashCode) null).when(hashFunction0).hashBytes(any(byte[].class) , anyInt() , anyInt());
      HashCode hashCode0 = byteSource1.hash(hashFunction0);
      assertNull(hashCode0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      ByteSource byteSource1 = byteSource0.slice(1L, 1L);
      boolean boolean0 = byteSource1.contentEquals(byteSource1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      ByteSource byteSource1 = byteSource0.slice(0L, 0L);
      InputStream inputStream0 = byteSource1.openBufferedStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      Charset charset0 = Charset.defaultCharset();
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      linkedHashSet0.add(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource2 = byteSource1.slice(0L, 0L);
      byteSource2.openStream();
      ByteSource byteSource3 = byteSource2.slice(0L, 0L);
      ByteSource.AsCharSource byteSource_AsCharSource0 = null;
      try {
        byteSource_AsCharSource0 = byteSource3.new AsCharSource((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      ByteSource byteSource1 = byteSource0.slice(0L, 0L);
      byteSource1.openStream();
      byteSource1.isEmpty();
      ByteSource byteSource2 = byteSource1.slice(0L, 1L);
      assertFalse(byteSource2.equals((Object)byteSource1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ByteSource byteSource1 = byteSource0.slice(0L, 0L);
      byteSource1.openBufferedStream();
      byteSource1.contentEquals(byteSource0);
      // Undeclared exception!
      try { 
        Charset.forName("r2]%+");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // r2]%+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      byteSource0.openStream();
      Optional<Long> optional0 = byteSource0.sizeIfKnown();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byte byte1 = (byte)122;
      byteArray0[2] = (byte)122;
      byte byte2 = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      byteSource0.sizeIfKnown();
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      linkedHashSet0.add(byteSource0);
      linkedHashSet0.add(byteSource0);
      ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource[] byteSourceArray0 = new ByteSource[8];
      byteSourceArray0[0] = byteSource0;
      byteSourceArray0[1] = byteSource0;
      byteSourceArray0[2] = byteSource0;
      // Undeclared exception!
      try { 
        ByteSource.concat(byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 3
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      linkedHashSet0.add(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      ByteSource byteSource2 = byteSource1.slice(0L, 0L);
      byteSource2.openStream();
      ByteSource byteSource3 = byteSource2.slice(0L, 0L);
      byteSource3.sizeIfKnown();
      byteSource3.sizeIfKnown();
      byte[] byteArray0 = byteSource2.read();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      ByteSource byteSource1 = byteSource0.slice(2L, 2L);
      assertFalse(byteSource1.equals((Object)byteSource0));
      
      long long0 = byteSource1.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource0 = ByteSource.concat(iterator0);
      ByteSource byteSource1 = byteSource0.slice(3498L, 3498L);
      Class<ByteSource> class0 = ByteSource.class;
      ServiceLoader<ByteSource> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ByteSource byteSource2 = ByteSource.concat((Iterable<? extends ByteSource>) serviceLoader0);
      byteSource1.sizeIfKnown();
      ByteSink byteSink0 = mock(ByteSink.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(byteSink0).openStream();
      // Undeclared exception!
      try { 
        byteSource2.copyTo(byteSink0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-32);
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      long long0 = byteSource0.size();
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      byteSource0.contentEquals(byteSource0);
      ByteSource byteSource1 = ByteSource.concat((Iterable<? extends ByteSource>) linkedHashSet0);
      byteSource0.openStream();
      // Undeclared exception!
      try { 
        byteSource1.hash((HashFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      InputStream inputStream0 = byteSource0.openBufferedStream();
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>(stack0);
      ByteSource[] byteSourceArray0 = new ByteSource[0];
      ByteSource byteSource0 = ByteSource.concat(byteSourceArray0);
      linkedHashSet0.add(byteSource0);
      ByteSource byteSource1 = ByteSource.empty();
      HashFunction hashFunction0 = null;
      // Undeclared exception!
      try { 
        byteSource1.hash((HashFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      byteSource0.openBufferedStream();
      // Undeclared exception!
      try { 
        byteSource0.hash((HashFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ByteSource[] byteSourceArray0 = new ByteSource[1];
      // Undeclared exception!
      try { 
        ByteSource.concat(byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.concat((Iterable<? extends ByteSource>) arrayList0);
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset1.encode("");
      charset0.decode(byteBuffer0);
      ByteSource.AsCharSource byteSource_AsCharSource0 = byteSource0.new AsCharSource(charset0);
      ByteSource byteSource1 = byteSource_AsCharSource0.asByteSource(charset0);
      // Undeclared exception!
      try { 
        byteSource1.copyTo((ByteSink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ByteSource.empty();
      Stack<ByteSource> stack0 = new Stack<ByteSource>();
      Iterator<ByteSource> iterator0 = stack0.iterator();
      ByteSource byteSource1 = ByteSource.concat(iterator0);
      byteSource0.contentEquals(byteSource1);
      ByteSource byteSource2 = ByteSource.concat(iterator0);
      byteSource2.contentEquals(byteSource0);
      ByteSink byteSink0 = mock(ByteSink.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(byteSink0).openStream();
      // Undeclared exception!
      try { 
        byteSource2.copyTo(byteSink0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      boolean boolean0 = byteSource0.contentEquals(byteSource0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      InputStream inputStream0 = byteSource0.openStream();
      assertEquals(2, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteSource.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.ByteSource$ByteArrayByteSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      byte[] byteArray0 = new byte[1];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      assertNotNull(byteSource0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ByteSource byteSource1 = byteSource0.slice(2400L, 2400L);
      Optional<Long> optional0 = byteSource1.sizeIfKnown();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSource.wrap(byteArray0);
      // Undeclared exception!
      try { 
        Charset.forName("KL#");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // KL#
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteSource.concat((ByteSource[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ByteSource[] byteSourceArray0 = null;
      // Undeclared exception!
      try { 
        ByteSource.concat((ByteSource[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }
}
