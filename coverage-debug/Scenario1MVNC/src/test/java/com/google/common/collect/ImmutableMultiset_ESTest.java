/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:13:20 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.EmptyImmutableSetMultimap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Multimaps;
import com.google.common.collect.Multiset;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.UnmodifiableIterator;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmutableMultiset_ESTest extends ImmutableMultiset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Comparable<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Comparable<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      ImmutableSortedMultiset<Object> immutableSortedMultiset0 = ImmutableSortedMultiset.emptyMultiset((Comparator<? super Object>) comparator1);
      ImmutableList<Object> immutableList0 = immutableSortedMultiset0.asList();
      assertEquals(0, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Comparable<Object>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Comparable<Object>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      RegularImmutableSortedMultiset<Object> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<Object>(comparator1);
      UnmodifiableIterator<Object> unmodifiableIterator0 = regularImmutableSortedMultiset0.iterator();
      assertNotNull(unmodifiableIterator0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableSortedMultiset<BoundType> immutableSortedMultiset0 = ImmutableSortedMultiset.of(boundType0, boundType0, boundType0);
      ImmutableList<BoundType> immutableList0 = ImmutableList.sortedCopyOf((Iterable<? extends BoundType>) immutableSortedMultiset0);
      assertEquals(3, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmutableMultiset.ElementSet<Multimaps.Keys<Object, Object>> immutableMultiset_ElementSet0 = new ImmutableMultiset.ElementSet<Multimaps.Keys<Object, Object>>((List<Multiset.Entry<Multimaps.Keys<Object, Object>>>) null, (Multiset<Multimaps.Keys<Object, Object>>) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImmutableMultiset.Builder<ImmutableSortedMultiset<Locale.FilteringMode>> immutableMultiset_Builder0 = new ImmutableMultiset.Builder<ImmutableSortedMultiset<Locale.FilteringMode>>();
      ImmutableSortedMultiset<Locale.FilteringMode> immutableSortedMultiset0 = ImmutableSortedMultiset.of();
      ImmutableMultiset.Builder<ImmutableSortedMultiset<Locale.FilteringMode>> immutableMultiset_Builder1 = immutableMultiset_Builder0.addCopies(immutableSortedMultiset0, 0);
      assertNotNull(immutableMultiset_Builder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ImmutableSortedMultiset<Locale.Category> immutableSortedMultiset0 = ImmutableSortedMultiset.of(locale_Category0, locale_Category0);
      // Undeclared exception!
      try { 
        immutableSortedMultiset0.remove((Object) locale_Category0, 5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMultiset", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ImmutableMultiset.Builder<Object> immutableMultiset_Builder0 = ImmutableMultiset.builder();
      // Undeclared exception!
      try { 
        immutableMultiset_Builder0.add((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ImmutableMultiset.Builder<Object> immutableMultiset_Builder0 = ImmutableMultiset.builder();
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      Multiset<Object> multiset0 = emptyImmutableSetMultimap0.keys();
      ImmutableMultiset.SerializedForm immutableMultiset_SerializedForm0 = new ImmutableMultiset.SerializedForm(multiset0);
      Object object0 = immutableMultiset_SerializedForm0.readResolve();
      ImmutableMultiset.Builder<Object> immutableMultiset_Builder1 = immutableMultiset_Builder0.addCopies(object0, 2028);
      assertSame(immutableMultiset_Builder1, immutableMultiset_Builder0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ImmutableMultiset<Locale.FilteringMode> immutableMultiset0 = ImmutableMultiset.of(locale_FilteringMode0);
      ImmutableList<Locale.FilteringMode> immutableList0 = immutableMultiset0.asList();
      assertNotNull(immutableList0);
      assertTrue(immutableList0.contains(locale_FilteringMode0));
  }
}
