/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:05:01 GMT 2024
 */

package com.google.common.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableList;
import com.google.common.reflect.TypeParameter;
import com.google.common.reflect.TypeToken;
import com.google.common.reflect.Types;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeToken_ESTest extends TypeToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<?> typeToken0 = TypeToken.of((Type) class0);
      assertFalse(typeToken0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      ImmutableList<TypeToken<? super Types.WildcardTypeImpl>> immutableList0 = typeToken0.getGenericInterfaces();
      assertEquals(3, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      TypeToken<Locale.FilteringMode> typeToken1 = TypeToken.of(class1);
      boolean boolean0 = typeToken1.isSupertypeOf(typeToken0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.isSubtypeOf(typeToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken<? super Object> typeToken1 = typeToken0.getGenericSuperclass();
      assertNull(typeToken1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      TypeToken<Locale.Category> typeToken0 = TypeToken.of(class0);
      TypeParameter<Locale.Category> typeParameter0 = (TypeParameter<Locale.Category>) mock(TypeParameter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        typeToken0.where(typeParameter0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      TypeToken<Locale.FilteringMode> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.where((TypeParameter<Locale.FilteringMode>) null, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.resolveType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeToken.of((Class<Types.WildcardTypeImpl>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.isSupertypeOf((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.isSupertypeOf((TypeToken<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.isSubtypeOf((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.isSubtypeOf((TypeToken<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.getSupertype((Class<? super Types.WildcardTypeImpl>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.getSubtype((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        typeToken0.getSubtype(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Class@0000000009 isn't a subclass of com.google.common.reflect.TypeToken$SimpleTypeToken@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.constructor((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.equals(typeToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      TypeToken<BoundType> typeToken0 = TypeToken.of(class0);
      TypeToken<?> typeToken1 = typeToken0.getComponentType();
      assertNull(typeToken1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.isPrimitive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      TypeToken<BoundType> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.isArray();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.isSubtypeOf((Type) class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeToken.of((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      TypeToken<Locale.FilteringMode> typeToken0 = TypeToken.of(class0);
      typeToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class class1 = (Class)typeToken0.getType();
      assertEquals("class com.google.common.reflect.Types$WildcardTypeImpl", class1.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      TypeToken<BoundType> typeToken0 = TypeToken.of(class0);
      TypeToken<?> typeToken1 = typeToken0.resolveType(class0);
      Class<? super BoundType> class1 = typeToken0.getRawType();
      TypeToken<?> typeToken2 = typeToken0.resolveType(class1);
      assertTrue(typeToken2.equals((Object)typeToken1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<?> typeToken0 = TypeToken.toGenericType(class0);
      assertFalse(typeToken0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      boolean boolean0 = typeToken0.isSubtypeOf((Type) types_WildcardTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class<? super Types.WildcardTypeImpl> class1 = typeToken0.getRawType();
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Class<BoundType> class2 = BoundType.class;
      TypeToken<BoundType> typeToken1 = TypeToken.of(class2);
      boolean boolean0 = typeToken1.isSubtypeOf((Type) types_WildcardTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.classes();
      // Undeclared exception!
      try { 
        typeToken_TypeSet1.add(typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.interfaces();
      Set<TypeToken<? super Types.WildcardTypeImpl>> set0 = typeToken_TypeSet1.delegate();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.getTypes();
      Set<TypeToken<? super Types.WildcardTypeImpl>> set0 = typeToken_TypeSet0.delegate();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken<Types.WildcardTypeImpl> typeToken1 = typeToken0.unwrap();
      assertSame(typeToken1, typeToken0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken<Types.WildcardTypeImpl> typeToken1 = typeToken0.wrap();
      assertSame(typeToken1, typeToken0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class<BoundType> class1 = BoundType.class;
      TypeToken<BoundType> typeToken1 = TypeToken.of(class1);
      Type type0 = typeToken0.capture();
      boolean boolean0 = typeToken1.isSubtypeOf(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Type type0 = typeToken0.capture();
      boolean boolean0 = typeToken0.isSupertypeOf(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken<? extends Types.WildcardTypeImpl> typeToken1 = typeToken0.getSubtype(class0);
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken<? super Types.WildcardTypeImpl> typeToken1 = typeToken0.getSupertype(class0);
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      TypeToken<Locale.Category> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      Set<TypeToken<? super Types.WildcardTypeImpl>> set0 = typeToken_TypeSet0.delegate();
      assertNotNull(set0);
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      Set<Class<? super Types.WildcardTypeImpl>> set0 = typeToken_TypeSet0.rawTypes();
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.getTypes();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.classes();
      // Undeclared exception!
      try { 
        typeToken_TypeSet1.interfaces();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // classes().interfaces() not supported.
         //
         verifyException("com.google.common.reflect.TypeToken$ClassSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.classes();
      TypeToken.TypeSet typeToken_TypeSet2 = typeToken_TypeSet1.classes();
      assertTrue(typeToken_TypeSet2.equals((Object)typeToken_TypeSet0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      TypeToken<Locale.Category> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.where((TypeParameter<Locale.Category>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.isSupertypeOf(typeToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      // Undeclared exception!
      try { 
        typeToken0.method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class<? super Types.WildcardTypeImpl> class1 = typeToken0.getRawType();
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      boolean boolean0 = typeToken0.isSupertypeOf((Type) types_WildcardTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Object object0 = typeToken0.writeReplace();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      String string0 = typeToken0.toString();
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken<Types.WildcardTypeImpl> typeToken1 = typeToken0.rejectTypeVariables();
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.of(class1);
      boolean boolean0 = typeToken1.isSubtypeOf(typeToken0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      TypeToken<Locale.FilteringMode> typeToken0 = TypeToken.of(class0);
      TypeParameter<Locale.FilteringMode> typeParameter0 = (TypeParameter<Locale.FilteringMode>) mock(TypeParameter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        typeToken0.where(typeParameter0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      Set<TypeToken<? super Types.WildcardTypeImpl>> set0 = typeToken_TypeSet0.delegate();
      assertNotNull(set0);
      assertEquals(6, set0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.classes();
      Set<Class<? super Types.WildcardTypeImpl>> set0 = typeToken_TypeSet1.rawTypes();
      assertTrue(typeToken_TypeSet0.equals((Object)typeToken_TypeSet1));
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.interfaces();
      // Undeclared exception!
      try { 
        typeToken_TypeSet1.classes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // interfaces().classes() not supported.
         //
         verifyException("com.google.common.reflect.TypeToken$InterfaceSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.interfaces();
      TypeToken.TypeSet typeToken_TypeSet2 = typeToken_TypeSet1.interfaces();
      assertFalse(typeToken_TypeSet2.equals((Object)typeToken_TypeSet0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      TypeToken.TypeSet typeToken_TypeSet0 = typeToken0.new TypeSet();
      TypeToken.TypeSet typeToken_TypeSet1 = typeToken_TypeSet0.interfaces();
      Set<Class<? super Types.WildcardTypeImpl>> set0 = typeToken_TypeSet1.rawTypes();
      assertFalse(set0.isEmpty());
  }
}
