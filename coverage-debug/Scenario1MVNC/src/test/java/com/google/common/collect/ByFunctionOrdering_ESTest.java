/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:38:44 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.ByFunctionOrdering;
import com.google.common.collect.ComparatorOrdering;
import com.google.common.collect.ImmutableMapEntry;
import com.google.common.collect.Multisets;
import com.google.common.collect.NaturalOrdering;
import com.google.common.collect.Ordering;
import java.util.Comparator;
import java.util.Locale;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByFunctionOrdering_ESTest extends ByFunctionOrdering_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Function<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode> function0 = (Function<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Locale.FilteringMode, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> function1 = (Function<Locale.FilteringMode, Multisets.UnmodifiableMultiset<Locale.FilteringMode>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode> converter0 = Converter.from((Function<? super Multisets.UnmodifiableMultiset<Locale.FilteringMode>, ? extends Locale.FilteringMode>) function0, (Function<? super Locale.FilteringMode, ? extends Multisets.UnmodifiableMultiset<Locale.FilteringMode>>) function1);
      Function<ImmutableMapEntry<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode> function2 = (Function<ImmutableMapEntry<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode>) mock(Function.class, new ViolatedAssumptionAnswer());
      NaturalOrdering naturalOrdering0 = NaturalOrdering.INSTANCE;
      Ordering<Locale.FilteringMode> ordering0 = naturalOrdering0.nullsFirst();
      ByFunctionOrdering<ImmutableMapEntry<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode> byFunctionOrdering0 = new ByFunctionOrdering<ImmutableMapEntry<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode>(function2, ordering0);
      ByFunctionOrdering<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode> byFunctionOrdering1 = new ByFunctionOrdering<Multisets.UnmodifiableMultiset<Locale.FilteringMode>, Locale.FilteringMode>(converter0, ordering0);
      Function<Locale.FilteringMode, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> function3 = (Function<Locale.FilteringMode, Multisets.UnmodifiableMultiset<Locale.FilteringMode>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Locale.FilteringMode, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> converter1 = Converter.from((Function<? super Locale.FilteringMode, ? extends Multisets.UnmodifiableMultiset<Locale.FilteringMode>>) function3, (Function<? super Multisets.UnmodifiableMultiset<Locale.FilteringMode>, ? extends Locale.FilteringMode>) converter0);
      ByFunctionOrdering<Locale.FilteringMode, Multisets.UnmodifiableMultiset<Locale.FilteringMode>> byFunctionOrdering2 = new ByFunctionOrdering<Locale.FilteringMode, Multisets.UnmodifiableMultiset<Locale.FilteringMode>>(converter1, byFunctionOrdering1);
      boolean boolean0 = byFunctionOrdering2.equals(byFunctionOrdering0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Converter<Integer, Integer> converter0 = Converter.identity();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorOrdering<Object> comparatorOrdering0 = new ComparatorOrdering<Object>(comparator0);
      Converter<Object, Object> converter1 = Converter.identity();
      ByFunctionOrdering<Object, Object> byFunctionOrdering0 = new ByFunctionOrdering<Object, Object>(converter1, comparatorOrdering0);
      int int0 = byFunctionOrdering0.compare(converter0, (Object) null);
      assertEquals(0, int0);
  }
}
