/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:44:56 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyContiguousSet;
import com.google.common.collect.ImmutableEnumSet;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMapValues;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Range;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.Sets;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnel;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.CopyOnWriteArraySet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sets_ESTest extends Sets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(32);
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer0, integer0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(immutableSortedSet0);
      NavigableSet<Integer> navigableSet0 = sets_DescendingSet0.tailSet(integer0, true);
      assertTrue(navigableSet0.contains(32));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sets.DescendingSet<Object> sets_DescendingSet0 = new Sets.DescendingSet<Object>((NavigableSet<Object>) null);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.parallelStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Range<Integer> range0 = Range.all();
      NavigableSet<Integer> navigableSet0 = Sets.subSet((NavigableSet<Integer>) emptyContiguousSet0, range0);
      assertEquals(0, navigableSet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      NavigableSet<Object> navigableSet0 = Sets.unmodifiableNavigableSet((NavigableSet<Object>) treeSet0);
      assertTrue(navigableSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<ImmutableEnumSet<Locale.FilteringMode>> treeSet0 = new TreeSet<ImmutableEnumSet<Locale.FilteringMode>>();
      Sets.DescendingSet<ImmutableEnumSet<Locale.FilteringMode>> sets_DescendingSet0 = new Sets.DescendingSet<ImmutableEnumSet<Locale.FilteringMode>>(treeSet0);
      int int0 = Sets.hashCodeImpl(sets_DescendingSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sets.newHashSet((Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiscreteDomain<Comparable<Locale.Category>> discreteDomain0 = (DiscreteDomain<Comparable<Locale.Category>>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      EmptyContiguousSet<Comparable<Locale.Category>> emptyContiguousSet0 = new EmptyContiguousSet<Comparable<Locale.Category>>(discreteDomain0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1L);
      NavigableSet<Comparable<Locale.Category>> navigableSet0 = Sets.filter((NavigableSet<Comparable<Locale.Category>>) emptyContiguousSet0, (Predicate<? super Comparable<Locale.Category>>) bloomFilter0);
      Sets.DescendingSet<Comparable<Locale.Category>> sets_DescendingSet0 = new Sets.DescendingSet<Comparable<Locale.Category>>(navigableSet0);
      Comparable<Locale.Category> comparable0 = sets_DescendingSet0.pollLast();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = Sets.newLinkedHashSet();
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Range<Integer> range0 = Range.all();
      ImmutableSet<Object> immutableSet0 = ImmutableSet.of((Object) range0);
      Sets.SetView<Object> sets_SetView0 = Sets.intersection((Set<Object>) immutableSet0, (Set<?>) emptyContiguousSet0);
      assertNotNull(sets_SetView0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Sets.SetView<Integer> sets_SetView0 = Sets.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = sets_SetView0.copyInto(linkedHashSet0);
      assertSame(linkedHashSet1, linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sets.newHashSetWithExpectedSize((-5092));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -5092
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ImmutableList<Locale.Category> immutableList0 = ImmutableList.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      EnumSet<Locale.Category> enumSet0 = Sets.complementOf((Collection<Locale.Category>) immutableList0);
      assertEquals(1, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopyOnWriteArraySet<Comparable<Object>> copyOnWriteArraySet0 = Sets.newCopyOnWriteArraySet();
      assertTrue(copyOnWriteArraySet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Integer> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Integer>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      RegularImmutableSortedSet<ImmutableMapValues<Integer, Object>> regularImmutableSortedSet1 = ImmutableSortedSet.emptySet((Comparator<? super ImmutableMapValues<Integer, Object>>) comparator1);
      Sets.DescendingSet<ImmutableMapValues<Integer, Object>> sets_DescendingSet0 = new Sets.DescendingSet<ImmutableMapValues<Integer, Object>>(regularImmutableSortedSet1);
      Sets.SetView<Integer> sets_SetView0 = Sets.difference((Set<Integer>) regularImmutableSortedSet0, (Set<?>) sets_DescendingSet0);
      assertNotNull(sets_SetView0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(emptyContiguousSet0);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.pollFirst();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeSet<ImmutableEnumSet<Locale.FilteringMode>> treeSet0 = new TreeSet<ImmutableEnumSet<Locale.FilteringMode>>();
      Sets.DescendingSet<ImmutableEnumSet<Locale.FilteringMode>> sets_DescendingSet0 = new Sets.DescendingSet<ImmutableEnumSet<Locale.FilteringMode>>(treeSet0);
      boolean boolean0 = sets_DescendingSet0.standardContains(treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      ImmutableSortedSet<Comparable<Object>> immutableSortedSet0 = ImmutableSortedSet.of(comparable0, comparable0, comparable0, comparable0, comparable0);
      Sets.DescendingSet<Comparable<Object>> sets_DescendingSet0 = new Sets.DescendingSet<Comparable<Object>>(immutableSortedSet0);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(immutableSortedSet0);
      Integer integer1 = sets_DescendingSet0.standardFloor(integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(32);
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer0, integer0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(immutableSortedSet0);
      String string0 = sets_DescendingSet0.toString();
      assertEquals("[32]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(immutableSortedSet0);
      SortedSet<Integer> sortedSet0 = sets_DescendingSet0.subSet(integer0, integer0);
      assertFalse(sortedSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<RegularContiguousSet<Integer>> treeSet0 = new TreeSet<RegularContiguousSet<Integer>>();
      Sets.DescendingSet<RegularContiguousSet<Integer>> sets_DescendingSet0 = new Sets.DescendingSet<RegularContiguousSet<Integer>>(treeSet0);
      Iterator<RegularContiguousSet<Integer>> iterator0 = sets_DescendingSet0.descendingIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Sets.UnmodifiableNavigableSet<Integer> sets_UnmodifiableNavigableSet0 = new Sets.UnmodifiableNavigableSet<Integer>(emptyContiguousSet0);
  }
}
