/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:32:04 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.Count;
import com.google.common.collect.EnumMultiset;
import com.google.common.collect.HashMultiset;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.LinkedHashMultiset;
import com.google.common.collect.Multiset;
import com.google.common.collect.Multisets;
import com.google.common.collect.RegularImmutableSortedSet;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import java.util.function.ObjIntConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractMapBasedMultiset_ESTest extends AbstractMapBasedMultiset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMultiset<Comparable<Locale.FilteringMode>> hashMultiset0 = HashMultiset.create(87855567);
      Set<Multiset.Entry<Comparable<Locale.FilteringMode>>> set0 = (Set<Multiset.Entry<Comparable<Locale.FilteringMode>>>)hashMultiset0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMultiset<Count> hashMultiset0 = HashMultiset.create();
      int int0 = hashMultiset0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashMultiset<Object> linkedHashMultiset0 = LinkedHashMultiset.create();
      Object object0 = new Object();
      linkedHashMultiset0.add(object0);
      int int0 = linkedHashMultiset0.size();
      assertTrue(linkedHashMultiset0.contains(object0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMultiset<Count> hashMultiset0 = HashMultiset.create();
      Iterator<Count> iterator0 = hashMultiset0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashMultiset<Comparable<Object>> linkedHashMultiset0 = LinkedHashMultiset.create(31);
      int int0 = linkedHashMultiset0.distinctElements();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashMultiset<Locale.FilteringMode> linkedHashMultiset0 = LinkedHashMultiset.create(0);
      HashMultiset<Object> hashMultiset0 = HashMultiset.create((Iterable<?>) linkedHashMultiset0);
      Object object0 = new Object();
      hashMultiset0.add(object0);
      int int0 = hashMultiset0.distinctElements();
      assertTrue(hashMultiset0.contains(object0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMultiset<Count> hashMultiset0 = HashMultiset.create();
      Object object0 = new Object();
      int int0 = hashMultiset0.count(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashMultiset<Locale.Category> linkedHashMultiset0 = LinkedHashMultiset.create(4912);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedHashMultiset0.add(locale_Category0);
      int int0 = linkedHashMultiset0.add(locale_Category0, 255);
      assertTrue(linkedHashMultiset0.contains(locale_Category0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Locale.FilteringMode> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Locale.FilteringMode>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      ImmutableSortedMultiset<Locale.FilteringMode> immutableSortedMultiset0 = ImmutableSortedMultiset.emptyMultiset((Comparator<? super Locale.FilteringMode>) comparator1);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumMultiset<Locale.FilteringMode> enumMultiset0 = EnumMultiset.create((Iterable<Locale.FilteringMode>) immutableSortedMultiset0, class0);
      LinkedHashMultiset<Locale.FilteringMode> linkedHashMultiset0 = LinkedHashMultiset.create((Iterable<? extends Locale.FilteringMode>) enumMultiset0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      int int0 = linkedHashMultiset0.setCount(locale_FilteringMode0, 0);
      assertFalse(linkedHashMultiset0.contains(locale_FilteringMode0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMultiset<Count> hashMultiset0 = HashMultiset.create();
      LinkedHashMultiset<Object> linkedHashMultiset0 = LinkedHashMultiset.create(44);
      // Undeclared exception!
      try { 
        linkedHashMultiset0.remove((Object) hashMultiset0, (-883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // occurrences cannot be negative: java.lang.Integer@0000000003
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMultiset<Object> hashMultiset0 = HashMultiset.create();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean0 = hashMultiset0.remove((Object) locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashMultiset<Locale.FilteringMode> linkedHashMultiset0 = LinkedHashMultiset.create(3386);
      Iterator<Locale.FilteringMode> iterator0 = linkedHashMultiset0.elementIterator();
      HashMultiset<Object> hashMultiset0 = HashMultiset.create(2035);
      // Undeclared exception!
      try { 
        hashMultiset0.add((Object) iterator0, (-1832));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // occurrences cannot be negative: java.lang.Integer@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashMultiset<Locale.FilteringMode> linkedHashMultiset0 = LinkedHashMultiset.create(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      HashMultiset<Object> hashMultiset0 = HashMultiset.create((Iterable<?>) linkedHashMultiset0);
      int int0 = hashMultiset0.add((Object) locale_FilteringMode0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashMultiset<Object> linkedHashMultiset0 = LinkedHashMultiset.create();
      Count[] countArray0 = new Count[2];
      Object object0 = new Object();
      linkedHashMultiset0.add(object0);
      // Undeclared exception!
      try { 
        linkedHashMultiset0.toArray(countArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      HashMultiset<Locale.FilteringMode> hashMultiset0 = HashMultiset.create();
      hashMultiset0.add(locale_FilteringMode0, 1);
      hashMultiset0.clear();
      assertFalse(hashMultiset0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashMultiset<Object> linkedHashMultiset0 = LinkedHashMultiset.create();
      HashMultiset<Multisets.ImmutableEntry<Locale.FilteringMode>> hashMultiset0 = HashMultiset.create(398);
      boolean boolean0 = hashMultiset0.removeAll(linkedHashMultiset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMultiset<Multisets.ImmutableEntry<Locale.FilteringMode>> hashMultiset0 = HashMultiset.create(398);
      ObjIntConsumer<Object> objIntConsumer0 = (ObjIntConsumer<Object>) mock(ObjIntConsumer.class, new ViolatedAssumptionAnswer());
      hashMultiset0.forEachEntry(objIntConsumer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashMultiset<Object> linkedHashMultiset0 = LinkedHashMultiset.create();
      Count[] countArray0 = new Count[2];
      Count[] countArray1 = linkedHashMultiset0.toArray(countArray0);
      assertSame(countArray1, countArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashMultiset<Object> linkedHashMultiset0 = LinkedHashMultiset.create(3735);
      Object object0 = new Object();
      Count count0 = new Count((-2144));
      Object object1 = new Object();
      ImmutableMap<Object, Count> immutableMap0 = ImmutableMap.of(object0, count0, object1, count0);
      linkedHashMultiset0.setBackingMap(immutableMap0);
      assertFalse(linkedHashMultiset0.contains(object1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashMultiset<Locale.FilteringMode> linkedHashMultiset0 = LinkedHashMultiset.create(0);
      HashMultiset<Object> hashMultiset0 = HashMultiset.create((Iterable<?>) linkedHashMultiset0);
      int int0 = hashMultiset0.remove((Object) linkedHashMultiset0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashMultiset<Locale.FilteringMode> linkedHashMultiset0 = LinkedHashMultiset.create();
      Iterator<Multiset.Entry<Locale.FilteringMode>> iterator0 = (Iterator<Multiset.Entry<Locale.FilteringMode>>)linkedHashMultiset0.entryIterator();
      LinkedHashMultiset<Object> linkedHashMultiset1 = LinkedHashMultiset.create(3735);
      linkedHashMultiset1.add((Object) iterator0);
      HashMultiset<Comparable<Locale.FilteringMode>> hashMultiset0 = HashMultiset.create(87855567);
      boolean boolean0 = hashMultiset0.contains(linkedHashMultiset1);
      assertFalse(boolean0);
  }
}
