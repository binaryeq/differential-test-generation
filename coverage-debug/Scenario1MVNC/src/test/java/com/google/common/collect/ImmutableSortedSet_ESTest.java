/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:17:24 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.DescendingImmutableSortedSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyContiguousSet;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Range;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.RegularImmutableAsList;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.TreeMultiset;
import com.google.common.collect.UnmodifiableIterator;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.stream.Collector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmutableSortedSet_ESTest extends ImmutableSortedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      ImmutableList<Object> immutableList0 = ImmutableList.of();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = new RegularImmutableSortedSet<Object>(immutableList0, comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      ImmutableSet<Locale.Category> immutableSet0 = ImmutableSet.of(locale_Category1);
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super Locale.Category>) comparator1, (Collection<? extends Locale.Category>) immutableSet0);
      DescendingImmutableSortedSet<Locale.Category> descendingImmutableSortedSet0 = new DescendingImmutableSortedSet<Locale.Category>(immutableSortedSet0);
      ImmutableSortedSet<Locale.Category> immutableSortedSet1 = descendingImmutableSortedSet0.subSetImpl(locale_Category0, false, locale_Category1, false);
      assertEquals(0, immutableSortedSet1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer[] integerArray0 = new Integer[0];
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer1, integer1, integer1, integer0, integer0, integerArray0);
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer[] integerArray0 = new Integer[0];
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer1, integer1, integer1, integer1, integer1, integerArray0);
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer[] integerArray0 = new Integer[0];
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer1, integer0, integer0, integer0, integer1, integerArray0);
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4071));
      Integer[] integerArray0 = new Integer[0];
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer0, integer0, integer0, integer1, integer0, integerArray0);
      assertEquals(2, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-283));
      Integer integer1 = new Integer((-1321));
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer1, integer0, integer0, integer1);
      assertEquals(2, immutableSortedSet0.size());
      assertTrue(immutableSortedSet0.contains((-283)));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1994));
      Integer integer1 = new Integer(4);
      // Undeclared exception!
      try { 
        ImmutableSortedSet.of(integer0, (Integer) null, integer1, (Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 1
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = ImmutableSortedSet.of(locale_Category0, locale_Category1);
      assertTrue(immutableSortedSet0.contains(locale_Category1));
      assertEquals(2, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscreteDomain<Locale.Category> discreteDomain0 = (DiscreteDomain<Locale.Category>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      EmptyContiguousSet<Locale.Category> emptyContiguousSet0 = new EmptyContiguousSet<Locale.Category>(discreteDomain0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = emptyContiguousSet0.tailSet(locale_Category0);
      assertEquals(0, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDomain<Locale.Category> discreteDomain0 = (DiscreteDomain<Locale.Category>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      EmptyContiguousSet<Locale.Category> emptyContiguousSet0 = new EmptyContiguousSet<Locale.Category>(discreteDomain0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = emptyContiguousSet0.subSet(locale_Category0, false, locale_Category0, true);
      assertEquals(0, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.of();
      Spliterator<Object> spliterator0 = immutableSortedSet0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-763)).when(comparable0).compareTo(any());
      doReturn("9F|gq{.U!Mziy@", "9F|gq{.U!Mziy@").when(comparable0).toString();
      comparableArray0[0] = comparable0;
      ImmutableSortedSet<Comparable<Object>> immutableSortedSet0 = ImmutableSortedSet.copyOf(comparableArray0);
      Comparable<Object> comparable1 = immutableSortedSet0.lower(comparable0);
      assertFalse(immutableSortedSet0.contains(comparable1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ImmutableList<Object> immutableList0 = ImmutableList.copyOf(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = new RegularImmutableSortedSet<Object>(immutableList0, comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable4 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = comparable1;
      comparableArray0[1] = comparable2;
      comparableArray0[2] = comparable3;
      ImmutableList<Comparable<Object>> immutableList1 = ImmutableList.of(comparable0, comparable0, comparable1, comparable2, comparable3, comparable4, comparable1, comparable0, comparable0, comparable4, comparable0, comparable3, comparableArray0);
      RegularImmutableSortedSet<Comparable<Object>> regularImmutableSortedSet1 = new RegularImmutableSortedSet<Comparable<Object>>(immutableList1, comparator1);
      UnmodifiableIterator<Comparable<Object>> unmodifiableIterator0 = regularImmutableSortedSet1.iterator();
      assertNotNull(unmodifiableIterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1209));
      Range<Integer> range0 = Range.atLeast(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        ImmutableSortedSet.unsafeCompare((Comparator<?>) null, regularContiguousSet0, locale_Category0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableSortedSet.orderedBy((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(2325);
      // Undeclared exception!
      try { 
        ImmutableSortedSet.of(integer0, integer0, integer0, integer0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 4
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      // Undeclared exception!
      try { 
        emptyContiguousSet0.last();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.EmptyContiguousSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        ImmutableSortedSet.copyOf(comparableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableSortedSet.copyOf((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableSortedSet.copyOf((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ImmutableList<Object> immutableList0 = ImmutableList.copyOf(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(1301).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = new RegularImmutableSortedSet<Object>(immutableList0, comparator0);
      DescendingImmutableSortedSet<Object> descendingImmutableSortedSet0 = new DescendingImmutableSortedSet<Object>(regularImmutableSortedSet0);
      // Undeclared exception!
      try { 
        descendingImmutableSortedSet0.subSetImpl(regularImmutableSortedSet0, true, immutableList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImmutableSortedSet.Builder<Locale.Category> immutableSortedSet_Builder0 = ImmutableSortedSet.naturalOrder();
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.of();
      ImmutableSortedSet<Object> immutableSortedSet1 = immutableSortedSet0.headSet((Object) immutableSortedSet_Builder0, false);
      assertSame(immutableSortedSet0, immutableSortedSet1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscreteDomain<Locale.Category> discreteDomain0 = (DiscreteDomain<Locale.Category>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      EmptyContiguousSet<Locale.Category> emptyContiguousSet0 = new EmptyContiguousSet<Locale.Category>(discreteDomain0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = emptyContiguousSet0.descendingSet();
      DescendingImmutableSortedSet<Locale.Category> descendingImmutableSortedSet0 = new DescendingImmutableSortedSet<Locale.Category>(immutableSortedSet0);
      ImmutableSortedSet<Locale.Category> immutableSortedSet1 = descendingImmutableSortedSet0.subSetImpl(locale_Category0, false, locale_Category0, false);
      assertTrue(immutableSortedSet1.equals((Object)immutableSortedSet0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(comparable0).compareTo(any());
      doReturn("sB2l^dza'Im7*", "sB2l^dza'Im7*").when(comparable0).toString();
      comparableArray0[0] = comparable0;
      ImmutableSortedSet<Comparable<Object>> immutableSortedSet0 = ImmutableSortedSet.copyOf(comparableArray0);
      // Undeclared exception!
      try { 
        immutableSortedSet0.subSet(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<RegularImmutableSortedSet<Locale.Category>> comparator0 = (Comparator<RegularImmutableSortedSet<Locale.Category>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableSortedSet.Builder<RegularImmutableSortedSet<Locale.Category>> immutableSortedSet_Builder0 = ImmutableSortedSet.orderedBy(comparator0);
      ImmutableSortedSet.Builder<RegularImmutableSortedSet<Locale.Category>> immutableSortedSet_Builder1 = immutableSortedSet_Builder0.combine(immutableSortedSet_Builder0);
      assertSame(immutableSortedSet_Builder0, immutableSortedSet_Builder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      RegularImmutableSortedSet<Integer> regularImmutableSortedSet1 = ImmutableSortedSet.emptySet((Comparator<? super Integer>) comparator1);
      UnmodifiableIterator<Integer> unmodifiableIterator0 = regularImmutableSortedSet1.iterator();
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super Object>) comparator1, (Iterator<?>) unmodifiableIterator0);
      assertEquals(0, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ImmutableSortedMultiset<Locale.Category> immutableSortedMultiset0 = ImmutableSortedMultiset.of(locale_Category0, locale_Category0);
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.copyOf((Collection<?>) immutableSortedMultiset0);
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "h)$kp [YY^", "", "QsklK$}GmCU%_").when(comparable0).toString();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(12, 4, 12, 12).when(comparable1).compareTo(any());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable1).toString();
      ImmutableSortedSet<Comparable<Object>> immutableSortedSet0 = ImmutableSortedSet.of(comparable0, comparable1, comparable1);
      ImmutableSortedSet<Object> immutableSortedSet1 = ImmutableSortedSet.copyOf((Collection<?>) immutableSortedSet0);
      assertTrue(immutableSortedSet1.contains("QsklK$}GmCU%_"));
      assertEquals(3, immutableSortedSet1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ImmutableList<Object> immutableList0 = ImmutableList.copyOf(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = new RegularImmutableSortedSet<Object>(immutableList0, comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      ImmutableSortedSet.Builder<Object> immutableSortedSet_Builder0 = new ImmutableSortedSet.Builder<Object>(comparator1);
      immutableSortedSet_Builder0.copy();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableSortedSet.Builder<Locale.Category> immutableSortedSet_Builder0 = new ImmutableSortedSet.Builder<Locale.Category>(comparator0);
      ConcurrentSkipListMap<Locale.Category, Comparable<Object>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Locale.Category, Comparable<Object>>();
      NavigableSet<Locale.Category> navigableSet0 = concurrentSkipListMap0.descendingKeySet();
      ImmutableSortedSet.Builder<Locale.Category> immutableSortedSet_Builder1 = immutableSortedSet_Builder0.addAll((Iterable<? extends Locale.Category>) navigableSet0);
      assertNotNull(immutableSortedSet_Builder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Spliterator<Integer> spliterator0 = emptyContiguousSet0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1381, 1381, (-2871), 1682554634, (-1988)).when(comparable0).compareTo(any());
      doReturn("", "", "", "", "").when(comparable0).toString();
      ImmutableSortedSet<Comparable<Object>> immutableSortedSet0 = ImmutableSortedSet.of(comparable0, comparable0, comparable0, comparable0);
      assertEquals(4, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Integer integer1 = emptyContiguousSet0.lower(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[0];
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer0, integer0, integer0, integer0, integer0, integerArray0);
      immutableSortedSet0.last();
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImmutableSortedSet.Builder<Locale.Category> immutableSortedSet_Builder0 = ImmutableSortedSet.reverseOrder();
      assertNotNull(immutableSortedSet_Builder0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.of();
      Object object0 = immutableSortedSet0.writeReplace();
      assertFalse(immutableSortedSet0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[0];
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      RegularImmutableSortedSet<RegularImmutableSortedSet<Integer>> regularImmutableSortedSet1 = ImmutableSortedSet.emptySet((Comparator<? super RegularImmutableSortedSet<Integer>>) comparator1);
      DescendingImmutableSortedSet<RegularImmutableSortedSet<Integer>> descendingImmutableSortedSet0 = new DescendingImmutableSortedSet<RegularImmutableSortedSet<Integer>>(regularImmutableSortedSet1);
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integerArray0);
      RegularImmutableAsList<Integer> regularImmutableAsList0 = new RegularImmutableAsList<Integer>(emptyContiguousSet0, immutableList0);
      RegularImmutableSortedSet<Integer> regularImmutableSortedSet2 = new RegularImmutableSortedSet<Integer>(regularImmutableAsList0, comparator1);
      ImmutableSortedSet<RegularImmutableSortedSet<Integer>> immutableSortedSet0 = descendingImmutableSortedSet0.headSet(regularImmutableSortedSet2);
      assertFalse(immutableSortedSet0.contains(regularImmutableSortedSet2));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      ImmutableSortedSet.Builder<Object> immutableSortedSet_Builder0 = ImmutableSortedSet.orderedBy(comparator1);
      ImmutableSortedSet.Builder<Object> immutableSortedSet_Builder1 = immutableSortedSet_Builder0.add((Object) comparator1);
      assertSame(immutableSortedSet_Builder1, immutableSortedSet_Builder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(655);
      Range<Integer> range0 = Range.open(integer0, integer1);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      // Undeclared exception!
      try { 
        regularContiguousSet0.pollLast();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-763), (-1473)).when(comparable0).compareTo(any());
      doReturn("9F|gq{.U!Mziy@", "9F|gq{.U!Mziy@").when(comparable0).toString();
      comparableArray0[0] = comparable0;
      ImmutableSortedSet<Comparable<Object>> immutableSortedSet0 = ImmutableSortedSet.copyOf(comparableArray0);
      immutableSortedSet0.subSet(comparable0, comparable0);
      assertEquals(1, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ImmutableList<Object> immutableList0 = ImmutableList.copyOf(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = new RegularImmutableSortedSet<Object>(immutableList0, comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeMultiset<Object> treeMultiset0 = TreeMultiset.create((Comparator<? super Object>) comparator1);
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.copyOf((Collection<?>) treeMultiset0);
      assertEquals(0, immutableSortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-285)).when(comparator0).compare(anyInt() , anyInt());
      int int0 = ImmutableSortedSet.unsafeCompare(comparator0, discreteDomain0, comparator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableSortedSet.copyOf((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      Collector<Object, ?, ImmutableSortedSet<Object>> collector0 = ImmutableSortedSet.toImmutableSortedSet((Comparator<? super Object>) comparator1);
      assertNotNull(collector0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(199);
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        immutableSortedSet0.pollFirst();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ContiguousSet<Integer> contiguousSet0 = ContiguousSet.closed(0, 0);
      DescendingImmutableSortedSet<Integer> descendingImmutableSortedSet0 = new DescendingImmutableSortedSet<Integer>(contiguousSet0);
      Integer integer0 = new Integer(1233);
      Integer integer1 = descendingImmutableSortedSet0.lower(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      ImmutableSortedSet<Comparable<Object>> immutableSortedSet0 = ImmutableSortedSet.of(comparable0);
      assertEquals(1, immutableSortedSet0.size());
  }
}
