/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:07:49 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BiMap;
import com.google.common.collect.DescendingImmutableSortedSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyContiguousSet;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.JdkBackedImmutableSet;
import com.google.common.collect.SingletonImmutableBiMap;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HashBiMap_ESTest extends HashBiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashBiMap<JdkBackedImmutableSet<Integer>, Integer> hashBiMap0 = HashBiMap.create();
      int int0 = hashBiMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashBiMap<Locale.FilteringMode, Integer> hashBiMap0 = HashBiMap.create(0);
      HashBiMap.create((Map<? extends Comparable<Locale.FilteringMode>, ? extends Integer>) hashBiMap0);
      assertEquals(0, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashBiMap.create((Map<? extends Locale.Category, ? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.HashBiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashBiMap.create((-2094));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -2094
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashBiMap<Locale.Category, Locale.Category> hashBiMap0 = HashBiMap.create(93);
      BiMap<Locale.Category, Locale.Category> biMap0 = hashBiMap0.inverse();
      assertTrue(biMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashBiMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashBiMap0 = HashBiMap.create();
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashBiMap0.replaceAll(biFunction0);
      assertEquals(0, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashBiMap<Integer, Integer> hashBiMap0 = HashBiMap.create();
      Integer integer0 = new Integer(0);
      hashBiMap0.put(integer0, integer0);
      BiConsumer<Integer, Integer> biConsumer0 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashBiMap0.forEach(biConsumer0);
      assertEquals(1, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashBiMap<DescendingImmutableSortedSet<Object>, Object> hashBiMap0 = HashBiMap.create();
      Integer integer0 = Integer.getInteger("YG=?1x6HBgvRQ0|I*", 0);
      hashBiMap0.remove((Object) integer0);
      assertEquals(0, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashBiMap<Locale.FilteringMode, Locale.FilteringMode> hashBiMap0 = HashBiMap.create();
      boolean boolean0 = hashBiMap0.containsValue((Object) null);
      assertFalse(boolean0);
      assertEquals(0, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashBiMap<Integer, Integer> hashBiMap0 = HashBiMap.create();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = hashBiMap0.containsKey(locale_FilteringMode0);
      assertEquals(0, hashBiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2084));
      HashBiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashBiMap0 = HashBiMap.create();
      hashBiMap0.put((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, integer0);
      boolean boolean0 = hashBiMap0.containsValue(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashBiMap<Integer, Integer> hashBiMap0 = HashBiMap.create();
      Integer integer0 = new Integer(0);
      hashBiMap0.put(integer0, integer0);
      Set<Integer> set0 = hashBiMap0.values();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super Integer>) comparator0, (Collection<? extends Integer>) set0);
      assertTrue(immutableSortedSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonImmutableBiMap<Integer, Object> singletonImmutableBiMap0 = new SingletonImmutableBiMap<Integer, Object>(integer0, locale_Category0);
      HashBiMap<Integer, Object> hashBiMap0 = HashBiMap.create((Map<? extends Integer, ?>) singletonImmutableBiMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashBiMap0.forEachEntry(consumer0);
      assertEquals(1, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashBiMap<DescendingImmutableSortedSet<Integer>, Object> hashBiMap0 = HashBiMap.create();
      hashBiMap0.get((Object) null);
      assertEquals(0, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer(856);
      ImmutableMap<Locale.Category, Integer> immutableMap0 = ImmutableMap.of(locale_Category0, integer0);
      HashBiMap<Locale.Category, Integer> hashBiMap0 = HashBiMap.create((Map<? extends Locale.Category, ? extends Integer>) immutableMap0);
      BiFunction<Locale.Category, Integer, Integer> biFunction0 = (BiFunction<Locale.Category, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(Locale.Category.class) , anyInt());
      hashBiMap0.replaceAll(biFunction0);
      assertEquals(1, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashBiMap<JdkBackedImmutableSet<Integer>, Integer> hashBiMap0 = HashBiMap.create();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = new Integer(0);
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0, integer0, integer0);
      JdkBackedImmutableSet<Integer> jdkBackedImmutableSet0 = new JdkBackedImmutableSet<Integer>(emptyContiguousSet0, immutableList0);
      Integer integer1 = hashBiMap0.forcePut(jdkBackedImmutableSet0, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashBiMap<Integer, Integer> hashBiMap0 = HashBiMap.create(0);
      hashBiMap0.clear();
      assertEquals(0, hashBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashBiMap<Integer, Integer> hashBiMap0 = HashBiMap.create();
      Set<Integer> set0 = hashBiMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashBiMap<JdkBackedImmutableSet<Locale.Category>, Integer> hashBiMap0 = HashBiMap.create();
      hashBiMap0.entryIterator();
      assertEquals(0, hashBiMap0.size());
  }
}
