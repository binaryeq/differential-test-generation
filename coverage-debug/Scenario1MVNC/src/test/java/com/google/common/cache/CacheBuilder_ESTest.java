/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:23:10 GMT 2024
 */

package com.google.common.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Equivalence;
import com.google.common.base.Supplier;
import com.google.common.base.Ticker;
import com.google.common.cache.AbstractCache;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheBuilderSpec;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.google.common.cache.LocalCache;
import com.google.common.cache.ReferenceEntry;
import com.google.common.cache.RemovalListener;
import com.google.common.cache.Weigher;
import com.google.common.hash.BloomFilter;
import java.lang.ref.ReferenceQueue;
import java.time.Duration;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CacheBuilder_ESTest extends CacheBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumSize = (-2482L);
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{maximumSize=-2482}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumWeight = (-2141L);
      // Undeclared exception!
      try { 
        cacheBuilder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximumWeight requires weigher
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.weakKeys();
      Supplier<Delayed> supplier0 = (Supplier<Delayed>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CacheLoader<Object, Delayed> cacheLoader0 = CacheLoader.from(supplier0);
      LocalCache.LocalLoadingCache<Delayed, Delayed> localCache_LocalLoadingCache0 = new LocalCache.LocalLoadingCache<Delayed, Delayed>(cacheBuilder1, cacheLoader0);
      assertEquals(0L, localCache_LocalLoadingCache0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumSize = (-2482L);
      Cache<ChronoLocalDate, ChronoLocalDate> cache0 = cacheBuilder0.build();
      assertNotNull(cache0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofSeconds(10L, 921L);
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.expireAfterAccess(duration0);
      Cache<ChronoLocalDate, ChronoLocalDate> cache0 = cacheBuilder1.build();
      assertNotNull(cache0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      cacheBuilder0.expireAfterWrite(1182L, timeUnit0);
      Cache<ChronoLocalDate, ChronoLocalDate> cache0 = cacheBuilder0.build();
      assertNotNull(cache0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheBuilder0.refreshAfterWrite(1L, timeUnit0);
      // Undeclared exception!
      try { 
        cacheBuilder0.weigher((Weigher<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumSize = (-1413L);
      // Undeclared exception!
      try { 
        cacheBuilder0.maximumWeight(2862933555777941757L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum size was already set to java.lang.Long@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.maximumSize(0L);
      assertSame(cacheBuilder1, cacheBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumSize = 9223372036854775807L;
      // Undeclared exception!
      try { 
        cacheBuilder0.maximumSize((-408L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum size was already set to java.lang.Long@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.concurrencyLevel(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheBuilderSpec cacheBuilderSpec0 = CacheBuilderSpec.parse("");
      CacheBuilder<Object, Object> cacheBuilder0 = cacheBuilderSpec0.toCacheBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.initialCapacity(0);
      assertSame(cacheBuilder1, cacheBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.initialCapacity = (-2393);
      // Undeclared exception!
      try { 
        cacheBuilder0.initialCapacity((-2393));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // initial capacity was already set to java.lang.Integer@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      cacheBuilder0.valueEquivalence(equivalence0);
      Equivalence<Object> equivalence1 = cacheBuilder0.getValueEquivalence();
      assertSame(equivalence1, equivalence0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.keyEquivalence(equivalence0);
      Equivalence<Object> equivalence1 = cacheBuilder1.getKeyEquivalence();
      assertSame(equivalence0, equivalence1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofSeconds(1761L);
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.refreshAfterWrite(duration0);
      assertSame(cacheBuilder1, cacheBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Weigher<ForkJoinTask<CacheBuilder<Object, Object>>, Object> weigher0 = cacheBuilder0.getWeigher();
      assertNotNull(weigher0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.getValueStrength();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Ticker ticker0 = cacheBuilder0.getTicker(true);
      assertNotNull(ticker0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Supplier<? extends AbstractCache.StatsCounter> supplier0 = cacheBuilder0.getStatsCounterSupplier();
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      RemovalListener<Delayed, Equivalence<Equivalence<Equivalence>>> removalListener0 = cacheBuilder0.getRemovalListener();
      assertNotNull(removalListener0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      long long0 = cacheBuilder0.getRefreshNanos();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      long long0 = cacheBuilder0.getMaximumWeight();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.getKeyStrength();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      int int0 = cacheBuilder0.getInitialCapacity();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      long long0 = cacheBuilder0.getExpireAfterWriteNanos();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofNanos(1650L);
      cacheBuilder0.expireAfterWrite(duration0);
      long long0 = cacheBuilder0.getExpireAfterWriteNanos();
      assertEquals(1650L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      long long0 = cacheBuilder0.getExpireAfterAccessNanos();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      int int0 = cacheBuilder0.getConcurrencyLevel();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CacheBuilderSpec cacheBuilderSpec0 = CacheBuilderSpec.parse("");
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.from(cacheBuilderSpec0);
      assertNotNull(cacheBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.valueEquivalence((Equivalence<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.ticker((Ticker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.weakValues();
      // Undeclared exception!
      try { 
        cacheBuilder0.softValues();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value strength was already set to com.google.common.cache.LocalCache$Strength$3@0000000010
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.refreshAfterWrite((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.cache.CacheBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.keyEquivalence((Equivalence<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CacheBuilder.from((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.cache.CacheBuilderSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterWrite((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.cache.CacheBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofDays(999L);
      cacheBuilder0.expireAfterWrite(duration0);
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterWrite(duration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // expireAfterWrite was already set to java.lang.Long@0000000010 ns
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterAccess((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.cache.CacheBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.build((CacheLoader<? super BloomFilter<BloomFilter<BloomFilter>>, Equivalence<CacheBuilder<Object, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Supplier<AbstractCache.StatsCounter> supplier0 = (Supplier<AbstractCache.StatsCounter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      doReturn((String) null, (String) null).when(supplier0).toString();
      cacheBuilder0.statsCounterSupplier = supplier0;
      // Undeclared exception!
      try { 
        cacheBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        cacheBuilder0.refreshAfterWrite(0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration must be positive: java.lang.Long@0000000004 java.util.concurrent.TimeUnit$1@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      cacheBuilder0.refreshAfterWrite(1L, timeUnit0);
      // Undeclared exception!
      try { 
        cacheBuilder0.refreshAfterWrite((-862048943L), timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refresh was already set to java.lang.Long@0000000006 ns
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterAccess((-862048943L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration cannot be negative: java.lang.Long@0000000004 java.util.concurrent.TimeUnit$2@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheBuilder0.expireAfterAccess(1L, timeUnit0);
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterAccess(461845907L, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // expireAfterAccess was already set to java.lang.Long@0000000007 ns
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterWrite((-862048943000000000L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration cannot be negative: java.lang.Long@0000000004 java.util.concurrent.TimeUnit$6@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      LocalCache.Strength localCache_Strength0 = LocalCache.Strength.WEAK;
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.setKeyStrength(localCache_Strength0);
      // Undeclared exception!
      try { 
        cacheBuilder1.setKeyStrength(localCache_Strength0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Key strength was already set to com.google.common.cache.LocalCache$Strength$3@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        CacheBuilder.from((CacheBuilderSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.cache.CacheBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofMinutes(7860000000000L);
      cacheBuilder0.expireAfterWrite(duration0);
      // Undeclared exception!
      try { 
        cacheBuilder0.weigher((Weigher<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      cacheBuilder0.valueEquivalence(equivalence0);
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{valueEquivalence}", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Equivalence<Object> equivalence0 = Equivalence.equals();
      cacheBuilder0.keyEquivalence(equivalence0);
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{keyEquivalence}", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      cacheBuilder0.expireAfterAccess(9223372036854775807L, timeUnit0);
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{expireAfterAccess=9223372036854775807ns}", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      cacheBuilder0.expireAfterWrite((long) 2146209932, timeUnit0);
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{expireAfterWrite=2146209932000000000ns}", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.maximumWeight(2780000000000L);
      String string0 = cacheBuilder1.toString();
      assertEquals("CacheBuilder{maximumWeight=2780000000000}", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.maximumSize(461845907L);
      String string0 = cacheBuilder1.toString();
      assertEquals("CacheBuilder{maximumSize=461845907}", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.concurrencyLevel(1952257861);
      String string0 = cacheBuilder1.toString();
      assertEquals("CacheBuilder{concurrencyLevel=1952257861}", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.initialCapacity(46);
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{initialCapacity=46}", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumWeight(0L);
      // Undeclared exception!
      try { 
        cacheBuilder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximumWeight requires weigher
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.refreshAfterWrite(2560L, timeUnit0);
      // Undeclared exception!
      try { 
        cacheBuilder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refreshAfterWrite requires a LoadingCache
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.recordStats();
      boolean boolean0 = cacheBuilder0.isRecordingStats();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      boolean boolean0 = cacheBuilder0.isRecordingStats();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.removalListener((RemovalListener<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CacheBuilderSpec cacheBuilderSpec0 = CacheBuilderSpec.parse("");
      CacheBuilder<Object, Object> cacheBuilder0 = cacheBuilderSpec0.toCacheBuilder();
      Ticker ticker0 = CacheBuilder.NULL_TICKER;
      cacheBuilder0.ticker(ticker0);
      // Undeclared exception!
      try { 
        cacheBuilder0.ticker(ticker0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      cacheBuilder0.refreshAfterWrite(2L, timeUnit0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CacheLoader<Object, Object> cacheLoader0 = CacheLoader.from(supplier0);
      LoadingCache<CacheBuilder<Object, Object>, Object> loadingCache0 = cacheBuilder0.build((CacheLoader<? super CacheBuilder<Object, Object>, Object>) cacheLoader0);
      assertNotNull(loadingCache0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.refreshAfterWrite(3290L, timeUnit0);
      Duration duration0 = Duration.ofMinutes(4897L);
      // Undeclared exception!
      try { 
        cacheBuilder1.refreshAfterWrite(duration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refresh was already set to java.lang.Long@0000000006 ns
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.expireAfterAccess(4575L, timeUnit0);
      long long0 = cacheBuilder1.getExpireAfterAccessNanos();
      assertEquals(16470000000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofMinutes((-1279L));
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterAccess(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration cannot be negative: java.lang.Long@0000000004 java.util.concurrent.TimeUnit$1@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ZERO;
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.expireAfterAccess(duration0);
      // Undeclared exception!
      try { 
        cacheBuilder1.expireAfterAccess(duration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // expireAfterAccess was already set to java.lang.Long@0000000010 ns
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofHours((-175L));
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterWrite(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration cannot be negative: java.lang.Long@0000000004 java.util.concurrent.TimeUnit$1@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      Duration duration0 = chronoUnit0.getDuration();
      cacheBuilder0.expireAfterWrite(duration0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheBuilder0.expireAfterWrite(431L, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // expireAfterWrite was already set to java.lang.Long@0000000010 ns
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      LocalCache.Strength localCache_Strength0 = LocalCache.Strength.SOFT;
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.setValueStrength(localCache_Strength0);
      // Undeclared exception!
      try { 
        cacheBuilder1.weakValues();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value strength was already set to com.google.common.cache.LocalCache$Strength$2@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      LocalCache.Strength localCache_Strength0 = LocalCache.Strength.STRONG;
      cacheBuilder0.setKeyStrength(localCache_Strength0);
      // Undeclared exception!
      try { 
        cacheBuilder0.weakKeys();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Key strength was already set to com.google.common.cache.LocalCache$Strength$1@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ZERO;
      cacheBuilder0.expireAfterWrite(duration0);
      Cache<ChronoLocalDate, ChronoLocalDate> cache0 = cacheBuilder0.build();
      assertNotNull(cache0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.maximumWeight((-3525L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maximum weight must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumWeight(2780000000000L);
      // Undeclared exception!
      try { 
        cacheBuilder0.maximumWeight(2780000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum weight was already set to java.lang.Long@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.maximumSize((-408L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maximum size must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.maximumSize(5529600000000000L);
      // Undeclared exception!
      try { 
        cacheBuilder1.maximumWeight(5529600000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum size was already set to java.lang.Long@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumWeight = 742L;
      // Undeclared exception!
      try { 
        cacheBuilder0.maximumSize(832L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum weight was already set to java.lang.Long@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Weigher<CacheBuilder<Locale, Locale>, PriorityQueue<Locale>> weigher0 = (Weigher<CacheBuilder<Locale, Locale>, PriorityQueue<Locale>>) mock(Weigher.class, new ViolatedAssumptionAnswer());
      CacheBuilder<CacheBuilder<Locale, Locale>, PriorityQueue<Locale>> cacheBuilder1 = cacheBuilder0.weigher((Weigher<? super CacheBuilder<Locale, Locale>, ? super PriorityQueue<Locale>>) weigher0);
      // Undeclared exception!
      try { 
        cacheBuilder1.maximumSize(4629L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum size can not be combined with weigher
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.maximumSize = (-298L);
      // Undeclared exception!
      try { 
        cacheBuilder0.maximumSize((-1764L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum size was already set to java.lang.Long@0000000004
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.concurrencyLevel((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.concurrencyLevel(2145854297);
      // Undeclared exception!
      try { 
        cacheBuilder0.concurrencyLevel(2145854297);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // concurrency level was already set to java.lang.Integer@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.initialCapacity(2365);
      Cache<ChronoLocalDate, ChronoLocalDate> cache0 = cacheBuilder0.build();
      assertNotNull(cache0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      // Undeclared exception!
      try { 
        cacheBuilder0.initialCapacity((-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.initialCapacity(4128);
      // Undeclared exception!
      try { 
        cacheBuilder0.initialCapacity((-161));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // initial capacity was already set to java.lang.Integer@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      cacheBuilder0.valueEquivalence(equivalence0);
      // Undeclared exception!
      try { 
        cacheBuilder0.valueEquivalence(equivalence0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // value equivalence was already set to com.google.common.base.Equivalence$Identity@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      cacheBuilder0.keyEquivalence(equivalence0);
      // Undeclared exception!
      try { 
        cacheBuilder0.keyEquivalence(equivalence0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // key equivalence was already set to com.google.common.base.Equivalence$Identity@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.recordStats();
      Cache<ChronoLocalDate, ChronoLocalDate> cache0 = cacheBuilder1.build();
      assertNotNull(cache0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Supplier<LocalCache.WeakValueReference<Object, Object>> supplier0 = (Supplier<LocalCache.WeakValueReference<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CacheLoader<Object, LocalCache.WeakValueReference<Object, Object>> cacheLoader0 = CacheLoader.from(supplier0);
      LocalCache.LocalLoadingCache<Object, LocalCache.WeakValueReference<Object, Object>> localCache_LocalLoadingCache0 = new LocalCache.LocalLoadingCache<Object, LocalCache.WeakValueReference<Object, Object>>(cacheBuilder0, cacheLoader0);
      Object object0 = new Object();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      ReferenceEntry<Object, Object> referenceEntry0 = LocalCache.nullEntry();
      LocalCache.WeightedWeakValueReference<Object, Object> localCache_WeightedWeakValueReference0 = new LocalCache.WeightedWeakValueReference<Object, Object>(referenceQueue0, object0, referenceEntry0, 0);
      localCache_LocalLoadingCache0.put(object0, localCache_WeightedWeakValueReference0);
      assertEquals(1L, localCache_LocalLoadingCache0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.weakValues();
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{valueStrength=weak}", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.from("");
      assertNotNull(cacheBuilder0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ZERO;
      cacheBuilder0.expireAfterAccess(duration0);
      long long0 = cacheBuilder0.getMaximumWeight();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.softValues();
      LocalCache.Strength localCache_Strength0 = LocalCache.Strength.WEAK;
      // Undeclared exception!
      try { 
        cacheBuilder0.setValueStrength(localCache_Strength0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value strength was already set to com.google.common.cache.LocalCache$Strength$2@0000000010
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      cacheBuilder0.weakKeys();
      String string0 = cacheBuilder0.toString();
      assertEquals("CacheBuilder{keyStrength=weak}", string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      CacheBuilder<Object, Object> cacheBuilder1 = cacheBuilder0.lenientParsing();
      assertSame(cacheBuilder1, cacheBuilder0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CacheBuilder<Object, Object> cacheBuilder0 = CacheBuilder.newBuilder();
      Duration duration0 = Duration.ofNanos((-9223372036854775808L));
      // Undeclared exception!
      try { 
        cacheBuilder0.refreshAfterWrite(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration must be positive: java.lang.Long@0000000004 java.util.concurrent.TimeUnit$1@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      // Undeclared exception!
      try { 
        CacheBuilder.from("duration (%s %s) must be > 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown key java.lang.String@0000000007
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
