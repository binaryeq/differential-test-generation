/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:00:21 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.AbstractBiMap;
import com.google.common.collect.BoundType;
import com.google.common.collect.EnumBiMap;
import com.google.common.collect.ImmutableMapEntry;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ForwardingMapEntry_ESTest extends ForwardingMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractBiMap.Inverse<Integer, Integer> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Integer, Integer>((Map<Integer, Integer>) null, (AbstractBiMap<Integer, Integer>) null);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-922));
      ImmutableMapEntry<Integer, Integer> immutableMapEntry0 = new ImmutableMapEntry<Integer, Integer>(integer0, integer1);
      AbstractBiMap.BiMapEntry abstractBiMap_BiMapEntry0 = abstractBiMap_Inverse0.new BiMapEntry(immutableMapEntry0);
      int int0 = abstractBiMap_BiMapEntry0.standardHashCode();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumBiMap<BoundType, BoundType> enumBiMap0 = EnumBiMap.create(class0, class0);
      BoundType boundType0 = BoundType.OPEN;
      enumBiMap0.putIfAbsent(boundType0, boundType0);
      String string0 = enumBiMap0.standardToString();
      assertEquals("{OPEN=OPEN}", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumBiMap<Locale.FilteringMode, Locale.FilteringMode> enumBiMap0 = EnumBiMap.create(class0, class0);
      AbstractBiMap.BiMapEntry abstractBiMap_BiMapEntry0 = enumBiMap0.new BiMapEntry((Map.Entry<Locale.FilteringMode, Locale.FilteringMode>) null);
      // Undeclared exception!
      try { 
        abstractBiMap_BiMapEntry0.standardToString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ForwardingMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractBiMap.Inverse<Integer, Integer> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Integer, Integer>((Map<Integer, Integer>) null, (AbstractBiMap<Integer, Integer>) null);
      Integer integer0 = new Integer(0);
      ImmutableMapEntry<Integer, Integer> immutableMapEntry0 = new ImmutableMapEntry<Integer, Integer>(integer0, integer0);
      AbstractBiMap.BiMapEntry abstractBiMap_BiMapEntry0 = abstractBiMap_Inverse0.new BiMapEntry(immutableMapEntry0);
      int int0 = abstractBiMap_BiMapEntry0.standardHashCode();
      assertEquals(0, int0);
  }
}
