/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:54:46 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.CaseFormat;
import com.google.common.base.Converter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CaseFormat_ESTest extends CaseFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.LOWER_HYPHEN;
      String string0 = caseFormat0.convert(caseFormat1, ">g-{LoPS~+$");
      assertEquals(">g-{-lo-p-s~+$", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat0.to(caseFormat1, "EB`");
      assertEquals("e_b`", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat0.convert(caseFormat0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.LOWER_HYPHEN;
      String string0 = caseFormat1.convert(caseFormat0, "MCD");
      assertEquals("Mcd", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CaseFormat[] caseFormatArray0 = CaseFormat.values();
      assertEquals(5, caseFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.valueOf("UPPER_UNDERSCORE");
      String string0 = caseFormat0.convert(caseFormat0, "UPPER_UNDERSCORE");
      assertEquals("UPPER_UNDERSCORE", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      String string0 = caseFormat0.to(caseFormat0, "EB`");
      assertEquals("EB`", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      String string0 = caseFormat0.normalizeFirstWord("`");
      assertEquals("`", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      String string0 = caseFormat0.normalizeFirstWord("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_UNDERSCORE;
      // Undeclared exception!
      try { 
        caseFormat0.to(caseFormat0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      // Undeclared exception!
      try { 
        caseFormat0.normalizeFirstWord((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Ascii", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      // Undeclared exception!
      try { 
        caseFormat0.converterTo((CaseFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      // Undeclared exception!
      try { 
        caseFormat0.convert(caseFormat0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.UPPER_CAMEL;
      String string0 = caseFormat0.convert(caseFormat1, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat0.to(caseFormat0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat1.convert(caseFormat0, "tx^=4;L");
      assertEquals("Tx^=4;l", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.LOWER_HYPHEN;
      String string0 = caseFormat0.convert(caseFormat1, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat1.convert(caseFormat0, "tx^=4;L");
      assertEquals("tx^=4;l", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat0.convert(caseFormat1, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.LOWER_HYPHEN;
      String string0 = caseFormat0.convert(caseFormat1, "UPPER_UNDERSCORE");
      assertEquals("UPPER-UNDERSCORE", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat0.convert(caseFormat0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_HYPHEN;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat0.convert(caseFormat1, "1");
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_HYPHEN;
      CaseFormat caseFormat1 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat0.convert(caseFormat1, ")");
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.UPPER_CAMEL;
      String string0 = caseFormat0.convert(caseFormat1, "com.google.common.base.Converter");
      assertEquals("Com.google.common.base.Converter", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      String string0 = caseFormat0.convert(caseFormat0, "UPPER_UNDERSCORE");
      assertEquals("uPPER_UNDERSCORE", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat0.to(caseFormat1, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_HYPHEN;
      String string0 = caseFormat0.convert(caseFormat0, "com.google.common.base.CharMatcher$IsNot");
      assertEquals("com.google.common.base.charmatcher$isnot", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      Converter<String, String> converter0 = caseFormat0.converterTo(caseFormat0);
      assertNotNull(converter0);
  }
}
