/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:53:08 GMT 2024
 */

package com.google.common.primitives;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.primitives.Longs;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Longs_ESTest extends Longs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = Longs.tryParse("z&_q4U@~S|", 2);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      long long0 = Longs.fromByteArray(byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 34;
      int int0 = Longs.lastIndexOf(longArray0, 1L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1227L;
      longArray0[1] = (-1117L);
      long[] longArray1 = new long[1];
      int int0 = Longs.indexOf(longArray0, longArray1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-2039L);
      int int0 = Longs.indexOf(longArray0, (-939L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'Y';
      boolean boolean0 = Longs.contains(longArray0, 64L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[4];
      Longs.sortDescending(longArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = Longs.AsciiDigits.digit('p');
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = Longs.tryParse("meB9", 31);
      assertNotNull(long0);
      assertEquals(669206L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = Longs.tryParse("0");
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 4611686018427387904L;
      long long0 = Longs.min(longArray0);
      assertEquals(4611686018427387904L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-1L);
      long long0 = Longs.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3059);
      longArray0[1] = (long) (-3059);
      long long0 = Longs.max(longArray0);
      assertEquals((-3059L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 1799L;
      int int0 = Longs.lastIndexOf(longArray0, 1799L);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 4611686018427387904L;
      int int0 = Longs.indexOf(longArray0, 0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = Longs.fromBytes((byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15), (byte)80, (byte)10, (byte)80, (byte) (-15));
      assertEquals((-1012762422449385231L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = Longs.toByteArray(34);
      long long0 = Longs.fromByteArray(byteArray0);
      assertEquals(34L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Longs.toByteArray((-3461L));
      long long0 = Longs.fromByteArray(byteArray0);
      assertEquals((-3461L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = Longs.ensureCapacity(longArray0, 0, 766);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = Longs.constrainToRange((-1L), 0L, 4611686018427387904L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = Longs.constrainToRange(64L, 64L, 64L);
      assertEquals(64L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[][] longArray0 = new long[0][5];
      long[] longArray1 = Longs.concat(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.tryParse((String) null, (-23));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.tryParse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        Longs.sortDescending(longArray0, 730, 26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be greater than size (java.lang.Integer@0000000003)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.sortDescending((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.reverse((long[]) null, (-14), (-14));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        Longs.reverse(longArray0, (-744), (-744));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.reverse((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = Longs.ensureCapacity(longArray0, 1821, 12288);
      // Undeclared exception!
      Longs.min(longArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.min((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.max((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.lastIndexOf((long[]) null, 364L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = Longs.ensureCapacity(longArray0, 1005, 1005);
      long[][] longArray2 = new long[9][8];
      longArray2[0] = longArray1;
      longArray2[1] = longArray1;
      longArray2[2] = longArray1;
      longArray2[3] = longArray1;
      longArray2[6] = longArray1;
      long[] longArray3 = Longs.concat(longArray2);
      // Undeclared exception!
      Longs.join(")[*# *\"|F4\"`^JW$l", longArray3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.join("", (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        Longs.join((String) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.indexOf((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.fromByteArray((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.contains((long[]) null, (-244L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.concat((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.asList((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[9];
      Longs.reverse(longArray0, 0, 4);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Long long0 = Longs.tryParse("min (%s) must be less than or equal to max (%s)", 31);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Long long0 = Longs.tryParse("com.google.common.primitives.Longs$LongConverter", 21);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Long long0 = Longs.tryParse("0000000000", 17);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Long long0 = Longs.tryParse("(8Aco=/gk_<8;%|%n,", 36);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Long long0 = Longs.tryParse("-Th-7fF'r<$A~", 29);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Long long0 = Longs.tryParse("", 10);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.sortDescending((long[]) null, (-2149), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[0];
      List<Long> list0 = Longs.asList(longArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      // Undeclared exception!
      try { 
        Longs.toArray(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      long[] longArray0 = Longs.toArray(hashSet0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.toArray((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = Longs.join("", longArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[5];
      String string0 = Longs.join("", longArray0);
      assertEquals("00000", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        Longs.ensureCapacity(longArray0, 2147011154, 2147011154);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[18];
      long[] longArray1 = Longs.ensureCapacity(longArray0, 0, 0);
      assertEquals(18, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        Longs.ensureCapacity(longArray0, 10, (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid padding: java.lang.Integer@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.ensureCapacity((long[]) null, 65, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        Longs.ensureCapacity(longArray0, (-1285), (-1285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid minLength: java.lang.Integer@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Long long0 = Longs.tryParse("checkedMultiply", 35);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Long long0 = Longs.tryParse("022^L");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Long long0 = Longs.tryParse("4");
      assertEquals(4L, (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.tryParse("com.google.common.primitives.Longs", 1614);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // radix must be between MIN_RADIX and MAX_RADIX but was 1614
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.tryParse("OJ00UR!_", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // radix must be between MIN_RADIX and MAX_RADIX but was 0
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Long long0 = Longs.tryParse("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Longs.fromByteArray(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array too small: java.lang.Integer@0000000001 < java.lang.Integer@0000000002
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = Longs.constrainToRange((-939L), (-939L), (-939L));
      assertEquals((-939L), long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.constrainToRange(4611686018427387904L, 1336L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min (java.lang.Long@0000000001) must be less than or equal to max (java.lang.Long@0000000002)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 2074L;
      long long0 = Longs.max(longArray0);
      assertEquals(2074L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = Longs.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        Longs.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 31;
      long long0 = Longs.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        Longs.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 16L;
      int int0 = Longs.lastIndexOf(longArray0, 16L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      longArray1[0] = (-947L);
      int int0 = Longs.indexOf(longArray0, longArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[0];
      int int0 = Longs.indexOf(longArray1, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = Longs.indexOf(longArray0, longArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = Longs.indexOf(longArray0, longArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = Longs.indexOf(longArray0, 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = Longs.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = Longs.compare(6127L, (-22L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = Longs.compare((-2672L), 1456L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = Longs.compare((-2738L), (-2738L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      long[] longArray0 = new long[9];
      List<Long> list0 = Longs.asList(longArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = linkedList0.containsAll(list0);
      assertEquals(9, list0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      long[] longArray0 = new long[7];
      List<Long> list0 = Longs.asList(longArray0);
      long[] longArray1 = Longs.toArray(list0);
      assertEquals(7, longArray1.length);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      long long0 = Longs.fromBytes((byte)15, (byte)15, (byte)15, (byte)15, (byte)15, (byte)15, (byte)15, (byte)15);
      assertEquals(1085102592571150095L, long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Longs.hashCode((-1318L));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      long[] longArray0 = new long[5];
      Longs.sortDescending(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Converter<String, Long> converter0 = Longs.stringConverter();
      // Undeclared exception!
      try { 
        converter0.apply("com.google.common.primitives.Longs");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.google.common.primitives.Longs\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        Longs.indexOf((long[]) null, (-2571L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.primitives.Longs", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      long[] longArray0 = new long[7];
      Longs.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Comparator<long[]> comparator0 = Longs.lexicographicalComparator();
      assertNotNull(comparator0);
  }
}
