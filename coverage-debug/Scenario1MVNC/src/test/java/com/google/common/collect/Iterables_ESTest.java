/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:18:43 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.BoundType;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyImmutableSetMultimap;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableCollection;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimaps;
import com.google.common.collect.Range;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.SingletonImmutableSet;
import com.google.common.collect.UnmodifiableIterator;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Iterables_ESTest extends Iterables_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentHashMap.KeySetView<Multimaps.Keys<Object, Object>, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(2375);
      // Undeclared exception!
      try { 
        Iterables.partition((Iterable<Multimaps.Keys<Object, Object>>) concurrentHashMap_KeySetView0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ImmutableListMultimap<Comparable<Locale.FilteringMode>, Locale.FilteringMode> immutableListMultimap0 = ImmutableListMultimap.of((Comparable<Locale.FilteringMode>) locale_FilteringMode0, locale_FilteringMode0);
      ImmutableList<Locale.FilteringMode> immutableList0 = immutableListMultimap0.get(locale_FilteringMode0);
      boolean boolean0 = Iterables.contains(immutableList0, locale_FilteringMode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Iterables.toString((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.singleton(locale_FilteringMode0);
      DiscreteDomain<Locale.FilteringMode> discreteDomain0 = (DiscreteDomain<Locale.FilteringMode>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      RegularContiguousSet<Locale.FilteringMode> regularContiguousSet0 = new RegularContiguousSet<Locale.FilteringMode>(range0, discreteDomain0);
      // Undeclared exception!
      try { 
        Iterables.retainAll(regularContiguousSet0, regularContiguousSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Iterables.partition((Iterable<Object>) null, 980);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.singleton(locale_FilteringMode0);
      DiscreteDomain<Locale.FilteringMode> discreteDomain0 = (DiscreteDomain<Locale.FilteringMode>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(discreteDomain0).distance(any(Locale.FilteringMode.class) , any(Locale.FilteringMode.class));
      RegularContiguousSet<Locale.FilteringMode> regularContiguousSet0 = new RegularContiguousSet<Locale.FilteringMode>(range0, discreteDomain0);
      Locale.FilteringMode locale_FilteringMode1 = Iterables.getLast((Iterable<? extends Locale.FilteringMode>) regularContiguousSet0, locale_FilteringMode0);
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PriorityQueue<Map.Entry<BoundType, BoundType>> priorityQueue0 = new PriorityQueue<Map.Entry<BoundType, BoundType>>();
      // Undeclared exception!
      try { 
        Iterables.getLast((Iterable<Map.Entry<BoundType, BoundType>>) priorityQueue0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonImmutableSet<Locale.Category> singletonImmutableSet0 = new SingletonImmutableSet<Locale.Category>(locale_Category0);
      ImmutableList<Locale.Category> immutableList0 = ImmutableList.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      ImmutableList<Iterable<Locale.Category>> immutableList1 = ImmutableList.of((Iterable<Locale.Category>) singletonImmutableSet0, (Iterable<Locale.Category>) singletonImmutableSet0, (Iterable<Locale.Category>) singletonImmutableSet0, (Iterable<Locale.Category>) singletonImmutableSet0, (Iterable<Locale.Category>) singletonImmutableSet0, (Iterable<Locale.Category>) immutableList0, (Iterable<Locale.Category>) singletonImmutableSet0, (Iterable<Locale.Category>) immutableList0);
      // Undeclared exception!
      try { 
        Iterables.get((Iterable<Iterable<Locale.Category>>) immutableList1, 862);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 862
         //
         verifyException("com.google.common.collect.RegularImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<Comparable<Object>> treeSet0 = new TreeSet<Comparable<Object>>();
      // Undeclared exception!
      try { 
        Iterables.get((Iterable<Comparable<Object>>) treeSet0, 5094);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // position (5094) must be less than the number of elements that remained (0)
         //
         verifyException("com.google.common.collect.Iterators", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentHashMap.KeySetView<Locale.Category, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      // Undeclared exception!
      try { 
        Iterables.partition((Iterable<Locale.Category>) concurrentHashMap_KeySetView0, (-2068));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      UnmodifiableIterator<Object> unmodifiableIterator0 = emptyImmutableSetMultimap0.valueIterator();
      ImmutableSortedMultiset<Object> immutableSortedMultiset0 = ImmutableSortedMultiset.copyOf((Iterator<?>) unmodifiableIterator0);
      int int0 = Iterables.frequency(immutableSortedMultiset0, unmodifiableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Iterables.elementsEqual((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashMap.KeySetView<Locale.Category, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      boolean boolean0 = Iterables.retainAll(concurrentHashMap_KeySetView0, concurrentHashMap_KeySetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) listIterator0);
      MockFile mockFile0 = new MockFile("#*b98", "blE E:P]o");
      boolean boolean0 = Iterables.contains(immutableSortedSet0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMultimap<ImmutableSortedMultiset<Object>, Object> hashMultimap0 = HashMultimap.create();
      Set<Object> set0 = hashMultimap0.createCollection();
      Iterable<Object> iterable0 = Iterables.limit((Iterable<Object>) set0, 0);
      Object[] objectArray0 = Iterables.toArray(iterable0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImmutableSortedMultiset<Object> immutableSortedMultiset0 = ImmutableSortedMultiset.of();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Iterables.find((Iterable<?>) immutableSortedMultiset0, (Predicate<? super Object>) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Iterables.concat((Iterable<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.FluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonImmutableSet<Locale.Category> singletonImmutableSet0 = new SingletonImmutableSet<Locale.Category>(locale_Category0);
      Iterable<Locale.Category> iterable0 = Iterables.concat((Iterable<? extends Locale.Category>) singletonImmutableSet0, (Iterable<? extends Locale.Category>) singletonImmutableSet0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      String string0 = Iterables.toString((Iterable<?>) linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BoundType[] boundTypeArray0 = new BoundType[9];
      Iterable<BoundType> iterable0 = Iterables.cycle(boundTypeArray0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMultimap<ImmutableSortedMultiset<Object>, Object> hashMultimap0 = HashMultimap.create();
      Set<Object> set0 = hashMultimap0.createCollection();
      Object[] objectArray0 = Iterables.toArray((Iterable<?>) set0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.singleton(locale_FilteringMode0);
      DiscreteDomain<Locale.FilteringMode> discreteDomain0 = (DiscreteDomain<Locale.FilteringMode>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      RegularContiguousSet<Locale.FilteringMode> regularContiguousSet0 = new RegularContiguousSet<Locale.FilteringMode>(range0, discreteDomain0);
      Locale.FilteringMode locale_FilteringMode1 = Iterables.getOnlyElement((Iterable<? extends Locale.FilteringMode>) regularContiguousSet0, locale_FilteringMode0);
      assertTrue(regularContiguousSet0.contains(locale_FilteringMode1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Range<Locale.FilteringMode> range0 = Range.singleton(locale_FilteringMode0);
      DiscreteDomain<Locale.FilteringMode> discreteDomain0 = (DiscreteDomain<Locale.FilteringMode>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(discreteDomain0).distance(any(Locale.FilteringMode.class) , any(Locale.FilteringMode.class));
      RegularContiguousSet<Locale.FilteringMode> regularContiguousSet0 = new RegularContiguousSet<Locale.FilteringMode>(range0, discreteDomain0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode[] locale_FilteringModeArray1 = Iterables.toArray((Iterable<? extends Locale.FilteringMode>) regularContiguousSet0, locale_FilteringModeArray0);
      assertEquals(7, locale_FilteringModeArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) listIterator0);
      Iterable<Locale.Category> iterable0 = Iterables.unmodifiableIterable((ImmutableCollection<Locale.Category>) immutableSortedSet0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function<Iterable<? extends ContiguousSet<Locale.Category>>, Iterator<? extends ContiguousSet<Locale.Category>>> function0 = Iterables.toIterator();
      assertNotNull(function0);
  }
}
