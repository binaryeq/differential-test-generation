/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:17:52 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Stopwatch;
import com.google.common.base.Ticker;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Stopwatch_ESTest extends Stopwatch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      Stopwatch stopwatch1 = stopwatch0.start();
      System.setCurrentTimeMillis((-1186L));
      String string0 = stopwatch1.toString();
      assertEquals("-1.392e+15 ns", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      stopwatch0.start();
      System.setCurrentTimeMillis((-1186L));
      Stopwatch stopwatch1 = stopwatch0.stop();
      Stopwatch stopwatch2 = stopwatch1.start();
      Duration duration0 = stopwatch2.elapsed();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stopwatch stopwatch0 = new Stopwatch();
      assertFalse(stopwatch0.isRunning());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      stopwatch0.start();
      boolean boolean0 = stopwatch0.isRunning();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = new Stopwatch(ticker0);
      Stopwatch stopwatch1 = stopwatch0.start();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      System.setCurrentTimeMillis(1392409281320000L);
      long long0 = stopwatch1.elapsed(timeUnit0);
      assertTrue(stopwatch0.isRunning());
      assertEquals(1391016872038L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      // Undeclared exception!
      try { 
        stopwatch0.elapsed((TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Stopwatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Stopwatch.createUnstarted((Ticker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ticker
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Stopwatch.createStarted((Ticker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ticker
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stopwatch stopwatch0 = null;
      try {
        stopwatch0 = new Stopwatch((Ticker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ticker
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      System.setCurrentTimeMillis(0L);
      stopwatch0.start();
      System.setCurrentTimeMillis(89L);
      stopwatch0.toString();
      assertTrue(stopwatch0.isRunning());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-23183L));
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createStarted(ticker0);
      System.setCurrentTimeMillis(1L);
      String string0 = stopwatch0.toString();
      assertEquals("23.18 ms", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-1393801L));
      Stopwatch stopwatch0 = Stopwatch.createStarted();
      System.setCurrentTimeMillis(0L);
      String string0 = stopwatch0.toString();
      assertEquals("1.394 s", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-1392409304L));
      Stopwatch stopwatch0 = Stopwatch.createStarted();
      System.setCurrentTimeMillis(1L);
      String string0 = stopwatch0.toString();
      assertEquals("23.21 min", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      System.setCurrentTimeMillis((-4177227797L));
      Stopwatch stopwatch0 = new Stopwatch(ticker0);
      Stopwatch stopwatch1 = stopwatch0.start();
      System.setCurrentTimeMillis((-23206L));
      String string0 = stopwatch1.toString();
      assertTrue(stopwatch0.isRunning());
      assertEquals("1.160 h", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = new Stopwatch(ticker0);
      stopwatch0.start();
      System.setCurrentTimeMillis(1392409281320000L);
      stopwatch0.toString();
      assertTrue(stopwatch0.isRunning());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stopwatch stopwatch0 = Stopwatch.createStarted();
      // Undeclared exception!
      try { 
        stopwatch0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This stopwatch is already running.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stopwatch stopwatch0 = Stopwatch.createUnstarted();
      Stopwatch stopwatch1 = stopwatch0.start();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      System.setCurrentTimeMillis(0L);
      long long0 = stopwatch1.elapsed(timeUnit0);
      assertTrue(stopwatch0.isRunning());
      assertEquals((-386L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      boolean boolean0 = stopwatch0.isRunning();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      long long0 = stopwatch0.elapsed(timeUnit0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createStarted(ticker0);
      assertTrue(stopwatch0.isRunning());
      
      stopwatch0.reset();
      assertFalse(stopwatch0.isRunning());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Ticker ticker0 = Ticker.systemTicker();
      Stopwatch stopwatch0 = Stopwatch.createUnstarted(ticker0);
      // Undeclared exception!
      try { 
        stopwatch0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This stopwatch is already stopped.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stopwatch stopwatch0 = Stopwatch.createStarted();
      String string0 = stopwatch0.toString();
      assertEquals("0.000 ns", string0);
      assertTrue(stopwatch0.isRunning());
  }
}
