/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 23 17:34:53 GMT 2024
 */

package com.google.common.util.concurrent;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ExecutionSequencer_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) System.getProperties().clone();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.google.common.util.concurrent.ExecutionSequencer"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    System.setProperties((java.util.Properties) defaultProperties.clone());
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    System.setProperties((java.util.Properties) defaultProperties.clone());
    System.setProperty("user.dir", "/home/wtwhite/code/regression-test-generation/find-diff-classes/testgen/mvnc/com/google/guava/guava/31.0.1-jre");
    System.setProperty("java.io.tmpdir", "/tmp");
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ExecutionSequencer_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue",
      "com.google.common.util.concurrent.ExecutionSequencer$RunningState",
      "com.google.common.util.concurrent.AbstractFuture$TrustedFuture",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.util.concurrent.SettableFuture",
      "com.google.common.base.JdkPattern",
      "com.google.common.util.concurrent.FluentFuture$TrustedFuture",
      "com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization",
      "com.google.common.util.concurrent.ForwardingFluentFuture",
      "com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper",
      "com.google.common.util.concurrent.DirectExecutor",
      "com.google.common.base.Platform",
      "com.google.common.util.concurrent.Futures$InCompletionOrderState",
      "com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper",
      "com.google.common.base.Platform$JdkPatternCompiler",
      "com.google.common.util.concurrent.AbstractFuture$Failure",
      "com.google.common.util.concurrent.ElementTypesAreNonnullByDefault",
      "com.google.common.util.concurrent.InterruptibleTask$Blocker",
      "com.google.common.util.concurrent.Futures$CallbackListener",
      "com.google.common.util.concurrent.ImmediateFuture",
      "com.google.errorprone.annotations.DoNotMock",
      "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask",
      "com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable",
      "com.google.common.base.Function",
      "com.google.common.util.concurrent.Futures$InCompletionOrderFuture",
      "com.google.common.base.CommonPattern",
      "com.google.common.util.concurrent.AbstractFuture$Trusted",
      "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1",
      "com.google.common.util.concurrent.internal.InternalFutureFailureAccess",
      "com.google.common.util.concurrent.ExecutionSequencer$1",
      "com.google.common.util.concurrent.ExecutionSequencer$2",
      "com.google.common.util.concurrent.ExecutionSequencer$3",
      "com.google.common.util.concurrent.AbstractFuture$Listener",
      "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture",
      "com.google.common.util.concurrent.TrustedListenableFutureTask",
      "com.google.common.util.concurrent.ListeningExecutorService",
      "com.google.common.util.concurrent.AbstractFuture$AtomicHelper",
      "com.google.common.util.concurrent.MoreExecutors",
      "com.google.common.util.concurrent.ListenableFuture",
      "com.google.common.util.concurrent.NullnessCasts",
      "com.google.common.util.concurrent.ExecutionError",
      "com.google.common.util.concurrent.AbstractFuture$SetFuture",
      "com.google.common.util.concurrent.AsyncCallable",
      "com.google.common.util.concurrent.InterruptibleTask",
      "com.google.common.util.concurrent.AbstractFuture$Cancellation",
      "com.google.common.base.Strings",
      "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask",
      "com.google.common.util.concurrent.GwtFuturesCatchingSpecialization",
      "com.google.common.base.PatternCompiler",
      "com.google.common.collect.ImmutableList",
      "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper",
      "com.google.common.util.concurrent.UncheckedExecutionException",
      "com.google.common.util.concurrent.AbstractFuture$Waiter",
      "com.google.common.util.concurrent.ListeningScheduledExecutorService",
      "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor",
      "com.google.common.util.concurrent.AbstractFuture$Failure$1",
      "com.google.common.util.concurrent.FutureCallback",
      "com.google.common.util.concurrent.Futures",
      "com.google.common.base.Preconditions",
      "com.google.common.util.concurrent.AsyncFunction",
      "com.google.common.util.concurrent.ExecutionSequencer",
      "com.google.common.util.concurrent.AbstractFuture",
      "com.google.common.util.concurrent.FluentFuture"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.google.common.util.concurrent.AsyncCallable", false, ExecutionSequencer_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.lang.Comparable", false, ExecutionSequencer_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.concurrent.Callable", false, ExecutionSequencer_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.concurrent.ThreadFactory", false, ExecutionSequencer_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ExecutionSequencer_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.google.common.util.concurrent.ExecutionSequencer",
      "com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue",
      "com.google.common.util.concurrent.ExecutionSequencer$1",
      "com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor",
      "com.google.common.util.concurrent.ExecutionSequencer$2",
      "com.google.common.util.concurrent.ExecutionSequencer$3",
      "com.google.common.util.concurrent.ExecutionSequencer$RunningState",
      "com.google.common.util.concurrent.ImmediateFuture",
      "com.google.common.util.concurrent.DirectExecutor",
      "com.google.common.util.concurrent.GwtFuturesCatchingSpecialization",
      "com.google.common.util.concurrent.Futures",
      "com.google.common.base.Preconditions",
      "com.google.common.util.concurrent.internal.InternalFutureFailureAccess",
      "com.google.common.util.concurrent.AbstractFuture$AtomicHelper",
      "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1",
      "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper",
      "com.google.common.util.concurrent.AbstractFuture",
      "com.google.common.util.concurrent.AbstractFuture$TrustedFuture",
      "com.google.common.util.concurrent.SettableFuture",
      "com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization",
      "com.google.common.util.concurrent.FluentFuture",
      "com.google.common.util.concurrent.FluentFuture$TrustedFuture",
      "com.google.common.util.concurrent.TrustedListenableFutureTask",
      "com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable",
      "com.google.common.util.concurrent.InterruptibleTask",
      "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask",
      "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture",
      "com.google.common.util.concurrent.MoreExecutors",
      "com.google.common.util.concurrent.AbstractFuture$Listener",
      "com.google.common.base.Strings",
      "com.google.common.base.Platform$JdkPatternCompiler",
      "com.google.common.base.Platform",
      "com.google.common.util.concurrent.ListenableFutureTask",
      "com.google.common.util.concurrent.ExecutionList",
      "com.google.common.util.concurrent.AbstractFuture$Failure$1",
      "com.google.common.util.concurrent.AbstractFuture$Failure",
      "com.google.common.util.concurrent.NullnessCasts",
      "com.google.common.util.concurrent.AbstractFuture$Waiter",
      "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask",
      "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture",
      "com.google.common.util.concurrent.AbstractFuture$SetFuture",
      "com.google.common.util.concurrent.TimeoutFuture",
      "com.google.common.util.concurrent.TimeoutFuture$Fire",
      "com.google.common.util.concurrent.ForwardingFluentFuture",
      "com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException",
      "com.google.common.util.concurrent.AbstractFuture$Cancellation",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableMultisetGwtSerializationDependencies",
      "com.google.common.collect.ImmutableMultiset",
      "com.google.common.collect.AbstractMultiset",
      "com.google.common.collect.AbstractMapBasedMultiset",
      "com.google.common.collect.LinkedHashMultiset",
      "com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair",
      "com.google.common.collect.Count",
      "com.google.common.collect.Sets$ImprovedAbstractSet",
      "com.google.common.collect.Multisets$EntrySet",
      "com.google.common.collect.AbstractMultiset$EntrySet",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.ImmutableSet$CachingAsList",
      "com.google.common.collect.RegularImmutableSet",
      "com.google.common.collect.RegularImmutableMultiset",
      "com.google.common.collect.Hashing",
      "com.google.common.collect.AbstractMapBasedMultiset$2",
      "com.google.common.collect.Multisets$AbstractEntry",
      "com.google.common.collect.AbstractMapBasedMultiset$2$1",
      "com.google.common.collect.Multisets$ImmutableEntry",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry",
      "com.google.common.primitives.IntsMethodsForWeb",
      "com.google.common.primitives.Ints",
      "com.google.common.util.concurrent.AggregateFutureState$AtomicHelper",
      "com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper",
      "com.google.common.util.concurrent.AggregateFutureState",
      "com.google.common.util.concurrent.AggregateFuture",
      "com.google.common.util.concurrent.CombinedFuture",
      "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask",
      "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask",
      "com.google.common.util.concurrent.AggregateFuture$2",
      "com.google.common.collect.IndexedImmutableSet",
      "com.google.common.collect.ImmutableMultiset$EntrySet",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.collect.IndexedImmutableSet$1",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.collect.ImmutableList$1",
      "com.google.common.collect.ImmutableSet$Indexed",
      "com.google.common.collect.ImmutableMultiset$ElementSet",
      "com.google.common.collect.ImmutableMultiset$1"
    );
  }
}
