/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:55:24 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.CharMatcher;
import com.google.common.base.Predicate;
import com.google.common.collect.FilteredEntryMultimap;
import com.google.common.collect.FilteredEntrySetMultimap;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableMapEntrySet;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.TreeMultimap;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnel;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilteredEntryMultimap_ESTest extends FilteredEntryMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedListMultimap<Object, CharMatcher> linkedListMultimap0 = new LinkedListMultimap<Object, CharMatcher>();
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0);
      FilteredEntryMultimap<Object, CharMatcher> filteredEntryMultimap0 = new FilteredEntryMultimap<Object, CharMatcher>(linkedListMultimap0, bloomFilter0);
      FilteredEntryMultimap.AsMap filteredEntryMultimap_AsMap0 = filteredEntryMultimap0.new AsMap();
      Collection<Comparable<Object>> collection0 = filteredEntryMultimap_AsMap0.get(bloomFilter0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Locale.Category> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Locale.Category>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeMultimap<ImmutableMapEntrySet.RegularEntrySet<CharMatcher, CharMatcher>, CharMatcher> treeMultimap0 = TreeMultimap.create((Comparator<? super ImmutableMapEntrySet.RegularEntrySet<CharMatcher, CharMatcher>>) comparator1, (Comparator<? super CharMatcher>) comparator1);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0);
      FilteredEntryMultimap<ImmutableMapEntrySet.RegularEntrySet<CharMatcher, CharMatcher>, CharMatcher> filteredEntryMultimap0 = new FilteredEntryMultimap<ImmutableMapEntrySet.RegularEntrySet<CharMatcher, CharMatcher>, CharMatcher>(treeMultimap0, bloomFilter0);
      Map<ImmutableMapEntrySet.RegularEntrySet<CharMatcher, CharMatcher>, Collection<CharMatcher>> map0 = filteredEntryMultimap0.createAsMap();
      ImmutableSet<Object> immutableSet0 = ImmutableSet.of((Object) regularImmutableSortedSet0, (Object) map0);
      Collection<Object> collection0 = FilteredEntryMultimap.filterCollection((Collection<Object>) immutableSet0, (Predicate<? super Object>) bloomFilter0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0);
      FilteredEntryMultimap<LinkedHashSet<CharMatcher>, CharMatcher> filteredEntryMultimap0 = null;
      try {
        filteredEntryMultimap0 = new FilteredEntryMultimap<LinkedHashSet<CharMatcher>, CharMatcher>((Multimap<LinkedHashSet<CharMatcher>, CharMatcher>) null, bloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      HashMultimap<Object, Object> hashMultimap0 = HashMultimap.create();
      FilteredEntryMultimap<Object, Object> filteredEntryMultimap0 = new FilteredEntryMultimap<Object, Object>(hashMultimap0, bloomFilter0);
      FilteredEntryMultimap.AsMap filteredEntryMultimap_AsMap0 = filteredEntryMultimap0.new AsMap();
      Set<Map.Entry<Comparable<CharMatcher>, Collection<Object>>> set0 = (Set<Map.Entry<Comparable<CharMatcher>, Collection<Object>>>)filteredEntryMultimap_AsMap0.createEntrySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedListMultimap<Object, CharMatcher> linkedListMultimap0 = new LinkedListMultimap<Object, CharMatcher>();
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0);
      FilteredEntryMultimap<Object, CharMatcher> filteredEntryMultimap0 = new FilteredEntryMultimap<Object, CharMatcher>(linkedListMultimap0, bloomFilter0);
      boolean boolean0 = filteredEntryMultimap0.containsValue(bloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharMatcher charMatcher0 = CharMatcher.noneOf(charBuffer0);
      ImmutableSetMultimap<CharMatcher, Object> immutableSetMultimap0 = ImmutableSetMultimap.of(charMatcher0, (Object) charBuffer0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      FilteredEntrySetMultimap<CharMatcher, Object> filteredEntrySetMultimap0 = new FilteredEntrySetMultimap<CharMatcher, Object>(immutableSetMultimap0, bloomFilter0);
      FilteredEntryMultimap.Keys filteredEntryMultimap_Keys0 = filteredEntrySetMultimap0.new Keys();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharMatcher charMatcher0 = CharMatcher.noneOf(charBuffer0);
      ImmutableSetMultimap<CharMatcher, Object> immutableSetMultimap0 = ImmutableSetMultimap.of(charMatcher0, (Object) charBuffer0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      FilteredEntrySetMultimap<CharMatcher, Object> filteredEntrySetMultimap0 = new FilteredEntrySetMultimap<CharMatcher, Object>(immutableSetMultimap0, bloomFilter0);
      FilteredEntryMultimap.AsMap filteredEntryMultimap_AsMap0 = filteredEntrySetMultimap0.new AsMap();
      Collection<CharMatcher> collection0 = filteredEntryMultimap_AsMap0.remove((Object) charMatcher0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      HashMultimap<Object, Object> hashMultimap0 = HashMultimap.create();
      FilteredEntryMultimap<Object, Object> filteredEntryMultimap0 = new FilteredEntryMultimap<Object, Object>(hashMultimap0, bloomFilter0);
      Set<Object> set0 = filteredEntryMultimap0.createKeySet();
      assertFalse(set0.contains(0L));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Locale.Category> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Locale.Category>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0);
      TreeMultimap<CharMatcher, CharMatcher> treeMultimap0 = TreeMultimap.create((Comparator<? super CharMatcher>) comparator1, (Comparator<? super CharMatcher>) comparator1);
      FilteredEntryMultimap<CharMatcher, CharMatcher> filteredEntryMultimap0 = new FilteredEntryMultimap<CharMatcher, CharMatcher>(treeMultimap0, bloomFilter0);
      int int0 = filteredEntryMultimap0.size();
      assertEquals(0, int0);
  }
}
