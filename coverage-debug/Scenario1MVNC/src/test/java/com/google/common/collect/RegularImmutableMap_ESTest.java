/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:42:18 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMapEntry;
import com.google.common.collect.Range;
import com.google.common.collect.RegularImmutableMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegularImmutableMap_ESTest extends RegularImmutableMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      Map.Entry<BoundType, BoundType> map_Entry0 = ImmutableMap.entryOf(boundType0, boundType0);
      BoundType boundType1 = BoundType.OPEN;
      ImmutableMapEntry<BoundType, BoundType> immutableMapEntry0 = RegularImmutableMap.makeImmutable((Map.Entry<BoundType, BoundType>) map_Entry0, boundType1, boundType0);
      assertNotNull(immutableMapEntry0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegularImmutableMap.makeImmutable((Map.Entry<Object, RegularImmutableMap<Object, Object>>) null, (Object) null, (RegularImmutableMap<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=null
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegularImmutableMap.makeImmutable((Map.Entry<BoundType, BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.RegularImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Map.Entry<Map.Entry<BoundType, BoundType>, Comparable<Object>>[] map_EntryArray0 = (Map.Entry<Map.Entry<BoundType, BoundType>, Comparable<Object>>[]) Array.newInstance(Map.Entry.class, 0);
      // Undeclared exception!
      try { 
        RegularImmutableMap.fromEntryArray(29, (Map.Entry<Map.Entry<BoundType, BoundType>, Comparable<Object>>[]) map_EntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be greater than size (java.lang.Integer@0000000003)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      RegularImmutableMap<Locale.Category, Object> regularImmutableMap0 = RegularImmutableMap.get((Object) locale_Category0, (ImmutableMapEntry<?, RegularImmutableMap<Locale.Category, Object>>[]) null, 73);
      assertNull(regularImmutableMap0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ImmutableMapEntry<Object, RegularImmutableMap<Object, Object>>[] immutableMapEntryArray0 = (ImmutableMapEntry<Object, RegularImmutableMap<Object, Object>>[]) Array.newInstance(ImmutableMapEntry.class, 7);
      RegularImmutableMap<Object, Object> regularImmutableMap0 = RegularImmutableMap.get((Object) null, (ImmutableMapEntry<?, RegularImmutableMap<Object, Object>>[]) immutableMapEntryArray0, 1);
      assertNull(regularImmutableMap0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Map.Entry<BoundType, BoundType>[] map_EntryArray0 = (Map.Entry<BoundType, BoundType>[]) Array.newInstance(Map.Entry.class, 8);
      BoundType boundType0 = BoundType.OPEN;
      AbstractMap.SimpleEntry<BoundType, BoundType> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<BoundType, BoundType>(boundType0, boundType0);
      map_EntryArray0[0] = (Map.Entry<BoundType, BoundType>) abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<BoundType, BoundType> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<BoundType, BoundType>(boundType0, boundType0);
      ImmutableMapEntry<BoundType, BoundType> immutableMapEntry0 = RegularImmutableMap.makeImmutable((Map.Entry<BoundType, BoundType>) abstractMap_SimpleEntry1);
      map_EntryArray0[1] = (Map.Entry<BoundType, BoundType>) immutableMapEntry0;
      // Undeclared exception!
      try { 
        RegularImmutableMap.fromEntries((Map.Entry<BoundType, BoundType>[]) map_EntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: OPEN=OPEN and OPEN=OPEN
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Map.Entry<Object, BoundType>[] map_EntryArray0 = (Map.Entry<Object, BoundType>[]) Array.newInstance(Map.Entry.class, 1);
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.atLeast(boundType0);
      BoundType boundType1 = range0.lowerBoundType();
      ImmutableMapEntry<Object, BoundType> immutableMapEntry0 = new ImmutableMapEntry<Object, BoundType>(boundType1, boundType0);
      map_EntryArray0[0] = (Map.Entry<Object, BoundType>) immutableMapEntry0;
      ImmutableMap<Object, BoundType> immutableMap0 = RegularImmutableMap.fromEntries((Map.Entry<Object, BoundType>[]) map_EntryArray0);
      assertEquals(1, immutableMap0.size());
  }
}
