/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:34:36 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.AllEqualOrdering;
import com.google.common.collect.BoundType;
import com.google.common.collect.ExplicitOrdering;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.NullsFirstOrdering;
import com.google.common.collect.NullsLastOrdering;
import com.google.common.collect.Ordering;
import com.google.common.collect.UsingToStringOrdering;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NullsLastOrdering_ESTest extends NullsLastOrdering_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullsLastOrdering<Object> nullsLastOrdering0 = new NullsLastOrdering<Object>((Ordering<? super Object>) null);
      NullsLastOrdering<Integer> nullsLastOrdering1 = new NullsLastOrdering<Integer>(nullsLastOrdering0);
      int int0 = nullsLastOrdering0.compare((Object) null, nullsLastOrdering1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsingToStringOrdering usingToStringOrdering0 = UsingToStringOrdering.INSTANCE;
      Integer integer0 = new Integer(57);
      Integer[] integerArray0 = new Integer[1];
      NullsLastOrdering<Object> nullsLastOrdering0 = new NullsLastOrdering<Object>(usingToStringOrdering0);
      NullsLastOrdering<Integer> nullsLastOrdering1 = new NullsLastOrdering<Integer>(nullsLastOrdering0);
      int int0 = nullsLastOrdering1.compare(integer0, integerArray0[0]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExplicitOrdering<Object> explicitOrdering0 = new ExplicitOrdering<Object>((ImmutableMap<Object, Integer>) null);
      NullsLastOrdering<BoundType> nullsLastOrdering0 = new NullsLastOrdering<BoundType>(explicitOrdering0);
      // Undeclared exception!
      try { 
        nullsLastOrdering0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ExplicitOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullsLastOrdering<Integer> nullsLastOrdering0 = new NullsLastOrdering<Integer>((Ordering<? super Integer>) null);
      // Undeclared exception!
      try { 
        nullsLastOrdering0.reverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.NullsLastOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullsLastOrdering<Object> nullsLastOrdering0 = new NullsLastOrdering<Object>((Ordering<? super Object>) null);
      // Undeclared exception!
      try { 
        nullsLastOrdering0.nullsFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.NullsLastOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsingToStringOrdering usingToStringOrdering0 = UsingToStringOrdering.INSTANCE;
      NullsLastOrdering<Object> nullsLastOrdering0 = new NullsLastOrdering<Object>(usingToStringOrdering0);
      NullsLastOrdering<Locale.FilteringMode> nullsLastOrdering1 = new NullsLastOrdering<Locale.FilteringMode>(nullsLastOrdering0);
      NullsLastOrdering<Integer> nullsLastOrdering2 = new NullsLastOrdering<Integer>(nullsLastOrdering0);
      boolean boolean0 = nullsLastOrdering2.equals(nullsLastOrdering1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AllEqualOrdering allEqualOrdering0 = new AllEqualOrdering();
      NullsLastOrdering<Integer> nullsLastOrdering0 = new NullsLastOrdering<Integer>(allEqualOrdering0);
      NullsLastOrdering<Object> nullsLastOrdering1 = new NullsLastOrdering<Object>(allEqualOrdering0);
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = nullsLastOrdering1.min(boundType0, boundType0);
      boolean boolean0 = nullsLastOrdering0.equals(boundType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AllEqualOrdering allEqualOrdering0 = new AllEqualOrdering();
      NullsLastOrdering<Integer> nullsLastOrdering0 = new NullsLastOrdering<Integer>(allEqualOrdering0);
      NullsLastOrdering<Object> nullsLastOrdering1 = new NullsLastOrdering<Object>(allEqualOrdering0);
      NullsLastOrdering<NullsLastOrdering<Integer>> nullsLastOrdering2 = new NullsLastOrdering<NullsLastOrdering<Integer>>(nullsLastOrdering1);
      int int0 = nullsLastOrdering2.compare(nullsLastOrdering0, nullsLastOrdering0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AllEqualOrdering allEqualOrdering0 = new AllEqualOrdering();
      NullsLastOrdering<Object> nullsLastOrdering0 = new NullsLastOrdering<Object>(allEqualOrdering0);
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      BoundType boundType2 = nullsLastOrdering0.min(boundType0, boundType1);
      assertEquals(BoundType.CLOSED, boundType2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AllEqualOrdering allEqualOrdering0 = new AllEqualOrdering();
      NullsFirstOrdering<BoundType> nullsFirstOrdering0 = new NullsFirstOrdering<BoundType>(allEqualOrdering0);
      NullsLastOrdering<BoundType> nullsLastOrdering0 = new NullsLastOrdering<BoundType>(nullsFirstOrdering0);
      String string0 = nullsLastOrdering0.toString();
      assertEquals("Ordering.allEqual().nullsFirst().nullsLast()", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      ImmutableMultiset<Integer> immutableMultiset0 = ImmutableMultiset.of();
      ImmutableList<Integer> immutableList0 = ImmutableList.sortedCopyOf((Comparator<? super Integer>) ordering_ArbitraryOrdering0, (Iterable<? extends Integer>) immutableMultiset0);
      Ordering<Integer> ordering0 = Ordering.explicit((List<Integer>) immutableList0);
      NullsLastOrdering<Integer> nullsLastOrdering0 = new NullsLastOrdering<Integer>(ordering0);
      nullsLastOrdering0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AllEqualOrdering allEqualOrdering0 = new AllEqualOrdering();
      NullsLastOrdering<Integer> nullsLastOrdering0 = new NullsLastOrdering<Integer>(allEqualOrdering0);
      Ordering<Integer> ordering0 = nullsLastOrdering0.nullsFirst();
      assertNotNull(ordering0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AllEqualOrdering allEqualOrdering0 = new AllEqualOrdering();
      NullsLastOrdering<Integer> nullsLastOrdering0 = new NullsLastOrdering<Integer>(allEqualOrdering0);
      Ordering<Integer> ordering0 = nullsLastOrdering0.reverse();
      assertNotNull(ordering0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      NullsLastOrdering<Object> nullsLastOrdering0 = new NullsLastOrdering<Object>(ordering_ArbitraryOrdering0);
      Ordering<Integer> ordering0 = nullsLastOrdering0.nullsLast();
      assertNotNull(ordering0);
  }
}
