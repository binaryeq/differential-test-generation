/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:07:21 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.ImmediateFuture;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListenableFutureTask;
import com.google.common.util.concurrent.TimeoutFuture;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.concurrent.Callable;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeoutFuture_ESTest extends TimeoutFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      Integer integer0 = new Integer((-2371));
      ImmediateFuture<Integer> immediateFuture0 = new ImmediateFuture<Integer>(integer0);
      ListenableFuture<Integer> listenableFuture0 = TimeoutFuture.create((ListenableFuture<Integer>) immediateFuture0, (-9223372036854775808L), timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<Object> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1165, threadFactory0);
      scheduledThreadPoolExecutor0.shutdownNow();
      // Undeclared exception!
      try { 
        TimeoutFuture.create((ListenableFuture<Object>) listenableFutureTask0, 3344L, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@76844e54 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@6248e468[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<Integer> listenableFutureTask0 = new ListenableFutureTask<Integer>(callable0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        TimeoutFuture.create((ListenableFuture<Integer>) listenableFutureTask0, 591L, timeUnit0, (ScheduledExecutorService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.TimeoutFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1496, threadFactory0);
      // Undeclared exception!
      try { 
        TimeoutFuture.create((ListenableFuture<Integer>) null, (long) 1496, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ImmediateFuture.ImmediateFailedFuture<Integer> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Integer>(sQLClientInfoException0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Thread thread0 = MockThread.currentThread();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(thread0).when(threadFactory0).newThread(any(Runnable.class));
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1073741823, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      // Undeclared exception!
      try { 
        TimeoutFuture.create((ListenableFuture<Integer>) immediateFuture_ImmediateFailedFuture0, 1164L, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ImmediateFuture.ImmediateFailedFuture<Object> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Object>(sQLFeatureNotSupportedException0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(14);
      ListenableFuture<Object> listenableFuture0 = TimeoutFuture.create((ListenableFuture<Object>) immediateFuture_ImmediateFailedFuture0, 0L, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      ListenableFuture<Object> listenableFuture1 = TimeoutFuture.create(listenableFuture0, (-3183L), timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      assertFalse(listenableFuture1.equals((Object)listenableFuture0));
  }
}
