/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:57:22 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.CharMatcher;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.common.base.SmallCharMatcher;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.BitSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharMatcher_ESTest extends CharMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.inRange('q', '\u008D');
      String string0 = charMatcher0.retainFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\r\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u000B\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\t \u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\f\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\n\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085\u0085", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '\u0080';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.collapseFrom("CharMatcher.any().negate()", '(');
      assertEquals("CharMatcher.any().negate()", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-23);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.collapseFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", 'l');
      assertEquals("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.isNot('m');
      int int0 = charMatcher0.countIn("CharMatcher.whitespace()");
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)0);
      int int0 = charMatcher_NegatedFastMatcher0.countIn(charBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaIsoControl();
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = charMatcher0.retainFrom(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.invisible();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      // Undeclared exception!
      charMatcher_NegatedFastMatcher0.precomputedInternal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.inRange('~', '~');
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      String string0 = charMatcher_NegatedFastMatcher0.collapseFrom("CharMatcher.inRange('~', '~').negate()", '@');
      assertEquals("@~@~@", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaIsoControl();
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = charMatcher0.trimFrom(charBuffer0);
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('[');
      byte[] byteArray0 = new byte[5];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      charMatcher0.setBits(bitSet0);
      assertEquals(128, bitSet0.size());
      assertEquals(92, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2097);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      charMatcher_Whitespace0.setBits(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(25, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BitSet bitSet0 = new BitSet(0);
      CharMatcher charMatcher0 = SmallCharMatcher.from(bitSet0, "");
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      charMatcher_NegatedFastMatcher0.setBits(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(65536, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      String string0 = charMatcher_Whitespace0.toString();
      assertEquals("CharMatcher.whitespace()", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      CharMatcher charMatcher0 = charMatcher_Whitespace0.precomputed();
      assertSame(charMatcher0, charMatcher_Whitespace0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharMatcher charMatcher0 = charMatcher_Whitespace0.negate();
      CharMatcher charMatcher1 = charMatcher0.and((CharMatcher) charMatcher_Whitespace0);
      CharMatcher charMatcher2 = charMatcher1.precomputedInternal();
      assertFalse(charMatcher2.equals((Object)charMatcher1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharMatcher charMatcher1 = CharMatcher.isNot('Y');
      CharMatcher charMatcher2 = charMatcher1.and(charMatcher0);
      // Undeclared exception!
      charMatcher2.precomputedInternal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(15);
      String string0 = charMatcher0.retainFrom(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetter();
      int int0 = charMatcher0.lastIndexIn("p");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher_Whitespace0);
      Character character0 = new Character('k');
      boolean boolean0 = charMatcher_NegatedFastMatcher0.apply(character0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.none();
      // Undeclared exception!
      try { 
        charMatcher0.trimTrailingFrom((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher$None", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(65536);
      // Undeclared exception!
      charMatcher0.trimLeadingFrom(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      // Undeclared exception!
      try { 
        charMatcher0.trimLeadingFrom((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.inRange('>', '>');
      // Undeclared exception!
      try { 
        charMatcher0.trimFrom((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      // Undeclared exception!
      try { 
        charMatcher_Whitespace0.trimAndCollapseFrom((CharSequence) null, 'X');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2440);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      // Undeclared exception!
      charMatcher0.toString();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetterOrDigit();
      BitSet bitSet0 = new BitSet(6);
      // Undeclared exception!
      charMatcher0.setBits(bitSet0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('x');
      // Undeclared exception!
      try { 
        charMatcher0.setBits((BitSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher$Is", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      // Undeclared exception!
      try { 
        charMatcher0.retainFrom((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaDigit();
      // Undeclared exception!
      try { 
        charMatcher0.replaceFrom((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(55552);
      // Undeclared exception!
      try { 
        charMatcher0.replaceFrom((CharSequence) charBuffer0, (CharSequence) charBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(55551);
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      // Undeclared exception!
      charMatcher0.replaceFrom((CharSequence) charBuffer0, '');
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      // Undeclared exception!
      try { 
        charMatcher0.replaceFrom((CharSequence) null, 'G');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetter();
      CharBuffer charBuffer0 = CharBuffer.allocate(55544);
      // Undeclared exception!
      charMatcher0.removeFrom(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetter();
      // Undeclared exception!
      try { 
        charMatcher0.removeFrom((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      // Undeclared exception!
      try { 
        charMatcher0.removeFrom((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('x');
      // Undeclared exception!
      try { 
        charMatcher0.or((CharMatcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher$Is", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      // Undeclared exception!
      try { 
        charMatcher0.or((CharMatcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharMatcher.noneOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharBuffer charBuffer0 = CharBuffer.allocate(55561);
      // Undeclared exception!
      charMatcher_Whitespace0.matchesNoneOf(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      // Undeclared exception!
      try { 
        charMatcher0.matchesNoneOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher$Any", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      // Undeclared exception!
      try { 
        charMatcher0.matchesAnyOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      // Undeclared exception!
      try { 
        charMatcher_Whitespace0.matchesAllOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      // Undeclared exception!
      try { 
        charMatcher0.lastIndexIn((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      // Undeclared exception!
      try { 
        charMatcher0.indexIn((CharSequence) charBuffer0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      // Undeclared exception!
      try { 
        charMatcher0.indexIn((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher$Any", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharMatcher.forPredicate((Predicate<? super Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      CharBuffer charBuffer0 = CharBuffer.allocate(55551);
      // Undeclared exception!
      charMatcher0.countIn(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      // Undeclared exception!
      try { 
        charMatcher0.countIn((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      CharBuffer charBuffer0 = CharBuffer.allocate(55547);
      // Undeclared exception!
      charMatcher_Whitespace0.collapseFrom(charBuffer0, 'Q');
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      // Undeclared exception!
      try { 
        charMatcher0.collapseFrom((CharSequence) null, 'Q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher$Any", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      // Undeclared exception!
      try { 
        charMatcher0.apply((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharMatcher.anyOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      // Undeclared exception!
      try { 
        charMatcher0.and((CharMatcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharMatcher charMatcher0 = charMatcher_Whitespace0.negate();
      int int0 = charMatcher0.indexIn((CharSequence) "@@@@@@@@@@@@@@@@@", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('[');
      int int0 = charMatcher0.indexIn((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharMatcher charMatcher1 = charMatcher0.or((CharMatcher) charMatcher_NegatedFastMatcher0);
      boolean boolean0 = charMatcher1.matchesAllOf("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.inRange('1', '1');
      String string0 = charMatcher0.replaceFrom((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", '3');
      assertEquals("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharMatcher.inRange(']', '4');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(133);
      CharMatcher charMatcher0 = CharMatcher.noneOf(charBuffer0);
      boolean boolean0 = charMatcher0.matches('(');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.collapseFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", 'l');
      assertEquals("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.replaceFrom((CharSequence) charBuffer0, 'T');
      assertEquals("TT", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharMatcher charMatcher1 = CharMatcher.isNot('A');
      CharMatcher charMatcher2 = charMatcher1.or(charMatcher0);
      assertSame(charMatcher2, charMatcher0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharMatcher charMatcher0 = CharMatcher.isNot('m');
      CharMatcher charMatcher1 = charMatcher0.or((CharMatcher) charMatcher_Whitespace0);
      assertSame(charMatcher1, charMatcher0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharMatcher charMatcher0 = CharMatcher.isNot('x');
      CharMatcher charMatcher1 = charMatcher0.and((CharMatcher) charMatcher_Whitespace0);
      assertEquals("CharMatcher.whitespace()", charMatcher1.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.isNot('m');
      int int0 = charMatcher0.indexIn((CharSequence) "CharMatcher.whitespace()");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.isNot('r');
      Character character0 = Character.valueOf('r');
      boolean boolean0 = charMatcher0.apply(character0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      CharMatcher charMatcher1 = CharMatcher.is('x');
      CharMatcher charMatcher2 = charMatcher1.or(charMatcher0);
      assertFalse(charMatcher2.equals((Object)charMatcher1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('[');
      CharMatcher charMatcher1 = charMatcher0.and(charMatcher0);
      assertSame(charMatcher0, charMatcher1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('[');
      CharMatcher charMatcher1 = CharMatcher.none();
      CharMatcher charMatcher2 = charMatcher0.and(charMatcher1);
      assertSame(charMatcher2, charMatcher1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('h');
      int int0 = charMatcher0.indexIn((CharSequence) "CharMatcher.whitespace()");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('x');
      String string0 = charMatcher0.replaceFrom((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", (CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharMatcher charMatcher1 = charMatcher0.or((CharMatcher) charMatcher_NegatedFastMatcher0);
      int int0 = charMatcher1.countIn("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      CharMatcher charMatcher1 = charMatcher0.or(charMatcher0);
      boolean boolean0 = charMatcher1.matchesNoneOf("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      CharMatcher charMatcher1 = charMatcher0.or(charMatcher0);
      boolean boolean0 = charMatcher1.matchesNoneOf("CharMatcher.javaUpperCase()");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaIsoControl();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharMatcher charMatcher1 = charMatcher_NegatedFastMatcher0.and((CharMatcher) charMatcher_NegatedFastMatcher0);
      String string0 = charMatcher1.trimAndCollapseFrom("CharMatcher.javaIsoControl().negate()", '=');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharMatcher charMatcher1 = charMatcher0.and((CharMatcher) charMatcher_NegatedFastMatcher0);
      boolean boolean0 = charMatcher1.matchesNoneOf("\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(55570);
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      // Undeclared exception!
      charMatcher_NegatedFastMatcher0.replaceFrom((CharSequence) charBuffer0, (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.digit();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      String string0 = charMatcher0.removeFrom(charBuffer0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(67);
      CharMatcher charMatcher0 = CharMatcher.invisible();
      String string0 = charMatcher0.removeFrom(charBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      String string0 = charMatcher0.collapseFrom(charBuffer0, '$');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      String string0 = charMatcher0.collapseFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", ',');
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      String string0 = charMatcher0.replaceFrom((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", (CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      boolean boolean0 = charMatcher0.matchesNoneOf(charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      boolean boolean0 = charMatcher0.matchesNoneOf("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      int int0 = charMatcher0.indexIn((CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 15);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      int int0 = charMatcher0.indexIn((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", 15);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      int int0 = charMatcher0.indexIn((CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      int int0 = charMatcher0.indexIn((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '[';
      charArray0[4] = '\u0080';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      CharMatcher charMatcher1 = charMatcher0.precomputedInternal();
      assertFalse(charMatcher1.equals((Object)charMatcher0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      String string0 = charMatcher0.trimAndCollapseFrom(charBuffer0, 'b');
      assertEquals("\uB800", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.breakingWhitespace();
      String string0 = charMatcher0.trimAndCollapseFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", 'E');
      assertEquals("\u202F\u00A0E\u2007", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      String string0 = charMatcher0.trimAndCollapseFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", '#');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaIsoControl();
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = charMatcher0.collapseFrom(charBuffer0, '\u0000');
      assertEquals("U\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaIsoControl();
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = charMatcher0.collapseFrom(charBuffer0, '\u0000');
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      String string0 = charMatcher0.collapseFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", 'l');
      assertEquals("\u2002\u3000l\u0085\u200A\u2005\u2000\u3000\u2029l\u3000\u2008\u2003\u205F\u3000\u1680l\u2006\u2001\u202F\u00A0l\u2009\u3000\u2004\u3000\u3000\u2028l\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      String string0 = charMatcher_Whitespace0.trimAndCollapseFrom(charBuffer0, 'X');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      String string0 = charMatcher0.trimTrailingFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      String string0 = charMatcher_Whitespace0.trimLeadingFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.breakingWhitespace();
      String string0 = charMatcher0.trimFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharMatcher charMatcher0 = charMatcher_Whitespace0.precomputedInternal();
      String string0 = charMatcher0.trimFrom("CharMatcher.whitespace()");
      assertEquals("CharMatcher.whitespace()", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      String string0 = charMatcher0.trimFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher_Whitespace0);
      String string0 = charMatcher_NegatedFastMatcher0.replaceFrom((CharSequence) "s", (CharSequence) "s");
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.javaLetter();
      String string0 = charMatcher0.replaceFrom((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      String string0 = charMatcher0.replaceFrom((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", (CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.javaLetter();
      String string0 = charMatcher0.replaceFrom((CharSequence) charBuffer0, 'i');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      String string0 = charMatcher0.replaceFrom((CharSequence) "\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", 'l');
      assertEquals("\u2002\u3000l\u0085\u200A\u2005\u2000\u3000\u2029l\u3000\u2008\u2003\u205F\u3000\u1680ll\u2006\u2001\u202F\u00A0l\u2009\u3000\u2004\u3000\u3000\u2028l\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaIsoControl();
      String string0 = charMatcher0.removeFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("\u2002\u3000\u200A\u2005\u2000\u3000\u2029\u3000\u2008\u2003\u205F\u3000\u1680 \u2006\u2001\u202F\u00A0\u2009\u3000\u2004\u3000\u3000\u2028\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      int int0 = charMatcher0.lastIndexIn("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      int int0 = charMatcher0.lastIndexIn("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      boolean boolean0 = charMatcher_NegatedFastMatcher0.matchesNoneOf("CharMatcher.ascii().negate()");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      boolean boolean0 = charMatcher0.matchesAllOf("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2440);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      boolean boolean0 = charMatcher0.matchesAnyOf("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      CharMatcher charMatcher1 = charMatcher0.precomputedInternal();
      assertFalse(charMatcher1.equals((Object)charMatcher0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.isNot('');
      CharMatcher charMatcher1 = CharMatcher.forPredicate(charMatcher0);
      assertSame(charMatcher1, charMatcher0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.anyOf("\u0000");
      assertNotNull(charMatcher0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.isNot('');
      CharMatcher charMatcher1 = charMatcher0.precomputedInternal();
      String string0 = charMatcher1.toString();
      assertEquals("CharMatcher.isNot('\\u007F')", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLowerCase();
      // Undeclared exception!
      charMatcher0.precomputedInternal();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.invisible();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharMatcher charMatcher1 = charMatcher_NegatedFastMatcher0.precomputed();
      assertSame(charMatcher1, charMatcher_NegatedFastMatcher0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetterOrDigit();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      String string0 = charMatcher_NegatedFastMatcher0.toString();
      assertEquals("CharMatcher.javaLetterOrDigit().negate()", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetter();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      String string0 = charMatcher_NegatedFastMatcher0.toString();
      assertEquals("CharMatcher.javaLetter().negate()", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      String string0 = charMatcher0.toString();
      assertEquals("CharMatcher.javaUpperCase()", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaDigit();
      // Undeclared exception!
      charMatcher0.precomputedInternal();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Predicates.ObjectPredicate predicates_ObjectPredicate0 = Predicates.ObjectPredicate.ALWAYS_TRUE;
      CharMatcher charMatcher0 = CharMatcher.forPredicate(predicates_ObjectPredicate0);
      // Undeclared exception!
      charMatcher0.precomputedInternal();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = CharMatcher.Whitespace.INSTANCE;
      CharMatcher charMatcher0 = charMatcher_Whitespace0.precomputed();
      assertEquals("CharMatcher.whitespace()", charMatcher0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.none();
      int int0 = charMatcher0.countIn("CharMatcher.whitespace()");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.none();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = charMatcher0.lastIndexIn(charBuffer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      int int0 = charMatcher0.indexIn((CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.none();
      String string0 = charMatcher0.collapseFrom(charBuffer0, 'y');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.none();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      boolean boolean0 = charMatcher0.matchesNoneOf(charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.none();
      String string0 = charMatcher0.trimLeadingFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      int int0 = charMatcher0.indexIn((CharSequence) charBuffer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.replaceFrom((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.replaceFrom((CharSequence) charBuffer0, ';');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetter();
      CharMatcher charMatcher1 = CharMatcher.none();
      CharMatcher charMatcher2 = charMatcher1.or(charMatcher0);
      assertSame(charMatcher2, charMatcher0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      String string0 = charMatcher0.retainFrom(charBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.none();
      CharMatcher charMatcher1 = charMatcher0.and(charMatcher0);
      assertSame(charMatcher0, charMatcher1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.none();
      String string0 = charMatcher0.trimFrom("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.inRange('\u0000', 'k');
      CharMatcher charMatcher1 = charMatcher0.precomputedInternal();
      String string0 = charMatcher1.trimTrailingFrom("CharMatcher.whitespace()");
      assertEquals("CharMatcher.whitesp", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('`');
      String string0 = charMatcher0.replaceFrom((CharSequence) "", '`');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('O');
      String string0 = charMatcher0.retainFrom("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.is('5');
      CharMatcher charMatcher1 = charMatcher0.precomputedInternal();
      assertNotSame(charMatcher0, charMatcher1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.toString();
      assertEquals("CharMatcher.anyOf(\"\\u0000\\u0000\")", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(15);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      String string0 = charMatcher0.removeFrom(charBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaDigit();
      String string0 = charMatcher0.toString();
      assertEquals("CharMatcher.javaDigit()", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      CharMatcher charMatcher1 = charMatcher0.negate();
      assertFalse(charMatcher1.equals((Object)charMatcher0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharMatcher charMatcher0 = CharMatcher.anyOf(charBuffer0);
      CharMatcher charMatcher1 = charMatcher0.precomputedInternal();
      assertFalse(charMatcher1.equals((Object)charMatcher0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLowerCase();
      String string0 = charMatcher0.toString();
      assertEquals("CharMatcher.javaLowerCase()", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.whitespace();
      CharMatcher charMatcher1 = charMatcher0.or(charMatcher0);
      CharMatcher charMatcher2 = charMatcher1.precomputedInternal();
      assertEquals("CharMatcher.or(CharMatcher.whitespace(), CharMatcher.whitespace())", charMatcher2.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharMatcher charMatcher0 = CharMatcher.noneOf(charBuffer0);
      assertNotNull(charMatcher0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaUpperCase();
      // Undeclared exception!
      charMatcher0.precomputed();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.invisible();
      String string0 = charMatcher0.toString();
      assertEquals("CharMatcher.invisible()", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.javaLetterOrDigit();
      String string0 = charMatcher0.trimLeadingFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.singleWidth();
      boolean boolean0 = charMatcher0.matches('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.digit();
      boolean boolean0 = charMatcher0.matches('Y');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.ascii();
      boolean boolean0 = charMatcher0.matchesAnyOf("CharMatcher.whitespace()");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.breakingWhitespace();
      String string0 = charMatcher0.toString();
      assertEquals("CharMatcher.breakingWhitespace()", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      String string0 = charMatcher0.trimFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      String string0 = charMatcher0.replaceFrom((CharSequence) charBuffer0, ' ');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharMatcher charMatcher1 = CharMatcher.is('#');
      CharMatcher charMatcher2 = charMatcher1.or(charMatcher0);
      assertSame(charMatcher2, charMatcher0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharMatcher charMatcher1 = charMatcher0.or(charMatcher0);
      assertSame(charMatcher0, charMatcher1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      String string0 = charMatcher0.removeFrom(charBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(25);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      int int0 = charMatcher0.lastIndexIn(charBuffer0);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharMatcher charMatcher1 = charMatcher0.and((CharMatcher) charMatcher_NegatedFastMatcher0);
      assertSame(charMatcher1, charMatcher_NegatedFastMatcher0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.inRange('~', '~');
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher1 = new CharMatcher.NegatedFastMatcher(charMatcher_NegatedFastMatcher0);
      boolean boolean0 = charMatcher_NegatedFastMatcher1.matchesNoneOf("CharMatcher.inRange('~', '~').negate()");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      boolean boolean0 = charMatcher_NegatedFastMatcher0.matchesNoneOf("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CharMatcher.Whitespace charMatcher_Whitespace0 = new CharMatcher.Whitespace();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher_Whitespace0);
      String string0 = charMatcher_NegatedFastMatcher0.retainFrom("\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.any();
      CharMatcher.NegatedFastMatcher charMatcher_NegatedFastMatcher0 = new CharMatcher.NegatedFastMatcher(charMatcher0);
      int int0 = charMatcher_NegatedFastMatcher0.countIn(",");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CharMatcher charMatcher0 = CharMatcher.isNot('');
      CharMatcher charMatcher1 = charMatcher0.negate();
      assertFalse(charMatcher1.equals((Object)charMatcher0));
  }
}
