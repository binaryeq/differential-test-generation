/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:52:57 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.EnumMultiset;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Multiset;
import com.google.common.collect.Range;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.SingletonImmutableList;
import com.google.common.collect.SortedMultiset;
import com.google.common.collect.TreeMultiset;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.ObjIntConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EnumMultiset_ESTest extends EnumMultiset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      TreeMultiset<BoundType> treeMultiset0 = TreeMultiset.create();
      BoundType boundType0 = BoundType.OPEN;
      enumMultiset0.add(boundType0);
      boolean boolean0 = enumMultiset0.retainAll(treeMultiset0);
      assertFalse(enumMultiset0.contains(boundType0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      ImmutableSortedMultiset<BoundType> immutableSortedMultiset0 = ImmutableSortedMultiset.of(boundType0, boundType0, boundType1);
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) immutableSortedMultiset0);
      assertTrue(enumMultiset0.contains(boundType0));
      
      int int0 = enumMultiset0.setCount(boundType0, 0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) singletonImmutableList0, class0);
      int int0 = enumMultiset0.setCount(boundType0, 967);
      assertEquals(1, int0);
      
      int int1 = enumMultiset0.remove((Object) boundType0, 1);
      assertEquals(967, int1);
      assertTrue(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      ImmutableSortedMultiset<BoundType> immutableSortedMultiset0 = ImmutableSortedMultiset.of(boundType0, boundType0, boundType1);
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) immutableSortedMultiset0);
      boolean boolean0 = enumMultiset0.remove((Object) boundType1);
      assertFalse(enumMultiset0.contains(boundType1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentHashMap<BoundType, Integer> concurrentHashMap0 = new ConcurrentHashMap<BoundType, Integer>();
      Integer integer0 = new Integer(2147483635);
      ConcurrentHashMap.KeySetView<BoundType, Integer> concurrentHashMap_KeySetView0 = concurrentHashMap0.keySet(integer0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) concurrentHashMap_KeySetView0, class0);
      int int0 = enumMultiset0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMap<BoundType, Integer> enumMap0 = new EnumMap<BoundType, Integer>(class0);
      Set<BoundType> set0 = enumMap0.keySet();
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) set0, class0);
      BoundType boundType0 = BoundType.CLOSED;
      int int0 = enumMultiset0.setCount(boundType0, 2361);
      assertEquals(0, int0);
      
      int int1 = enumMultiset0.size();
      assertEquals(2361, int1);
      assertTrue(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      Iterator<Multiset.Entry<BoundType>> iterator0 = (Iterator<Multiset.Entry<BoundType>>)enumMultiset0.entryIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      int int0 = enumMultiset0.distinctElements();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      ImmutableSortedSet<BoundType> immutableSortedSet0 = ImmutableSortedSet.of(boundType0, boundType0, boundType0, boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) immutableSortedSet0, class0);
      int int0 = enumMultiset0.distinctElements();
      assertEquals(1, int0);
      assertTrue(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      // Undeclared exception!
      try { 
        enumMultiset0.setCount(boundType0, (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count cannot be negative but was: -22
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      // Undeclared exception!
      try { 
        enumMultiset0.remove((Object) boundType0, (-3372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // occurrences cannot be negative but was: -3372
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      // Undeclared exception!
      try { 
        enumMultiset0.forEachEntry((ObjIntConsumer<? super BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnmodifiableSortedMultiset<BoundType> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<BoundType>((SortedMultiset<BoundType>) null);
      Class<BoundType> class0 = BoundType.class;
      // Undeclared exception!
      try { 
        EnumMultiset.create((Iterable<BoundType>) unmodifiableSortedMultiset0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ForwardingCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      // Undeclared exception!
      try { 
        EnumMultiset.create((Iterable<BoundType>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      Class<BoundType> class0 = BoundType.class;
      BoundType[] boundTypeArray0 = new BoundType[1];
      boundTypeArray0[0] = boundType0;
      ImmutableList<BoundType> immutableList0 = ImmutableList.of(boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundType0, boundTypeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<BoundType> regularImmutableSortedSet0 = new RegularImmutableSortedSet<BoundType>(immutableList0, comparator0);
      long[] longArray0 = new long[9];
      RegularImmutableSortedMultiset<BoundType> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<BoundType>(regularImmutableSortedSet0, longArray0, 0, 2085);
      // Undeclared exception!
      try { 
        EnumMultiset.create((Iterable<BoundType>) regularImmutableSortedMultiset0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2085
         //
         verifyException("com.google.common.collect.RegularImmutableSortedMultiset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumMultiset.create((Iterable<BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.EnumMultiset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      // Undeclared exception!
      try { 
        EnumMultiset.create((Iterable<BoundType>) enumMultiset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EnumMultiset constructor passed empty Iterable
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ImmutableList<BoundType> immutableList0 = ImmutableList.asImmutableList(objectArray0, 72);
      // Undeclared exception!
      try { 
        EnumMultiset.create((Iterable<BoundType>) immutableList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Enum
         //
         verifyException("com.google.common.collect.EnumMultiset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumMultiset.create((Class<BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.EnumMultiset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        enumMultiset0.add(boundType0, (-2389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // occurrences cannot be negative but was: -2389
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMap<BoundType, Integer> enumMap0 = new EnumMap<BoundType, Integer>(class0);
      Set<BoundType> set0 = enumMap0.keySet();
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) set0, class0);
      BoundType boundType0 = BoundType.CLOSED;
      int int0 = enumMultiset0.setCount(boundType0, 2361);
      assertEquals(0, int0);
      
      ObjIntConsumer<Object> objIntConsumer0 = (ObjIntConsumer<Object>) mock(ObjIntConsumer.class, new ViolatedAssumptionAnswer());
      enumMultiset0.forEachEntry(objIntConsumer0);
      assertTrue(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      BoundType boundType0 = BoundType.OPEN;
      Range<BoundType> range0 = Range.closed(boundType0, boundType0);
      BoundType boundType1 = range0.lowerBoundType();
      int int0 = enumMultiset0.count(boundType1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      int int0 = enumMultiset0.remove((Object) class0, (-2147483645));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) singletonImmutableList0, class0);
      enumMultiset0.iterator();
      assertTrue(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      enumMultiset0.add(boundType0);
      assertTrue(enumMultiset0.contains(boundType0));
      
      TreeMultiset<BoundType> treeMultiset0 = TreeMultiset.create();
      boolean boolean0 = enumMultiset0.retainAll(treeMultiset0);
      assertFalse(enumMultiset0.contains(boundType0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      BoundType boundType0 = BoundType.OPEN;
      int int0 = enumMultiset0.setCount(boundType0, 0);
      assertFalse(enumMultiset0.contains(boundType0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      boolean boolean0 = enumMultiset0.removeAll(singletonImmutableList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      boolean boolean0 = enumMultiset0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) singletonImmutableList0, class0);
      int int0 = enumMultiset0.add(boundType0, 311);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      enumMultiset0.add(boundType0, 0);
      assertFalse(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) singletonImmutableList0, class0);
      int int0 = enumMultiset0.count(singletonImmutableList0);
      assertEquals(0, int0);
      assertTrue(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      BoundType boundType1 = BoundType.CLOSED;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) singletonImmutableList0);
      int int0 = enumMultiset0.remove((Object) boundType1, 0);
      assertTrue(enumMultiset0.contains(boundType0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create(class0);
      int int0 = enumMultiset0.count((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      ImmutableSortedSet<BoundType> immutableSortedSet0 = ImmutableSortedSet.of(boundType0, boundType0, boundType0, boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) immutableSortedSet0, class0);
      assertTrue(enumMultiset0.contains(boundType0));
      
      boolean boolean0 = enumMultiset0.removeAll(enumMultiset0);
      assertFalse(enumMultiset0.contains(boundType0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      ImmutableSortedSet<BoundType> immutableSortedSet0 = ImmutableSortedSet.of(boundType0, boundType0, boundType0, boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) immutableSortedSet0, class0);
      enumMultiset0.elementIterator();
      assertTrue(enumMultiset0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      ImmutableSortedSet<BoundType> immutableSortedSet0 = ImmutableSortedSet.of(boundType0, boundType0, boundType0, boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) immutableSortedSet0, class0);
      enumMultiset0.clear();
      int int0 = enumMultiset0.setCount(boundType0, 1160);
      assertTrue(enumMultiset0.contains(boundType0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BoundType boundType0 = BoundType.CLOSED;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      Class<BoundType> class0 = BoundType.class;
      EnumMultiset<BoundType> enumMultiset0 = EnumMultiset.create((Iterable<BoundType>) singletonImmutableList0, class0);
      EnumMultiset<BoundType> enumMultiset1 = EnumMultiset.create((Iterable<BoundType>) enumMultiset0);
      assertTrue(enumMultiset0.contains(boundType0));
      assertTrue(enumMultiset1.equals((Object)enumMultiset0));
  }
}
