/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:42:45 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.CompactHashMap;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompactHashMap_ESTest extends CompactHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = CompactHashMap.create();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(440);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Integer> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Integer>) comparator0);
      compactHashMap0.merge(hashMap0, integer0, binaryOperator0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      compactHashMap0.putIfAbsent(hashMap1, integer0);
      BiConsumer<HashMap<Integer, Integer>, Integer> biConsumer0 = (BiConsumer<HashMap<Integer, Integer>, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      compactHashMap0.forEach(biConsumer0);
      assertFalse(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = new CompactHashMap<Locale.Category, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      BiFunction<Object, Object, Locale.Category> biFunction0 = (BiFunction<Object, Object, Locale.Category>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Locale.Category locale_Category2 = compactHashMap0.merge(locale_Category0, locale_Category1, biFunction0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Locale.Category> binaryOperator0 = BinaryOperator.maxBy((Comparator<? super Locale.Category>) comparator0);
      compactHashMap0.merge(locale_Category2, locale_Category2, binaryOperator0);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      Consumer<Comparable<Integer>> consumer0 = (Consumer<Comparable<Integer>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compactHashMap_KeySetView0.forEach(consumer0);
      assertFalse(compactHashMap0.isEmpty());
      assertEquals(2, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompactHashMap<Object, Integer> compactHashMap0 = CompactHashMap.createWithExpectedSize(28);
      int int0 = compactHashMap0.getSuccessor(28);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = CompactHashMap.createWithExpectedSize(35);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      compactHashMap0.putIfAbsent(locale_Category0, locale_Category0);
      compactHashMap0.resizeEntries(1024);
      assertFalse(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = new CompactHashMap<Integer, Integer>();
      compactHashMap0.init(3464);
      assertTrue(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = new CompactHashMap<Integer, Integer>(63);
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Iterator<ContiguousSet<Integer>> iterator0 = compactHashMap_ValuesView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = new CompactHashMap<Locale.Category, Locale.Category>(11);
      CompactHashMap.MapEntry compactHashMap_MapEntry0 = null;
      try {
        compactHashMap_MapEntry0 = compactHashMap0.new MapEntry(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompactHashMap<Comparable<Integer>, Object> compactHashMap0 = new CompactHashMap<Comparable<Integer>, Object>(1406);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      Iterator<Integer> iterator0 = compactHashMap_KeySetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = CompactHashMap.create();
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)compactHashMap_EntrySetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = CompactHashMap.create();
      compactHashMap0.incrementModCount();
      assertEquals(0, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompactHashMap<Integer, ContiguousSet<Integer>> compactHashMap0 = new CompactHashMap<Integer, ContiguousSet<Integer>>();
      Iterator<ContiguousSet<Integer>> iterator0 = compactHashMap0.valuesIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompactHashMap<Object, Object> compactHashMap0 = new CompactHashMap<Object, Object>();
      boolean boolean0 = compactHashMap0.needsAllocArrays();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompactHashMap<Integer, Object> compactHashMap0 = new CompactHashMap<Integer, Object>(0);
      Iterator<Integer> iterator0 = compactHashMap0.keySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompactHashMap<Integer, Comparable<Integer>> compactHashMap0 = CompactHashMap.create();
      boolean boolean0 = compactHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(954);
      CompactHashMap<Integer, Comparable<Integer>> compactHashMap0 = new CompactHashMap<Integer, Comparable<Integer>>();
      Object object0 = compactHashMap0.get(integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompactHashMap<Object, Comparable<Object>> compactHashMap0 = new CompactHashMap<Object, Comparable<Object>>();
      int int0 = compactHashMap0.firstEntryIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompactHashMap<Locale.Category, ImmutableMultiset.ElementSet<Integer>> compactHashMap0 = new CompactHashMap<Locale.Category, ImmutableMultiset.ElementSet<Integer>>();
      Iterator<Map.Entry<Locale.Category, ImmutableMultiset.ElementSet<Integer>>> iterator0 = (Iterator<Map.Entry<Locale.Category, ImmutableMultiset.ElementSet<Integer>>>)compactHashMap0.entrySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompactHashMap<ContiguousSet<Integer>, Integer> compactHashMap0 = new CompactHashMap<ContiguousSet<Integer>, Integer>();
      Map<ContiguousSet<Integer>, Integer> map0 = compactHashMap0.delegateOrNull();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = CompactHashMap.create();
      Set<HashMap<Integer, Integer>> set0 = compactHashMap0.createKeySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompactHashMap<Locale.Category, HashMap<Integer, Locale.Category>> compactHashMap0 = new CompactHashMap<Locale.Category, HashMap<Integer, Locale.Category>>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      compactHashMap0.put(locale_Category0, (HashMap<Integer, Locale.Category>) null);
      compactHashMap0.createKeySet();
      assertEquals(1, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompactHashMap<Object, Comparable<Integer>> compactHashMap0 = CompactHashMap.create();
      Map<Object, Comparable<Integer>> map0 = compactHashMap0.createHashFloodingResistantDelegate(4555728);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = CompactHashMap.create();
      int int0 = compactHashMap0.adjustAfterRemove((-1112), 3);
      assertEquals((-1113), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = CompactHashMap.create();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      BiFunction<Object, Object, Locale.Category> biFunction0 = (BiFunction<Object, Object, Locale.Category>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      compactHashMap0.merge(locale_Category0, locale_Category0, biFunction0);
      // Undeclared exception!
      try { 
        compactHashMap0.resizeEntries((-2221));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = CompactHashMap.create();
      // Undeclared exception!
      try { 
        compactHashMap0.moveLastEntry(100000, 517);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      CompactHashMap<Comparable<Integer>, Integer> compactHashMap0 = CompactHashMap.create();
      // Undeclared exception!
      try { 
        compactHashMap0.insertEntry(121, integerArray0[0], integerArray0[0], 2719, 2719);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = new CompactHashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        compactHashMap0.init((-1228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        compactHashMap0.forEach((BiConsumer<? super HashMap<Integer, Integer>, ? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactHashMap.createWithExpectedSize((-816));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompactHashMap<Comparable<Integer>, Integer> compactHashMap0 = new CompactHashMap<Comparable<Integer>, Integer>();
      // Undeclared exception!
      try { 
        compactHashMap0.createHashFloodingResistantDelegate((-2363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2363
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompactHashMap<Integer, Comparable<Integer>> compactHashMap0 = new CompactHashMap<Integer, Comparable<Integer>>(63);
      // Undeclared exception!
      try { 
        compactHashMap0.convertToHashFloodingResistantImplementation();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2147483648
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompactHashMap<Object, Integer> compactHashMap0 = new CompactHashMap<Object, Integer>(32);
      compactHashMap0.convertToHashFloodingResistantImplementation();
      // Undeclared exception!
      try { 
        compactHashMap0.allocArrays();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Arrays already allocated
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompactHashMap<Object, Comparable<Integer>> compactHashMap0 = new CompactHashMap<Object, Comparable<Integer>>();
      int int0 = compactHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompactHashMap<UnmodifiableSortedMultiset<Integer>, UnmodifiableSortedMultiset<Integer>> compactHashMap0 = CompactHashMap.create();
      compactHashMap0.clear();
      assertEquals(0, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompactHashMap<Object, Comparable<Integer>> compactHashMap0 = new CompactHashMap<Object, Comparable<Integer>>();
      compactHashMap0.putIfAbsent((Object) null, (Comparable<Integer>) null);
      compactHashMap0.clear();
      assertTrue(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompactHashMap<UnmodifiableSortedMultiset<Locale.Category>, UnmodifiableSortedMultiset<Integer>> compactHashMap0 = new CompactHashMap<UnmodifiableSortedMultiset<Locale.Category>, UnmodifiableSortedMultiset<Integer>>();
      compactHashMap0.trimToSize();
      assertTrue(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompactHashMap<Object, Integer> compactHashMap0 = CompactHashMap.create();
      Integer integer0 = new Integer(1078);
      compactHashMap0.put(integer0, integer0);
      compactHashMap0.trimToSize();
      assertEquals(1, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      CompactHashMap<Integer, Integer> compactHashMap0 = CompactHashMap.createWithExpectedSize(35);
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Object[] objectArray0 = compactHashMap_ValuesView0.toArray((Object[]) locale_CategoryArray0);
      assertSame(locale_CategoryArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompactHashMap<Object, HashMap<Object, Integer>> compactHashMap0 = CompactHashMap.createWithExpectedSize(1);
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = compactHashMap_ValuesView0.toArray(objectArray0);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompactHashMap<Integer, Object> compactHashMap0 = CompactHashMap.create();
      compactHashMap0.putIfAbsent((Integer) null, (Object) null);
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Object[] objectArray0 = new Object[6];
      compactHashMap_ValuesView0.toArray(objectArray0);
      assertEquals(1, compactHashMap0.size());
      assertFalse(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompactHashMap<UnmodifiableSortedMultiset<Locale.Category>, UnmodifiableSortedMultiset<Integer>> compactHashMap0 = new CompactHashMap<UnmodifiableSortedMultiset<Locale.Category>, UnmodifiableSortedMultiset<Integer>>();
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Object[] objectArray0 = compactHashMap_ValuesView0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(28);
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.putIfAbsent(hashMap0, integer0);
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      compactHashMap_ValuesView0.toArray();
      assertEquals(1, compactHashMap0.size());
      assertFalse(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.convertToHashFloodingResistantImplementation();
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Spliterator<Locale.Category> spliterator0 = compactHashMap_ValuesView0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompactHashMap<BoundType, Integer> compactHashMap0 = CompactHashMap.create();
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Spliterator<Locale.Category> spliterator0 = compactHashMap_ValuesView0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = new CompactHashMap<Locale.Category, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      BiFunction<Object, Object, Locale.Category> biFunction0 = (BiFunction<Object, Object, Locale.Category>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      compactHashMap0.merge(locale_Category0, locale_Category0, biFunction0);
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      compactHashMap_ValuesView0.spliterator();
      assertFalse(compactHashMap0.isEmpty());
      assertEquals(1, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompactHashMap<Integer, Locale.Category> compactHashMap0 = new CompactHashMap<Integer, Locale.Category>();
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compactHashMap_ValuesView0.forEach(consumer0);
      assertEquals(0, compactHashMap_ValuesView0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompactHashMap<Object, Comparable<Integer>> compactHashMap0 = new CompactHashMap<Object, Comparable<Integer>>();
      Collection<Comparable<Integer>> collection0 = compactHashMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompactHashMap<Integer, HashMap<Integer, Integer>> compactHashMap0 = new CompactHashMap<Integer, HashMap<Integer, Integer>>(526);
      CompactHashMap<Object, Integer> compactHashMap1 = new CompactHashMap<Object, Integer>();
      boolean boolean0 = compactHashMap1.containsValue(compactHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      Map<HashMap<Integer, Integer>, Integer> map0 = compactHashMap0.convertToHashFloodingResistantImplementation();
      Map<HashMap<Integer, Integer>, Integer> map1 = compactHashMap0.convertToHashFloodingResistantImplementation();
      assertNotSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.convertToHashFloodingResistantImplementation();
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = compactHashMap_EntrySetView0.remove(locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompactHashMap<Integer, Locale.Category> compactHashMap0 = CompactHashMap.create();
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      boolean boolean0 = compactHashMap_EntrySetView0.remove(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompactHashMap<Integer, Locale.Category> compactHashMap0 = new CompactHashMap<Integer, Locale.Category>(20);
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = compactHashMap_EntrySetView0.contains(locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(28);
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.convertToHashFloodingResistantImplementation();
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      boolean boolean0 = compactHashMap_EntrySetView0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompactHashMap<Comparable<Integer>, Object> compactHashMap0 = new CompactHashMap<Comparable<Integer>, Object>(121);
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      Stream<Map.Entry<Integer, Integer>> stream0 = (Stream<Map.Entry<Integer, Integer>>)compactHashMap_EntrySetView0.stream();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = new CompactHashMap<Locale.Category, Locale.Category>(3);
      Set<Map.Entry<Locale.Category, Locale.Category>> set0 = (Set<Map.Entry<Locale.Category, Locale.Category>>)compactHashMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompactHashMap<Integer, Object> compactHashMap0 = CompactHashMap.createWithExpectedSize(526);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)compactHashMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.convertToHashFloodingResistantImplementation();
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      Consumer<Comparable<Integer>> consumer0 = (Consumer<Comparable<Integer>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compactHashMap_KeySetView0.forEach(consumer0);
      assertEquals(0, compactHashMap_KeySetView0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = new CompactHashMap<Integer, Integer>();
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      Spliterator<Integer> spliterator0 = compactHashMap_KeySetView0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = CompactHashMap.createWithExpectedSize(35);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      compactHashMap0.putIfAbsent(locale_Category0, locale_Category0);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      compactHashMap_KeySetView0.spliterator();
      assertFalse(compactHashMap0.isEmpty());
      assertEquals(1, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = new CompactHashMap<Locale.Category, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      BiFunction<Object, Object, Locale.Category> biFunction0 = (BiFunction<Object, Object, Locale.Category>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      compactHashMap0.merge(locale_Category0, locale_Category0, biFunction0);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      assertEquals(1, compactHashMap0.size());
      
      boolean boolean0 = compactHashMap_KeySetView0.remove(locale_Category0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.convertToHashFloodingResistantImplementation();
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      boolean boolean0 = compactHashMap_KeySetView0.remove(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompactHashMap<Integer, Locale.Category> compactHashMap0 = new CompactHashMap<Integer, Locale.Category>(20);
      Integer integer0 = new Integer(22);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      boolean boolean0 = compactHashMap_KeySetView0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompactHashMap<Object, Object> compactHashMap0 = CompactHashMap.createWithExpectedSize(1217);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      Object[] objectArray0 = compactHashMap_KeySetView0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(28);
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.putIfAbsent(hashMap0, integer0);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      compactHashMap_KeySetView0.toArray();
      assertFalse(compactHashMap0.isEmpty());
      assertEquals(1, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = CompactHashMap.create();
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      compactHashMap0.replaceAll(biFunction0);
      assertTrue(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(28);
      CompactHashMap<Integer, Object> compactHashMap0 = new CompactHashMap<Integer, Object>();
      int int0 = compactHashMap0.allocArrays();
      assertEquals(3, int0);
      
      Object object0 = compactHashMap0.remove((Object) integer0);
      assertTrue(compactHashMap0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = CompactHashMap.create();
      compactHashMap0.putIfAbsent(locale_Category0, locale_Category0);
      assertFalse(compactHashMap0.isEmpty());
      
      BiFunction<Object, Object, Locale.Category> biFunction0 = (BiFunction<Object, Object, Locale.Category>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      compactHashMap0.merge(locale_Category0, locale_Category0, biFunction0);
      assertEquals(0, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = new CompactHashMap<Integer, Integer>();
      Integer integer0 = new Integer(32);
      boolean boolean0 = compactHashMap0.containsKey(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompactHashMap<Object, Comparable<Object>> compactHashMap0 = new CompactHashMap<Object, Comparable<Object>>();
      CompactHashMap.create();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap1 = CompactHashMap.create();
      compactHashMap1.putIfAbsent(locale_Category0, locale_Category0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Locale.Category> binaryOperator0 = BinaryOperator.maxBy((Comparator<? super Locale.Category>) comparator0);
      compactHashMap1.merge((Locale.Category) null, locale_Category0, binaryOperator0);
      assertEquals(2, compactHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(28);
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.convertToHashFloodingResistantImplementation();
      compactHashMap0.putIfAbsent(hashMap0, integer0);
      // Undeclared exception!
      try { 
        compactHashMap0.convertToHashFloodingResistantImplementation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, HashMap<Object, Integer>> compactHashMap0 = CompactHashMap.createWithExpectedSize(27);
      compactHashMap0.convertToHashFloodingResistantImplementation();
      CompactHashMap.ValuesView compactHashMap_ValuesView0 = compactHashMap0.new ValuesView();
      Integer integer0 = new Integer(3);
      boolean boolean0 = compactHashMap_ValuesView0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = null;
      try {
        compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>((-816));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(28);
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.putIfAbsent(hashMap0, integer0);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      // Undeclared exception!
      try { 
        compactHashMap_KeySetView0.retainAll(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CompactHashMap<Comparable<Integer>, Object> compactHashMap0 = new CompactHashMap<Comparable<Integer>, Object>(121);
      CompactHashMap.KeySetView compactHashMap_KeySetView0 = compactHashMap0.new KeySetView();
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      boolean boolean0 = compactHashMap_EntrySetView0.containsAll(compactHashMap_KeySetView0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CompactHashMap<Comparable<Integer>, Object> compactHashMap0 = new CompactHashMap<Comparable<Integer>, Object>(121);
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      boolean boolean0 = compactHashMap_EntrySetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CompactHashMap<HashMap<Integer, Integer>, HashMap<Integer, Object>> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, HashMap<Integer, Object>>();
      int int0 = compactHashMap0.adjustAfterRemove(121, 20);
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap0 = new CompactHashMap<Locale.Category, Locale.Category>(0);
      // Undeclared exception!
      try { 
        compactHashMap0.resizeEntries(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = new CompactHashMap<Integer, Integer>();
      Set<Integer> set0 = compactHashMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CompactHashMap<Object, Comparable<Integer>> compactHashMap0 = new CompactHashMap<Object, Comparable<Integer>>();
      compactHashMap0.putIfAbsent((Object) null, (Comparable<Integer>) null);
      compactHashMap0.replace((Object) null, (Comparable<Integer>) null);
      assertFalse(compactHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CompactHashMap<Integer, HashMap<Object, Integer>> compactHashMap0 = new CompactHashMap<Integer, HashMap<Object, Integer>>(3);
      Set<Map.Entry<Integer, HashMap<Object, Integer>>> set0 = (Set<Map.Entry<Integer, HashMap<Object, Integer>>>)compactHashMap0.createEntrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CompactHashMap<Object, HashMap<Object, Integer>> compactHashMap0 = CompactHashMap.create();
      compactHashMap0.accessEntry(3);
      assertEquals(0, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CompactHashMap<Object, Comparable<Integer>> compactHashMap0 = new CompactHashMap<Object, Comparable<Integer>>();
      Collection<Comparable<Integer>> collection0 = compactHashMap0.createValues();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(28);
      CompactHashMap<HashMap<Integer, Integer>, Integer> compactHashMap0 = new CompactHashMap<HashMap<Integer, Integer>, Integer>();
      compactHashMap0.putIfAbsent(hashMap0, integer0);
      compactHashMap0.convertToHashFloodingResistantImplementation();
      assertEquals(1, compactHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CompactHashMap<Integer, Integer> compactHashMap0 = new CompactHashMap<Integer, Integer>();
      CompactHashMap.EntrySetView compactHashMap_EntrySetView0 = compactHashMap0.new EntrySetView();
      CompactHashMap<Locale.Category, Locale.Category> compactHashMap1 = new CompactHashMap<Locale.Category, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      BiFunction<Object, Object, Locale.Category> biFunction0 = (BiFunction<Object, Object, Locale.Category>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      compactHashMap1.merge(locale_Category0, locale_Category0, biFunction0);
      CompactHashMap.EntrySetView compactHashMap_EntrySetView1 = compactHashMap1.new EntrySetView();
      boolean boolean0 = compactHashMap_EntrySetView0.containsAll(compactHashMap_EntrySetView1);
      assertFalse(compactHashMap1.isEmpty());
      assertFalse(boolean0);
  }
}
