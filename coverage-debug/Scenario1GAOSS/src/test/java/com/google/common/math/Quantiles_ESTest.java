/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:41:29 GMT 2024
 */

package com.google.common.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.math.Quantiles;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Quantiles_ESTest extends Quantiles_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      int[] intArray0 = new int[3];
      intArray0[0] = 100;
      intArray0[1] = 31;
      intArray0[2] = 100;
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      quantiles_ScaleAndIndexes0.compute(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 86;
      quantiles_ScaleAndIndex0.computeInPlace(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = 86;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 86;
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(doubleArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(doubleArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      double[] doubleArray0 = new double[1];
      double double0 = quantiles_ScaleAndIndex0.computeInPlace(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quantiles.scale(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quantile scale must be positive
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.scale(127);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 19);
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes((Collection<Integer>) linkedHashSet0);
      assertNotNull(quantiles_ScaleAndIndexes0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 4;
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(doubleArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(intArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.scale(16);
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(intArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.quartiles();
      // Undeclared exception!
      try { 
        quantiles_Scale0.index(2122521075);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quantile indexes must be between 0 and the scale, which is 4
         //
         verifyException("com.google.common.math.Quantiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      // Undeclared exception!
      try { 
        quantiles_Scale0.index((-2006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quantile indexes must be between 0 and the scale, which is 100
         //
         verifyException("com.google.common.math.Quantiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double0 = quantiles_ScaleAndIndex0.compute(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      double double0 = quantiles_ScaleAndIndex0.compute(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.scale(661);
      int[] intArray0 = new int[3];
      intArray0[0] = 70;
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      quantiles_ScaleAndIndexes0.computeInPlace(doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      int[] intArray0 = new int[3];
      intArray0[1] = 31;
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(doubleArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      Quantiles.Scale quantiles_Scale0 = Quantiles.quartiles();
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(doubleArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = Double.NaN;
      double double0 = quantiles_ScaleAndIndex0.computeInPlace(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quantiles.scale((-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quantile scale must be positive
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quantiles quantiles0 = new Quantiles();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[1];
      Quantiles.Scale quantiles_Scale0 = Quantiles.percentiles();
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        quantiles_ScaleAndIndexes0.compute((Collection<? extends Number>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate quantiles of an empty dataset
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.scale(4);
      int[] intArray0 = new int[2];
      long[] longArray0 = new long[6];
      Quantiles.ScaleAndIndexes quantiles_ScaleAndIndexes0 = quantiles_Scale0.indexes(intArray0);
      Map<Integer, Double> map0 = quantiles_ScaleAndIndexes0.compute(longArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.quartiles();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        quantiles_Scale0.indexes((Collection<Integer>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indexes must be a non empty array
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      int[] intArray0 = new int[9];
      double double0 = quantiles_ScaleAndIndex0.compute(intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      long[] longArray0 = new long[6];
      double double0 = quantiles_ScaleAndIndex0.compute(longArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Quantiles.Scale quantiles_Scale0 = Quantiles.scale(4);
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = quantiles_Scale0.index(4);
      double[] doubleArray0 = new double[3];
      double double0 = quantiles_ScaleAndIndex0.compute(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Quantiles.ScaleAndIndex quantiles_ScaleAndIndex0 = Quantiles.median();
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        quantiles_ScaleAndIndex0.compute((Collection<? extends Number>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate quantiles of an empty dataset
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
