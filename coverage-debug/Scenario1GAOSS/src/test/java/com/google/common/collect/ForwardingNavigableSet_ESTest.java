/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:02:57 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.ContiguousSet;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyContiguousSet;
import com.google.common.collect.ForwardingNavigableSet;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Range;
import com.google.common.collect.RegularContiguousSet;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.Sets;
import com.google.common.collect.TreeMultimap;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.SortedSet;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ForwardingNavigableSet_ESTest extends ForwardingNavigableSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      BoundType boundType1 = BoundType.CLOSED;
      BoundType[] boundTypeArray0 = new BoundType[7];
      boundTypeArray0[0] = boundType1;
      boundTypeArray0[1] = boundType0;
      boundTypeArray0[2] = boundType0;
      boundTypeArray0[3] = boundTypeArray0[1];
      boundTypeArray0[4] = boundType0;
      boundTypeArray0[5] = boundType0;
      boundTypeArray0[6] = boundType1;
      ImmutableSortedSet<BoundType> immutableSortedSet0 = ImmutableSortedSet.of(boundType0, boundType1, boundType1, boundType1, boundType0, boundType0, boundTypeArray0);
      Sets.DescendingSet<BoundType> sets_DescendingSet0 = new Sets.DescendingSet<BoundType>(immutableSortedSet0);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.subSet(boundType0, boundTypeArray0[6]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn(emptyContiguousSet0).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Object object0 = new Object();
      NavigableSet<Object> navigableSet0 = forwardingNavigableSet_StandardDescendingSet0.standardSubSet(locale_Category0, true, object0, true);
      assertTrue(navigableSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-970));
      Range<Integer> range0 = Range.atMost(integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(regularContiguousSet0);
      SortedSet<Integer> sortedSet0 = sets_DescendingSet0.standardHeadSet(integer0);
      assertFalse(sortedSet0.contains((-970)));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1436));
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(immutableSortedSet0);
      NavigableSet<Integer> navigableSet0 = sets_DescendingSet0.headSet(integer0, false);
      assertTrue(navigableSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<BoundType> treeSet0 = new TreeSet<BoundType>();
      Sets.DescendingSet<BoundType> sets_DescendingSet0 = new Sets.DescendingSet<BoundType>(treeSet0);
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = sets_DescendingSet0.new StandardDescendingSet();
      forwardingNavigableSet_StandardDescendingSet0.standardPollFirst();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-475));
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0, integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1870), (-1870), 0, (-475)).when(comparator0).compare(any() , any());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      RegularImmutableSortedSet<Integer> regularImmutableSortedSet1 = new RegularImmutableSortedSet<Integer>(immutableList0, comparator1);
      ImmutableSortedSet<Integer> immutableSortedSet0 = regularImmutableSortedSet1.tailSet(integer0, false);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(immutableSortedSet0);
      sets_DescendingSet0.tailSet(integer0, false);
      Integer integer1 = sets_DescendingSet0.lower(integer0);
      sets_DescendingSet0.standardLower(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range<Integer> range0 = Range.all();
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      RegularContiguousSet<Integer> regularContiguousSet0 = new RegularContiguousSet<Integer>(range0, discreteDomain0);
      Integer integer0 = new Integer(1114);
      ContiguousSet<Integer> contiguousSet0 = regularContiguousSet0.tailSetImpl(integer0, true);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(contiguousSet0);
      Integer integer1 = sets_DescendingSet0.standardHigher(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableSortedSet<BoundType> immutableSortedSet0 = ImmutableSortedSet.of(boundType0, boundType0);
      Sets.DescendingSet<BoundType> sets_DescendingSet0 = new Sets.DescendingSet<BoundType>(immutableSortedSet0);
      BoundType boundType1 = sets_DescendingSet0.standardFirst();
      assertSame(boundType1, boundType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<BoundType> treeSet0 = new TreeSet<BoundType>();
      Sets.DescendingSet<BoundType> sets_DescendingSet0 = new Sets.DescendingSet<BoundType>(treeSet0);
      BoundType boundType0 = BoundType.OPEN;
      sets_DescendingSet0.standardCeiling(boundType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(treeSet0);
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = sets_DescendingSet0.new StandardDescendingSet();
      Object object0 = forwardingNavigableSet_StandardDescendingSet0.pollLast();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegularImmutableSortedSet<Integer> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Integer>) null);
      Integer integer0 = new Integer(0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(regularImmutableSortedSet0);
      Integer integer1 = sets_DescendingSet0.lower(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.of();
      Sets.DescendingSet<Object> sets_DescendingSet0 = new Sets.DescendingSet<Object>(immutableSortedSet0);
      Object object0 = sets_DescendingSet0.higher(immutableSortedSet0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeMultimap<Object, Integer> treeMultimap0 = TreeMultimap.create((Comparator<? super Object>) comparator1, (Comparator<? super Integer>) comparator1);
      NavigableSet<Object> navigableSet0 = treeMultimap0.keySet();
      Sets.DescendingSet<Object> sets_DescendingSet0 = new Sets.DescendingSet<Object>(navigableSet0);
      Object object0 = sets_DescendingSet0.floor((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.of();
      Sets.DescendingSet<Object> sets_DescendingSet0 = new Sets.DescendingSet<Object>(immutableSortedSet0);
      Iterator<Object> iterator0 = sets_DescendingSet0.descendingIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Sets.DescendingSet<Object> sets_DescendingSet0 = new Sets.DescendingSet<Object>(regularImmutableSortedSet0);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.tailSet((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn((NavigableSet) null).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet0.standardSubSet(locale_Category0, true, object0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ForwardingNavigableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      RegularImmutableSortedMultiset<Integer> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<Integer>(comparator1);
      ImmutableSortedSet<Integer> immutableSortedSet0 = regularImmutableSortedMultiset0.elementSet();
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn(immutableSortedSet0).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet0.standardSubSet(immutableSortedSet0, true, (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(emptyContiguousSet0);
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = sets_DescendingSet0.new StandardDescendingSet();
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet0.standardFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.AbstractIndexedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>((NavigableSet<Integer>) null);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.standardFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImmutableSortedSet<Map.Entry<BoundType, Object>> immutableSortedSet0 = ImmutableSortedSet.of();
      Sets.DescendingSet<Map.Entry<BoundType, Object>> sets_DescendingSet0 = new Sets.DescendingSet<Map.Entry<BoundType, Object>>(immutableSortedSet0);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.pollLast();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 2092);
      BoundType boundType0 = BoundType.OPEN;
      Range<Comparable<Integer>> range0 = Range.downTo((Comparable<Integer>) integer0, boundType0);
      DiscreteDomain<Comparable<Integer>> discreteDomain0 = (DiscreteDomain<Comparable<Integer>>) mock(DiscreteDomain.class, new ViolatedAssumptionAnswer());
      RegularContiguousSet<Comparable<Integer>> regularContiguousSet0 = new RegularContiguousSet<Comparable<Integer>>(range0, discreteDomain0);
      Sets.DescendingSet<Comparable<Integer>> sets_DescendingSet0 = new Sets.DescendingSet<Comparable<Integer>>(regularContiguousSet0);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.pollFirst();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>((NavigableSet<Integer>) null);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.pollFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn((NavigableSet) null).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      BoundType boundType0 = BoundType.OPEN;
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet0.higher(boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ForwardingNavigableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn((NavigableSet) null).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      Integer integer0 = new Integer((-863));
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet0.tailSet(integer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ForwardingNavigableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn((NavigableSet<Integer>) null).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet1 = forwardingNavigableSet_StandardDescendingSet0.new StandardDescendingSet();
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet1.pollFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ForwardingNavigableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      ForwardingNavigableSet<Object> forwardingNavigableSet0 = (ForwardingNavigableSet<Object>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn(regularImmutableSortedSet0).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet1 = forwardingNavigableSet_StandardDescendingSet0.new StandardDescendingSet();
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet1.pollLast();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSortedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Sets.DescendingSet<Object> sets_DescendingSet0 = new Sets.DescendingSet<Object>((NavigableSet<Object>) null);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.standardLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<Object> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super Object>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      RegularImmutableSortedMultiset<Integer> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<Integer>(comparator1);
      ImmutableSortedSet<Integer> immutableSortedSet0 = regularImmutableSortedMultiset0.elementSet();
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn(immutableSortedSet0).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet1 = forwardingNavigableSet_StandardDescendingSet0.new StandardDescendingSet();
      Object object0 = forwardingNavigableSet_StandardDescendingSet1.standardPollLast();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1257966797));
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0);
      ForwardingNavigableSet<Integer> forwardingNavigableSet0 = (ForwardingNavigableSet<Integer>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn(immutableSortedSet0).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet0.standardSubSet(locale_Category0, true, object0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale$Category cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>((NavigableSet<Integer>) null);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.standardPollFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-564));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      ImmutableSortedSet<Integer> immutableSortedSet0 = ImmutableSortedSet.of(integer0, integer0, integer0, integer0, integer0, integer0, integerArray0);
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>(immutableSortedSet0);
      SortedSet<Integer> sortedSet0 = sets_DescendingSet0.standardTailSet(integer0);
      assertTrue(sortedSet0.contains((-564)));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImmutableSortedSet<Object> immutableSortedSet0 = ImmutableSortedSet.of();
      Sets.DescendingSet<Object> sets_DescendingSet0 = new Sets.DescendingSet<Object>(immutableSortedSet0);
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = sets_DescendingSet0.new StandardDescendingSet();
      BoundType boundType0 = BoundType.CLOSED;
      SortedSet<BoundType> sortedSet0 = forwardingNavigableSet_StandardDescendingSet0.standardSubSet(boundType0, boundType0);
      assertFalse(sortedSet0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>((NavigableSet<Integer>) null);
      Integer integer0 = new Integer(1967);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.standardHigher(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>((NavigableSet<Integer>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.standardFloor(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Sets.DescendingSet<Integer> sets_DescendingSet0 = new Sets.DescendingSet<Integer>((NavigableSet<Integer>) null);
      Integer integer0 = new Integer(2564);
      // Undeclared exception!
      try { 
        sets_DescendingSet0.standardHeadSet(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets$DescendingSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ForwardingNavigableSet<Object> forwardingNavigableSet0 = (ForwardingNavigableSet<Object>) mock(ForwardingNavigableSet.class, CALLS_REAL_METHODS);
      doReturn((NavigableSet) null).when(forwardingNavigableSet0).delegate();
      ForwardingNavigableSet.StandardDescendingSet forwardingNavigableSet_StandardDescendingSet0 = forwardingNavigableSet0.new StandardDescendingSet();
      BoundType boundType0 = BoundType.OPEN;
      // Undeclared exception!
      try { 
        forwardingNavigableSet_StandardDescendingSet0.headSet(boundType0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ForwardingNavigableSet", e);
      }
  }
}
