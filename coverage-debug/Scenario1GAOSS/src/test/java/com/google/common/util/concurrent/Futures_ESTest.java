/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:39:18 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.UnmodifiableIterator;
import com.google.common.util.concurrent.AggregateFuture;
import com.google.common.util.concurrent.AsyncCallable;
import com.google.common.util.concurrent.AsyncFunction;
import com.google.common.util.concurrent.FluentFuture;
import com.google.common.util.concurrent.ForwardingFluentFuture;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ImmediateFuture;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListenableFutureTask;
import com.google.common.util.concurrent.SettableFuture;
import com.google.common.util.concurrent.TrustedListenableFutureTask;
import java.io.File;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Duration;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Futures_ESTest extends Futures_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask.create(callable0);
      AsyncCallable<Delayed> asyncCallable0 = (AsyncCallable<Delayed>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      SQLException sQLException0 = new SQLException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (-1174), sQLClientInfoException0);
      Futures.immediateFuture((Exception) sQLException0);
      // Undeclared exception!
      try { 
        Futures.allAsList((ListenableFuture<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ListenableFuture<Exception>[] listenableFutureArray0 = (ListenableFuture<Exception>[]) Array.newInstance(ListenableFuture.class, 13);
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xN#P'", sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("i]rfY+.eC|", "i]rfY+.eC|", 2456, sQLFeatureNotSupportedException0);
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateFuture((Exception) sQLTransactionRollbackException0);
      listenableFutureArray0[0] = listenableFuture0;
      // Undeclared exception!
      try { 
        Futures.allAsList((ListenableFuture<?>[]) listenableFutureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 1
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Callable<LinkedList<Delayed>> callable0 = (Callable<LinkedList<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<LinkedList<Delayed>> listenableFutureTask0 = new ListenableFutureTask<LinkedList<Delayed>>(callable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Duration.ofMillis(0L);
      Converter<Delayed, Delayed> converter0 = Converter.identity();
      Converter<Delayed, Delayed> converter1 = converter0.reverse();
      Converter<Delayed, Delayed> converter2 = Converter.from((Function<? super Delayed, ? extends Delayed>) converter1, (Function<? super Delayed, ? extends Delayed>) converter0);
      Converter<Delayed, Delayed> converter3 = converter2.andThen(converter1);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      // Undeclared exception!
      try { 
        Futures.transform((ListenableFuture<Delayed>) null, (Function<? super Delayed, ? extends Delayed>) converter3, (Executor) scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ImmediateFuture.ImmediateFailedFuture<Exception> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Exception>(mockThrowable0);
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      Duration duration0 = Duration.of(0L, chronoUnit0);
      ListenableFuture<Exception> listenableFuture0 = Futures.withTimeout((ListenableFuture<Exception>) immediateFuture_ImmediateFailedFuture0, duration0, (ScheduledExecutorService) null);
      ListenableFuture<Exception> listenableFuture1 = Futures.nonCancellationPropagating(listenableFuture0);
      Class<Exception> class0 = Exception.class;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      AsyncFunction<Exception, Exception> asyncFunction0 = (AsyncFunction<Exception, Exception>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncFunction0).toString();
      ListenableFuture<Object> listenableFuture2 = Futures.catchingAsync((ListenableFuture<?>) listenableFuture1, class0, (AsyncFunction<? super Exception, ?>) asyncFunction0, (Executor) scheduledThreadPoolExecutor0);
      assertNotNull(listenableFuture2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Futures.whenAllComplete((Iterable<? extends ListenableFuture<? extends Exception>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+.SvX%YA`ZdAg<2d)");
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateFuture((Exception) sQLTimeoutException0);
      Futures.nonCancellationPropagating(listenableFuture0);
      AsyncFunction<Exception, Object> asyncFunction0 = (AsyncFunction<Exception, Object>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup1, "+.SvX%YA`ZdAg<2d)");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "P9'Q", 0L);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      int int0 = 1;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        Futures.withTimeout((ListenableFuture<AggregateFuture.ReleaseResourcesReason>) null, (long) 1, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Futures", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+.SvX%YA`ZdAg<2d)");
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateFuture((Exception) sQLTimeoutException0);
      ListenableFuture<Exception> listenableFuture1 = Futures.nonCancellationPropagating(listenableFuture0);
      Class<Exception> class0 = Exception.class;
      AsyncFunction<Exception, Object> asyncFunction0 = (AsyncFunction<Exception, Object>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      doReturn("`r4L*^{l").when(asyncFunction0).toString();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2490, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.shutdown();
      Futures.catchingAsync((ListenableFuture<?>) listenableFuture1, class0, (AsyncFunction<? super Exception, ?>) asyncFunction0, (Executor) scheduledThreadPoolExecutor0);
      Comparator<ListenableFuture<Exception>> comparator0 = (Comparator<ListenableFuture<Exception>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableSortedSet<ListenableFuture<Exception>> immutableSortedSet0 = ImmutableSortedSet.of();
      UnmodifiableIterator<ListenableFuture<Exception>> unmodifiableIterator0 = immutableSortedSet0.iterator();
      ImmutableSortedSet<ListenableFuture<Exception>> immutableSortedSet1 = ImmutableSortedSet.copyOf((Comparator<? super ListenableFuture<Exception>>) comparator0, (Iterator<? extends ListenableFuture<Exception>>) unmodifiableIterator0);
      Futures.FutureCombiner<Exception> futures_FutureCombiner0 = Futures.whenAllComplete((Iterable<? extends ListenableFuture<? extends Exception>>) immutableSortedSet1);
      AsyncCallable<Delayed> asyncCallable0 = (AsyncCallable<Delayed>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      ListenableFuture<Delayed> listenableFuture2 = futures_FutureCombiner0.callAsync(asyncCallable0, (Executor) scheduledThreadPoolExecutor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(2490, threadPoolExecutor_DiscardPolicy0);
      // Undeclared exception!
      try { 
        Futures.withTimeout(listenableFuture2, (Duration) null, (ScheduledExecutorService) scheduledThreadPoolExecutor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("CANCELLED", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.google.common.primitives.Ints$IntConverter", "CANCELLED", 0, sQLTransientException0);
      CompletableFuture<Exception> completableFuture0 = CompletableFuture.completedFuture((Exception) sQLIntegrityConstraintViolationException0);
      Class<Exception> class0 = Exception.class;
      BiFunction<Exception, Throwable, LinkedList<Object>> biFunction0 = (BiFunction<Exception, Throwable, LinkedList<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(Exception.class) , any(Throwable.class));
      completableFuture0.handle((BiFunction<? super Exception, Throwable, ? extends LinkedList<Object>>) biFunction0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Exception exception0 = Futures.getChecked((Future<Exception>) completableFuture0, class0, 0L, timeUnit0);
      assertSame(exception0, sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Futures.nonCancellationPropagating((ListenableFuture<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Futures", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+.SvX%YA`ZdAg<2d)");
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateFuture((Exception) sQLTimeoutException0);
      ListenableFuture<Exception> listenableFuture1 = Futures.nonCancellationPropagating(listenableFuture0);
      Class<Exception> class0 = Exception.class;
      AsyncFunction<Exception, Object> asyncFunction0 = (AsyncFunction<Exception, Object>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncFunction0).toString();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2490, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      ListenableFuture<Object> listenableFuture2 = Futures.catchingAsync((ListenableFuture<?>) listenableFuture1, class0, (AsyncFunction<? super Exception, ?>) asyncFunction0, (Executor) scheduledThreadPoolExecutor0);
      assertNotNull(listenableFuture2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+.SvX%YA`ZdAg<2d)");
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateFuture((Exception) sQLTimeoutException0);
      Futures.nonCancellationPropagating(listenableFuture0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, (ThreadFactory) null, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateCancelledFuture();
      // Undeclared exception!
      try { 
        Futures.getDone((Future<Exception>) listenableFuture0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // Task was cancelled.
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Futures.getUnchecked((Future<CompletionStage<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Futures.getUnchecked((Future<Delayed>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Exception> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Exception>();
      Class<Exception> class0 = Exception.class;
      try { 
        Futures.getChecked((Future<Exception>) immediateFuture_ImmediateCancelledFuture0, class0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // Task was cancelled.
         //
         verifyException("com.google.common.util.concurrent.AbstractFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Futures.whenAllComplete((ListenableFuture<? extends LinkedList<Exception>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+.SvX%YA`ZdAg<2d)");
      Futures.immediateFuture((Exception) sQLTimeoutException0);
      ListenableFuture<Delayed> listenableFuture0 = Futures.immediateFailedFuture((Throwable) sQLTimeoutException0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListenableFuture<FormatStyle>[] listenableFutureArray0 = (ListenableFuture<FormatStyle>[]) Array.newInstance(ListenableFuture.class, 5);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      ListenableFuture<FormatStyle> listenableFuture0 = Futures.immediateFuture(formatStyle0);
      listenableFutureArray0[0] = listenableFuture0;
      Callable<FormatStyle> callable0 = (Callable<FormatStyle>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<FormatStyle> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      listenableFutureArray0[1] = (ListenableFuture<FormatStyle>) listenableFutureTask0;
      ListenableFutureTask<FormatStyle> listenableFutureTask1 = new ListenableFutureTask<FormatStyle>(listenableFutureTask0, formatStyle0);
      listenableFutureArray0[2] = (ListenableFuture<FormatStyle>) listenableFutureTask1;
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '7';
      charArray0[2] = '3';
      int int0 = 0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 401, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Callable<ListenableFuture<Exception>> callable0 = (Callable<ListenableFuture<Exception>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<ListenableFuture<Exception>> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      listenableFutureTask0.isDone();
      ListenableFuture<ListenableFuture<Exception>> listenableFuture0 = Futures.nonCancellationPropagating((ListenableFuture<ListenableFuture<Exception>>) listenableFutureTask0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<Delayed> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      Futures.nonCancellationPropagating((ListenableFuture<Delayed>) listenableFutureTask0);
      int int0 = 1166;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ImmutableSortedSet.copyOf((Collection<? extends ListenableFuture<Delayed>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      try { 
        Futures.getChecked((Future<Delayed>) null, class0, 1L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.FuturesGetChecked", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Futures.whenAllSucceed((ListenableFuture<? extends Exception>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Callable<LinkedList<Delayed>> callable0 = (Callable<LinkedList<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<LinkedList<Delayed>> listenableFutureTask0 = new ListenableFutureTask<LinkedList<Delayed>>(callable0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Futures.submit(callable1, (Executor) forkJoinPool0);
      String string0 = "null";
      String string1 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("null", "", 1);
      ImmediateFuture.ImmediateFailedFuture<Exception> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Exception>(sQLTimeoutException0);
      Futures.nonCancellationPropagating((ListenableFuture<Exception>) immediateFuture_ImmediateFailedFuture0);
      FluentFuture.from((ListenableFuture<Exception>) immediateFuture_ImmediateFailedFuture0);
      ListenableFuture<LinkedList<Exception>>[] listenableFutureArray0 = null;
      // Undeclared exception!
      try { 
        Futures.whenAllComplete((ListenableFuture<? extends LinkedList<Exception>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Futures.submit(callable0, (Executor) forkJoinPool0);
      Converter<Delayed, Delayed> converter0 = Converter.identity();
      Converter<Delayed, Delayed> converter1 = Converter.from((Function<? super Delayed, ? extends Delayed>) converter0, (Function<? super Delayed, ? extends Delayed>) converter0);
      Converter<Delayed, Delayed> converter2 = converter1.andThen(converter0);
      converter2.reverse();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-376), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Futures.immediateVoidFuture();
      SynchronousQueue<ListenableFuture<Exception>> synchronousQueue0 = new SynchronousQueue<ListenableFuture<Exception>>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 0, sQLSyntaxErrorException0);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "qZfD5hJM_xdQ;p+/.CW");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.google.common.primitives.Ints$IntConverter", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.google.common.primitives.Ints$IntConverter", "com.google.common.primitives.Ints$IntConverter", 0, sQLTransientException0);
      CompletableFuture<Exception> completableFuture0 = CompletableFuture.completedFuture((Exception) sQLIntegrityConstraintViolationException0);
      Class<Exception> class0 = Exception.class;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Exception exception0 = Futures.getChecked((Future<Exception>) completableFuture0, class0, 0L, timeUnit0);
      assertSame(exception0, sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ListenableFuture<Exception>[] listenableFutureArray0 = (ListenableFuture<Exception>[]) Array.newInstance(ListenableFuture.class, 9);
      SettableFuture<Exception> settableFuture0 = SettableFuture.create();
      listenableFutureArray0[0] = (ListenableFuture<Exception>) settableFuture0;
      Callable<Exception> callable0 = (Callable<Exception>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<Exception> listenableFutureTask0 = new ListenableFutureTask<Exception>(callable0);
      listenableFutureArray0[1] = (ListenableFuture<Exception>) listenableFutureTask0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      TrustedListenableFutureTask<Exception> trustedListenableFutureTask0 = TrustedListenableFutureTask.create((Runnable) listenableFutureTask0, (Exception) sQLTransientConnectionException0);
      listenableFutureArray0[2] = (ListenableFuture<Exception>) trustedListenableFutureTask0;
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateCancelledFuture();
      Callable<Exception> callable1 = (Callable<Exception>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Exception> trustedListenableFutureTask1 = TrustedListenableFutureTask.create(callable1);
      ImmutableList.of((ListenableFuture<Exception>) listenableFutureTask0, listenableFuture0, listenableFutureArray0[2], listenableFutureArray0[1], listenableFuture0, (ListenableFuture<Exception>) trustedListenableFutureTask0, listenableFutureArray0[2], (ListenableFuture<Exception>) trustedListenableFutureTask1, listenableFutureArray0[1], (ListenableFuture<Exception>) trustedListenableFutureTask0, listenableFutureArray0[1]);
      boolean boolean0 = false;
      int int0 = 0;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, listenableFutureTask0, "], remaining=[");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Futures.immediateCancelledFuture();
      LinkedList<Exception> linkedList0 = new LinkedList<Exception>();
      linkedList0.clear();
      Futures.immediateFuture(linkedList0);
      ListenableFuture<CompletionStage<Object>>[] listenableFutureArray0 = (ListenableFuture<CompletionStage<Object>>[]) Array.newInstance(ListenableFuture.class, 8);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      Duration duration0 = chronoUnit0.getDuration();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(35, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      // Undeclared exception!
      try { 
        Futures.withTimeout((ListenableFuture<CompletionStage<Object>>) null, duration0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Futures", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ListenableFuture<Exception>[] listenableFutureArray0 = (ListenableFuture<Exception>[]) Array.newInstance(ListenableFuture.class, 1);
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xN#P'", sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("iZfY+.eC|", "iZfY+.eC|", 2456, sQLFeatureNotSupportedException0);
      ListenableFuture<Exception> listenableFuture0 = Futures.immediateFuture((Exception) sQLTransactionRollbackException0);
      listenableFutureArray0[0] = listenableFuture0;
      Futures.allAsList((ListenableFuture<?>[]) listenableFutureArray0);
      Stack<ListenableFuture<Exception>> stack0 = new Stack<ListenableFuture<Exception>>();
      Futures.FutureCombiner<Object> futures_FutureCombiner0 = Futures.whenAllSucceed((Iterable<? extends ListenableFuture<?>>) stack0);
      assertNotNull(futures_FutureCombiner0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-551);
      MockError mockError0 = new MockError();
      SQLWarning sQLWarning0 = new SQLWarning(mockError0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, "|@&HXxp&UODh_0-$", (-551), sQLInvalidAuthorizationSpecException0);
      sQLWarning0.addSuppressed(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecException1.spliterator();
      Futures.immediateFailedFuture((Throwable) sQLInvalidAuthorizationSpecException1);
      Vector<ListenableFuture<Exception>> vector0 = new Vector<ListenableFuture<Exception>>();
      ImmutableSortedMultiset<ListenableFuture<Exception>> immutableSortedMultiset0 = ImmutableSortedMultiset.copyOf((Iterable<? extends ListenableFuture<Exception>>) vector0);
      immutableSortedMultiset0.comparator();
      Futures.whenAllSucceed((Iterable<? extends ListenableFuture<? extends Exception>>) immutableSortedMultiset0);
      TrustedListenableFutureTask<AggregateFuture.ReleaseResourcesReason> trustedListenableFutureTask0 = null;
      try {
        trustedListenableFutureTask0 = new TrustedListenableFutureTask<AggregateFuture.ReleaseResourcesReason>((Callable<AggregateFuture.ReleaseResourcesReason>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Callable<LinkedList<Delayed>> callable0 = (Callable<LinkedList<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<LinkedList<Delayed>> listenableFutureTask0 = new ListenableFutureTask<LinkedList<Delayed>>(callable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListenableFutureTask<Exception> listenableFutureTask1 = ListenableFutureTask.create((Runnable) listenableFutureTask0, (Exception) sQLClientInfoException0);
      Duration duration0 = Duration.ofMillis(0L);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(11);
      ListenableFuture<Exception> listenableFuture0 = Futures.withTimeout((ListenableFuture<Exception>) listenableFutureTask1, duration0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ListenableFuture<Delayed> listenableFuture0 = Futures.immediateFailedFuture((Throwable) mockThrowable0);
      assertNotNull(listenableFuture0);
      
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      mockThrowable0.initCause(sQLWarning0);
      Class<Exception> class0 = Exception.class;
      AsyncFunction<Exception, Object> asyncFunction0 = (AsyncFunction<Exception, Object>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncFunction0).toString();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ListenableFuture<Object> listenableFuture1 = Futures.catchingAsync((ListenableFuture<?>) listenableFuture0, class0, (AsyncFunction<? super Exception, ?>) asyncFunction0, (Executor) forkJoinPool0);
      assertNotNull(listenableFuture1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      delayQueue0.poll(0L, timeUnit0);
      ImmediateFuture<Delayed> immediateFuture0 = new ImmediateFuture<Delayed>((Delayed) null);
      AsyncCallable<Delayed> asyncCallable0 = (AsyncCallable<Delayed>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn(immediateFuture0).when(asyncCallable0).call();
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      Duration duration0 = chronoUnit0.getDuration();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3614);
      ListenableFuture<Delayed> listenableFuture0 = Futures.scheduleAsync(asyncCallable0, duration0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      Duration.from(duration0);
      duration0.minusMillis(0L);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Futures.withTimeout(listenableFuture0, 270L, timeUnit1, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      LinkedHashSet<ListenableFuture<Exception>> linkedHashSet0 = new LinkedHashSet<ListenableFuture<Exception>>();
      Futures.successfulAsList((Iterable<? extends ListenableFuture<? extends Exception>>) linkedHashSet0);
      AsyncCallable<Exception> asyncCallable1 = (AsyncCallable<Exception>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+.SvX%YA`ZdAg<2d)");
      Futures.immediateFuture((Exception) sQLTimeoutException0);
      Callable<Exception> callable0 = (Callable<Exception>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Exception> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Exception>(callable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      // Undeclared exception!
      try { 
        Futures.scheduleAsync((AsyncCallable<Exception>) null, (-1L), timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AsyncCallable<LinkedList<AggregateFuture.ReleaseResourcesReason>> asyncCallable0 = (AsyncCallable<LinkedList<AggregateFuture.ReleaseResourcesReason>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null, (Thread) null).when(threadFactory0).newThread(any(Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      scheduledThreadPoolExecutor0.prestartAllCoreThreads();
      Futures.scheduleAsync(asyncCallable0, 0L, timeUnit0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      ListenableFuture<Exception>[] listenableFutureArray0 = (ListenableFuture<Exception>[]) Array.newInstance(ListenableFuture.class, 9);
      AsyncCallable<Exception> asyncCallable1 = (AsyncCallable<Exception>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      Duration duration0 = Duration.ofSeconds(37L, (-1L));
      ListenableFuture<Exception> listenableFuture0 = Futures.scheduleAsync(asyncCallable1, duration0, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      listenableFutureArray0[0] = listenableFuture0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("g.=G%qE~Y", sQLClientInfoException1);
      ImmediateFuture.ImmediateFailedFuture<Exception> immediateFuture_ImmediateFailedFuture0 = new ImmediateFuture.ImmediateFailedFuture<Exception>(sQLTransientConnectionException0);
      listenableFutureArray0[1] = (ListenableFuture<Exception>) immediateFuture_ImmediateFailedFuture0;
      AsyncCallable<Exception> asyncCallable2 = (AsyncCallable<Exception>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      ListenableFuture<Exception> listenableFuture1 = Futures.submitAsync(asyncCallable2, (Executor) scheduledThreadPoolExecutor0);
      listenableFutureArray0[2] = listenableFuture1;
      Class<Exception> class0 = Exception.class;
      AsyncFunction<Exception, Exception> asyncFunction0 = (AsyncFunction<Exception, Exception>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncFunction0).toString();
      ListenableFuture<Exception> listenableFuture2 = Futures.catchingAsync((ListenableFuture<? extends Exception>) listenableFuture0, class0, (AsyncFunction<? super Exception, ? extends Exception>) asyncFunction0, (Executor) scheduledThreadPoolExecutor0);
      listenableFutureArray0[3] = listenableFuture2;
      ForwardingFluentFuture<Exception> forwardingFluentFuture0 = new ForwardingFluentFuture<Exception>(listenableFuture1);
      listenableFutureArray0[4] = (ListenableFuture<Exception>) forwardingFluentFuture0;
      Callable<Exception> callable0 = (Callable<Exception>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Exception> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(callable0);
      listenableFutureArray0[5] = (ListenableFuture<Exception>) trustedListenableFutureTask0;
      ListenableFuture<LinkedList<Exception>>[] listenableFutureArray1 = (ListenableFuture<LinkedList<Exception>>[]) Array.newInstance(ListenableFuture.class, 5);
      ListenableFuture<LinkedList<Exception>> listenableFuture3 = Futures.immediateFailedFuture((Throwable) sQLClientInfoException1);
      listenableFutureArray1[0] = listenableFuture3;
      Callable<LinkedList<Exception>> callable1 = (Callable<LinkedList<Exception>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<LinkedList<Exception>> listenableFutureTask0 = ListenableFutureTask.create(callable1);
      listenableFutureArray1[1] = (ListenableFuture<LinkedList<Exception>>) listenableFutureTask0;
      // Undeclared exception!
      try { 
        FluentFuture.from((ListenableFuture<LinkedList<Exception>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
