/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:51:37 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.DiscreteDomain;
import java.math.BigInteger;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDomain_ESTest extends DiscreteDomain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = new Long(0L);
      Long long1 = discreteDomain0.offset(long0, 1307L);
      assertEquals(1307L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = new Integer(0);
      Integer integer1 = discreteDomain0.maxValue();
      long long0 = discreteDomain0.distance(integer1, integer0);
      assertEquals((-2147483647L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = new Integer(2131);
      Integer integer1 = discreteDomain0.offset(integer0, 2131);
      assertEquals(4262, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscreteDomain<BigInteger> discreteDomain0 = DiscreteDomain.bigIntegers();
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = discreteDomain0.previous(bigInteger0);
      long long0 = discreteDomain0.distance(bigInteger0, bigInteger1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiscreteDomain<BigInteger> discreteDomain0 = DiscreteDomain.bigIntegers();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = discreteDomain0.offset(bigInteger0, 1L);
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      // Undeclared exception!
      try { 
        discreteDomain0.next((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.DiscreteDomain$IntegerDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long((-678));
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long1 = new Long(5169L);
      long long2 = discreteDomain0.distance(long1, long0);
      assertEquals((-5847L), long2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long((-678));
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long1 = discreteDomain0.maxValue();
      assertEquals(9223372036854775807L, (long)long1);
      
      long long2 = discreteDomain0.distance(long1, long0);
      assertEquals((-9223372036854775808L), long2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long((-2276L));
      long long2 = discreteDomain0.distance(long1, long0);
      assertEquals(9223372036854775807L, long2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(4877L);
      long long2 = discreteDomain0.distance(long1, long0);
      assertEquals(9223372036854770930L, long2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long((-678));
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      long long1 = discreteDomain0.distance(long0, long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(9223372036854775782L);
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      // Undeclared exception!
      try { 
        discreteDomain0.offset(long0, 9223372036854775782L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // overflow
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = new Long((-1L));
      Long long1 = discreteDomain0.offset(long0, 0L);
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = new Long(0L);
      Long long1 = discreteDomain0.offset(long0, 0L);
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = discreteDomain0.previous(long0);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Long long0 = new Long(0L);
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long1 = discreteDomain0.previous(long0);
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(9223372036854775782L);
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long1 = discreteDomain0.next(long0);
      //  // Unstable assertion: assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = new Long(4877L);
      Long long1 = discreteDomain0.next(long0);
      assertNotNull(long1);
      assertEquals(4878L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      Integer integer1 = discreteDomain0.previous(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.maxValue();
      Integer integer1 = discreteDomain0.previous(integer0);
      assertNotNull(integer1);
      assertEquals(2147483646, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscreteDomain<BigInteger> discreteDomain0 = DiscreteDomain.bigIntegers();
      // Undeclared exception!
      try { 
        discreteDomain0.previous((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.DiscreteDomain$BigIntegerDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDomain<BigInteger> discreteDomain0 = DiscreteDomain.bigIntegers();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = discreteDomain0.next(bigInteger0);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscreteDomain<BigInteger> discreteDomain0 = DiscreteDomain.bigIntegers();
      // Undeclared exception!
      try { 
        discreteDomain0.distance((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.DiscreteDomain$BigIntegerDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.minValue();
      Integer integer1 = discreteDomain0.next(integer0);
      assertNotNull(integer1);
      assertEquals((-2147483647), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.maxValue();
      Integer integer1 = discreteDomain0.next(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DiscreteDomain<BigInteger> discreteDomain0 = DiscreteDomain.bigIntegers();
      // Undeclared exception!
      try { 
        discreteDomain0.maxValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.DiscreteDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      // Undeclared exception!
      try { 
        discreteDomain0.offset((Integer) null, 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.DiscreteDomain$IntegerDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DiscreteDomain<BigInteger> discreteDomain0 = DiscreteDomain.bigIntegers();
      // Undeclared exception!
      try { 
        discreteDomain0.minValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.DiscreteDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DiscreteDomain<Long> discreteDomain0 = DiscreteDomain.longs();
      Long long0 = discreteDomain0.minValue();
      assertEquals((-9223372036854775808L), (long)long0);
  }
}
