/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:44:56 GMT 2024
 */

package com.google.common.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.net.HostSpecifier;
import java.text.ParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HostSpecifier_ESTest extends HostSpecifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = HostSpecifier.isValid("127.0.0.1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.isValid((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.isValid("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.fromValid((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.fromValid("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.from((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.from("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.fromValid("l:9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HostSpecifier hostSpecifier0 = HostSpecifier.fromValid("127.0.0.1");
      HostSpecifier hostSpecifier1 = HostSpecifier.from("127.0.0.1");
      boolean boolean0 = hostSpecifier1.equals(hostSpecifier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HostSpecifier hostSpecifier0 = HostSpecifier.fromValid("127.0.0.1");
      boolean boolean0 = hostSpecifier0.equals(hostSpecifier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HostSpecifier hostSpecifier0 = HostSpecifier.from("127.0.0.1");
      boolean boolean0 = hostSpecifier0.equals("127.0.0.1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        HostSpecifier.from("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Invalid host specifier: 
         //
         verifyException("com.google.common.net.HostSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        HostSpecifier.fromValid("iLV:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Domain name does not have a recognized public suffix: iLV
         //
         verifyException("com.google.common.net.HostSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        HostSpecifier.from(":8");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Invalid host specifier: :8
         //
         verifyException("com.google.common.net.HostSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = HostSpecifier.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HostSpecifier hostSpecifier0 = HostSpecifier.from("127.0.0.1");
      hostSpecifier0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HostSpecifier hostSpecifier0 = HostSpecifier.from("127.0.0.1");
      String string0 = hostSpecifier0.toString();
      assertEquals("127.0.0.1", string0);
  }
}
