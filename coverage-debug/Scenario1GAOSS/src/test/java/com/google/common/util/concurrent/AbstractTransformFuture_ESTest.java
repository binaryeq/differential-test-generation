/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:19:05 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.util.concurrent.AbstractTransformFuture;
import com.google.common.util.concurrent.AsyncFunction;
import com.google.common.util.concurrent.FluentFuture;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListenableFutureTask;
import java.sql.SQLTransientConnectionException;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractTransformFuture_ESTest extends AbstractTransformFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncFunction<Integer, ChronoUnit> asyncFunction0 = (AsyncFunction<Integer, ChronoUnit>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AbstractTransformFuture.create((ListenableFuture<Integer>) null, (AsyncFunction<? super Integer, ? extends ChronoUnit>) asyncFunction0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Callable<Comparable<Integer>> callable0 = (Callable<Comparable<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<Comparable<Integer>> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      Function<Object, FluentFuture<Object>> function0 = (Function<Object, FluentFuture<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Object, FluentFuture<Object>> converter0 = Converter.from((Function<? super Object, ? extends FluentFuture<Object>>) function0, (Function<? super FluentFuture<Object>, ?>) function0);
      // Undeclared exception!
      try { 
        AbstractTransformFuture.create((ListenableFuture<Comparable<Integer>>) listenableFutureTask0, (Function<? super Comparable<Integer>, ? extends FluentFuture<Object>>) converter0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Callable<SQLTransientConnectionException> callable0 = (Callable<SQLTransientConnectionException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<SQLTransientConnectionException> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 256, 0, timeUnit0, linkedBlockingQueue0, threadFactory0);
      Function<SQLTransientConnectionException, Integer> function0 = (Function<SQLTransientConnectionException, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(function0).toString();
      Function<Integer, SQLTransientConnectionException> function1 = (Function<Integer, SQLTransientConnectionException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(function1).toString();
      Converter<SQLTransientConnectionException, Integer> converter0 = Converter.from((Function<? super SQLTransientConnectionException, ? extends Integer>) function0, (Function<? super Integer, ? extends SQLTransientConnectionException>) function1);
      ListenableFuture<Integer> listenableFuture0 = AbstractTransformFuture.create((ListenableFuture<SQLTransientConnectionException>) listenableFutureTask0, (Function<? super SQLTransientConnectionException, ? extends Integer>) converter0, (Executor) threadPoolExecutor0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Callable<SQLTransientConnectionException> callable0 = (Callable<SQLTransientConnectionException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ListenableFutureTask<SQLTransientConnectionException> listenableFutureTask0 = ListenableFutureTask.create(callable0);
      AsyncFunction<SQLTransientConnectionException, SQLTransientConnectionException> asyncFunction0 = (AsyncFunction<SQLTransientConnectionException, SQLTransientConnectionException>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncFunction0).toString();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 256, 0, timeUnit0, linkedBlockingQueue0, threadFactory0);
      ListenableFuture<SQLTransientConnectionException> listenableFuture0 = AbstractTransformFuture.create((ListenableFuture<SQLTransientConnectionException>) listenableFutureTask0, (AsyncFunction<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) asyncFunction0, (Executor) threadPoolExecutor0);
      assertNotNull(listenableFuture0);
  }
}
