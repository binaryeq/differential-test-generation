/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:47:55 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.collect.CompoundOrdering;
import com.google.common.collect.ConcurrentHashMultiset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.RegularImmutableList;
import java.util.Comparator;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompoundOrdering_ESTest extends CompoundOrdering_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      CompoundOrdering<Locale.Category> compoundOrdering0 = new CompoundOrdering<Locale.Category>(comparator0, comparator0);
      compoundOrdering0.hashCode();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ImmutableSortedSet<Comparator<Object>> immutableSortedSet0 = ImmutableSortedSet.of();
      CompoundOrdering<Integer> compoundOrdering0 = new CompoundOrdering<Integer>(immutableSortedSet0);
      CompoundOrdering<CompoundOrdering<Integer>> compoundOrdering1 = new CompoundOrdering<CompoundOrdering<Integer>>((Comparator<? super CompoundOrdering<Integer>>) null, (Comparator<? super CompoundOrdering<Integer>>) null);
      // Undeclared exception!
      try { 
        compoundOrdering1.compare(compoundOrdering0, compoundOrdering0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.CompoundOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConcurrentSkipListMap<Comparator<Object>, AtomicInteger> concurrentSkipListMap0 = new ConcurrentSkipListMap<Comparator<Object>, AtomicInteger>();
      ConcurrentHashMultiset<Comparator<Object>> concurrentHashMultiset0 = new ConcurrentHashMultiset<Comparator<Object>>(concurrentSkipListMap0);
      CompoundOrdering<Object> compoundOrdering0 = new CompoundOrdering<Object>(concurrentHashMultiset0);
      Function<Object, MockFile> function0 = (Function<Object, MockFile>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, MockFile> converter0 = Converter.from((Function<? super Object, ? extends MockFile>) function0, (Function<? super MockFile, ?>) function0);
      Comparator<Object> comparator0 = compoundOrdering0.thenComparing((java.util.function.Function<? super Object, ? extends MockFile>) converter0);
      CompoundOrdering<Comparator<Object>> compoundOrdering1 = new CompoundOrdering<Comparator<Object>>(comparator0, compoundOrdering0);
      // Undeclared exception!
      try { 
        compoundOrdering1.compare(comparator0, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompoundOrdering<Comparator<Object>> compoundOrdering0 = null;
      try {
        compoundOrdering0 = new CompoundOrdering<Comparator<Object>>((Iterable<? extends Comparator<? super Comparator<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) toDoubleFunction0;
      RegularImmutableList<Comparator<Locale.Category>> regularImmutableList0 = new RegularImmutableList<Comparator<Locale.Category>>(objectArray0);
      CompoundOrdering<Locale.Category> compoundOrdering0 = null;
      try {
        compoundOrdering0 = new CompoundOrdering<Locale.Category>(regularImmutableList0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      CompoundOrdering<Locale.Category> compoundOrdering0 = new CompoundOrdering<Locale.Category>(comparator0, comparator0);
      Converter<Locale.Category, Locale.Category> converter0 = Converter.identity();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = converter0.convert(locale_Category0);
      boolean boolean0 = compoundOrdering0.equals(locale_Category1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      CompoundOrdering<Object> compoundOrdering0 = new CompoundOrdering<Object>(comparator0, comparator0);
      ImmutableSet<Comparator<Object>> immutableSet0 = ImmutableSet.of((Comparator<Object>) compoundOrdering0, comparator0, (Comparator<Object>) compoundOrdering0, comparator0, (Comparator<Object>) compoundOrdering0);
      assertEquals(2, immutableSet0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3916L), (-3916L), (-3916L), (-121L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      CompoundOrdering<Object> compoundOrdering0 = new CompoundOrdering<Object>(comparator0, comparator0);
      int int0 = compoundOrdering0.compare(comparator0, comparator0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Vector<Comparator<Object>> vector0 = new Vector<Comparator<Object>>();
      CompoundOrdering<Comparable<Object>> compoundOrdering0 = new CompoundOrdering<Comparable<Object>>(vector0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = compoundOrdering0.compare(comparable0, comparable0);
      assertEquals(0, int0);
  }
}
