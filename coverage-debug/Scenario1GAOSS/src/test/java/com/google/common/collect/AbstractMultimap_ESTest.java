/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:34:34 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.AbstractMultimap;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.BoundType;
import com.google.common.collect.EmptyImmutableSetMultimap;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableCollection;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableMultiset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.ImmutableSortedMultiset;
import com.google.common.collect.LinkedHashMultiset;
import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.Multisets;
import com.google.common.collect.RegularImmutableSortedMultiset;
import com.google.common.collect.SortedMultiset;
import com.google.common.collect.TreeMultiset;
import com.google.common.collect.UnmodifiableSortedMultiset;
import java.nio.CharBuffer;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractMultimap_ESTest extends AbstractMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<EmptyImmutableSetMultimap> comparator0 = (Comparator<EmptyImmutableSetMultimap>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedMultiset<EmptyImmutableSetMultimap> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<EmptyImmutableSetMultimap>(comparator0);
      UnmodifiableSortedMultiset<EmptyImmutableSetMultimap> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<EmptyImmutableSetMultimap>(regularImmutableSortedMultiset0);
      BoundType boundType0 = BoundType.OPEN;
      BoundType boundType1 = BoundType.CLOSED;
      ImmutableMultimap<Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>, BoundType> immutableMultimap0 = ImmutableMultimap.of((Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType0, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType1, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType1, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType1, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType1);
      HashMultimap<Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>, BoundType> hashMultimap0 = HashMultimap.create((Multimap<? extends Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>, ? extends BoundType>) immutableMultimap0);
      assertNotNull(hashMultimap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableSetMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> immutableSetMultimap0 = ImmutableSetMultimap.of(emptyImmutableSetMultimap0, emptyImmutableSetMultimap0, emptyImmutableSetMultimap0, emptyImmutableSetMultimap0, emptyImmutableSetMultimap0, emptyImmutableSetMultimap0, emptyImmutableSetMultimap0, emptyImmutableSetMultimap0);
      Spliterator<Map.Entry<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>> spliterator0 = (Spliterator<Map.Entry<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>>)immutableSetMultimap0.entrySpliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultiset<BoundType> treeMultiset0 = TreeMultiset.create((Comparator<? super BoundType>) comparator0);
      ImmutableSortedMultiset<BoundType> immutableSortedMultiset0 = ImmutableSortedMultiset.copyOfSorted((SortedMultiset<BoundType>) treeMultiset0);
      Multisets.UnmodifiableMultiset<BoundType> multisets_UnmodifiableMultiset0 = new Multisets.UnmodifiableMultiset<BoundType>(immutableSortedMultiset0);
      ImmutableListMultimap<EmptyImmutableSetMultimap, Multisets.UnmodifiableMultiset<BoundType>> immutableListMultimap0 = ImmutableListMultimap.of(emptyImmutableSetMultimap0, multisets_UnmodifiableMultiset0, emptyImmutableSetMultimap0, multisets_UnmodifiableMultiset0, emptyImmutableSetMultimap0, multisets_UnmodifiableMultiset0, emptyImmutableSetMultimap0, multisets_UnmodifiableMultiset0, emptyImmutableSetMultimap0, multisets_UnmodifiableMultiset0);
      ImmutableCollection<Map.Entry<EmptyImmutableSetMultimap, Multisets.UnmodifiableMultiset<BoundType>>> immutableCollection0 = (ImmutableCollection<Map.Entry<EmptyImmutableSetMultimap, Multisets.UnmodifiableMultiset<BoundType>>>)immutableListMultimap0.entries();
      assertNotNull(immutableCollection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImmutableMultimap<EmptyImmutableSetMultimap, Map.Entry<CharBuffer, EmptyImmutableSetMultimap>> immutableMultimap0 = ImmutableMultimap.of();
      ImmutableCollection<Map.Entry<CharBuffer, EmptyImmutableSetMultimap>> immutableCollection0 = immutableMultimap0.values();
      assertNotNull(immutableCollection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      Object object0 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, EmptyImmutableSetMultimap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, EmptyImmutableSetMultimap>(object0, emptyImmutableSetMultimap0);
      ImmutableSetMultimap<EmptyImmutableSetMultimap, AbstractMap.SimpleImmutableEntry<Object, EmptyImmutableSetMultimap>> immutableSetMultimap0 = ImmutableSetMultimap.of(emptyImmutableSetMultimap0, abstractMap_SimpleImmutableEntry0, emptyImmutableSetMultimap0, abstractMap_SimpleImmutableEntry0);
      ImmutableMultiset<EmptyImmutableSetMultimap> immutableMultiset0 = immutableSetMultimap0.keys();
      assertTrue(immutableMultiset0.contains(emptyImmutableSetMultimap0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<EmptyImmutableSetMultimap> comparator0 = (Comparator<EmptyImmutableSetMultimap>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedMultiset<EmptyImmutableSetMultimap> regularImmutableSortedMultiset0 = new RegularImmutableSortedMultiset<EmptyImmutableSetMultimap>(comparator0);
      UnmodifiableSortedMultiset<EmptyImmutableSetMultimap> unmodifiableSortedMultiset0 = new UnmodifiableSortedMultiset<EmptyImmutableSetMultimap>(regularImmutableSortedMultiset0);
      BoundType boundType0 = BoundType.OPEN;
      ImmutableMultimap<Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>, BoundType> immutableMultimap0 = ImmutableMultimap.of((Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType0, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType0, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType0, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType0, (Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>) unmodifiableSortedMultiset0, boundType0);
      HashMultimap<Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>, BoundType> hashMultimap0 = HashMultimap.create((Multimap<? extends Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>, ? extends BoundType>) immutableMultimap0);
      Set<Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>> set0 = hashMultimap0.keySet();
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashMultiset<Map.Entry<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>> linkedHashMultiset0 = LinkedHashMultiset.create();
      ImmutableListMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> immutableListMultimap0 = ImmutableListMultimap.copyOf((Iterable<? extends Map.Entry<? extends EmptyImmutableSetMultimap, ? extends EmptyImmutableSetMultimap>>) linkedHashMultiset0);
      Object object0 = new Object();
      boolean boolean0 = immutableListMultimap0.containsEntry(object0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      BoundType boundType0 = BoundType.OPEN;
      ImmutableListMultimap<EmptyImmutableSetMultimap, BoundType> immutableListMultimap0 = ImmutableListMultimap.of(emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0);
      ImmutableSetMultimap<EmptyImmutableSetMultimap, BoundType> immutableSetMultimap0 = ImmutableSetMultimap.copyOf((Multimap<? extends EmptyImmutableSetMultimap, ? extends BoundType>) immutableListMultimap0);
      assertEquals(1, immutableSetMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayListMultimap<Locale.Category, Locale.Category> arrayListMultimap0 = ArrayListMultimap.create();
      AbstractMultimap.Values abstractMultimap_Values0 = arrayListMultimap0.new Values();
      Iterator<Multisets.UnmodifiableMultiset<EmptyImmutableSetMultimap>> iterator0 = abstractMultimap_Values0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      Object object0 = new Object();
      boolean boolean0 = emptyImmutableSetMultimap0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedListMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> linkedListMultimap0 = new LinkedListMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>();
      Iterator<EmptyImmutableSetMultimap> iterator0 = linkedListMultimap0.valueIterator();
      Iterator<EmptyImmutableSetMultimap> iterator1 = linkedListMultimap0.valueIterator();
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      // Undeclared exception!
      try { 
        ImmutableBiMap.of(emptyImmutableSetMultimap0, (ImmutableSet<EmptyImmutableSetMultimap>) null, emptyImmutableSetMultimap0, (ImmutableSet<EmptyImmutableSetMultimap>) null, emptyImmutableSetMultimap0, (ImmutableSet<EmptyImmutableSetMultimap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null value in entry: com.google.common.collect.RegularImmutableMap@0000000001=null
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }
}
