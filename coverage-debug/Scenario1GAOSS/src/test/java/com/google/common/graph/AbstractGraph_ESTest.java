/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:03:53 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.graph.BaseGraph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.MutableGraph;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractGraph_ESTest extends AbstractGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(networkBuilder0);
      String string0 = standardMutableGraph0.toString();
      assertEquals("isDirected: true, allowsSelfLoops: false, nodes: [], edges: []", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImmutableGraph<Integer> immutableGraph0 = new ImmutableGraph<Integer>((BaseGraph<Integer>) null);
      // Undeclared exception!
      try { 
        immutableGraph0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.ForwardingGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmutableGraph<Integer> immutableGraph0 = new ImmutableGraph<Integer>((BaseGraph<Integer>) null);
      ImmutableGraph<Integer> immutableGraph1 = new ImmutableGraph<Integer>((BaseGraph<Integer>) null);
      // Undeclared exception!
      try { 
        immutableGraph1.equals(immutableGraph0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.ForwardingGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<ImmutableGraph<Integer>> standardMutableGraph0 = new StandardMutableGraph<ImmutableGraph<Integer>>(networkBuilder0);
      HashMap<Integer, GraphConnections<Integer, Object>> hashMap0 = new HashMap<Integer, GraphConnections<Integer, Object>>();
      StandardValueGraph<Integer, Object> standardValueGraph0 = new StandardValueGraph<Integer, Object>(networkBuilder0, hashMap0, 645L);
      ImmutableValueGraph<Integer, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Integer, Object>) standardValueGraph0);
      ImmutableGraph<Integer> immutableGraph0 = immutableValueGraph0.asGraph();
      boolean boolean0 = immutableGraph0.equals(standardMutableGraph0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(valueGraphBuilder0);
      Integer integer0 = new Integer(23);
      standardMutableGraph0.addNode(integer0);
      StandardMutableGraph<Object> standardMutableGraph1 = new StandardMutableGraph<Object>(valueGraphBuilder0);
      boolean boolean0 = standardMutableGraph1.equals(standardMutableGraph0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<ImmutableGraph<Integer>> standardMutableGraph0 = new StandardMutableGraph<ImmutableGraph<Integer>>(networkBuilder0);
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      MutableGraph<Integer> mutableGraph0 = graphBuilder0.build();
      ImmutableGraph<Integer> immutableGraph0 = new ImmutableGraph<Integer>(mutableGraph0);
      boolean boolean0 = immutableGraph0.equals(standardMutableGraph0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImmutableGraph<Integer> immutableGraph0 = new ImmutableGraph<Integer>((BaseGraph<Integer>) null);
      boolean boolean0 = immutableGraph0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImmutableGraph<Integer> immutableGraph0 = new ImmutableGraph<Integer>((BaseGraph<Integer>) null);
      boolean boolean0 = immutableGraph0.equals(immutableGraph0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      MutableGraph<Integer> mutableGraph0 = graphBuilder0.build();
      ImmutableGraph<Integer> immutableGraph0 = new ImmutableGraph<Integer>(mutableGraph0);
      boolean boolean0 = immutableGraph0.equals(mutableGraph0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(networkBuilder0);
      standardMutableGraph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImmutableGraph<Integer> immutableGraph0 = new ImmutableGraph<Integer>((BaseGraph<Integer>) null);
      // Undeclared exception!
      try { 
        immutableGraph0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.ForwardingGraph", e);
      }
  }
}
