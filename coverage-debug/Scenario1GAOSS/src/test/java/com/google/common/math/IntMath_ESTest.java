/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:36:30 GMT 2024
 */

package com.google.common.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.math.IntMath;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntMath_ESTest extends IntMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = IntMath.binomial(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = IntMath.binomial(31622776, 17);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = IntMath.binomial(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = IntMath.factorial(60);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-2), 262121);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = IntMath.saturatedPow(2, 83);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedPow((-2), 209);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(-2, 209)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedPow(2, 3572);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(2, 3572)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedMultiply(Integer.MAX_VALUE, (-1495));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedMultiply(2147483647, -1495)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedSubtract(Integer.MAX_VALUE, (-1473));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedSubtract(2147483647, -1473)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedAdd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedAdd(-2147483648, -2147483648)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = IntMath.gcd(1073741824, 1073741824);
      assertEquals(1073741824, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = IntMath.gcd(2593, 1604);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = IntMath.mod(2, 12);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.mod((-424), (-424));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus -424 must be > 0
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        IntMath.divide((-660), Integer.MAX_VALUE, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = IntMath.sqrt(59, roundingMode0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = IntMath.pow(51, 51);
      assertEquals((-329759125), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = IntMath.pow((-2), 37);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = IntMath.pow(2, 35);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = IntMath.log2(Integer.MAX_VALUE, roundingMode0);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = IntMath.isPowerOfTwo(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = IntMath.ceilingPowerOfTwo(1073741824);
      assertEquals(1073741824, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = IntMath.saturatedSubtract(1630729, 579);
      assertEquals(1630150, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = IntMath.saturatedSubtract(0, 34);
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = IntMath.saturatedMultiply(361, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = IntMath.saturatedMultiply((-1259), 26);
      assertEquals((-32734), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = IntMath.saturatedAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = IntMath.saturatedAdd((-482), (-1047));
      assertEquals((-1529), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = IntMath.mean(29, 29);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = IntMath.mean(890, (-1047));
      assertEquals((-79), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      int int0 = IntMath.log2(1, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = IntMath.lessThanBranchFree((-2767), (-2767));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = IntMath.lessThanBranchFree(32, 1928);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = IntMath.isPrime(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = IntMath.gcd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = IntMath.checkedSubtract(46340, 46340);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = IntMath.checkedSubtract((-709), 2);
      assertEquals((-711), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = IntMath.checkedMultiply((-4758), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = IntMath.checkedMultiply(20, (-254));
      assertEquals((-5080), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = IntMath.checkedAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = IntMath.checkedAdd((-2219), 729);
      assertEquals((-1490), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.sqrt(121, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        IntMath.sqrt((-2266), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-2266) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.saturatedPow((-1106), (-1106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1106) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.pow((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.log2(67, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      // Undeclared exception!
      try { 
        IntMath.log2((-1154), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1154) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        IntMath.log2(13, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.log10(1, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      // Undeclared exception!
      try { 
        IntMath.log10(0, roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.isPrime((-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n (-694) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.gcd((-669), (-669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a (-669) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.floorPowerOfTwo((-119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-119) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.factorial((-1874));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n (-1874) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.divide(0, 0, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedPow((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1) must be >= 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.ceilingPowerOfTwo(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = IntMath.saturatedMultiply(87, 32);
      assertEquals(2784, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = IntMath.binomial(58, 2);
      assertEquals(1653, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = IntMath.binomial(89, 8);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = IntMath.binomial(400, 1);
      assertEquals(400, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = IntMath.binomial(1815, 1084);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.binomial(59, 342);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k (java.lang.Integer@0000000001) > n (java.lang.Integer@0000000002)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = IntMath.factorial(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = IntMath.factorial(13);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-329759125), 51);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = IntMath.saturatedPow(13, 13);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = IntMath.saturatedPow(368, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-2), 5);
      assertEquals((-32), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-2), 32);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = IntMath.saturatedPow(2, 31);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-1), 3600);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = IntMath.saturatedPow(0, 125);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = IntMath.saturatedPow(2, 2);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = IntMath.saturatedPow(1, 1099);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = IntMath.saturatedPow(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-1), 3271);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-2), 4);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedPow((-90211), 1297);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(-90211, 648)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedPow(29, 1890);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(707281, 236)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = IntMath.checkedPow(41, 1);
      assertEquals(41, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = IntMath.checkedPow((-2), 31);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedPow((-2), 32);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(-2, 32)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedPow(2, 31);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedPow(2, 31)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = IntMath.checkedPow((-1), 3600);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = IntMath.checkedPow(0, 342);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = IntMath.checkedPow(9, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = IntMath.checkedPow(2, 1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = IntMath.checkedPow(1, 2112);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = IntMath.checkedPow((-1), 147);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = IntMath.checkedPow(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = IntMath.checkedPow((-2), 2);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = IntMath.checkedMultiply(20, 20);
      assertEquals(400, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedMultiply(Integer.MAX_VALUE, 80);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedMultiply(2147483647, 80)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = IntMath.checkedSubtract(214, 22);
      assertEquals(192, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedSubtract(Integer.MIN_VALUE, 73);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedSubtract(-2147483648, 73)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = IntMath.checkedAdd(Integer.MAX_VALUE, (-4567));
      assertEquals(2147479080, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.checkedAdd(1073741824, 1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: checkedAdd(1073741824, 1073741824)
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = IntMath.gcd(2086, 0);
      assertEquals(2086, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = IntMath.mod((-1495), 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.mod(1579, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Modulus 0 must be > 0
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = IntMath.mod(362880, 10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = IntMath.divide(3222, (-3273), roundingMode0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = IntMath.divide((-953), 2, roundingMode0);
      assertEquals((-476), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = IntMath.divide((-1247), 2, roundingMode0);
      assertEquals((-623), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = IntMath.divide((-1815), 2, roundingMode0);
      assertEquals((-908), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = IntMath.divide(46340, 38, roundingMode0);
      assertEquals(1219, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = IntMath.divide(7, (-2260), roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      int int0 = IntMath.divide(30, 20, roundingMode0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = IntMath.divide((-3634), Integer.MAX_VALUE, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = IntMath.divide(11, Integer.MAX_VALUE, roundingMode0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      int int0 = IntMath.divide(579, 46340, roundingMode0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = IntMath.divide((-1923), 19, roundingMode0);
      assertEquals((-102), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = IntMath.divide(8, (-635), roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        IntMath.divide(887, 4096, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      // Undeclared exception!
      try { 
        IntMath.divide(0, 0, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = IntMath.divide(977, 977, roundingMode0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        IntMath.sqrt(125, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      int int0 = IntMath.sqrt(46340, roundingMode0);
      assertEquals(215, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = IntMath.sqrt(12, roundingMode0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      int int0 = IntMath.sqrt(0, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = IntMath.sqrt(6, roundingMode0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = IntMath.sqrt(2642246, roundingMode0);
      assertEquals(1625, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      int int0 = IntMath.sqrt(1, roundingMode0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = IntMath.pow(12, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = IntMath.pow((-2), 27);
      assertEquals((-134217728), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = IntMath.pow((-2), 2);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = IntMath.pow(2, 4);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = IntMath.pow((-1), 4777);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = IntMath.pow(0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = IntMath.pow(2, 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = IntMath.pow(1, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = IntMath.pow((-1), 890);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = IntMath.pow(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = IntMath.pow((-2), 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        IntMath.log10(8, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = IntMath.log10(4644, roundingMode0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      int int0 = IntMath.log10(3, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = IntMath.log10(2, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      int int0 = IntMath.log10(2219, roundingMode0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      int int0 = IntMath.log10(60, roundingMode0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = IntMath.log10(59, roundingMode0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      int int0 = IntMath.log10(100000000, roundingMode0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = IntMath.log2(99, roundingMode0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      int int0 = IntMath.log2(46340, roundingMode0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = IntMath.log2(100000000, roundingMode0);
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      int int0 = IntMath.log2(59, roundingMode0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = IntMath.log2(16, roundingMode0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = IntMath.log2(362880, roundingMode0);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = IntMath.isPowerOfTwo(8);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = IntMath.isPowerOfTwo(342);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = IntMath.isPowerOfTwo((-8));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntMath.ceilingPowerOfTwo(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2147483647) not representable as an int
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = IntMath.ceilingPowerOfTwo(3);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = IntMath.mean(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = IntMath.saturatedSubtract(342, 342);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = IntMath.floorPowerOfTwo(25);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = IntMath.isPrime(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = IntMath.saturatedPow((-474), 18);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = IntMath.saturatedAdd(4, 0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      int int0 = IntMath.log10(1, roundingMode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      int int0 = IntMath.sqrt(4, roundingMode0);
      assertEquals(2, int0);
  }
}
