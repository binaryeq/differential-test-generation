/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:30:43 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.AbstractMapBasedMultimap;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.BoundType;
import com.google.common.collect.EmptyImmutableSetMultimap;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.ImmutableSortedMap;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Multimap;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.TreeMultimap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.NavigableSet;
import java.util.Set;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractMapBasedMultimap_ESTest extends AbstractMapBasedMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableListMultimap<BoundType, EmptyImmutableSetMultimap> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0);
      ArrayListMultimap<BoundType, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create((Multimap<? extends BoundType, ? extends EmptyImmutableSetMultimap>) immutableListMultimap0);
      Set<BoundType> set0 = arrayListMultimap0.createKeySet();
      assertTrue(set0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayListMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      Iterator<Map.Entry<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>> iterator0 = (Iterator<Map.Entry<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>>)arrayListMultimap0.entryIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayListMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      Collection<EmptyImmutableSetMultimap> collection0 = arrayListMultimap0.createUnmodifiableEmptyCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<EmptyImmutableSetMultimap> comparator0 = (Comparator<EmptyImmutableSetMultimap>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> treeMultimap0 = new TreeMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>(comparator0, comparator0);
      Set<EmptyImmutableSetMultimap> set0 = treeMultimap0.createMaybeNavigableKeySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<EmptyImmutableSetMultimap> comparator0 = (Comparator<EmptyImmutableSetMultimap>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> treeMultimap0 = new TreeMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>(comparator0, comparator0);
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      // Undeclared exception!
      try { 
        treeMultimap0.replaceValues(emptyImmutableSetMultimap0, (Iterable<? extends EmptyImmutableSetMultimap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.AbstractMapBasedMultimap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<BoundType> comparator0 = (Comparator<BoundType>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<EmptyImmutableSetMultimap> comparator1 = (Comparator<EmptyImmutableSetMultimap>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMultimap<BoundType, EmptyImmutableSetMultimap> treeMultimap0 = new TreeMultimap<BoundType, EmptyImmutableSetMultimap>(comparator0, comparator1);
      Collection<Map.Entry<BoundType, EmptyImmutableSetMultimap>> collection0 = (Collection<Map.Entry<BoundType, EmptyImmutableSetMultimap>>)treeMultimap0.entries();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayListMultimap<Object, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      Set<Object> set0 = arrayListMultimap0.createMaybeNavigableKeySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayListMultimap<Object, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<TreeMap<Integer, Integer>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super TreeMap<Integer, Integer>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      ImmutableSortedMap<Object, Collection<EmptyImmutableSetMultimap>> immutableSortedMap0 = ImmutableSortedMap.emptyMap((Comparator<? super Object>) comparator1);
      AbstractMapBasedMultimap.NavigableKeySet abstractMapBasedMultimap_NavigableKeySet0 = arrayListMultimap0.new NavigableKeySet(immutableSortedMap0);
      Object object0 = abstractMapBasedMultimap_NavigableKeySet0.lower(comparator1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayListMultimap<Object, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<TreeMap<Integer, Integer>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super TreeMap<Integer, Integer>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      ImmutableSortedMap<Object, Collection<EmptyImmutableSetMultimap>> immutableSortedMap0 = ImmutableSortedMap.emptyMap((Comparator<? super Object>) comparator1);
      AbstractMapBasedMultimap.NavigableKeySet abstractMapBasedMultimap_NavigableKeySet0 = arrayListMultimap0.new NavigableKeySet(immutableSortedMap0);
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      NavigableSet<Object> navigableSet0 = abstractMapBasedMultimap_NavigableKeySet0.headSet((Object) emptyImmutableSetMultimap0);
      assertTrue(navigableSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayListMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      AbstractMapBasedMultimap.NavigableAsMap abstractMapBasedMultimap_NavigableAsMap0 = arrayListMultimap0.new NavigableAsMap((NavigableMap<EmptyImmutableSetMultimap, Collection<EmptyImmutableSetMultimap>>) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableListMultimap<BoundType, EmptyImmutableSetMultimap> immutableListMultimap0 = ImmutableListMultimap.of(boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0);
      ArrayListMultimap<BoundType, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create((Multimap<? extends BoundType, ? extends EmptyImmutableSetMultimap>) immutableListMultimap0);
      boolean boolean0 = arrayListMultimap0.put(boundType0, emptyImmutableSetMultimap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMultimap<EmptyImmutableSetMultimap, Locale.FilteringMode> hashMultimap0 = HashMultimap.create();
      int int0 = hashMultimap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayListMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      boolean boolean0 = arrayListMultimap0.equals(emptyImmutableSetMultimap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayListMultimap<Object, EmptyImmutableSetMultimap> arrayListMultimap0 = ArrayListMultimap.create();
      ArrayListMultimap<Object, Object> arrayListMultimap1 = ArrayListMultimap.create((Multimap<?, ?>) arrayListMultimap0);
      assertNotNull(arrayListMultimap1);
  }
}
