/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:51:25 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.Monitor;
import java.nio.CharBuffer;
import java.time.Duration;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit;
import java.util.function.BooleanSupplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Monitor_ESTest extends Monitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      boolean boolean0 = true;
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      boolean boolean1 = monitor_Guard0.isSatisfied();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertTrue(boolean1 == boolean0);
      assertFalse(monitor0.isFair());
      assertTrue(boolean1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      
      Monitor monitor1 = monitor_Guard1.monitor;
      assertFalse(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean2 = monitor1.tryEnter();
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertTrue(boolean2);
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertSame(monitor1, monitor0);
      
      boolean boolean3 = monitor_Guard0.isSatisfied();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(monitor0.isFair());
      assertTrue(boolean3);
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      
      boolean boolean4 = monitor1.tryEnterIf(monitor_Guard1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertFalse(boolean4);
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertSame(monitor1, monitor0);
      
      monitor1.enter();
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertSame(monitor1, monitor0);
      
      long long0 = 3691L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean5 = monitor1.enterWhenUninterruptibly(monitor_Guard0, 3691L, timeUnit0);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertTrue(boolean5);
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertSame(monitor1, monitor0);
      
      BooleanSupplier booleanSupplier2 = null;
      // Undeclared exception!
      try { 
        monitor1.newGuard((BooleanSupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // isSatisfied
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(booleanSupplier0).getAsBoolean();
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      Monitor monitor1 = monitor_Guard0.monitor;
      assertTrue(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      monitor1.enterWhenUninterruptibly(monitor_Guard0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertFalse(monitor0.isFair());
      assertFalse(boolean0);
      
      boolean boolean1 = monitor_Guard0.isSatisfied();
      assertTrue(boolean1 == boolean0);
      assertFalse(monitor0.isFair());
      assertFalse(boolean1);
      
      Monitor monitor1 = new Monitor();
      assertFalse(monitor1.equals((Object)monitor0));
      assertFalse(monitor1.isFair());
      assertNotNull(monitor1);
      
      // Undeclared exception!
      try { 
        monitor1.enterWhen((Monitor.Guard) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      Monitor monitor1 = new Monitor(true);
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertNotNull(monitor1);
      
      boolean boolean0 = monitor1.isOccupied();
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertFalse(boolean0);
      assertNotSame(monitor1, monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor1.newGuard(booleanSupplier0);
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertNotSame(monitor1, monitor0);
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.next = null;
      assertTrue(monitor1.isFair());
      
      // Undeclared exception!
      try { 
        monitor0.enterWhen(monitor_Guard0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.next = null;
      assertTrue(monitor0.isFair());
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertTrue(monitor0.isFair());
      assertTrue(boolean0);
      
      Duration duration0 = Duration.ofNanos(64L);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plusSeconds(64L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Duration duration2 = duration0.negated();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(duration2);
      
      Duration duration3 = duration0.minusNanos(64L);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertNotNull(duration3);
      
      long long0 = duration0.getSeconds();
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertEquals(0L, long0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      
      boolean boolean1 = monitor0.enterIf(monitor_Guard0, duration0);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertTrue(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(boolean1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      
      int int0 = monitor0.getOccupiedDepth();
      assertTrue(monitor0.isFair());
      assertEquals(1, int0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      monitor0.enterInterruptibly();
      assertTrue(monitor0.isFair());
      
      Monitor monitor1 = new Monitor();
      assertFalse(monitor1.equals((Object)monitor0));
      assertFalse(monitor1.isFair());
      assertNotNull(monitor1);
      
      boolean boolean2 = monitor1.isOccupiedByCurrentThread();
      assertFalse(monitor1.equals((Object)monitor0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(monitor1.isFair());
      assertFalse(boolean2);
      assertNotSame(monitor1, monitor0);
      
      // Undeclared exception!
      try { 
        monitor1.waitFor(monitor_Guard0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = monitor0.enterIfInterruptibly(monitor_Guard0, (-2084L), timeUnit0);
      assertFalse(monitor0.isFair());
      assertTrue(boolean0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      monitor_Guard1.next = monitor_Guard0;
      assertFalse(monitor0.isFair());
      
      monitor0.leave();
      assertFalse(monitor0.isFair());
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      boolean boolean1 = monitor0.enterWhen(monitor_Guard1, 0L, timeUnit1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(boolean1 == boolean0);
      assertFalse(monitor0.isFair());
      assertTrue(boolean1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertSame(timeUnit1, timeUnit0);
      
      BooleanSupplier booleanSupplier2 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(booleanSupplier2).getAsBoolean();
      boolean boolean2 = monitor_Guard0.isSatisfied();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(monitor0.isFair());
      assertTrue(boolean2);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      
      Monitor.Guard monitor_Guard2 = monitor0.newGuard(booleanSupplier2);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotNull(monitor_Guard2);
      
      monitor_Guard1.waiterCount = 1;
      assertFalse(monitor0.isFair());
      
      boolean boolean3 = monitor0.enterIf(monitor_Guard1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(monitor0.isFair());
      assertFalse(boolean3);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotSame(monitor_Guard1, monitor_Guard2);
      
      monitor_Guard2.next = monitor_Guard1.next;
      assertFalse(monitor0.isFair());
      
      monitor_Guard0.waiterCount = (-770);
      assertFalse(monitor0.isFair());
      
      monitor_Guard1.next.waiterCount = 64;
      assertFalse(monitor0.isFair());
      
      TimeUnit timeUnit2 = TimeUnit.MINUTES;
      boolean boolean4 = monitor0.enterIf(monitor_Guard2, 378L, timeUnit2);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertTrue(boolean4);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      
      boolean boolean5 = monitor0.hasQueuedThreads();
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(monitor0.isFair());
      assertFalse(boolean5);
      
      Duration duration0 = Duration.ofNanos(0L);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.minusMinutes((-2084L));
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      boolean boolean6 = monitor0.enter(duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(monitor0.isFair());
      assertTrue(boolean6);
      assertNotSame(duration0, duration1);
      
      monitor0.leave();
      assertFalse(monitor0.isFair());
      
      int int0 = monitor0.getWaitQueueLength(monitor_Guard0);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertFalse(monitor0.isFair());
      assertEquals(64, int0);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertNotSame(monitor_Guard0, monitor_Guard2);
      
      int int1 = monitor0.getQueueLength();
      assertFalse(int1 == int0);
      assertFalse(monitor0.isFair());
      assertEquals(0, int1);
      
      boolean boolean7 = monitor0.enterWhen(monitor_Guard0, 1L, timeUnit2);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean3);
      assertFalse(monitor0.isFair());
      assertTrue(boolean7);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertNotSame(monitor_Guard0, monitor_Guard2);
      
      boolean boolean8 = monitor0.isOccupiedByCurrentThread();
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean1);
      assertFalse(monitor0.isFair());
      assertTrue(boolean8);
      
      boolean boolean9 = monitor_Guard0.isSatisfied();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean0);
      assertFalse(boolean9 == boolean3);
      assertFalse(monitor0.isFair());
      assertTrue(boolean9);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertNotSame(monitor_Guard0, monitor_Guard2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.next = null;
      assertTrue(monitor0.isFair());
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertTrue(monitor0.isFair());
      assertTrue(boolean0);
      
      Duration duration0 = Duration.ofNanos(64L);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plusSeconds(64L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Duration duration2 = duration0.negated();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotNull(duration2);
      
      Duration duration3 = duration0.minusNanos(64L);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration0));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration0);
      assertNotNull(duration3);
      
      long long0 = duration0.getSeconds();
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration1));
      assertEquals(0L, long0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration1);
      
      boolean boolean1 = monitor0.enterIf(monitor_Guard0, duration0);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertFalse(boolean1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration1);
      
      int int0 = monitor0.getOccupiedDepth();
      assertTrue(monitor0.isFair());
      assertEquals(0, int0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = monitor0.enterInterruptibly(0L, timeUnit0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(boolean2);
      
      boolean boolean3 = monitor_Guard1.isSatisfied();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertFalse(boolean3);
      assertNotSame(monitor_Guard1, monitor_Guard0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertFalse(monitor0.isFair());
      assertFalse(boolean0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      boolean boolean1 = monitor0.enterIf(monitor_Guard0, (-1464L), timeUnit1);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(boolean1 == boolean0);
      assertFalse(monitor0.isFair());
      assertFalse(boolean1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      
      Duration duration0 = Duration.ofDays((-1464L));
      assertNotNull(duration0);
      
      boolean boolean2 = monitor0.enterIfInterruptibly(monitor_Guard1, duration0);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(monitor0.isFair());
      assertFalse(boolean2);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      
      BooleanSupplier booleanSupplier2 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(booleanSupplier2).getAsBoolean();
      Monitor.Guard monitor_Guard2 = monitor0.newGuard(booleanSupplier2);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotNull(monitor_Guard2);
      
      monitor0.enterInterruptibly();
      assertFalse(monitor0.isFair());
      
      boolean boolean3 = monitor_Guard0.isSatisfied();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(monitor0.isFair());
      assertFalse(boolean3);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertNotSame(monitor_Guard0, monitor_Guard2);
      
      monitor0.enterInterruptibly();
      assertFalse(monitor0.isFair());
      
      int int0 = monitor0.getWaitQueueLength(monitor_Guard0);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertFalse(monitor0.isFair());
      assertEquals(0, int0);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertNotSame(monitor_Guard0, monitor_Guard2);
      
      boolean boolean4 = monitor0.enterIfInterruptibly(monitor_Guard2, duration0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertFalse(boolean4);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      
      BooleanSupplier booleanSupplier3 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier3).getAsBoolean();
      Monitor.Guard monitor_Guard3 = monitor0.newGuard(booleanSupplier3);
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard2));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard3, monitor_Guard1);
      assertNotSame(monitor_Guard3, monitor_Guard2);
      assertNotSame(monitor_Guard3, monitor_Guard0);
      assertNotNull(monitor_Guard3);
      
      Monitor.Guard monitor_Guard4 = monitor_Guard3.next;
      assertNull(monitor_Guard4);
      
      boolean boolean5 = monitor_Guard3.isSatisfied();
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard2));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard0));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(monitor0.isFair());
      assertFalse(boolean5);
      assertNotSame(monitor_Guard3, monitor_Guard1);
      assertNotSame(monitor_Guard3, monitor_Guard2);
      assertNotSame(monitor_Guard3, monitor_Guard0);
      
      Duration duration1 = Duration.ZERO;
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Monitor monitor1 = monitor_Guard2.monitor;
      assertFalse(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean6 = monitor1.enterWhen(monitor_Guard2, duration0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard3));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertFalse(boolean6);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      assertNotSame(duration0, duration1);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotSame(monitor_Guard2, monitor_Guard3);
      
      boolean boolean7 = monitor1.enter(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard3));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertTrue(boolean7);
      assertSame(monitor0, monitor1);
      assertNotSame(duration1, duration0);
      assertSame(monitor1, monitor0);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotSame(monitor_Guard2, monitor_Guard3);
      
      boolean boolean8 = monitor1.enterWhenUninterruptibly(monitor_Guard2, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean6);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard3));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertFalse(boolean8);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      assertNotSame(duration0, duration1);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotSame(monitor_Guard2, monitor_Guard3);
      
      Monitor monitor2 = new Monitor();
      assertFalse(monitor2.equals((Object)monitor1));
      assertFalse(monitor2.equals((Object)monitor0));
      assertFalse(monitor2.isFair());
      assertNotNull(monitor2);
      
      // Undeclared exception!
      try { 
        monitor2.enterIfInterruptibly(monitor_Guard3);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertFalse(monitor0.isFair());
      assertTrue(boolean0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean1 = monitor0.enterIf(monitor_Guard0, (-1464L), timeUnit0);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertTrue(boolean1 == boolean0);
      assertFalse(monitor0.isFair());
      assertTrue(boolean1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      
      Duration duration0 = Duration.ofDays((-1464L));
      assertNotNull(duration0);
      
      boolean boolean2 = monitor0.enterIfInterruptibly(monitor_Guard1, duration0);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(monitor0.isFair());
      assertFalse(boolean2);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      
      BooleanSupplier booleanSupplier2 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(booleanSupplier2).getAsBoolean();
      Monitor.Guard monitor_Guard2 = monitor0.newGuard(booleanSupplier2);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotNull(monitor_Guard2);
      
      monitor0.enterInterruptibly();
      assertFalse(monitor0.isFair());
      
      boolean boolean3 = monitor_Guard0.isSatisfied();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(monitor0.isFair());
      assertTrue(boolean3);
      assertNotSame(monitor_Guard0, monitor_Guard2);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      
      monitor0.enterInterruptibly();
      assertFalse(monitor0.isFair());
      
      int int0 = monitor0.getWaitQueueLength(monitor_Guard0);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertEquals(0, int0);
      assertNotSame(monitor_Guard0, monitor_Guard2);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      
      boolean boolean4 = monitor0.enterIfInterruptibly(monitor_Guard2, duration0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertTrue(boolean4);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      
      BooleanSupplier booleanSupplier3 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(booleanSupplier3).getAsBoolean();
      Monitor.Guard monitor_Guard3 = monitor0.newGuard(booleanSupplier3);
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard2));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard3, monitor_Guard0);
      assertNotSame(monitor_Guard3, monitor_Guard2);
      assertNotSame(monitor_Guard3, monitor_Guard1);
      assertNotNull(monitor_Guard3);
      
      Monitor.Guard monitor_Guard4 = monitor_Guard3.next;
      assertNull(monitor_Guard4);
      
      boolean boolean5 = monitor_Guard3.isSatisfied();
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard2));
      assertFalse(monitor_Guard3.equals((Object)monitor_Guard1));
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(monitor0.isFair());
      assertTrue(boolean5);
      assertNotSame(monitor_Guard3, monitor_Guard0);
      assertNotSame(monitor_Guard3, monitor_Guard2);
      assertNotSame(monitor_Guard3, monitor_Guard1);
      
      Duration duration1 = Duration.ZERO;
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Monitor monitor1 = monitor_Guard2.monitor;
      assertFalse(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean6 = monitor1.enterWhen(monitor_Guard2, duration0);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard3));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertTrue(boolean6);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      assertNotSame(duration0, duration1);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotSame(monitor_Guard2, monitor_Guard3);
      
      boolean boolean7 = monitor1.enter(duration1);
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard3));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertTrue(boolean7);
      assertSame(monitor0, monitor1);
      assertNotSame(duration1, duration0);
      assertSame(monitor1, monitor0);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotSame(monitor_Guard2, monitor_Guard3);
      
      boolean boolean8 = monitor1.enterWhenUninterruptibly(monitor_Guard2, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean5);
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard3));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertFalse(boolean8);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      assertNotSame(duration0, duration1);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertNotSame(monitor_Guard2, monitor_Guard1);
      assertNotSame(monitor_Guard2, monitor_Guard3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.waiterCount = 0;
      assertFalse(monitor0.isFair());
      
      Monitor monitor1 = monitor_Guard0.monitor;
      assertFalse(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean0 = monitor1.hasWaiters(monitor_Guard0);
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertFalse(boolean0);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor1.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertSame(monitor1, monitor0);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      monitor1.enter();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertSame(monitor1, monitor0);
      
      boolean boolean1 = monitor1.tryEnter();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(boolean1 == boolean0);
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertTrue(boolean1);
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertSame(monitor1, monitor0);
      
      Duration duration0 = Duration.ofNanos((-1L));
      assertNotNull(duration0);
      
      boolean boolean2 = monitor1.enterWhenUninterruptibly(monitor_Guard1, duration0);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(monitor0.isFair());
      assertFalse(monitor1.isFair());
      assertTrue(boolean2);
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertSame(monitor1, monitor0);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      
      monitor0.enterInterruptibly();
      assertFalse(monitor0.isFair());
      assertSame(monitor0, monitor1);
      
      monitor0.leave();
      assertFalse(monitor0.isFair());
      assertSame(monitor0, monitor1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertTrue(monitor0.isFair());
      assertTrue(boolean0);
      
      Monitor monitor1 = monitor_Guard0.monitor;
      assertTrue(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean1 = monitor1.tryEnter();
      assertTrue(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertTrue(boolean1);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      boolean boolean2 = monitor_Guard0.isSatisfied();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(boolean2);
      assertSame(monitor0, monitor1);
      
      boolean boolean3 = monitor1.tryEnterIf(monitor_Guard0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertFalse(boolean3);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      monitor1.enter();
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean4 = monitor1.enterWhenUninterruptibly(monitor_Guard0, 3691L, timeUnit0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertTrue(boolean4);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      long long0 = 3452L;
      monitor1.waitForUninterruptibly(monitor_Guard0);
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertSame(monitor1, monitor0);
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Duration duration0 = null;
      // Undeclared exception!
      try { 
        monitor0.enterWhenUninterruptibly(monitor_Guard0, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      Monitor monitor1 = new Monitor(true);
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertNotNull(monitor1);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor1.newGuard(booleanSupplier0);
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertNotSame(monitor1, monitor0);
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.next = null;
      assertTrue(monitor1.isFair());
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertTrue(boolean0);
      assertNotSame(monitor1, monitor0);
      
      // Undeclared exception!
      try { 
        monitor0.enterWhen(monitor_Guard0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      Monitor monitor1 = new Monitor(true);
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertNotNull(monitor1);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor1.newGuard(booleanSupplier0);
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertNotSame(monitor1, monitor0);
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.next = null;
      assertTrue(monitor1.isFair());
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertFalse(monitor1.equals((Object)monitor0));
      assertTrue(monitor1.isFair());
      assertFalse(boolean0);
      assertNotSame(monitor1, monitor0);
      
      // Undeclared exception!
      try { 
        monitor0.enterWhen(monitor_Guard0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      assertNull(monitor_Guard1);
      
      // Undeclared exception!
      try { 
        monitor0.waitForUninterruptibly((Monitor.Guard) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.next = null;
      assertTrue(monitor0.isFair());
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertTrue(monitor0.isFair());
      assertFalse(boolean0);
      
      Duration duration0 = Duration.ofNanos(64L);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plusSeconds(64L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Duration duration2 = duration0.negated();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertNotNull(duration2);
      
      Duration duration3 = duration0.minusNanos(64L);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertNotNull(duration3);
      
      long long0 = duration0.getSeconds();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertEquals(0L, long0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      
      boolean boolean1 = monitor0.enterIf(monitor_Guard0, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertFalse(boolean1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      
      int int0 = monitor0.getOccupiedDepth();
      assertTrue(monitor0.isFair());
      assertEquals(0, int0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean2 = monitor0.enterWhen(monitor_Guard0, 0L, timeUnit0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(monitor0.isFair());
      assertFalse(boolean2);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      boolean boolean3 = monitor0.enterInterruptibly(0L, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(monitor0.isFair());
      assertTrue(boolean3);
      
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      boolean boolean4 = monitor0.enterInterruptibly((-2425L), timeUnit2);
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(monitor0.isFair());
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Monitor monitor0 = new Monitor(false);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      assertNull(monitor_Guard1);
      
      monitor_Guard0.next = null;
      assertFalse(monitor0.isFair());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        monitor0.waitFor((Monitor.Guard) null, 0L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      monitor_Guard0.next = monitor_Guard0;
      assertTrue(monitor0.isFair());
      
      Duration duration0 = Duration.ofNanos(64L);
      assertNotNull(duration0);
      
      Duration duration1 = duration0.negated();
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotNull(duration1);
      
      Duration duration2 = duration0.minusNanos(64L);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotNull(duration2);
      
      long long0 = duration0.getSeconds();
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertEquals(0L, long0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      
      boolean boolean0 = monitor0.enterIf(monitor_Guard0, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(monitor0.isFair());
      assertTrue(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      
      int int0 = monitor0.getOccupiedDepth();
      assertTrue(monitor0.isFair());
      assertEquals(1, int0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean1 = monitor0.enterWhen(monitor_Guard0, 0L, timeUnit0);
      assertTrue(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(boolean1);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      boolean boolean2 = monitor0.enterInterruptibly(0L, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(monitor0.isFair());
      assertTrue(boolean2);
      
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      boolean boolean3 = monitor0.enterInterruptibly((-2425L), timeUnit2);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(monitor0.isFair());
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      Monitor.Guard monitor_Guard0 = null;
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        monitor0.waitForUninterruptibly((Monitor.Guard) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      assertNull(monitor_Guard1);
      
      long long0 = 1872L;
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      assertEquals(ChronoUnit.FOREVER, chronoUnit0);
      
      Duration duration0 = Duration.ofMinutes(1872L);
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        monitor0.enterIfInterruptibly((Monitor.Guard) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertTrue(monitor0.isFair());
      assertTrue(boolean0);
      
      Monitor monitor1 = monitor_Guard0.monitor;
      assertTrue(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean1 = monitor1.tryEnter();
      assertTrue(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertTrue(boolean1);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      boolean boolean2 = monitor_Guard0.isSatisfied();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(monitor0.isFair());
      assertTrue(boolean2);
      assertSame(monitor0, monitor1);
      
      boolean boolean3 = monitor1.tryEnterIf(monitor_Guard0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertTrue(boolean3);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      monitor1.enter();
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      Monitor monitor1 = monitor_Guard0.monitor;
      assertTrue(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean0 = monitor1.tryEnter();
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertTrue(boolean0);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      boolean boolean1 = monitor_Guard0.isSatisfied();
      assertTrue(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(boolean1);
      assertSame(monitor0, monitor1);
      
      boolean boolean2 = monitor1.tryEnterIf(monitor_Guard0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertFalse(boolean2);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      monitor1.enter();
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean3 = monitor1.enterWhenUninterruptibly(monitor_Guard0, 3691L, timeUnit0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertTrue(boolean3);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertTrue(monitor0.isFair());
      assertFalse(boolean0);
      
      Monitor monitor1 = monitor_Guard0.monitor;
      assertTrue(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      boolean boolean1 = monitor1.tryEnter();
      assertFalse(boolean1 == boolean0);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertTrue(boolean1);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      boolean boolean2 = monitor_Guard0.isSatisfied();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(monitor0.isFair());
      assertFalse(boolean2);
      assertSame(monitor0, monitor1);
      
      boolean boolean3 = monitor1.tryEnterIf(monitor_Guard0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertFalse(boolean3);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      monitor1.enter();
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean4 = monitor1.enterWhenUninterruptibly(monitor_Guard0, 3691L, timeUnit0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(monitor0.isFair());
      assertTrue(monitor1.isFair());
      assertFalse(boolean4);
      assertSame(monitor0, monitor1);
      assertSame(monitor1, monitor0);
      
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(monitor0.isFair());
      assertSame(monitor0, monitor1);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      long long0 = 3452L;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        monitor0.enterWhenUninterruptibly(monitor_Guard0, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Monitor monitor0 = new Monitor(false);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      Monitor monitor1 = new Monitor();
      assertFalse(monitor1.equals((Object)monitor0));
      assertFalse(monitor1.isFair());
      assertNotNull(monitor1);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor1.newGuard(booleanSupplier0);
      assertFalse(monitor1.equals((Object)monitor0));
      assertFalse(monitor1.isFair());
      assertNotSame(monitor1, monitor0);
      assertNotNull(monitor_Guard0);
      
      long long0 = (-3594L);
      Duration duration0 = Duration.ofSeconds((-1345L));
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        monitor0.enterIf(monitor_Guard0, duration0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertTrue(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertTrue(monitor0.isFair());
      assertFalse(boolean0);
      
      int int0 = monitor0.getWaitQueueLength(monitor_Guard0);
      assertTrue(monitor0.isFair());
      assertEquals(0, int0);
      
      Monitor monitor1 = new Monitor();
      assertFalse(monitor1.equals((Object)monitor0));
      assertFalse(monitor1.isFair());
      assertNotNull(monitor1);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard1 = monitor1.newGuard(booleanSupplier1);
      assertFalse(monitor1.equals((Object)monitor0));
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor1.isFair());
      assertNotSame(monitor1, monitor0);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      Monitor.Guard monitor_Guard2 = monitor_Guard1.next;
      assertNull(monitor_Guard2);
      
      monitor_Guard1.next = null;
      assertFalse(monitor1.isFair());
      
      monitor_Guard1.waiterCount = 0;
      assertFalse(monitor1.isFair());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      monitor0.enterInterruptibly();
      assertFalse(monitor0.equals((Object)monitor1));
      assertTrue(monitor0.isFair());
      assertNotSame(monitor0, monitor1);
      
      // Undeclared exception!
      try { 
        monitor0.enterIf(monitor_Guard1, 1L, timeUnit0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      assertFalse(monitor0.isFair());
      assertNotNull(monitor0);
      
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      assertFalse(monitor0.isFair());
      assertNotNull(monitor_Guard0);
      
      boolean boolean0 = monitor_Guard0.isSatisfied();
      assertFalse(monitor0.isFair());
      assertFalse(boolean0);
      
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertFalse(monitor0.isFair());
      assertNotSame(monitor_Guard1, monitor_Guard0);
      assertNotNull(monitor_Guard1);
      
      monitor_Guard0.next = monitor_Guard1;
      assertFalse(monitor0.isFair());
      
      Monitor.Guard monitor_Guard2 = monitor_Guard0.next;
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertSame(monitor_Guard2, monitor_Guard1);
      assertNotNull(monitor_Guard2);
      
      boolean boolean1 = monitor_Guard2.isSatisfied();
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard2));
      assertFalse(monitor_Guard0.equals((Object)monitor_Guard1));
      assertFalse(monitor_Guard2.equals((Object)monitor_Guard0));
      assertTrue(boolean1 == boolean0);
      assertFalse(monitor0.isFair());
      assertFalse(boolean1);
      assertNotSame(monitor_Guard0, monitor_Guard2);
      assertNotSame(monitor_Guard0, monitor_Guard1);
      assertNotSame(monitor_Guard2, monitor_Guard0);
      assertSame(monitor_Guard2, monitor_Guard1);
      
      Monitor monitor1 = monitor_Guard2.monitor;
      assertFalse(monitor1.isFair());
      assertSame(monitor1, monitor0);
      assertNotNull(monitor1);
      
      monitor_Guard0.waiterCount = (-1);
      assertFalse(monitor0.isFair());
      
      boolean boolean2 = monitor_Guard1.isSatisfied();
      assertFalse(monitor_Guard1.equals((Object)monitor_Guard0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(monitor0.isFair());
      assertFalse(boolean2);
      assertSame(monitor0, monitor1);
      assertSame(monitor_Guard1, monitor_Guard2);
      assertNotSame(monitor_Guard1, monitor_Guard0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        monitor1.waitFor(monitor_Guard2, 0L, timeUnit0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, true).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      monitor_Guard0.isSatisfied();
      Monitor monitor1 = monitor_Guard0.monitor;
      monitor1.tryEnter();
      monitor_Guard0.isSatisfied();
      monitor1.tryEnterIf(monitor_Guard0);
      monitor1.enter();
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      monitor1.enterWhenUninterruptibly(monitor_Guard0, 3691L, timeUnit0);
      monitor0.newGuard(booleanSupplier1);
      monitor1.waitForUninterruptibly(monitor_Guard0);
      // Undeclared exception!
      try { 
        monitor0.enterWhenUninterruptibly(monitor_Guard0, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      monitor_Guard0.next = null;
      int int0 = (-1);
      monitor_Guard0.isSatisfied();
      // Undeclared exception!
      try { 
        monitor0.waitForUninterruptibly(monitor_Guard0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      monitor_Guard0.next = null;
      monitor_Guard0.isSatisfied();
      assertFalse(monitor0.isFair());
      
      // Undeclared exception!
      try { 
        monitor0.waitForUninterruptibly(monitor_Guard0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Monitor monitor0 = new Monitor(false);
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      monitor_Guard0.waiterCount = 469;
      monitor_Guard0.isSatisfied();
      monitor_Guard0.waiterCount = (-4158);
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      monitor_Guard0.isSatisfied();
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      monitor_Guard0.waiterCount = (-3411);
      // Undeclared exception!
      try { 
        monitor0.enterWhen((Monitor.Guard) null, 0L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Monitor monitor0 = new Monitor(false);
      monitor0.isOccupiedByCurrentThread();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Duration.parse(charBuffer0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text cannot be parsed to a Duration
         //
         verifyException("java.time.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        monitor0.leave();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      monitor_Guard0.isSatisfied();
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      monitor0.enterIf(monitor_Guard0, (-1464L), timeUnit0);
      Duration duration0 = Duration.ofDays((-1464L));
      monitor0.enterIfInterruptibly(monitor_Guard1, duration0);
      BooleanSupplier booleanSupplier2 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(booleanSupplier2).getAsBoolean();
      Monitor.Guard monitor_Guard2 = monitor0.newGuard(booleanSupplier2);
      monitor0.enterInterruptibly();
      monitor_Guard0.isSatisfied();
      int int0 = monitor0.getWaitQueueLength(monitor_Guard0);
      assertEquals(0, int0);
      
      monitor0.enterIfInterruptibly(monitor_Guard2, duration0);
      BooleanSupplier booleanSupplier3 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier3).getAsBoolean();
      Monitor.Guard monitor_Guard3 = monitor0.newGuard(booleanSupplier3);
      Monitor.Guard monitor_Guard4 = monitor_Guard3.next;
      monitor_Guard3.isSatisfied();
      Duration duration1 = Duration.ZERO;
      Monitor monitor1 = monitor_Guard2.monitor;
      boolean boolean0 = monitor1.enterWhen(monitor_Guard2, duration0);
      boolean boolean1 = monitor1.enter(duration1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = monitor1.enterWhenUninterruptibly(monitor_Guard2, duration0);
      assertFalse(boolean2);
      assertFalse(monitor1.isFair());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      long long0 = (-2084L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      monitor0.enterIfInterruptibly(monitor_Guard0, (-2084L), timeUnit0);
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard1 = monitor0.newGuard(booleanSupplier1);
      monitor_Guard1.next = monitor_Guard0;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        monitor0.leave();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null, ";Q7@pT~_;J");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "]CS~c8c", (-1097L));
      monitor0.hasQueuedThread(mockThread1);
      assertFalse(monitor0.isFair());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor monitor1 = new Monitor(false);
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor1.newGuard(booleanSupplier1);
      // Undeclared exception!
      try { 
        monitor0.getWaitQueueLength(monitor_Guard0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Monitor monitor0 = new Monitor(false);
      BooleanSupplier booleanSupplier0 = null;
      // Undeclared exception!
      try { 
        monitor0.newGuard((BooleanSupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // isSatisfied
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      Monitor.Guard monitor_Guard1 = monitor_Guard0.next;
      monitor_Guard0.isSatisfied();
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        monitor0.enterWhenUninterruptibly((Monitor.Guard) null, 1L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      monitor0.getQueueLength();
      monitor0.getOccupiedDepth();
      assertFalse(monitor0.isFair());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      BooleanSupplier booleanSupplier0 = null;
      // Undeclared exception!
      try { 
        monitor0.newGuard((BooleanSupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // isSatisfied
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Monitor monitor0 = new Monitor(true);
      Duration duration0 = Duration.ofMinutes((-1L));
      Duration duration1 = Duration.from(duration0);
      Object object0 = new Object();
      duration1.equals(object0);
      monitor0.enterInterruptibly(duration1);
      boolean boolean0 = monitor0.isFair();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier0).getAsBoolean();
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean1 = monitor0.enterWhen(monitor_Guard0, (-1603L), timeUnit0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Monitor monitor0 = new Monitor();
      BooleanSupplier booleanSupplier0 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      Monitor.Guard monitor_Guard0 = monitor0.newGuard(booleanSupplier0);
      monitor_Guard0.waiterCount = 0;
      Monitor monitor1 = monitor_Guard0.monitor;
      boolean boolean0 = monitor1.hasWaiters(monitor_Guard0);
      BooleanSupplier booleanSupplier1 = mock(BooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(booleanSupplier1).getAsBoolean();
      Monitor.Guard monitor_Guard1 = monitor1.newGuard(booleanSupplier1);
      monitor1.enter();
      monitor1.tryEnter();
      Duration duration0 = Duration.ofNanos((-1L));
      boolean boolean1 = monitor1.enterWhenUninterruptibly(monitor_Guard1, duration0);
      assertTrue(boolean1 == boolean0);
      
      monitor0.enterInterruptibly();
      monitor0.leave();
      assertFalse(monitor0.isFair());
  }
}
