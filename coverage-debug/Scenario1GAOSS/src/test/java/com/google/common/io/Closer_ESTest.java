/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:29:39 GMT 2024
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.io.Closer;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Closer_ESTest extends Closer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLTimeoutException0, class0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Closer.SuppressingSuppressor closer_SuppressingSuppressor0 = Closer.SuppressingSuppressor.tryCreate();
      MockFileWriter mockFileWriter0 = new MockFileWriter("q8bH?");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      closer_SuppressingSuppressor0.suppress(mockFileWriter0, sQLException0, sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Closer closer0 = Closer.create();
      File file0 = MockFile.createTempFile("+dEB=eE >1", "");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      closer0.register(mockFileReader0);
      closer0.close();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<SQLWarning> class0 = SQLWarning.class;
      try { 
        closer0.rethrow((Throwable) sQLWarning0, class0, class0);
        fail("Expecting exception: SQLWarning");
      
      } catch(SQLWarning e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTransientException sQLTransientException0 = new SQLTransientException("I[S[;)k\"u3L", "I[S[;)k\"u3L");
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLTransientException0, class0, class0);
        fail("Expecting exception: SQLTransientException");
      
      } catch(SQLTransientException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      try { 
        closer0.rethrow((Throwable) sQLTransientConnectionException0, class0, class0);
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(SQLTransientConnectionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Be5Tb|~24`FW");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      try { 
        closer0.rethrow((Throwable) sQLTransactionRollbackException0, class0, class0);
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(SQLTransactionRollbackException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLTimeoutException0, class0, class0);
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(SQLTimeoutException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      try { 
        closer0.rethrow((Throwable) sQLSyntaxErrorException0, class0, class0);
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(SQLSyntaxErrorException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLRecoverableException0, class0, class0);
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(SQLRecoverableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      try { 
        closer0.rethrow((Throwable) sQLNonTransientException0, class0, class0);
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(SQLNonTransientException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLNonTransientConnectionException0, class0, class0);
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(SQLNonTransientConnectionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      try { 
        closer0.rethrow((Throwable) sQLInvalidAuthorizationSpecException0, class0, class0);
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(SQLInvalidAuthorizationSpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      try { 
        closer0.rethrow((Throwable) sQLIntegrityConstraintViolationException0, class0, class0);
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(SQLIntegrityConstraintViolationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      try { 
        closer0.rethrow((Throwable) sQLFeatureNotSupportedException0, class0, class0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLException sQLException0 = new SQLException("com.google.common.io.Closer$LoggingSuppressor", "com.google.common.io.Closer$LoggingSuppressor");
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLException0, class0, class0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      try { 
        closer0.rethrow((Throwable) sQLDataException0, class0, class0);
        fail("Expecting exception: SQLDataException");
      
      } catch(SQLDataException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Closer closer0 = Closer.create();
      DataTruncation dataTruncation0 = new DataTruncation((-3676), false, false, (-3676), (-3676));
      Class<DataTruncation> class0 = DataTruncation.class;
      try { 
        closer0.rethrow((Throwable) dataTruncation0, class0, class0);
        fail("Expecting exception: DataTruncation");
      
      } catch(DataTruncation e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Closer closer0 = Closer.create();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) batchUpdateException0, class0, class0);
        fail("Expecting exception: BatchUpdateException");
      
      } catch(BatchUpdateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLException sQLException0 = new SQLException("", "addSuppressed");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      try { 
        closer0.rethrow((Throwable) sQLException0, class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: 
         //
         verifyException("com.google.common.io.Closer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Closer closer0 = Closer.create();
      MockException mockException0 = new MockException();
      Class<MockException> class0 = MockException.class;
      try { 
        closer0.rethrow((Throwable) mockException0, class0, class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Closer closer0 = Closer.create();
      MockIOException mockIOException0 = new MockIOException();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      try { 
        closer0.rethrow((Throwable) mockIOException0, class0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLTransientException0, class0);
        fail("Expecting exception: SQLTransientException");
      
      } catch(SQLTransientException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLTransientConnectionException0, class0);
        fail("Expecting exception: SQLTransientConnectionException");
      
      } catch(SQLTransientConnectionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      try { 
        closer0.rethrow((Throwable) sQLTransactionRollbackException0, class0);
        fail("Expecting exception: SQLTransactionRollbackException");
      
      } catch(SQLTransactionRollbackException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Closer closer0 = Closer.create();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLTimeoutException0, class0);
        fail("Expecting exception: SQLTimeoutException");
      
      } catch(SQLTimeoutException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      try { 
        closer0.rethrow((Throwable) sQLSyntaxErrorException0, class0);
        fail("Expecting exception: SQLSyntaxErrorException");
      
      } catch(SQLSyntaxErrorException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("z6)s=LwD]cLh|", "z6)s=LwD]cLh|");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      try { 
        closer0.rethrow((Throwable) sQLRecoverableException0, class0);
        fail("Expecting exception: SQLRecoverableException");
      
      } catch(SQLRecoverableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      try { 
        closer0.rethrow((Throwable) sQLNonTransientException0, class0);
        fail("Expecting exception: SQLNonTransientException");
      
      } catch(SQLNonTransientException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      try { 
        closer0.rethrow((Throwable) sQLNonTransientConnectionException0, class0);
        fail("Expecting exception: SQLNonTransientConnectionException");
      
      } catch(SQLNonTransientConnectionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLInvalidAuthorizationSpecException0, class0);
        fail("Expecting exception: SQLInvalidAuthorizationSpecException");
      
      } catch(SQLInvalidAuthorizationSpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLIntegrityConstraintViolationException0, class0);
        fail("Expecting exception: SQLIntegrityConstraintViolationException");
      
      } catch(SQLIntegrityConstraintViolationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLFeatureNotSupportedException0, class0);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLException0, class0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Closer closer0 = Closer.create();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLDataException0, class0);
        fail("Expecting exception: SQLDataException");
      
      } catch(SQLDataException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Closer closer0 = Closer.create();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")|}d(zU`%.kJ0z\"z=", hashMap0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      try { 
        closer0.rethrow((Throwable) sQLClientInfoException0, class0);
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(SQLClientInfoException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Closer closer0 = Closer.create();
      DataTruncation dataTruncation0 = new DataTruncation(3872, false, false, 3872, 3872);
      Class<DataTruncation> class0 = DataTruncation.class;
      try { 
        closer0.rethrow((Throwable) dataTruncation0, class0);
        fail("Expecting exception: DataTruncation");
      
      } catch(DataTruncation e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Closer closer0 = Closer.create();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) batchUpdateException0, class0);
        fail("Expecting exception: BatchUpdateException");
      
      } catch(BatchUpdateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Closer.SuppressingSuppressor closer_SuppressingSuppressor0 = Closer.SuppressingSuppressor.tryCreate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Closer closer0 = new Closer(closer_SuppressingSuppressor0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      try { 
        closer0.rethrow((Throwable) sQLFeatureNotSupportedException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.google.common.io.Closer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Closer closer0 = Closer.create();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      try { 
        closer0.rethrow((Throwable) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Closer closer0 = Closer.create();
      MockException mockException0 = new MockException();
      Class<MockException> class0 = MockException.class;
      try { 
        closer0.rethrow((Throwable) mockException0, class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Closer closer0 = Closer.create();
      MockIOException mockIOException0 = new MockIOException();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      try { 
        closer0.rethrow((Throwable) mockIOException0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Closer closer0 = Closer.create();
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        closer0.rethrow((Throwable) mockThrowable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.google.common.io.Closer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Closer closer0 = Closer.create();
      // Undeclared exception!
      try { 
        closer0.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Closer closer0 = null;
      try {
        closer0 = new Closer((Closer.Suppressor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Closer.SuppressingSuppressor closer_SuppressingSuppressor0 = Closer.SuppressingSuppressor.tryCreate();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("OjG~");
      closer_SuppressingSuppressor0.suppress(pipedInputStream0, (Throwable) null, sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Closer closer0 = Closer.create();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      closer0.register(mockFileReader0);
      closer0.register(mockFileReader0);
      // Undeclared exception!
      try { 
        closer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Closer closer0 = Closer.create();
      MockFileReader mockFileReader0 = closer0.register((MockFileReader) null);
      assertNull(mockFileReader0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Closer.LoggingSuppressor closer_LoggingSuppressor0 = Closer.LoggingSuppressor.INSTANCE;
      Closer closer0 = new Closer(closer_LoggingSuppressor0);
      closer_LoggingSuppressor0.suppress(closer0, (Throwable) null, (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Closer.LoggingSuppressor closer_LoggingSuppressor0 = new Closer.LoggingSuppressor();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Closer.SuppressingSuppressor closer_SuppressingSuppressor0 = Closer.SuppressingSuppressor.tryCreate();
      Closer closer0 = new Closer(closer_SuppressingSuppressor0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLClientInfoException0, class0, class0);
        fail("Expecting exception: SQLClientInfoException");
      
      } catch(SQLClientInfoException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Closer closer0 = Closer.create();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        closer0.rethrow((Throwable) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Closer.SuppressingSuppressor closer_SuppressingSuppressor0 = Closer.SuppressingSuppressor.tryCreate();
      Closer closer0 = new Closer(closer_SuppressingSuppressor0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<SQLException> class0 = SQLException.class;
      try { 
        closer0.rethrow((Throwable) sQLWarning0, class0);
        fail("Expecting exception: SQLWarning");
      
      } catch(SQLWarning e) {
      }
  }
}
