/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:08:32 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.AsyncCallable;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.TrustedListenableFutureTask;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientException;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TrustedListenableFutureTask_ESTest extends TrustedListenableFutureTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Callable<Comparable<SQLTransientException>> callable0 = (Callable<Comparable<SQLTransientException>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Comparable<SQLTransientException>> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Comparable<SQLTransientException>>(callable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.afterDone();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        TrustedListenableFutureTask.create((Callable<Delayed>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TrustedListenableFutureTask.create((AsyncCallable<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = null;
      try {
        trustedListenableFutureTask0 = new TrustedListenableFutureTask<Object>((Callable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.afterDone();
      String string0 = trustedListenableFutureTask0.pendingToString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.afterDone();
      boolean boolean0 = trustedListenableFutureTask0.cancel(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      boolean boolean0 = trustedListenableFutureTask0.cancel(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      trustedListenableFutureTask0.afterDone();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(trustedListenableFutureTask0, scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(callable0);
      String string0 = trustedListenableFutureTask0.pendingToString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncCallable0).call();
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      Integer integer0 = new Integer(0);
      TrustedListenableFutureTask<Integer> trustedListenableFutureTask1 = TrustedListenableFutureTask.create((Runnable) trustedListenableFutureTask0, integer0);
      trustedListenableFutureTask1.run();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncCallable<Object> asyncCallable0 = (AsyncCallable<Object>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Object> trustedListenableFutureTask0 = TrustedListenableFutureTask.create(asyncCallable0);
      String string0 = trustedListenableFutureTask0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncCallable<SQLRecoverableException> asyncCallable0 = (AsyncCallable<SQLRecoverableException>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncCallable0).call();
      TrustedListenableFutureTask<SQLRecoverableException> trustedListenableFutureTask0 = new TrustedListenableFutureTask<SQLRecoverableException>(asyncCallable0);
      trustedListenableFutureTask0.run();
  }
}
