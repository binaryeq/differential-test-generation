/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:41:05 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.RegularImmutableBiMap;
import java.lang.reflect.Array;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegularImmutableBiMap_ESTest extends RegularImmutableBiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Map.Entry<Integer, Object>[] map_EntryArray0 = (Map.Entry<Integer, Object>[]) Array.newInstance(Map.Entry.class, 1);
      // Undeclared exception!
      try { 
        RegularImmutableBiMap.fromEntryArray(17, (Map.Entry<Integer, Object>[]) map_EntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000001 (java.lang.Integer@0000000002) must not be greater than size (java.lang.Integer@0000000003)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Map.Entry<Object, Object>[] map_EntryArray0 = (Map.Entry<Object, Object>[]) Array.newInstance(Map.Entry.class, 0);
      ImmutableBiMap<Object, Object> immutableBiMap0 = RegularImmutableBiMap.fromEntries((Map.Entry<Object, Object>[]) map_EntryArray0);
      assertEquals(0, immutableBiMap0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RegularImmutableBiMap<Object, Object> regularImmutableBiMap0 = RegularImmutableBiMap.EMPTY;
      ImmutableSet<Object> immutableSet0 = regularImmutableBiMap0.keySet();
      assertEquals(0, immutableSet0.size());
  }
}
