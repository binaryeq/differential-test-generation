/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:45:25 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.CompactHashing;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompactHashing_ESTest extends CompactHashing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = CompactHashing.createTable(32);
      int[] intArray0 = new int[2];
      Object[] objectArray0 = new Object[9];
      int int0 = CompactHashing.remove(object0, object0, 16, object0, intArray0, objectArray0, objectArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[6];
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        CompactHashing.remove(object0, object0, 255, (Object) null, intArray0, objectArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = CompactHashing.createTable(32);
      Object object1 = new Object();
      int[] intArray0 = new int[2];
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        CompactHashing.remove(object0, object1, 16, object1, intArray0, objectArray0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to [I
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = CompactHashing.newCapacity(32);
      assertEquals(66, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactHashing.tableSet((Object) null, 1005, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = CompactHashing.createTable(32);
      // Undeclared exception!
      try { 
        CompactHashing.tableSet(object0, 1569, 1569);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1569
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = CompactHashing.createTable(32);
      // Undeclared exception!
      try { 
        CompactHashing.tableSet(object0, 1569, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1569
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = CompactHashing.createTable(256);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = CompactHashing.createTable(2);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = CompactHashing.createTable(2048);
      int int0 = CompactHashing.tableGet(object0, 1040);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = CompactHashing.createTable(2048);
      CompactHashing.tableSet(object0, 1050, 2048);
      int int0 = CompactHashing.tableGet(object0, 1050);
      assertEquals(2048, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = CompactHashing.newCapacity((-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = CompactHashing.newCapacity((-1984));
      assertEquals((-7932), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = CompactHashing.maskCombine(1073741823, 1073741823, 1073741823);
      assertEquals(1073741823, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = CompactHashing.maskCombine((-7932), 0, 0);
      assertEquals((-7932), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = CompactHashing.getNext((-1252), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = CompactHashing.getNext((-960), (-1820));
      assertEquals((-1984), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = CompactHashing.getHashPrefix(1518, 0);
      assertEquals(1518, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = CompactHashing.getHashPrefix((-532), 8);
      assertEquals((-540), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactHashing.tableGet((Object) null, (-1363));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompactHashing.tableGet(object0, 3298);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to [I
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = CompactHashing.createTable(65536);
      // Undeclared exception!
      try { 
        CompactHashing.tableGet(object0, 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65536
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompactHashing.tableClear(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to [I
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = CompactHashing.newCapacity(4285);
      assertEquals(8572, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompactHashing.tableSet(object0, 931, 931);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to [I
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = CompactHashing.createTable(65536);
      int[] intArray0 = new int[10];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        CompactHashing.remove(object0, object0, 65536, object0, intArray0, objectArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65536
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactHashing.tableClear((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = CompactHashing.createTable(131072);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = CompactHashing.createTable(65536);
      CompactHashing.tableClear(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactHashing.createTable(982);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be power of 2 between 2^1 and 2^30: 982
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactHashing.createTable(1073741845);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be power of 2 between 2^1 and 2^30: 1073741845
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = CompactHashing.createTable(32);
      CompactHashing.tableClear(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactHashing.createTable((-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be power of 2 between 2^1 and 2^30: -7
         //
         verifyException("com.google.common.collect.CompactHashing", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = CompactHashing.maskCombine(3589, 65536, 3589);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = CompactHashing.getHashPrefix(1073741823, 1073741823);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = CompactHashing.getNext(32, 32);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = CompactHashing.tableSize(65536);
      assertEquals(131072, int0);
  }
}
