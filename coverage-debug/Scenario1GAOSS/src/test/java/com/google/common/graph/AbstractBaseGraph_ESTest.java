/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:02:45 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardNetwork;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import com.google.common.hash.BloomFilter;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractBaseGraph_ESTest extends AbstractBaseGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<SequenceInputStream, SequenceInputStream> standardValueGraph0 = new StandardValueGraph<SequenceInputStream, SequenceInputStream>(graphBuilder0);
      Set<EndpointPair<SequenceInputStream>> set0 = standardValueGraph0.edges();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Object, Object> standardNetwork0 = new StandardNetwork<Object, Object>(networkBuilder0);
      EndpointPair<Object> endpointPair0 = EndpointPair.ordered((Object) standardNetwork0, (Object) networkBuilder0);
      ElementOrder<Object> elementOrder0 = ElementOrder.unordered();
      Map<MockFile, GraphConnections<MockFile, BloomFilter<MockFile>>> map0 = elementOrder0.createMap(64);
      StandardValueGraph<MockFile, BloomFilter<MockFile>> standardValueGraph0 = new StandardValueGraph<MockFile, BloomFilter<MockFile>>(networkBuilder0, map0, 64);
      ImmutableValueGraph<MockFile, BloomFilter<MockFile>> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<MockFile, BloomFilter<MockFile>>) standardValueGraph0);
      boolean boolean0 = immutableValueGraph0.isOrderingCompatible(endpointPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      Integer integer0 = new Integer(23);
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered((Object) graphBuilder0, (Object) integer0);
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(graphBuilder0);
      boolean boolean0 = standardMutableGraph0.isOrderingCompatible(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<EndpointPair<Integer>, Integer> standardValueGraph0 = new StandardValueGraph<EndpointPair<Integer>, Integer>(graphBuilder0);
      ElementOrder<EndpointPair<Integer>> elementOrder0 = standardValueGraph0.incidentEdgeOrder();
      assertEquals(ElementOrder.Type.UNORDERED, elementOrder0.type());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(graphBuilder0);
      Integer integer0 = new Integer((-759));
      boolean boolean0 = standardMutableGraph0.hasEdgeConnecting(integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableValueGraph<Integer, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Object>(networkBuilder0);
      long long0 = standardMutableValueGraph0.edgeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      ElementOrder<Integer> elementOrder0 = ElementOrder.unordered();
      Map<Integer, GraphConnections<Integer, Object>> map0 = elementOrder0.createMap(1018);
      StandardValueGraph<Integer, Object> standardValueGraph0 = new StandardValueGraph<Integer, Object>(valueGraphBuilder0, map0, 1685L);
      ImmutableValueGraph<Integer, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Integer, Object>) standardValueGraph0);
      long long0 = immutableValueGraph0.edgeCount();
      assertEquals(1685L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      Integer integer0 = new Integer(23);
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered((Object) graphBuilder0, (Object) integer0);
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.validateEndpoints(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch: unordered endpoints cannot be used with directed graphs
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardMutableValueGraph<SequenceInputStream, SequenceInputStream> standardMutableValueGraph0 = new StandardMutableValueGraph<SequenceInputStream, SequenceInputStream>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.outDegree((SequenceInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<SequenceInputStream, SequenceInputStream> standardValueGraph0 = new StandardValueGraph<SequenceInputStream, SequenceInputStream>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.isOrderingCompatible((EndpointPair<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.AbstractBaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<SequenceInputStream, SequenceInputStream> standardValueGraph0 = new StandardValueGraph<SequenceInputStream, SequenceInputStream>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.incidentEdges((SequenceInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, Integer> standardValueGraph0 = new StandardValueGraph<Object, Integer>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.incidentEdges(graphBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node com.google.common.graph.GraphBuilder@3 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<Integer, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Integer>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.inDegree((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<Object, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Object>(graphBuilder0);
      ImmutableGraph<Object> immutableGraph0 = new ImmutableGraph<Object>(standardMutableValueGraph0);
      // Undeclared exception!
      try { 
        immutableGraph0.hasEdgeConnecting((Object) null, (Object) standardMutableValueGraph0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Integer, EndpointPair<Object>> standardValueGraph0 = new StandardValueGraph<Integer, EndpointPair<Object>>(graphBuilder0);
      ImmutableValueGraph<Integer, EndpointPair<Object>> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Integer, EndpointPair<Object>>) standardValueGraph0);
      ImmutableGraph<Integer> immutableGraph0 = immutableValueGraph0.asGraph();
      // Undeclared exception!
      try { 
        immutableGraph0.hasEdgeConnecting((EndpointPair<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<SequenceInputStream, SequenceInputStream> standardValueGraph0 = new StandardValueGraph<SequenceInputStream, SequenceInputStream>(valueGraphBuilder0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        standardValueGraph0.degree(sequenceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node java.io.SequenceInputStream@445540f6 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Integer, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Integer>(networkBuilder0);
      Integer integer0 = new Integer(1);
      standardMutableValueGraph0.addNode(integer0);
      int int0 = standardMutableValueGraph0.degree(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      NetworkBuilder<Object, Object> networkBuilder1 = networkBuilder0.allowsSelfLoops(true);
      StandardMutableValueGraph<Integer, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Integer>(networkBuilder1);
      Integer integer0 = new Integer(40);
      standardMutableValueGraph0.addNode(integer0);
      int int0 = standardMutableValueGraph0.degree(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<SequenceInputStream, SequenceInputStream> standardValueGraph0 = new StandardValueGraph<SequenceInputStream, SequenceInputStream>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.degree((SequenceInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableGraph<EndpointPair<Object>> standardMutableGraph0 = new StandardMutableGraph<EndpointPair<Object>>(graphBuilder0);
      ImmutableGraph<EndpointPair<Object>> immutableGraph0 = ImmutableGraph.copyOf((Graph<EndpointPair<Object>>) standardMutableGraph0);
      Integer integer0 = new Integer(0);
      EndpointPair<Object> endpointPair0 = EndpointPair.ordered((Object) immutableGraph0, (Object) integer0);
      // Undeclared exception!
      try { 
        immutableGraph0.outDegree(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node <isDirected: true, allowsSelfLoops: false, nodes: [], edges: [] -> 0> is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, Integer> standardValueGraph0 = new StandardValueGraph<Object, Integer>(graphBuilder0);
      Integer integer0 = new Integer(232);
      // Undeclared exception!
      try { 
        standardValueGraph0.inDegree(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node 232 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      NetworkBuilder<Object, Object> networkBuilder1 = networkBuilder0.allowsSelfLoops(true);
      StandardMutableValueGraph<Integer, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Integer>(networkBuilder1);
      Integer integer0 = new Integer(40);
      standardMutableValueGraph0.addNode(integer0);
      int int0 = standardMutableValueGraph0.inDegree(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      StandardValueGraph<SequenceInputStream, SequenceInputStream> standardValueGraph0 = new StandardValueGraph<SequenceInputStream, SequenceInputStream>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.degree((SequenceInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardMutableGraph<Comparable<Object>> standardMutableGraph0 = new StandardMutableGraph<Comparable<Object>>(valueGraphBuilder0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EndpointPair<SequenceInputStream> endpointPair0 = EndpointPair.of((Graph<?>) standardMutableGraph0, sequenceInputStream0, sequenceInputStream0);
      standardMutableGraph0.validateEndpoints(endpointPair0);
  }
}
