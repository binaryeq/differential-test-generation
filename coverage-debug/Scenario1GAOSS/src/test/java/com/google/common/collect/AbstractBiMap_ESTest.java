/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:29:22 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.AbstractBiMap;
import com.google.common.collect.BoundType;
import com.google.common.collect.EnumBiMap;
import com.google.common.collect.EnumHashBiMap;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractBiMap_ESTest extends AbstractBiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumHashBiMap<Locale.FilteringMode, Locale.FilteringMode> enumHashBiMap0 = EnumHashBiMap.create(class0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = enumHashBiMap0.put(locale_FilteringMode0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = enumHashBiMap0.put(locale_FilteringMode0, locale_FilteringMode2);
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode3);
      
      Locale.FilteringMode locale_FilteringMode4 = enumHashBiMap0.put(locale_FilteringMode0, locale_FilteringMode1);
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumHashBiMap<BoundType, Integer> enumHashBiMap0 = EnumHashBiMap.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      Integer integer0 = enumHashBiMap0.forcePut(boundType0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumHashBiMap<BoundType, BoundType> enumHashBiMap0 = EnumHashBiMap.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      enumHashBiMap0.forcePut(boundType0, boundType0);
      EnumBiMap<BoundType, BoundType> enumBiMap0 = EnumBiMap.create((Map<BoundType, BoundType>) enumHashBiMap0);
      Set<BoundType> set0 = enumBiMap0.values();
      assertTrue(set0.contains(boundType0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumHashBiMap<Locale.Category, Integer> enumHashBiMap0 = EnumHashBiMap.create(class0);
      ConcurrentSkipListMap<Integer, Locale.Category> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, Locale.Category>();
      AbstractBiMap<Integer, Locale.Category> abstractBiMap0 = enumHashBiMap0.makeInverse(concurrentSkipListMap0);
      assertNotNull(abstractBiMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeMap<Comparable<Integer>, Integer> treeMap0 = new TreeMap<Comparable<Integer>, Integer>();
      AbstractBiMap.Inverse<Comparable<Integer>, Integer> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Comparable<Integer>, Integer>(treeMap0, (AbstractBiMap<Integer, Comparable<Integer>>) null);
      Iterator<Map.Entry<Comparable<Integer>, Integer>> iterator0 = (Iterator<Map.Entry<Comparable<Integer>, Integer>>)abstractBiMap_Inverse0.entrySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumHashBiMap<Locale.Category, Locale.Category> enumHashBiMap0 = EnumHashBiMap.create(class0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = enumHashBiMap0.put(locale_Category0, locale_Category0);
      Locale.Category locale_Category2 = enumHashBiMap0.put(locale_Category0, locale_Category1);
      AbstractBiMap.Inverse<Locale.Category, Locale.Category> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Locale.Category, Locale.Category>(enumHashBiMap0, enumHashBiMap0);
      Locale.Category locale_Category3 = abstractBiMap_Inverse0.checkKey(locale_Category2);
      assertSame(locale_Category3, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumHashBiMap<BoundType, BoundType> enumHashBiMap0 = EnumHashBiMap.create(class0);
      enumHashBiMap0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumBiMap<Locale.Category, Locale.Category> enumBiMap0 = EnumBiMap.create(class0, class0);
      AbstractBiMap.Inverse<Locale.Category, Locale.Category> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Locale.Category, Locale.Category>(enumBiMap0, enumBiMap0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      abstractBiMap_Inverse0.put(locale_Category0, locale_Category0);
      abstractBiMap_Inverse0.standardClear();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumBiMap<Locale.FilteringMode, Locale.FilteringMode> enumBiMap0 = EnumBiMap.create(class0, class0);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(Locale.FilteringMode.class) , any(Locale.FilteringMode.class));
      enumBiMap0.put(locale_FilteringMode0, locale_FilteringMode0);
      BinaryOperator<Locale.FilteringMode> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Locale.FilteringMode>) comparator0);
      Locale.FilteringMode locale_FilteringMode1 = enumBiMap0.computeIfPresent(locale_FilteringMode0, binaryOperator0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumHashBiMap<Locale.Category, Locale.Category> enumHashBiMap0 = EnumHashBiMap.create(class0);
      AbstractBiMap.Inverse<Locale.Category, Locale.Category> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Locale.Category, Locale.Category>(enumHashBiMap0, enumHashBiMap0);
      Object object0 = abstractBiMap_Inverse0.readResolve();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumBiMap<Locale.Category, Locale.Category> enumBiMap0 = EnumBiMap.create(class0, class0);
      AbstractBiMap.Inverse<Locale.Category, Locale.Category> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Locale.Category, Locale.Category>(enumBiMap0, enumBiMap0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      abstractBiMap_Inverse0.put(locale_Category0, locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      abstractBiMap_Inverse0.put(locale_Category0, locale_Category1);
      // Undeclared exception!
      try { 
        enumBiMap0.put(locale_Category0, locale_Category1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value already present: java.util.Locale$Category@0000000006
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumBiMap<Locale.Category, Locale.Category> enumBiMap0 = EnumBiMap.create(class0, class0);
      AbstractBiMap.Inverse<Locale.Category, Locale.Category> abstractBiMap_Inverse0 = new AbstractBiMap.Inverse<Locale.Category, Locale.Category>(enumBiMap0, enumBiMap0);
      enumBiMap0.setInverse(abstractBiMap_Inverse0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      EnumHashBiMap<BoundType, BoundType> enumHashBiMap0 = EnumHashBiMap.create(class0);
      BoundType boundType0 = BoundType.CLOSED;
      enumHashBiMap0.forcePut(boundType0, boundType0);
      EnumBiMap<BoundType, BoundType> enumBiMap0 = EnumBiMap.create((Map<BoundType, BoundType>) enumHashBiMap0);
      enumBiMap0.clear();
  }
}
