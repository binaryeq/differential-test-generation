/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:34:53 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.AsyncCallable;
import com.google.common.util.concurrent.ExecutionSequencer;
import com.google.common.util.concurrent.FluentFuture;
import com.google.common.util.concurrent.ListenableFuture;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLWarning;
import java.time.chrono.HijrahEra;
import java.time.format.ResolverStyle;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutionSequencer_ESTest extends ExecutionSequencer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExecutionSequencer.RunningState.values();
      ExecutionSequencer executionSequencer0 = ExecutionSequencer.create();
      assertNotNull(executionSequencer0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLNonTransientConnectionException0);
      Callable<SQLWarning> callable0 = (Callable<SQLWarning>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3396, threadPoolExecutor_AbortPolicy0);
      scheduledThreadPoolExecutor0.getRejectedExecutionHandler();
      AsyncCallable<ResolverStyle> asyncCallable0 = (AsyncCallable<ResolverStyle>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      executionSequencer0.submit(callable1, (Executor) scheduledThreadPoolExecutor0);
      AsyncCallable<Integer> asyncCallable1 = (AsyncCallable<Integer>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncCallable1).call();
      executionSequencer0.submitAsync(asyncCallable1, (Executor) scheduledThreadPoolExecutor0);
      ExecutionSequencer executionSequencer1 = ExecutionSequencer.create();
      ExecutionSequencer.RunningState.values();
      Callable<ResolverStyle> callable2 = (Callable<ResolverStyle>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable2).call();
      executionSequencer1.submit(callable2, (Executor) scheduledThreadPoolExecutor0);
      ExecutionSequencer.RunningState.values();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExecutionSequencer executionSequencer0 = ExecutionSequencer.create();
      AsyncCallable<FluentFuture<Object>> asyncCallable0 = (AsyncCallable<FluentFuture<Object>>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncCallable0).call();
      ExecutionSequencer.create();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      executionSequencer0.submitAsync(asyncCallable0, (Executor) forkJoinPool0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool1 = null;
      try {
        forkJoinPool1 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExecutionSequencer executionSequencer0 = ExecutionSequencer.create();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Callable<Comparable<Object>> callable0 = (Callable<Comparable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        executionSequencer0.submit(callable1, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExecutionSequencer.RunningState.values();
      ExecutionSequencer executionSequencer0 = ExecutionSequencer.create();
      Callable<SQLWarning> callable0 = (Callable<SQLWarning>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3);
      ListenableFuture<SQLWarning> listenableFuture0 = executionSequencer0.submit(callable0, (Executor) forkJoinPool0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExecutionSequencer executionSequencer0 = ExecutionSequencer.create();
      AsyncCallable<HijrahEra> asyncCallable0 = (AsyncCallable<HijrahEra>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncCallable0).call();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      executionSequencer0.submitAsync(asyncCallable0, (Executor) forkJoinPool0);
      // Undeclared exception!
      try { 
        ExecutionSequencer.RunningState.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExecutionSequencer executionSequencer0 = ExecutionSequencer.create();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1115, threadFactory0);
      executionSequencer0.submit(callable0, (Executor) scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        ExecutionSequencer.RunningState.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExecutionSequencer executionSequencer0 = ExecutionSequencer.create();
      AsyncCallable<Integer> asyncCallable0 = (AsyncCallable<Integer>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        executionSequencer0.submitAsync(asyncCallable0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
