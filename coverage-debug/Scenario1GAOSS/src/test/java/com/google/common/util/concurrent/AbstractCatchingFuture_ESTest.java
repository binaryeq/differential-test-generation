/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:09:05 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.util.concurrent.AbstractCatchingFuture;
import com.google.common.util.concurrent.AsyncCallable;
import com.google.common.util.concurrent.AsyncFunction;
import com.google.common.util.concurrent.ImmediateFuture;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.TrustedListenableFutureTask;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCatchingFuture_ESTest extends AbstractCatchingFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Throwable> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Throwable>();
      Class<Throwable> class0 = Throwable.class;
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      AsyncFunction<Throwable, Throwable> asyncFunction0 = (AsyncFunction<Throwable, Throwable>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncFunction0).toString();
      ListenableFuture<Object> listenableFuture0 = AbstractCatchingFuture.create((ListenableFuture<?>) immediateFuture_ImmediateCancelledFuture0, class0, (AsyncFunction<? super Throwable, ?>) asyncFunction0, (Executor) forkJoinPool0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncCallable<Throwable> asyncCallable0 = (AsyncCallable<Throwable>) mock(AsyncCallable.class, new ViolatedAssumptionAnswer());
      TrustedListenableFutureTask<Throwable> trustedListenableFutureTask0 = new TrustedListenableFutureTask<Throwable>(asyncCallable0);
      Class<Throwable> class0 = Throwable.class;
      Converter<Throwable, Throwable> converter0 = Converter.identity();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(352);
      Function<Comparable<Throwable>, Throwable> function0 = (Function<Comparable<Throwable>, Throwable>) mock(Function.class, new ViolatedAssumptionAnswer());
      ListenableFuture<Throwable> listenableFuture0 = AbstractCatchingFuture.create((ListenableFuture<? extends Throwable>) trustedListenableFutureTask0, class0, (Function<? super Throwable, ? extends Throwable>) converter0, (Executor) scheduledThreadPoolExecutor0);
      assertNotNull(listenableFuture0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmediateFuture.ImmediateCancelledFuture<Throwable> immediateFuture_ImmediateCancelledFuture0 = new ImmediateFuture.ImmediateCancelledFuture<Throwable>();
      Class<Throwable> class0 = Throwable.class;
      AsyncFunction<Throwable, Throwable> asyncFunction0 = (AsyncFunction<Throwable, Throwable>) mock(AsyncFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AbstractCatchingFuture.create((ListenableFuture<? extends Throwable>) immediateFuture_ImmediateCancelledFuture0, class0, (AsyncFunction<? super Throwable, ? extends Throwable>) asyncFunction0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
