/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 18:05:12 GMT 2024
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.Service;
import com.google.common.util.concurrent.ServiceManager;
import java.time.Duration;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServiceManager_ESTest extends ServiceManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Service> vector0 = new Vector<Service>(0);
      ServiceManager serviceManager0 = new ServiceManager(vector0);
      ServiceManager serviceManager1 = serviceManager0.startAsync();
      Duration duration0 = Duration.ofSeconds((-1102L));
      serviceManager1.awaitHealthy(duration0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Service> class0 = Service.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Service> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ServiceManager serviceManager0 = new ServiceManager(serviceLoader0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      ServiceManager.Listener serviceManager_Listener0 = mock(ServiceManager.Listener.class, new ViolatedAssumptionAnswer());
      serviceManager0.addListener(serviceManager_Listener0, scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Service> vector0 = new Vector<Service>(0);
      ServiceManager serviceManager0 = new ServiceManager(vector0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      try { 
        serviceManager0.awaitHealthy(0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // Timeout waiting for the services to become healthy. The following services have not started: com.google.common.collect.Maps$FilteredKeyMap@0000000035
         //
         verifyException("com.google.common.util.concurrent.ServiceManager$ServiceManagerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Service> stack0 = new Stack<Service>();
      PriorityQueue<Service> priorityQueue0 = new PriorityQueue<Service>(stack0);
      ServiceManager serviceManager0 = new ServiceManager(priorityQueue0);
      ServiceManager serviceManager1 = serviceManager0.stopAsync();
      // Undeclared exception!
      try { 
        serviceManager1.awaitHealthy();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected to be healthy after starting. The following services are not running: com.google.common.collect.Maps$FilteredKeyMap@0000000045
         //
         verifyException("com.google.common.util.concurrent.ServiceManager$ServiceManagerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServiceManager serviceManager0 = null;
      try {
        serviceManager0 = new ServiceManager((Iterable<? extends Service>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityQueue<Service> priorityQueue0 = new PriorityQueue<Service>();
      ServiceManager serviceManager0 = new ServiceManager(priorityQueue0);
      ServiceManager serviceManager1 = serviceManager0.stopAsync();
      serviceManager1.startupTimes();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedBlockingDeque<Service> linkedBlockingDeque0 = new LinkedBlockingDeque<Service>(2358);
      ServiceManager serviceManager0 = new ServiceManager(linkedBlockingDeque0);
      ServiceManager serviceManager1 = serviceManager0.stopAsync();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        serviceManager1.awaitHealthy(0L, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected to be healthy after starting. The following services are not running: com.google.common.collect.Maps$FilteredKeyMap@0000000045
         //
         verifyException("com.google.common.util.concurrent.ServiceManager$ServiceManagerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedBlockingDeque<Service> linkedBlockingDeque0 = new LinkedBlockingDeque<Service>(2358);
      ServiceManager serviceManager0 = new ServiceManager(linkedBlockingDeque0);
      serviceManager0.isHealthy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PriorityQueue<Service> priorityQueue0 = new PriorityQueue<Service>();
      ServiceManager serviceManager0 = new ServiceManager(priorityQueue0);
      serviceManager0.stopAsync();
      // Undeclared exception!
      try { 
        serviceManager0.startAsync();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Service com.google.common.util.concurrent.ServiceManager$NoOpService@0000000009 is com.google.common.util.concurrent.Service$State@0000000042, cannot start it.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayDeque<Service> arrayDeque0 = new ArrayDeque<Service>();
      Service service0 = mock(Service.class, new ViolatedAssumptionAnswer());
      doReturn((Service.State) null).when(service0).state();
      arrayDeque0.add(service0);
      ServiceManager serviceManager0 = null;
      try {
        serviceManager0 = new ServiceManager(arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only manage NEW services, com.google.common.util.concurrent.Service$MockitoMock$203891208@0000000016
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Service> treeSet0 = new TreeSet<Service>(comparator0);
      ServiceManager serviceManager0 = new ServiceManager(treeSet0);
      ServiceManager serviceManager1 = serviceManager0.startAsync();
      serviceManager1.stopAsync();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Service> comparator0 = (Comparator<Service>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Service> priorityQueue0 = new PriorityQueue<Service>(117, comparator0);
      ServiceManager serviceManager0 = new ServiceManager(priorityQueue0);
      serviceManager0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Service> vector0 = new Vector<Service>(0);
      ServiceManager serviceManager0 = new ServiceManager(vector0);
      Duration duration0 = Duration.ofSeconds((-1102L));
      try { 
        serviceManager0.awaitHealthy(duration0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // Timeout waiting for the services to become healthy. The following services have not started: com.google.common.collect.Maps$FilteredKeyMap@0000000035
         //
         verifyException("com.google.common.util.concurrent.ServiceManager$ServiceManagerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Service> linkedHashSet0 = new LinkedHashSet<Service>(79);
      ServiceManager serviceManager0 = new ServiceManager(linkedHashSet0);
      serviceManager0.startupDurations();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedBlockingDeque<Service> linkedBlockingDeque0 = new LinkedBlockingDeque<Service>(2358);
      ServiceManager serviceManager0 = new ServiceManager(linkedBlockingDeque0);
      serviceManager0.servicesByState();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashSet<Service> hashSet0 = new HashSet<Service>(441, 441);
      ServiceManager serviceManager0 = new ServiceManager(hashSet0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(441);
      // Undeclared exception!
      try { 
        serviceManager0.addListener((ServiceManager.Listener) null, scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // listener
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashSet<Service> hashSet0 = new HashSet<Service>();
      ServiceManager serviceManager0 = new ServiceManager(hashSet0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      try { 
        serviceManager0.awaitStopped(0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // Timeout waiting for the services to stop. The following services have not stopped: com.google.common.collect.Maps$FilteredKeyMap@0000000032
         //
         verifyException("com.google.common.util.concurrent.ServiceManager$ServiceManagerState", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedBlockingDeque<Service> linkedBlockingDeque0 = new LinkedBlockingDeque<Service>(2358);
      ServiceManager serviceManager0 = new ServiceManager(linkedBlockingDeque0);
      ServiceManager serviceManager1 = serviceManager0.stopAsync();
      serviceManager1.awaitStopped();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<Service> stack0 = new Stack<Service>();
      PriorityQueue<Service> priorityQueue0 = new PriorityQueue<Service>(stack0);
      ServiceManager serviceManager0 = new ServiceManager(priorityQueue0);
      ServiceManager serviceManager1 = serviceManager0.startAsync();
      serviceManager0.awaitHealthy();
      assertSame(serviceManager0, serviceManager1);
  }
}
