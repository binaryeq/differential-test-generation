/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:03:19 GMT 2024
 */

package com.google.common.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.reflect.TypeResolver;
import com.google.common.reflect.Types;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeResolver_ESTest extends TypeResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      Type[] typeArray1 = new Type[2];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      typeArray1[1] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray1, typeArray0);
      // Undeclared exception!
      try { 
        typeResolver0.where(typeArray1[0], types_WildcardTypeImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: com.google.common.reflect.Types$WildcardTypeImpl@0000000003 vs. com.google.common.reflect.Types$WildcardTypeImpl@0000000013
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      Type[] typeArray1 = new Type[7];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      typeArray1[1] = (Type) types_WildcardTypeImpl0;
      typeArray1[2] = (Type) types_WildcardTypeImpl0;
      typeArray1[3] = (Type) types_WildcardTypeImpl0;
      typeArray1[4] = (Type) types_WildcardTypeImpl0;
      typeArray1[5] = (Type) types_WildcardTypeImpl0;
      typeArray1[6] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray0, typeArray1);
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl1, types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: com.google.common.reflect.Types$WildcardTypeImpl@0000000013 vs. com.google.common.reflect.Types$WildcardTypeImpl@0000000003
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeResolver.TypeVariableKey typeResolver_TypeVariableKey0 = TypeResolver.TypeVariableKey.forLookup(class0);
      assertNull(typeResolver_TypeVariableKey0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeResolver typeResolver0 = TypeResolver.covariantly(class0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      Type[] typeArray1 = typeResolver0.resolveTypesInPlace(typeArray0);
      assertSame(typeArray1, typeArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      // Undeclared exception!
      try { 
        typeResolver0.where((Map<TypeResolver.TypeVariableKey, ? extends Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeResolver$TypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      // Undeclared exception!
      try { 
        typeResolver0.where((Type) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      // Undeclared exception!
      try { 
        typeResolver0.resolveTypesInPlace((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.TypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeResolver typeResolver0 = new TypeResolver();
      // Undeclared exception!
      try { 
        typeResolver0.resolveType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeResolver.invariantly((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeResolver.covariantly((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      HashMap<TypeResolver.TypeVariableKey, Types.WildcardTypeImpl> hashMap0 = new HashMap<TypeResolver.TypeVariableKey, Types.WildcardTypeImpl>();
      TypeResolver typeResolver1 = typeResolver0.where((Map<TypeResolver.TypeVariableKey, ? extends Type>) hashMap0);
      assertNotSame(typeResolver0, typeResolver1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      Type[] typeArray1 = new Type[7];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      typeArray1[1] = (Type) types_WildcardTypeImpl0;
      typeArray1[2] = (Type) types_WildcardTypeImpl0;
      typeArray1[3] = (Type) types_WildcardTypeImpl0;
      typeArray1[4] = (Type) types_WildcardTypeImpl0;
      typeArray1[5] = (Type) types_WildcardTypeImpl0;
      typeArray1[6] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray0, typeArray1);
      Type type0 = typeResolver0.resolveType(types_WildcardTypeImpl1);
      assertTrue(type0.equals((Object)types_WildcardTypeImpl1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeResolver typeResolver0 = TypeResolver.covariantly(class0);
      Type[] typeArray0 = new Type[6];
      // Undeclared exception!
      try { 
        typeResolver0.resolveTypesInPlace(typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      Type[] typeArray1 = typeResolver0.resolveTypesInPlace(typeArray0);
      assertEquals(0, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = classLoader0.loadClass("com.google.common.collect.ImmutableList$ReverseImmutableList");
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.invariantly(types_WildcardTypeImpl0);
      Class class1 = (Class)typeResolver0.resolveType(typeArray0[3]);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      Class<Integer> class0 = Integer.TYPE;
      TypeResolver typeResolver1 = typeResolver0.where(class0, types_WildcardTypeImpl0);
      assertFalse(typeResolver1.equals((Object)typeResolver0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = classLoader0.loadClass("com.google.common.base.Enums$StringConverter");
      TypeResolver typeResolver0 = TypeResolver.invariantly(class0);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        typeResolver0.where(class1, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No type mapping from int to class com.google.common.base.Enums$StringConverter
         //
         verifyException("com.google.common.reflect.TypeResolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      Type[] typeArray1 = new Type[2];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      typeArray1[1] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray1, typeArray1);
      // Undeclared exception!
      try { 
        typeResolver0.where(typeArray1[0], types_WildcardTypeImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: com.google.common.reflect.Types$WildcardTypeImpl@0000000003 vs. com.google.common.reflect.Types$WildcardTypeImpl@0000000014
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      TypeResolver typeResolver0 = new TypeResolver();
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Class<Integer> class0 = Integer.TYPE;
      TypeResolver typeResolver1 = typeResolver0.where(types_WildcardTypeImpl0, class0);
      assertFalse(typeResolver1.equals((Object)typeResolver0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeResolver typeResolver0 = TypeResolver.covariantly(types_WildcardTypeImpl0);
      TypeResolver typeResolver1 = typeResolver0.where(types_WildcardTypeImpl0, types_WildcardTypeImpl0);
      assertNotSame(typeResolver0, typeResolver1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      TypeResolver typeResolver0 = new TypeResolver();
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Type[] typeArray1 = new Type[1];
      typeArray1[0] = (Type) types_WildcardTypeImpl0;
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray1, typeArray0);
      // Undeclared exception!
      try { 
        typeResolver0.where(types_WildcardTypeImpl1, typeArray1[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible type: com.google.common.reflect.Types$WildcardTypeImpl@0000000009 vs. com.google.common.reflect.Types$WildcardTypeImpl@0000000005
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = classLoader0.loadClass("com.google.common.collect.ImmutableList$SubList");
      TypeResolver typeResolver0 = TypeResolver.invariantly(class0);
      assertNotNull(typeResolver0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      types_WildcardTypeImpl0.toString();
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      // Undeclared exception!
      try { 
        TypeResolver.invariantly(types_WildcardTypeImpl0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hashCode
         //
         verifyException("com.google.common.reflect.Types$TypeVariableInvocationHandler", e);
      }
  }
}
