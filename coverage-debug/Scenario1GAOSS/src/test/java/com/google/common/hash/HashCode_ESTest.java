/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:14:50 GMT 2024
 */

package com.google.common.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.hash.HashCode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HashCode_ESTest extends HashCode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong(502L);
      String string0 = hashCode0.toString();
      assertEquals("f601000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)43;
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      hashCode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt((byte)21);
      hashCode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      byte[] byteArray1 = new byte[6];
      HashCode hashCode1 = HashCode.fromBytes(byteArray1);
      boolean boolean0 = hashCode1.equals(hashCode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      HashCode hashCode0 = HashCode.fromBytes(byteArray0);
      int int0 = hashCode0.writeBytesTo(byteArray0, 0, (byte)10);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-44);
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      int int0 = hashCode0.asInt();
      assertEquals(13893632, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      int int0 = hashCode0.asInt();
      assertEquals(65280, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong(1560L);
      HashCode hashCode1 = HashCode.fromLong(1045L);
      boolean boolean0 = hashCode0.equals(hashCode1);
      assertFalse(boolean0);
      assertFalse(hashCode1.equals((Object)hashCode0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((byte) (-34));
      byte[] byteArray0 = new byte[10];
      int int0 = hashCode0.writeBytesTo(byteArray0, (byte)0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((-185L));
      byte[] byteArray0 = hashCode0.asBytes();
      assertArrayEquals(new byte[] {(byte)71, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-15);
      HashCode hashCode0 = HashCode.fromBytes(byteArray0);
      HashCode hashCode1 = HashCode.fromInt((byte) (-67));
      boolean boolean0 = hashCode1.equals(hashCode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt((-1022));
      byte[] byteArray0 = new byte[6];
      int int0 = hashCode0.writeBytesTo(byteArray0, 0, (byte)22);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-4), (byte) (-1), (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt((byte) (-1));
      byte[] byteArray0 = hashCode0.asBytes();
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((byte) (-34));
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        hashCode0.writeBytesTo(byteArray0, (byte) (-1), 2889);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000002 (java.lang.Integer@0000000003) must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      String string0 = hashCode0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      long long0 = hashCode0.padToLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt(2470);
      byte[] byteArray0 = hashCode0.getBytesInternal();
      assertArrayEquals(new byte[] {(byte) (-90), (byte)9, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      byte[] byteArray1 = hashCode0.getBytesInternal();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      int int0 = hashCode0.bits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      int int0 = hashCode0.bits();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      long long0 = hashCode0.asLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong(1550L);
      long long0 = hashCode0.asLong();
      assertEquals(1550L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((-1114L));
      int int0 = hashCode0.asInt();
      assertEquals((-1114), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      byte[] byteArray1 = hashCode0.asBytes();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      // Undeclared exception!
      try { 
        hashCode0.padToLong();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.common.hash.HashCode$BytesHashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCode.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.HashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCode.fromBytesNoCopy((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCode.fromBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.HashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      // Undeclared exception!
      try { 
        hashCode0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.common.hash.HashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt((byte)21);
      HashCode hashCode1 = HashCode.fromLong((byte)21);
      boolean boolean0 = hashCode0.equals(hashCode1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromString("0123456789abcdef");
      boolean boolean0 = hashCode0.equals("0123456789abcdef");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCode.fromString("iW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal hexadecimal character: i
         //
         verifyException("com.google.common.hash.HashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCode.fromString(".FaT*o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal hexadecimal character: .
         //
         verifyException("com.google.common.hash.HashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCode.fromString("0123456789aj1bcde");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input string (java.lang.String@0000000001) must have an even number of characters
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCode.fromString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input string (java.lang.String@0000000001) must have at least 2 characters
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromString("0123456789abcdef");
      long long0 = hashCode0.asLong();
      assertEquals((-1167088121787636991L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      // Undeclared exception!
      try { 
        hashCode0.asLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // HashCode#asLong() requires >= 8 bytes (it only has java.lang.Integer@0000000002 bytes).
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      // Undeclared exception!
      try { 
        hashCode0.asInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // HashCode#asInt() requires >= 4 bytes (it only has java.lang.Integer@0000000002 bytes).
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      HashCode hashCode0 = HashCode.fromBytes(byteArray0);
      hashCode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        HashCode.fromBytes(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A HashCode must contain at least 1 byte.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((-2575L));
      HashCode hashCode1 = HashCode.fromLong(4294967296L);
      boolean boolean0 = hashCode0.equals(hashCode1);
      assertFalse(boolean0);
      assertFalse(hashCode1.equals((Object)hashCode0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((byte)9);
      byte[] byteArray0 = new byte[19];
      int int0 = hashCode0.writeBytesTo(byteArray0, (byte)9, (byte)9);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt(16);
      HashCode hashCode1 = HashCode.fromInt(3935);
      boolean boolean0 = hashCode0.equals(hashCode1);
      assertFalse(boolean0);
      assertFalse(hashCode1.equals((Object)hashCode0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      boolean boolean0 = hashCode0.equals(hashCode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt(16);
      boolean boolean0 = hashCode0.equals(hashCode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt(103);
      // Undeclared exception!
      try { 
        hashCode0.writeBytesTo((byte[]) null, 103, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.HashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt((byte)21);
      long long0 = hashCode0.padToLong();
      assertEquals(21L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromInt(1);
      // Undeclared exception!
      try { 
        hashCode0.asLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this HashCode only has 32 bits; cannot create a long
         //
         verifyException("com.google.common.hash.HashCode$IntHashCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((-2275L));
      long long0 = hashCode0.padToLong();
      assertEquals((-2275L), long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((-2234L));
      boolean boolean0 = hashCode0.equals(hashCode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCode hashCode0 = HashCode.fromLong((byte)0);
      int int0 = hashCode0.asInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HashCode hashCode0 = HashCode.fromBytesNoCopy(byteArray0);
      HashCode hashCode1 = HashCode.fromLong(3792L);
      boolean boolean0 = hashCode0.equals(hashCode1);
      assertFalse(boolean0);
  }
}
