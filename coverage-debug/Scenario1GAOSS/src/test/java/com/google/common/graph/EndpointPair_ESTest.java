/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:08:51 GMT 2024
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.UnmodifiableIterator;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableNetwork;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardNetwork;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EndpointPair_ESTest extends EndpointPair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.ordered(locale_Category0, locale_Category0);
      Object object0 = endpointPair0.target();
      assertSame(locale_Category0, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(networkBuilder0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(comparable0).toString();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(comparable1).toString();
      EndpointPair<Comparable<Object>> endpointPair0 = EndpointPair.of((Graph<?>) standardMutableGraph0, comparable0, comparable1);
      UnmodifiableIterator<Comparable<Object>> unmodifiableIterator0 = endpointPair0.iterator();
      Object object0 = new Object();
      EndpointPair<Object> endpointPair1 = EndpointPair.ordered((Object) unmodifiableIterator0, object0);
      Object object1 = endpointPair1.source();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.ordered(locale_Category0, locale_Category0);
      Locale.Category locale_Category1 = endpointPair0.nodeU();
      assertSame(locale_Category0, locale_Category1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer0 = discreteDomain0.maxValue();
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      boolean boolean0 = endpointPair0.isOrdered();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1574);
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered((Object) integer0, (Object) integer0);
      boolean boolean0 = endpointPair0.isOrdered();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        EndpointPair.unordered((Comparable<Comparable>) null, (Comparable<Comparable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        EndpointPair.ordered((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-489));
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        EndpointPair.of((Network<?, ?>) null, (Object) locale_Category0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.EndpointPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-489));
      // Undeclared exception!
      try { 
        EndpointPair.of((Graph<?>) null, integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.EndpointPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      Integer integer0 = new Integer(0);
      StandardMutableNetwork<Object, Integer> standardMutableNetwork0 = new StandardMutableNetwork<Object, Integer>(networkBuilder0);
      ImmutableNetwork<Object, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Object, Integer>) standardMutableNetwork0);
      EndpointPair<Integer> endpointPair0 = EndpointPair.of((Network<?, ?>) immutableNetwork0, integer0, integer0);
      EndpointPair<Object> endpointPair1 = EndpointPair.of((Network<?, ?>) standardMutableNetwork0, (Object) integer0, (Object) endpointPair0);
      Object object0 = endpointPair1.nodeU();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered(object0, (Object) "");
      Object object1 = endpointPair0.nodeV();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-470));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer0);
      EndpointPair<Integer> endpointPair1 = EndpointPair.unordered(integer0, integer0);
      boolean boolean0 = endpointPair1.equals(endpointPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(266);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("[", "").when(comparable0).toString();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(comparable1).toString();
      EndpointPair<Comparable<Object>> endpointPair0 = EndpointPair.unordered(comparable0, comparable1);
      EndpointPair<Integer> endpointPair1 = EndpointPair.unordered(integer0, integer0);
      boolean boolean0 = endpointPair1.equals(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(266);
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      Integer integer1 = discreteDomain0.next(integer0);
      EndpointPair<Comparable<Integer>> endpointPair1 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer1);
      boolean boolean0 = endpointPair0.equals(endpointPair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Object, Integer> standardNetwork0 = new StandardNetwork<Object, Integer>(networkBuilder0);
      ImmutableNetwork<Object, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Object, Integer>) standardNetwork0);
      Integer integer0 = new Integer(3291);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Object> endpointPair0 = EndpointPair.of((Network<?, ?>) immutableNetwork0, (Object) "", (Object) locale_Category0);
      EndpointPair<Comparable<Integer>> endpointPair1 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      boolean boolean0 = endpointPair1.equals(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-470));
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      EndpointPair<Integer> endpointPair1 = EndpointPair.unordered(integer0, integer0);
      boolean boolean0 = endpointPair0.equals(endpointPair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-241));
      EndpointPair<Integer> endpointPair0 = EndpointPair.ordered(integer0, integer0);
      boolean boolean0 = endpointPair0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-470));
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      boolean boolean0 = endpointPair0.equals(endpointPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(266);
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      EndpointPair<Comparable<Integer>> endpointPair1 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      boolean boolean0 = endpointPair1.equals(endpointPair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.ordered(locale_Category0, locale_Category1);
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = endpointPair0.adjacentNode(locale_Category2);
      assertEquals(Locale.Category.FORMAT, locale_Category3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      EndpointPair<Comparable<Object>> endpointPair0 = EndpointPair.unordered(comparable0, comparable0);
      EndpointPair<Object> endpointPair1 = EndpointPair.ordered((Object) endpointPair0, (Object) endpointPair0);
      Object object0 = endpointPair1.adjacentNode(endpointPair0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-470));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Object> endpointPair1 = EndpointPair.ordered((Object) integer0, (Object) locale_Category0);
      // Undeclared exception!
      try { 
        endpointPair1.adjacentNode(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EndpointPair <-470 -> FORMAT> does not contain node [-470, -470]
         //
         verifyException("com.google.common.graph.EndpointPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<Object, Object> standardNetwork0 = new StandardNetwork<Object, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        EndpointPair.of((Network<?, ?>) standardNetwork0, (Object) networkBuilder0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      Integer integer0 = new Integer(0);
      StandardMutableNetwork<Object, Integer> standardMutableNetwork0 = new StandardMutableNetwork<Object, Integer>(networkBuilder0);
      ImmutableNetwork<Object, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Object, Integer>) standardMutableNetwork0);
      ImmutableGraph<Object> immutableGraph0 = immutableNetwork0.asGraph();
      EndpointPair<Object> endpointPair0 = EndpointPair.of((Graph<?>) immutableGraph0, (Object) integer0, (Object) networkBuilder0);
      assertNotNull(endpointPair0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Locale.Category, Object> standardMutableNetwork0 = new StandardMutableNetwork<Locale.Category, Object>(networkBuilder0);
      Graph<Locale.Category> graph0 = standardMutableNetwork0.asGraph();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        EndpointPair.of((Graph<?>) graph0, (Integer) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-241));
      EndpointPair<Integer> endpointPair0 = EndpointPair.ordered(integer0, integer0);
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Object, Object> standardMutableNetwork0 = new StandardMutableNetwork<Object, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.incidentNodes(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Edge <-241 -> -241> is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(266);
      EndpointPair<Comparable<Integer>> endpointPair0 = EndpointPair.ordered((Comparable<Integer>) integer0, (Comparable<Integer>) integer0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("[").when(comparable0).toString();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable1).toString();
      EndpointPair<Comparable<Object>> endpointPair1 = EndpointPair.unordered(comparable0, comparable1);
      boolean boolean0 = endpointPair1.equals(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      // Undeclared exception!
      try { 
        endpointPair0.source();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot call source()/target() on a EndpointPair from an undirected graph. Consider calling adjacentNode(node) if you already have a node, or nodeU()/nodeV() if you don't.
         //
         verifyException("com.google.common.graph.EndpointPair$Unordered", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      Integer integer0 = new Integer(266);
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer0);
      StandardMutableNetwork<Integer, Object> standardMutableNetwork0 = new StandardMutableNetwork<Integer, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.adjacentEdges(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Edge [266, 266] is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-470));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer0);
      // Undeclared exception!
      try { 
        endpointPair0.target();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot call source()/target() on a EndpointPair from an undirected graph. Consider calling adjacentNode(node) if you already have a node, or nodeU()/nodeV() if you don't.
         //
         verifyException("com.google.common.graph.EndpointPair$Unordered", e);
      }
  }
}
