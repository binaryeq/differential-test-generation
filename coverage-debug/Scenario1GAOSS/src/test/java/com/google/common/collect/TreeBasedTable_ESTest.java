/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:51:07 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Multisets;
import com.google.common.collect.RegularImmutableSortedSet;
import com.google.common.collect.TreeBasedTable;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.SortedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeBasedTable_ESTest extends TreeBasedTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBasedTable<Locale.FilteringMode, Integer, Locale.FilteringMode> treeBasedTable0 = TreeBasedTable.create((Comparator<? super Locale.FilteringMode>) comparator0, (Comparator<? super Integer>) comparator1);
      assertNotNull(treeBasedTable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeBasedTable<Integer, Integer, Integer> treeBasedTable0 = TreeBasedTable.create();
      Comparator<? super Integer> comparator0 = treeBasedTable0.rowComparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      TreeBasedTable<Integer, Integer, Locale.FilteringMode> treeBasedTable0 = new TreeBasedTable<Integer, Integer, Locale.FilteringMode>(comparator0, comparator0);
      TreeBasedTable<Integer, Integer, Locale.FilteringMode> treeBasedTable1 = TreeBasedTable.create((TreeBasedTable<Integer, Integer, ? extends Locale.FilteringMode>) treeBasedTable0);
      assertNotSame(treeBasedTable1, treeBasedTable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<HashMap<Integer, Integer>> comparator0 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeBasedTable<HashMap<Integer, Integer>, HashMap<Integer, Integer>, HashMap<Integer, Integer>> treeBasedTable0 = TreeBasedTable.create((Comparator<? super HashMap<Integer, Integer>>) comparator0, (Comparator<? super HashMap<Integer, Integer>>) comparator0);
      Comparator<? super HashMap<Integer, Integer>> comparator1 = treeBasedTable0.columnComparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeBasedTable<Object, Object, Comparable<Object>> treeBasedTable0 = new TreeBasedTable<Object, Object, Comparable<Object>>((Comparator<? super Object>) null, (Comparator<? super Object>) null);
      // Undeclared exception!
      try { 
        treeBasedTable0.row((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeBasedTable<Object, Object, Object> treeBasedTable0 = new TreeBasedTable<Object, Object, Object>((Comparator<? super Object>) null, (Comparator<? super Object>) null);
      // Undeclared exception!
      try { 
        treeBasedTable0.createColumnKeyIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<HashMap<Integer, Integer>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super HashMap<Integer, Integer>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeBasedTable.create((Comparator<? super Object>) comparator1, (Comparator<? super Integer>) comparator1);
      // Undeclared exception!
      try { 
        TreeBasedTable.create((Comparator<? super Multisets.UnmodifiableMultiset<Object>>) comparator1, (Comparator<? super Object>) comparator1);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        TreeBasedTable.create((Comparator<? super Locale.FilteringMode>) null, (Comparator<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeBasedTable<Integer, Integer, Integer> treeBasedTable0 = TreeBasedTable.create();
      // Undeclared exception!
      try { 
        TreeBasedTable.create((TreeBasedTable<Integer, Integer, ? extends Integer>) treeBasedTable0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBasedTable.create();
      // Undeclared exception!
      try { 
        TreeBasedTable.create();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBasedTable<Integer, Integer, Locale.FilteringMode> treeBasedTable0 = new TreeBasedTable<Integer, Integer, Locale.FilteringMode>(comparator0, comparator0);
      SortedSet<Integer> sortedSet0 = treeBasedTable0.rowKeySet();
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBasedTable<Comparable<Object>, HashMap<Object, Object>, Comparable<Object>> treeBasedTable0 = new TreeBasedTable<Comparable<Object>, HashMap<Object, Object>, Comparable<Object>>((Comparator<? super Comparable<Object>>) null, (Comparator<? super HashMap<Object, Object>>) null);
      Comparator<? super HashMap<Object, Object>> comparator0 = treeBasedTable0.columnComparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<HashMap<Integer, Integer>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super HashMap<Integer, Integer>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeBasedTable<Object, Object, Comparable<Integer>> treeBasedTable0 = TreeBasedTable.create((Comparator<? super Object>) comparator1, (Comparator<? super Object>) comparator1);
      SortedMap<Object, Map<Object, Comparable<Integer>>> sortedMap0 = treeBasedTable0.rowMap();
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TreeBasedTable.create((TreeBasedTable<HashMap<Locale.FilteringMode, Locale.FilteringMode>, Locale.FilteringMode, ? extends HashMap<Locale.FilteringMode, Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.TreeBasedTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeBasedTable<Object, Object, HashMap<Object, Object>> treeBasedTable0 = new TreeBasedTable<Object, Object, HashMap<Object, Object>>((Comparator<? super Object>) null, (Comparator<? super Object>) null);
      // Undeclared exception!
      try { 
        treeBasedTable0.rowComparator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeBasedTable<Comparable<Object>, Comparable<Object>, Object> treeBasedTable0 = TreeBasedTable.create();
      Iterator<Comparable<Object>> iterator0 = treeBasedTable0.createColumnKeyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RegularImmutableSortedSet<HashMap<Integer, Integer>> regularImmutableSortedSet0 = ImmutableSortedSet.emptySet((Comparator<? super HashMap<Integer, Integer>>) comparator0);
      Comparator<Object> comparator1 = regularImmutableSortedSet0.unsafeComparator();
      TreeBasedTable<Object, Integer, HashMap<Object, Integer>> treeBasedTable0 = TreeBasedTable.create((Comparator<? super Object>) comparator1, (Comparator<? super Integer>) comparator1);
      SortedMap<Integer, HashMap<Object, Integer>> sortedMap0 = treeBasedTable0.row(comparator1);
      assertEquals(0, sortedMap0.size());
  }
}
