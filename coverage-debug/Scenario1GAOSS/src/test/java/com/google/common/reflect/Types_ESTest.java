/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 17:07:58 GMT 2024
 */

package com.google.common.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.reflect.Types;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.WildcardType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Types_ESTest extends Types_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
      
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(types_WildcardTypeImpl0);
      
      Type type0 = Types.getComponentType(parameterizedType0);
      assertEquals(0, typeArray0.length);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
      
      WildcardType wildcardType0 = Types.subtypeOf(parameterizedType0);
      assertEquals(0, typeArray0.length);
      assertNotNull(wildcardType0);
      
      Type[] typeArray1 = wildcardType0.getLowerBounds();
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(0, typeArray0.length);
      assertEquals(0, typeArray1.length);
      assertNotNull(typeArray1);
      assertNotSame(typeArray0, typeArray1);
      assertNotSame(typeArray1, typeArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String string0 = Types.toString((Type) class0);
      assertNotNull(string0);
      assertEquals("java.lang.reflect.Method", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.toString((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.supertypeOf((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.subtypeOf((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        Types.newParameterizedTypeWithOwner(class0, (Class<?>) null, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Types.newParameterizedTypeWithOwner(class0, class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Types.newParameterizedType(class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.Types$ParameterizedTypeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.newArtificialTypeVariable((Method) null, "]BmB{ y,`", (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.newArrayType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.getComponentType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.getArrayClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertNotNull(class1);
      
      typeArray0[0] = (Type) class1;
      WildcardType wildcardType0 = Types.subtypeOf(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertNotNull(wildcardType0);
      
      typeArray0[1] = (Type) wildcardType0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertFalse(types_WildcardTypeImpl0.equals((Object)wildcardType0));
      assertEquals(2, typeArray0.length);
      assertNotNull(types_WildcardTypeImpl0);
      
      // Undeclared exception!
      try { 
        Types.newArrayType(types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wildcard cannot have more than one lower bounds.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.subtypeOf(class0);
      assertNotNull(wildcardType0);
      
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = (Types.WildcardTypeImpl)Types.newArrayType(wildcardType0);
      assertFalse(types_WildcardTypeImpl0.equals((Object)wildcardType0));
      assertNotNull(types_WildcardTypeImpl0);
      assertNotSame(wildcardType0, types_WildcardTypeImpl0);
      assertNotSame(types_WildcardTypeImpl0, wildcardType0);
      
      Type[] typeArray0 = types_WildcardTypeImpl0.getUpperBounds();
      assertFalse(wildcardType0.equals((Object)types_WildcardTypeImpl0));
      assertFalse(types_WildcardTypeImpl0.equals((Object)wildcardType0));
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      assertNotSame(wildcardType0, types_WildcardTypeImpl0);
      assertNotSame(types_WildcardTypeImpl0, wildcardType0);
      
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      ImmutableList<Type> immutableList0 = types_JavaVersion0.usedInGenericType(typeArray0);
      assertFalse(wildcardType0.equals((Object)types_WildcardTypeImpl0));
      assertFalse(types_WildcardTypeImpl0.equals((Object)wildcardType0));
      assertEquals(1, immutableList0.size());
      assertEquals(1, typeArray0.length);
      assertNotNull(immutableList0);
      assertNotSame(wildcardType0, types_WildcardTypeImpl0);
      assertNotSame(types_WildcardTypeImpl0, wildcardType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.subtypeOf(class0);
      assertNotNull(wildcardType0);
      
      Type[] typeArray0 = wildcardType0.getUpperBounds();
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      ImmutableList<Type> immutableList0 = types_JavaVersion0.usedInGenericType(typeArray0);
      assertEquals(1, immutableList0.size());
      assertEquals(1, typeArray0.length);
      assertNotNull(immutableList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      WildcardType wildcardType0 = Types.supertypeOf(class1);
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertNotNull(wildcardType0);
      
      typeArray0[0] = (Type) wildcardType0;
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      // Undeclared exception!
      try { 
        types_JavaVersion0.usedInGenericType(typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = (Types.WildcardTypeImpl)Types.supertypeOf(class0);
      assertNotNull(types_WildcardTypeImpl0);
      
      String string0 = types_WildcardTypeImpl0.toString();
      assertNotNull(string0);
      assertEquals("? super java.lang.reflect.Method", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
      
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = (Types.WildcardTypeImpl)Types.subtypeOf(parameterizedType0);
      assertEquals(0, typeArray0.length);
      assertNotNull(types_WildcardTypeImpl0);
      
      boolean boolean0 = types_WildcardTypeImpl0.equals(types_WildcardTypeImpl0);
      assertEquals(0, typeArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
      
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = (Types.WildcardTypeImpl)Types.subtypeOf(parameterizedType0);
      assertEquals(0, typeArray0.length);
      assertNotNull(types_WildcardTypeImpl0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = types_WildcardTypeImpl0.equals(object0);
      assertEquals(0, typeArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[4];
      // Undeclared exception!
      try { 
        Types.newParameterizedType(class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class class1 = (Class)Types.newArrayType(class0);
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      String string0 = types_JavaVersion0.typeName(class1);
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(string0);
      assertEquals("[Ljava.lang.reflect.Method;", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        Types.newArtificialTypeVariable((Method) null, "]BmB{ y`", typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertNotNull(class1);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedTypeWithOwner((Type) null, class1, typeArray0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        Types.newParameterizedTypeWithOwner(class0, class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Owner type for unenclosed java.lang.Class@0000000001
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(types_WildcardTypeImpl0);
      
      // Undeclared exception!
      try { 
        Types.newArrayType(types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wildcard should have only one upper bound.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      WildcardType wildcardType0 = Types.supertypeOf(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(wildcardType0);
      
      Type type0 = Types.newArrayType(wildcardType0);
      assertFalse(type0.equals((Object)wildcardType0));
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(type0);
      assertNotSame(wildcardType0, type0);
      assertNotSame(type0, wildcardType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      WildcardType wildcardType0 = Types.supertypeOf(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(wildcardType0);
      
      typeArray0[0] = (Type) wildcardType0;
      Class class2 = (Class)Types.getComponentType(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class [Ljava.lang.reflect.Method;", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.reflect.Method", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertNotNull(class2);
      
      typeArray0[1] = (Type) class2;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertFalse(types_WildcardTypeImpl0.equals((Object)wildcardType0));
      assertEquals(2, typeArray0.length);
      assertNotNull(types_WildcardTypeImpl0);
      
      Types.WildcardTypeImpl types_WildcardTypeImpl1 = (Types.WildcardTypeImpl)Types.subtypeOf(types_WildcardTypeImpl0);
      assertFalse(types_WildcardTypeImpl0.equals((Object)wildcardType0));
      assertFalse(types_WildcardTypeImpl1.equals((Object)wildcardType0));
      assertFalse(types_WildcardTypeImpl1.equals((Object)types_WildcardTypeImpl0));
      assertEquals(2, typeArray0.length);
      assertNotNull(types_WildcardTypeImpl1);
      assertNotSame(types_WildcardTypeImpl0, types_WildcardTypeImpl1);
      assertNotSame(types_WildcardTypeImpl0, wildcardType0);
      assertNotSame(types_WildcardTypeImpl1, wildcardType0);
      assertNotSame(types_WildcardTypeImpl1, types_WildcardTypeImpl0);
      
      // Undeclared exception!
      try { 
        Types.newArrayType(types_WildcardTypeImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wildcard cannot have more than one lower bounds.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Types.NativeTypeVariableEquals<Method> types_NativeTypeVariableEquals0 = new Types.NativeTypeVariableEquals<Method>();
      assertNotNull(types_NativeTypeVariableEquals0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.CURRENT;
      boolean boolean0 = types_JavaVersion0.jdkTypeDuplicatesOwnerName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA7;
      boolean boolean0 = types_JavaVersion0.jdkTypeDuplicatesOwnerName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
      
      Type type0 = Types.newArrayType(parameterizedType0);
      assertEquals(0, typeArray0.length);
      assertNotNull(type0);
      
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA8;
      String string0 = types_JavaVersion0.typeName(type0);
      assertEquals(0, typeArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
      
      Type type0 = Types.newArrayType(parameterizedType0);
      assertEquals(0, typeArray0.length);
      assertNotNull(type0);
      
      WildcardType wildcardType0 = Types.subtypeOf(type0);
      assertEquals(0, typeArray0.length);
      assertNotNull(wildcardType0);
      
      Type type1 = Types.getComponentType(wildcardType0);
      assertFalse(type1.equals((Object)wildcardType0));
      assertEquals(0, typeArray0.length);
      assertNotNull(type1);
      assertNotSame(wildcardType0, type1);
      assertNotSame(type1, wildcardType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      assertEquals(0, typeArray0.length);
      assertNotNull(parameterizedType0);
      
      WildcardType wildcardType0 = Types.subtypeOf(parameterizedType0);
      assertEquals(0, typeArray0.length);
      assertNotNull(wildcardType0);
      
      WildcardType wildcardType1 = Types.supertypeOf(wildcardType0);
      assertFalse(wildcardType1.equals((Object)wildcardType0));
      assertEquals(0, typeArray0.length);
      assertNotNull(wildcardType1);
      assertNotSame(wildcardType0, wildcardType1);
      assertNotSame(wildcardType1, wildcardType0);
      
      Type type0 = Types.getComponentType(wildcardType1);
      assertFalse(wildcardType0.equals((Object)wildcardType1));
      assertFalse(wildcardType1.equals((Object)wildcardType0));
      assertEquals(0, typeArray0.length);
      assertNull(type0);
      assertNotSame(wildcardType0, wildcardType1);
      assertNotSame(wildcardType1, wildcardType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        Types.newArtificialTypeVariable((Method) null, "]BmB{ y,`", typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = (Types.WildcardTypeImpl)Types.subtypeOf(parameterizedType0);
      String string0 = types_WildcardTypeImpl0.toString();
      assertEquals("? extends java.lang.reflect.Method<>", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.subtypeOf(class0);
      Type type0 = Types.newArrayType(wildcardType0);
      Type type1 = Types.getComponentType(type0);
      assertNotNull(type1);
      assertNotSame(type1, wildcardType0);
  }
}
