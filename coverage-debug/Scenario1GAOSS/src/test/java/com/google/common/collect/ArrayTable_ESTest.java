/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:37:25 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ArrayTable;
import com.google.common.collect.BoundType;
import com.google.common.collect.DiscreteDomain;
import com.google.common.collect.EmptyContiguousSet;
import com.google.common.collect.HashBasedTable;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableTable;
import com.google.common.collect.SingletonImmutableTable;
import com.google.common.collect.Table;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayTable_ESTest extends ArrayTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscreteDomain<Integer> discreteDomain0 = DiscreteDomain.integers();
      EmptyContiguousSet<Integer> emptyContiguousSet0 = new EmptyContiguousSet<Integer>(discreteDomain0);
      ImmutableList<Integer> immutableList0 = emptyContiguousSet0.asList();
      ArrayTable<Integer, Comparable<Integer>, Integer> arrayTable0 = ArrayTable.create((Iterable<? extends Integer>) immutableList0, (Iterable<? extends Comparable<Integer>>) emptyContiguousSet0);
      assertNotNull(arrayTable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayTable.create((Table<Comparable<Object>, Object, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ArrayTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(345);
      Table.Cell<HashMap<Integer, Integer>, Comparable<Object>, Integer> table_Cell0 = ImmutableTable.cellOf(hashMap0, comparable0, integer0);
      SingletonImmutableTable<HashMap<Integer, Integer>, Comparable<Object>, Integer> singletonImmutableTable0 = new SingletonImmutableTable<HashMap<Integer, Integer>, Comparable<Object>, Integer>(table_Cell0);
      ArrayTable<HashMap<Integer, Integer>, Comparable<Object>, Integer> arrayTable0 = ArrayTable.create((Table<HashMap<Integer, Integer>, Comparable<Object>, ? extends Integer>) singletonImmutableTable0);
      arrayTable0.eraseAll();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Integer integer0 = new Integer((-442));
      Map.Entry<Integer, Integer> map_Entry0 = ImmutableMap.entryOf(integer0, integer0);
      SingletonImmutableTable<BoundType, BoundType, Map.Entry<Integer, Integer>> singletonImmutableTable0 = new SingletonImmutableTable<BoundType, BoundType, Map.Entry<Integer, Integer>>(boundType0, boundType0, map_Entry0);
      ArrayTable<BoundType, BoundType, Map.Entry<Integer, Integer>> arrayTable0 = ArrayTable.create((Table<BoundType, BoundType, ? extends Map.Entry<Integer, Integer>>) singletonImmutableTable0);
      Map<BoundType, Map<BoundType, Map.Entry<Integer, Integer>>> map0 = arrayTable0.rowMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Integer integer0 = new Integer((-442));
      Map.Entry<Integer, Integer> map_Entry0 = ImmutableMap.entryOf(integer0, integer0);
      SingletonImmutableTable<BoundType, BoundType, Map.Entry<Integer, Integer>> singletonImmutableTable0 = new SingletonImmutableTable<BoundType, BoundType, Map.Entry<Integer, Integer>>(boundType0, boundType0, map_Entry0);
      ArrayTable<BoundType, BoundType, Map.Entry<Integer, Integer>> arrayTable0 = ArrayTable.create((Table<BoundType, BoundType, ? extends Map.Entry<Integer, Integer>>) singletonImmutableTable0);
      Map<BoundType, Map<BoundType, Map.Entry<Integer, Integer>>> map0 = arrayTable0.columnMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayTable<Integer, Integer, Integer> arrayTable0 = ArrayTable.create((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0);
      Set<Table.Cell<Integer, Integer, Integer>> set0 = (Set<Table.Cell<Integer, Integer, Integer>>)arrayTable0.cellSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(345);
      Table.Cell<HashMap<Integer, Integer>, Comparable<Object>, Integer> table_Cell0 = ImmutableTable.cellOf(hashMap0, comparable0, integer0);
      SingletonImmutableTable<HashMap<Integer, Integer>, Comparable<Object>, Integer> singletonImmutableTable0 = new SingletonImmutableTable<HashMap<Integer, Integer>, Comparable<Object>, Integer>(table_Cell0);
      ArrayTable<HashMap<Integer, Integer>, Comparable<Object>, Integer> arrayTable0 = ArrayTable.create((Table<HashMap<Integer, Integer>, Comparable<Object>, ? extends Integer>) singletonImmutableTable0);
      Iterator<Table.Cell<HashMap<Integer, Integer>, Comparable<Object>, Integer>> iterator0 = (Iterator<Table.Cell<HashMap<Integer, Integer>, Comparable<Object>, Integer>>)arrayTable0.cellIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(345);
      Table.Cell<HashMap<Integer, Integer>, Comparable<Object>, Integer> table_Cell0 = ImmutableTable.cellOf(hashMap0, comparable0, integer0);
      SingletonImmutableTable<HashMap<Integer, Integer>, Comparable<Object>, Integer> singletonImmutableTable0 = new SingletonImmutableTable<HashMap<Integer, Integer>, Comparable<Object>, Integer>(table_Cell0);
      ArrayTable<HashMap<Integer, Integer>, Comparable<Object>, Integer> arrayTable0 = ArrayTable.create((Table<HashMap<Integer, Integer>, Comparable<Object>, ? extends Integer>) singletonImmutableTable0);
      ImmutableSet<HashMap<Integer, Integer>> immutableSet0 = arrayTable0.rowKeySet();
      assertTrue(immutableSet0.contains(hashMap0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1113);
      HashBasedTable<BoundType, BoundType, Integer> hashBasedTable0 = HashBasedTable.create(1337, 0);
      HashBasedTable<Comparable<BoundType>, BoundType, Integer> hashBasedTable1 = HashBasedTable.create((Table<? extends Comparable<BoundType>, ? extends BoundType, ? extends Integer>) hashBasedTable0);
      ArrayTable<Comparable<BoundType>, BoundType, Integer> arrayTable0 = ArrayTable.create((Table<Comparable<BoundType>, BoundType, ? extends Integer>) hashBasedTable1);
      // Undeclared exception!
      try { 
        arrayTable0.remove((Object) null, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ArrayTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashBasedTable<Map<Integer, Integer>, Map<Integer, Integer>, Integer> hashBasedTable0 = HashBasedTable.create(683, 683);
      ArrayTable<Map<Integer, Integer>, Map<Integer, Integer>, Comparable<Integer>> arrayTable0 = ArrayTable.create((Table<Map<Integer, Integer>, Map<Integer, Integer>, ? extends Comparable<Integer>>) hashBasedTable0);
      // Undeclared exception!
      try { 
        arrayTable0.at(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000018 (java.lang.Integer@0000000019) must be less than size (java.lang.Integer@0000000019)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      Integer integer0 = new Integer((-442));
      Map.Entry<Integer, Integer> map_Entry0 = ImmutableMap.entryOf(integer0, integer0);
      SingletonImmutableTable<BoundType, BoundType, Map.Entry<Integer, Integer>> singletonImmutableTable0 = new SingletonImmutableTable<BoundType, BoundType, Map.Entry<Integer, Integer>>(boundType0, boundType0, map_Entry0);
      ArrayTable<BoundType, BoundType, Map.Entry<Integer, Integer>> arrayTable0 = ArrayTable.create((Table<BoundType, BoundType, ? extends Map.Entry<Integer, Integer>>) singletonImmutableTable0);
      Object object0 = new Object();
      boolean boolean0 = arrayTable0.containsRow(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      ImmutableList<BoundType> immutableList0 = ImmutableList.of(boundType0, boundType0, boundType0, boundType0);
      ArrayDeque<BoundType> arrayDeque0 = new ArrayDeque<BoundType>(immutableList0);
      // Undeclared exception!
      try { 
        ArrayTable.create((Iterable<? extends BoundType>) arrayDeque0, (Iterable<? extends Comparable<BoundType>>) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: OPEN=1 and OPEN=0
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
