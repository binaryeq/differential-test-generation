/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:39:50 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.CollectPreconditions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectPreconditions_ESTest extends CollectPreconditions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectPreconditions.checkPositive((-82), ",$8 Be");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ,$8 Be must be positive but was: -82
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CollectPreconditions.checkRemove(true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = CollectPreconditions.checkNonnegative(0, "*.#98muk]XV5{[fw1");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = CollectPreconditions.checkNonnegative(767, "*.#98muk]XV5{[fw1");
      assertEquals(767, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectPreconditions.checkPositive(0, "*.#98muk]XV5{[fw1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // *.#98muk]XV5{[fw1 must be positive but was: 0
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CollectPreconditions.checkPositive(767, "*.#98muk]XV5{[fw1");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectPreconditions.checkNonnegative((-9L), "%s (%) must be less han size (%s)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %s (%) must be less han size (%s) cannot be negative but was: -9
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = CollectPreconditions.checkNonnegative(767, "*.#98muk]XV5{[fw1");
      assertEquals(767L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectPreconditions.checkNonnegative((-2532), "null value in entry: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null value in entry:  cannot be negative but was: -2532
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = CollectPreconditions.checkNonnegative(0, "*.#98muk]XV5{[fw1");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      CollectPreconditions.checkEntryNotNull(object0, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CollectPreconditions.checkEntryNotNull((Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=java.lang.Object@5b4c81d3
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CollectPreconditions.checkEntryNotNull(object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null value in entry: java.lang.Object@2ef08fd5=null
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectPreconditions.checkRemove(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no calls to next() since the last call to remove()
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CollectPreconditions collectPreconditions0 = new CollectPreconditions();
  }
}
