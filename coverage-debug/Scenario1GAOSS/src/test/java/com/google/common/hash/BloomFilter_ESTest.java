/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 16:12:33 GMT 2024
 */

package com.google.common.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.BloomFilterStrategies;
import com.google.common.hash.Funnel;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.stream.Collector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BloomFilter_ESTest extends BloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      try { 
        BloomFilter.readFrom((InputStream) byteArrayInputStream0, (Funnel<? super BloomFilterStrategies>) funnel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to deserialize BloomFilter from InputStream. strategyOrdinal: 2 numHashFunctions: 0 dataLength: 0
         //
         verifyException("com.google.common.hash.BloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = BloomFilter.optimalNumOfBits((-173L), (-173L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super BufferedInputStream>) funnel0, 0, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be > 0.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super BufferedInputStream>) funnel0, (long) 134, (double) 134);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be < 1.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super BufferedInputStream>) funnel0, 0L, (double) 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be > 0.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 134);
      Funnel<Object> funnel1 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter1 = BloomFilter.create((Funnel<? super Object>) funnel1, 1);
      // Undeclared exception!
      try { 
        bloomFilter1.putAll(bloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BloomFilters must have the same size underlying bit arrays (java.lang.Long@0000000007 != java.lang.Long@0000000008)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = BloomFilter.optimalNumOfHashFunctions(120L, (-2795L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = BloomFilter.optimalNumOfBits((-736L), 9.223372036854776E18);
      assertEquals(66894L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = BloomFilter.optimalNumOfBits(1211L, 1211L);
      assertEquals((-17893L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 143);
      Object object0 = new Object();
      bloomFilter0.put(object0);
      boolean boolean0 = bloomFilter0.mightContain((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 134);
      bloomFilter0.put((Object) null);
      double double0 = bloomFilter0.expectedFpp();
      assertEquals(8.881784197001252E-16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 8192, 0.03);
      assertNotNull(bloomFilter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<BloomFilterStrategies> bloomFilter0 = BloomFilter.create((Funnel<? super BloomFilterStrategies>) funnel0, 52);
      long long0 = bloomFilter0.bitSize();
      assertEquals(384L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 134);
      bloomFilter0.put((Object) null);
      boolean boolean0 = bloomFilter0.apply((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      Object object0 = new Object();
      boolean boolean0 = bloomFilter0.apply(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super Object>) null, 0L, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super Object>) null, 1355L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        BloomFilter.readFrom((InputStream) byteArrayInputStream0, (Funnel<? super BloomFilterStrategies>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Funnel
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<BloomFilterStrategies> bloomFilter0 = BloomFilter.create((Funnel<? super BloomFilterStrategies>) funnel0, 313L);
      // Undeclared exception!
      try { 
        bloomFilter0.putAll((BloomFilter<BloomFilterStrategies>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super BufferedInputStream>) null, (long) 1, (-383.061411349), (BloomFilter.Strategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super BloomFilterStrategies>) null, (-1387L), (double) (-1387L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super Object>) null, 1738L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super Object>) funnel0, (-34L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected insertions (java.lang.Long@0000000001) must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super BloomFilterStrategies>) null, 2146623966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super Object>) funnel0, (-2356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected insertions (java.lang.Long@0000000001) must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1000000L);
      // Undeclared exception!
      bloomFilter0.copy();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Funnel<BloomFilterStrategies> funnel0 = (Funnel<BloomFilterStrategies>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilterStrategies bloomFilterStrategies0 = BloomFilterStrategies.MURMUR128_MITZ_64;
      BloomFilter<BloomFilterStrategies> bloomFilter0 = BloomFilter.create((Funnel<? super BloomFilterStrategies>) funnel0, 3331L, 0.03, (BloomFilter.Strategy) bloomFilterStrategies0);
      assertNotNull(bloomFilter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilterStrategies bloomFilterStrategies0 = BloomFilterStrategies.MURMUR128_MITZ_64;
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super BloomFilterStrategies>) funnel0, 889L, (double) 889L, (BloomFilter.Strategy) bloomFilterStrategies0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be < 1.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BloomFilterStrategies bloomFilterStrategies0 = BloomFilterStrategies.MURMUR128_MITZ_64;
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super Object>) funnel0, 0L, (-43.462637237532), (BloomFilter.Strategy) bloomFilterStrategies0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be > 0.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Funnel<BufferedInputStream> funnel0 = (Funnel<BufferedInputStream>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilterStrategies bloomFilterStrategies0 = BloomFilterStrategies.MURMUR128_MITZ_64;
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super BufferedInputStream>) funnel0, (-173L), (-9.223372036854776E18), (BloomFilter.Strategy) bloomFilterStrategies0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected insertions (java.lang.Long@0000000001) must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Funnel<BufferedInputStream> funnel0 = (Funnel<BufferedInputStream>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      Collector<BufferedInputStream, ?, BloomFilter<BufferedInputStream>> collector0 = BloomFilter.toBloomFilter((Funnel<? super BufferedInputStream>) funnel0, 1966L, 0.03);
      assertNotNull(collector0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super BufferedInputStream>) funnel0, (-1L), (double) 131);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected insertions (java.lang.Long@0000000001) must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-105);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      try { 
        BloomFilter.readFrom((InputStream) byteArrayInputStream0, (Funnel<? super BloomFilterStrategies>) funnel0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        BloomFilter.readFrom((InputStream) byteArrayInputStream0, (Funnel<? super BloomFilterStrategies>) funnel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to deserialize BloomFilter from InputStream. strategyOrdinal: 0 numHashFunctions: 0 dataLength: 0
         //
         verifyException("com.google.common.hash.BloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a%tP2;A5ri");
      bloomFilter0.writeTo(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = BloomFilter.optimalNumOfBits(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super Object>) funnel0, 1L, (double) 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be < 1.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super BufferedInputStream>) funnel0, (long) 1, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be < 1.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super BufferedInputStream>) funnel0, 542L, (-5229.09580278127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // False positive probability (java.lang.Double@0000000001) must be > 0.0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        BloomFilter.toBloomFilter((Funnel<? super Object>) funnel0, (-3147L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected insertions (java.lang.Long@0000000001) must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 325L);
      Funnel<Object> funnel1 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<BloomFilterStrategies> bloomFilter1 = BloomFilter.create((Funnel<? super BloomFilterStrategies>) funnel1, 134);
      boolean boolean0 = bloomFilter1.equals(bloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BloomFilterStrategies bloomFilterStrategies0 = BloomFilterStrategies.MURMUR128_MITZ_64;
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<BloomFilterStrategies> bloomFilter0 = BloomFilter.create((Funnel<? super BloomFilterStrategies>) funnel0, 502);
      boolean boolean0 = bloomFilter0.equals(bloomFilterStrategies0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      boolean boolean0 = bloomFilter0.equals(bloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      BloomFilter<Object> bloomFilter1 = bloomFilter0.copy();
      boolean boolean0 = bloomFilter0.equals(bloomFilter1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      Funnel<Object> funnel1 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter1 = BloomFilter.create((Funnel<? super Object>) funnel1, 1010);
      // Undeclared exception!
      try { 
        bloomFilter0.putAll(bloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BloomFilters must have the same size underlying bit arrays (java.lang.Long@0000000007 != java.lang.Long@0000000008)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      // Undeclared exception!
      try { 
        bloomFilter0.putAll(bloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot combine a BloomFilter with itself.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      BloomFilter<Object> bloomFilter1 = bloomFilter0.copy();
      boolean boolean0 = bloomFilter1.isCompatible(bloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilterStrategies bloomFilterStrategies0 = BloomFilterStrategies.MURMUR128_MITZ_32;
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super Object>) funnel0, 0L, 4.9E-324, (BloomFilter.Strategy) bloomFilterStrategies0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not create BloomFilter of 1549 bits
         //
         verifyException("com.google.common.hash.BloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        BloomFilter.create((Funnel<? super BufferedInputStream>) null, 51, (double) 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 0L);
      bloomFilter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      BloomFilter<Object> bloomFilter1 = bloomFilter0.copy();
      bloomFilter0.putAll(bloomFilter1);
      assertNotSame(bloomFilter0, bloomFilter1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      Object object0 = new Object();
      boolean boolean0 = bloomFilter0.put(object0);
      assertTrue(boolean0);
      
      long long0 = bloomFilter0.approximateElementCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      boolean boolean0 = bloomFilter0.mightContain(bloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      Collector<Object, ?, BloomFilter<Object>> collector0 = BloomFilter.toBloomFilter((Funnel<? super Object>) funnel0, (long) 92);
      assertNotNull(collector0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1966L);
      double double0 = bloomFilter0.expectedFpp();
      assertEquals(0.0, double0, 0.01);
  }
}
