/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:08:50 GMT 2024
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import com.google.common.base.Functions;
import com.google.common.base.Predicate;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import com.google.common.collect.BoundType;
import com.google.common.collect.Range;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Functions_ESTest extends Functions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, ? extends Boolean>) hashMap0, boolean0);
      Converter<Boolean, Boolean> converter0 = Converter.identity();
      Converter<Boolean, Boolean> converter1 = Converter.from((Function<? super Boolean, ? extends Boolean>) converter0, (Function<? super Boolean, ? extends Boolean>) function0);
      Function<Boolean, Boolean> function1 = Functions.compose((Function<Boolean, Boolean>) converter0, (Function<Boolean, ? extends Boolean>) converter1);
      assertFalse(function1.equals((Object)function0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean1 = hashMap0.put(boolean0, (Boolean) null);
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, ? extends Boolean>) hashMap0, boolean1);
      Boolean boolean2 = function0.apply(boolean0);
      assertNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.forSupplier((Supplier<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.forPredicate((Predicate<Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      hashMap0.put(boolean0, (Boolean) null);
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, ? extends Boolean>) hashMap0, boolean0);
      Boolean boolean1 = function0.apply(boolean0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, ? extends Boolean>) hashMap0, boolean0);
      Boolean boolean1 = function0.apply(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(boolean0, boolean0);
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, ? extends Boolean>) hashMap0, boolean0);
      Boolean boolean1 = function0.apply(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      hashMap0.put(boolean0, (Boolean) null);
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, Boolean>) hashMap0);
      Boolean boolean1 = function0.apply(boolean0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(boolean0, boolean0);
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, Boolean>) hashMap0);
      Boolean boolean1 = function0.apply(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Function<Boolean, Boolean> function0 = Functions.identity();
      Boolean boolean1 = function0.apply(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Function<Object, String> function0 = Functions.toStringFunction();
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Boolean> supplier0 = (Supplier<Boolean>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      doReturn((String) null).when(supplier0).toString();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Suppliers.ExpiringMemoizingSupplier<Boolean> suppliers_ExpiringMemoizingSupplier0 = new Suppliers.ExpiringMemoizingSupplier<Boolean>(supplier0, 270L, timeUnit0);
      Suppliers.MemoizingSupplier<Boolean> suppliers_MemoizingSupplier0 = new Suppliers.MemoizingSupplier<Boolean>(suppliers_ExpiringMemoizingSupplier0);
      Suppliers.NonSerializableMemoizingSupplier<Boolean> suppliers_NonSerializableMemoizingSupplier0 = new Suppliers.NonSerializableMemoizingSupplier<Boolean>(suppliers_MemoizingSupplier0);
      Function<Boolean, Boolean> function0 = Functions.forSupplier((Supplier<Boolean>) suppliers_NonSerializableMemoizingSupplier0);
      Boolean boolean0 = function0.apply((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      // Undeclared exception!
      try { 
        Functions.forMap((Map<Boolean, ? extends BoundType>) null, boundType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = new Boolean("e=_Q5");
      BoundType boundType0 = BoundType.CLOSED;
      Range<Boolean> range0 = Range.upTo(boolean0, boundType0);
      Function<Boolean, Boolean> function0 = Functions.forPredicate((Predicate<Boolean>) range0);
      Boolean boolean1 = function0.apply(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Function<Boolean, Boolean> function0 = Functions.forMap((Map<Boolean, Boolean>) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Function<Boolean, Boolean> function1 = Functions.compose(function0, (Function<Boolean, ? extends Boolean>) function0);
      // Undeclared exception!
      try { 
        function1.apply(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key 'java.lang.Boolean@0000000003' not present in map
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.compose((Function<Boolean, Boolean>) null, (Function<Boolean, ? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.forMap((Map<Boolean, Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Function<Object, Boolean> function0 = Functions.constant(boolean0);
      assertNotNull(function0);
  }
}
