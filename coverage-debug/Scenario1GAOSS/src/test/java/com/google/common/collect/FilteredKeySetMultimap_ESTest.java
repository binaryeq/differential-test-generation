/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 14:57:59 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.BoundType;
import com.google.common.collect.EmptyImmutableSetMultimap;
import com.google.common.collect.FilteredKeySetMultimap;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.LinkedHashMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.Range;
import com.google.common.collect.SetMultimap;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnel;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilteredKeySetMultimap_ESTest extends FilteredKeySetMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FilteredKeySetMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap> filteredKeySetMultimap0 = null;
      try {
        filteredKeySetMultimap0 = new FilteredKeySetMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>((SetMultimap<EmptyImmutableSetMultimap, EmptyImmutableSetMultimap>) null, (Predicate<? super EmptyImmutableSetMultimap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableSetMultimap<BoundType, EmptyImmutableSetMultimap> immutableSetMultimap0 = ImmutableSetMultimap.of(boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0);
      Range<BoundType> range0 = Range.openClosed(boundType0, boundType0);
      FilteredKeySetMultimap<BoundType, EmptyImmutableSetMultimap> filteredKeySetMultimap0 = new FilteredKeySetMultimap<BoundType, EmptyImmutableSetMultimap>(immutableSetMultimap0, range0);
      FilteredKeySetMultimap.EntrySet filteredKeySetMultimap_EntrySet0 = filteredKeySetMultimap0.new EntrySet();
      boolean boolean0 = filteredKeySetMultimap_EntrySet0.equals(boundType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableSetMultimap<Locale.Category, EmptyImmutableSetMultimap> immutableSetMultimap0 = ImmutableSetMultimap.of(locale_Category0, emptyImmutableSetMultimap0);
      Range<Locale.Category> range0 = Range.atMost(locale_Category0);
      FilteredKeySetMultimap<Locale.Category, EmptyImmutableSetMultimap> filteredKeySetMultimap0 = new FilteredKeySetMultimap<Locale.Category, EmptyImmutableSetMultimap>(immutableSetMultimap0, range0);
      // Undeclared exception!
      try { 
        filteredKeySetMultimap0.replaceValues(locale_Category0, (Iterable<? extends EmptyImmutableSetMultimap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableSetMultimap<BoundType, EmptyImmutableSetMultimap> immutableSetMultimap0 = ImmutableSetMultimap.of(boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0, boundType0, emptyImmutableSetMultimap0);
      Range<BoundType> range0 = Range.openClosed(boundType0, boundType0);
      FilteredKeySetMultimap<BoundType, EmptyImmutableSetMultimap> filteredKeySetMultimap0 = new FilteredKeySetMultimap<BoundType, EmptyImmutableSetMultimap>(immutableSetMultimap0, range0);
      Set<EmptyImmutableSetMultimap> set0 = filteredKeySetMultimap0.removeAll(emptyImmutableSetMultimap0);
      assertFalse(set0.contains(emptyImmutableSetMultimap0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparable<EmptyImmutableSetMultimap> comparable0 = (Comparable<EmptyImmutableSetMultimap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ImmutableSetMultimap<Comparable<EmptyImmutableSetMultimap>, Locale.FilteringMode> immutableSetMultimap0 = ImmutableSetMultimap.of(comparable0, locale_FilteringMode0, comparable0, locale_FilteringMode0, comparable0, locale_FilteringMode0, comparable0, locale_FilteringMode0);
      LinkedHashMultimap<Comparable<EmptyImmutableSetMultimap>, Locale.FilteringMode> linkedHashMultimap0 = LinkedHashMultimap.create((Multimap<? extends Comparable<EmptyImmutableSetMultimap>, ? extends Locale.FilteringMode>) immutableSetMultimap0);
      Comparable<EmptyImmutableSetMultimap> comparable1 = (Comparable<EmptyImmutableSetMultimap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      BoundType boundType0 = BoundType.CLOSED;
      Range<Comparable<EmptyImmutableSetMultimap>> range0 = Range.downTo(comparable1, boundType0);
      FilteredKeySetMultimap<Comparable<EmptyImmutableSetMultimap>, Locale.FilteringMode> filteredKeySetMultimap0 = new FilteredKeySetMultimap<Comparable<EmptyImmutableSetMultimap>, Locale.FilteringMode>(linkedHashMultimap0, range0);
      // Undeclared exception!
      try { 
        filteredKeySetMultimap0.get((Comparable<EmptyImmutableSetMultimap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comparable<EmptyImmutableSetMultimap> comparable0 = (Comparable<EmptyImmutableSetMultimap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableSetMultimap<Comparable<EmptyImmutableSetMultimap>, Object> immutableSetMultimap0 = ImmutableSetMultimap.of(comparable0, (Object) emptyImmutableSetMultimap0, comparable0, (Object) comparable0);
      Funnel<Object> funnel0 = (Funnel<Object>) mock(Funnel.class, new ViolatedAssumptionAnswer());
      BloomFilter<Object> bloomFilter0 = BloomFilter.create((Funnel<? super Object>) funnel0, 1L);
      FilteredKeySetMultimap<Comparable<EmptyImmutableSetMultimap>, Object> filteredKeySetMultimap0 = new FilteredKeySetMultimap<Comparable<EmptyImmutableSetMultimap>, Object>(immutableSetMultimap0, bloomFilter0);
      Set<Map.Entry<Comparable<EmptyImmutableSetMultimap>, Object>> set0 = (Set<Map.Entry<Comparable<EmptyImmutableSetMultimap>, Object>>)filteredKeySetMultimap0.entries();
      assertTrue(set0.isEmpty());
  }
}
