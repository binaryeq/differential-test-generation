/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 15:43:36 GMT 2024
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.collect.AllEqualOrdering;
import com.google.common.collect.BoundType;
import com.google.common.collect.ByFunctionOrdering;
import com.google.common.collect.CompoundOrdering;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Ordering;
import com.google.common.collect.RegularImmutableList;
import com.google.common.collect.ReverseOrdering;
import com.google.common.collect.SingletonImmutableList;
import java.lang.reflect.Array;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReverseOrdering_ESTest extends ReverseOrdering_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      ReverseOrdering<Object> reverseOrdering0 = new ReverseOrdering<Object>(ordering_ArbitraryOrdering0);
      ReverseOrdering<Object>[] reverseOrderingArray0 = (ReverseOrdering<Object>[]) Array.newInstance(ReverseOrdering.class, 1);
      reverseOrderingArray0[0] = reverseOrdering0;
      ReverseOrdering<Object> reverseOrdering1 = reverseOrdering0.max(reverseOrdering0, reverseOrdering0, reverseOrdering0, reverseOrderingArray0);
      assertSame(reverseOrdering0, reverseOrdering1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      ImmutableList<Object> immutableList0 = RegularImmutableList.EMPTY;
      Ordering<Object> ordering0 = Ordering.explicit((List<Object>) immutableList0);
      ReverseOrdering<Object> reverseOrdering0 = new ReverseOrdering<Object>(ordering_ArbitraryOrdering0);
      ReverseOrdering<ReverseOrdering<Object>> reverseOrdering1 = new ReverseOrdering<ReverseOrdering<Object>>(ordering0);
      // Undeclared exception!
      try { 
        reverseOrdering1.compare(reverseOrdering0, reverseOrdering0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Cannot compare value: Ordering.arbitrary().reverse()
         //
         verifyException("com.google.common.collect.ExplicitOrdering", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReverseOrdering<Comparable<BoundType>> reverseOrdering0 = null;
      try {
        reverseOrdering0 = new ReverseOrdering<Comparable<BoundType>>((Ordering<? super Comparable<BoundType>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AllEqualOrdering allEqualOrdering0 = AllEqualOrdering.INSTANCE;
      ReverseOrdering<BoundType> reverseOrdering0 = new ReverseOrdering<BoundType>(allEqualOrdering0);
      BoundType boundType0 = BoundType.OPEN;
      BoundType boundType1 = reverseOrdering0.min(boundType0, boundType0);
      assertSame(boundType1, boundType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      ReverseOrdering<Object> reverseOrdering0 = new ReverseOrdering<Object>(ordering_ArbitraryOrdering0);
      // Undeclared exception!
      try { 
        reverseOrdering0.max((Iterator<Ordering.ArbitraryOrdering>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      ReverseOrdering<Object> reverseOrdering0 = new ReverseOrdering<Object>(ordering_ArbitraryOrdering0);
      ReverseOrdering<ReverseOrdering<Object>> reverseOrdering1 = new ReverseOrdering<ReverseOrdering<Object>>(ordering_ArbitraryOrdering0);
      int int0 = reverseOrdering1.compare(reverseOrdering0, reverseOrdering0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Converter<Object, Object> converter0 = Converter.identity();
      Ordering<Object> ordering0 = Ordering.allEqual();
      CompoundOrdering<Object> compoundOrdering0 = new CompoundOrdering<Object>(ordering0, ordering0);
      ByFunctionOrdering<Object, Object> byFunctionOrdering0 = new ByFunctionOrdering<Object, Object>(converter0, compoundOrdering0);
      ReverseOrdering<Object> reverseOrdering0 = new ReverseOrdering<Object>(byFunctionOrdering0);
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      Ordering.ArbitraryOrdering[] ordering_ArbitraryOrderingArray0 = (Ordering.ArbitraryOrdering[]) Array.newInstance(Ordering.ArbitraryOrdering.class, 4);
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering1 = reverseOrdering0.min(ordering_ArbitraryOrdering0, ordering_ArbitraryOrdering0, ordering_ArbitraryOrdering0, ordering_ArbitraryOrderingArray0);
      assertSame(ordering_ArbitraryOrdering0, ordering_ArbitraryOrdering1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      ReverseOrdering<Object> reverseOrdering0 = new ReverseOrdering<Object>(ordering_ArbitraryOrdering0);
      ReverseOrdering<Object>[] reverseOrderingArray0 = (ReverseOrdering<Object>[]) Array.newInstance(ReverseOrdering.class, 1);
      ReverseOrdering<Object> reverseOrdering1 = reverseOrdering0.max(reverseOrdering0, reverseOrdering0, reverseOrdering0, reverseOrderingArray0);
      assertNull(reverseOrdering1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Ordering.ArbitraryOrdering ordering_ArbitraryOrdering0 = new Ordering.ArbitraryOrdering();
      ReverseOrdering<Object> reverseOrdering0 = new ReverseOrdering<Object>(ordering_ArbitraryOrdering0);
      BoundType boundType0 = BoundType.CLOSED;
      SingletonImmutableList<BoundType> singletonImmutableList0 = new SingletonImmutableList<BoundType>(boundType0);
      BoundType boundType1 = reverseOrdering0.min((Iterable<BoundType>) singletonImmutableList0);
      assertSame(boundType0, boundType1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Ordering<Object> ordering0 = Ordering.usingToString();
      ReverseOrdering<Comparable<BoundType>> reverseOrdering0 = new ReverseOrdering<Comparable<BoundType>>(ordering0);
      String string0 = reverseOrdering0.toString();
      assertEquals("Ordering.usingToString().reverse()", string0);
  }
}
