io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  MUST have a 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  algorithm.  The JWT 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  bits (the key size must be greater than or equal to the hash 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  bits which 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  bits which is not secure 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  class's 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: 'keyPairFor(SignatureAlgorithm.
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: 'secretKeyFor(SignatureAlgorithm.
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: )' method to create a key guaranteed to be 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: )' method to create a key pair guaranteed 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: .  See 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: JWA Specification (RFC 7518, Section 3.2) states that keys used with 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: JWA Specification (RFC 7518, Section 3.4) states that keys used with 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: enough for the 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: https://tools.ietf.org/html/rfc7518#section-
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: https://tools.ietf.org/html/rfc7518#section-3.4 for more information.
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: is not secure enough for the 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: output size).  Consider using the 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: secure enough for 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: size >= 
io/jsonwebtoken/SignatureAlgorithm	assertValid	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: to be secure enough for 
io/jsonwebtoken/SignatureAlgorithm	forSigningKey	(Ljava/security/Key;)Lio/jsonwebtoken/SignatureAlgorithm;	CONSTANT	 type: class java.lang.String; value:  bits.  See 
io/jsonwebtoken/SignatureAlgorithm	forSigningKey	(Ljava/security/Key;)Lio/jsonwebtoken/SignatureAlgorithm;	CONSTANT	 type: class java.lang.String; value:  bits.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more 
io/jsonwebtoken/SignatureAlgorithm	forSigningKey	(Ljava/security/Key;)Lio/jsonwebtoken/SignatureAlgorithm;	CONSTANT	 type: class java.lang.String; value:  bits.  See https://tools.ietf.org/html/rfc7518#section-3.3 for more 
io/jsonwebtoken/SignatureAlgorithm	forSigningKey	(Ljava/security/Key;)Lio/jsonwebtoken/SignatureAlgorithm;	CONSTANT	 type: class java.lang.String; value: https://tools.ietf.org/html/rfc7518#section-3.4 for more information.
io/jsonwebtoken/SignatureAlgorithm	forSigningKey	(Ljava/security/Key;)Lio/jsonwebtoken/SignatureAlgorithm;	CONSTANT	 type: class java.lang.String; value: information.
io/jsonwebtoken/lang/Classes	forName	(Ljava/lang/String;)Ljava/lang/Class;	CONSTANT	 type: class java.lang.String; value: ] from the thread context, current, or 
io/jsonwebtoken/lang/Classes	forName	(Ljava/lang/String;)Ljava/lang/Class;	CONSTANT	 type: class java.lang.String; value: system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.
io/jsonwebtoken/lang/Classes	invokeStatic	(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;	CONSTANT	 type: class java.lang.String; value: .  Ensure the necessary 
io/jsonwebtoken/lang/Classes	invokeStatic	(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;	CONSTANT	 type: class java.lang.String; value: implementation is in the runtime classpath.
io/jsonwebtoken/security/Keys	hmacShaKeyFor	([B)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value:  bits which 
io/jsonwebtoken/security/Keys	hmacShaKeyFor	([B)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a 
io/jsonwebtoken/security/Keys	hmacShaKeyFor	([B)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
io/jsonwebtoken/security/Keys	hmacShaKeyFor	([B)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: is not secure enough for any JWT HMAC-SHA algorithm.  The JWT 
io/jsonwebtoken/security/Keys	hmacShaKeyFor	([B)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: or HS512.key()) to create a key guaranteed to be secure enough for your preferred HMAC-SHA 
io/jsonwebtoken/security/Keys	hmacShaKeyFor	([B)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: output size).  Consider using the Jwts.SIG.HS256.key() builder (or HS384.key() 
io/jsonwebtoken/security/Keys	hmacShaKeyFor	([B)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: size >= 256 bits (the key size must be greater than or equal to the hash 
