io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value:  Header: %s
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value:  header parameter per https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.11 ("the [crit] Header 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value:  header value of false) that also rely on a SigningKeyResolver are disallowed 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value:  header value of false) that rely on a SigningKeyResolver are disallowed 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value:  set references header name '%s', but the header does not contain an 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value:  set references unsupported header name '%s'. Application developers expecting to support a JWT 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: ' per 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: ' yet the compact JWS string contains a signature. This is not permitted 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: ') are disallowed by 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: Parameter MUST be integrity protected; therefore, it MUST occur only within [a] JWS Protected Header)".
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: allow them to be parsed, call the JwtParserBuilder.unsecured() method, but please read the 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: associated '%s' header parameter as required by 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: by default to protect against [Denial of Service attacks](
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: default as mandated by https://www.rfc-editor.org/rfc/rfc7518.html#section-3.6. If you wish to 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: extension using header '%s' in their application code must indicate it 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.11. Header: %s
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: https://www.rfc-editor.org/rfc/rfc7518.html#section-4.1
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-pellegrino.pdf).  If you 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: is supported by using the JwtParserBuilder.critical method. Header: %s
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: keyLocator(Locator) and do not configure a SigningKeyResolver.
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: method's JavaDoc before doing so.
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: per https://tools.ietf.org/html/rfc7518#section-3.6.
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: security considerations covered in that method's JavaDoc before doing so. Header: 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: unsecuredDecompression() method, but please read the security considerations covered in that 
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: wish to enable Unencoded JWS payload decompression, configure the JwtParserBuilder.
io/jsonwebtoken/impl/DefaultJwtParser	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: wish to enable Unsecure JWS or Unencoded JWS payload decompression, call the JwtParserBuilder.
io/jsonwebtoken/impl/DefaultJwtParser	parse	(Ljava/io/Reader;Lio/jsonwebtoken/impl/Payload;)Lio/jsonwebtoken/Jwt;	CONSTANT	 type: class java.lang.String; value: ' JWE key algorithm did not return a decryption key. 
io/jsonwebtoken/impl/DefaultJwtParser	parse	(Ljava/io/Reader;Lio/jsonwebtoken/impl/Payload;)Lio/jsonwebtoken/Jwt;	CONSTANT	 type: class java.lang.String; value: . 
io/jsonwebtoken/impl/DefaultJwtParser	parse	(Ljava/io/Reader;Lio/jsonwebtoken/impl/Payload;)Lio/jsonwebtoken/Jwt;	CONSTANT	 type: class java.lang.String; value: Current time: 
io/jsonwebtoken/impl/DefaultJwtParser	parse	(Ljava/io/Reader;Lio/jsonwebtoken/impl/Payload;)Lio/jsonwebtoken/Jwt;	CONSTANT	 type: class java.lang.String; value: Unable to perform '
io/jsonwebtoken/impl/DefaultJwtParser	validateExpectedClaims	(Lio/jsonwebtoken/Header;Lio/jsonwebtoken/Claims;)V	CONSTANT	 type: class java.lang.String; value: ' was expected to be a Date, but its value 
io/jsonwebtoken/impl/DefaultJwtParser	validateExpectedClaims	(Lio/jsonwebtoken/Header;Lio/jsonwebtoken/Claims;)V	CONSTANT	 type: class java.lang.String; value: cannot be converted to a Date using current heuristics.  Value: 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value:  key may 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value:  signatures.  Because the specified 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value: ' signature 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value: algorithm, but the provided 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value: key reflects a specific and expected algorithm, and the JWT does not reflect 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value: not be used to verify 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value: signature verification key, but this cannot be assumed for security reasons.
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value: this algorithm, it is likely that the JWT was not expected and therefore should not be 
io/jsonwebtoken/impl/DefaultJwtParser	verifySignature	(Lio/jsonwebtoken/impl/TokenizedJwt;Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;Lio/jsonwebtoken/SigningKeyResolver;Lio/jsonwebtoken/Claims;Lio/jsonwebtoken/impl/Payload;)V	CONSTANT	 type: class java.lang.String; value: trusted.  Another possibility is that the parser was provided the incorrect 
io/jsonwebtoken/impl/lang/DefaultParameter	cast	(Ljava/lang/Object;)Ljava/lang/Object;	CONSTANT	 type: class java.lang.String; value: >: At least one 
io/jsonwebtoken/impl/lang/DefaultParameter	cast	(Ljava/lang/Object;)Ljava/lang/Object;	CONSTANT	 type: class java.lang.String; value: element is not an instance of 
io/jsonwebtoken/impl/security/AbstractSecureDigestAlgorithm	digest	(Lio/jsonwebtoken/security/SecureRequest;)[B	CONSTANT	 type: class java.lang.String; value: ' 
io/jsonwebtoken/impl/security/AbstractSecureDigestAlgorithm	digest	(Lio/jsonwebtoken/security/SecureRequest;)[B	CONSTANT	 type: class java.lang.String; value: using key {
io/jsonwebtoken/impl/security/AbstractSecureDigestAlgorithm	verify	(Lio/jsonwebtoken/security/VerifySecureDigestRequest;)Z	CONSTANT	 type: class java.lang.String; value: ' 
io/jsonwebtoken/impl/security/AbstractSecureDigestAlgorithm	verify	(Lio/jsonwebtoken/security/VerifySecureDigestRequest;)Z	CONSTANT	 type: class java.lang.String; value: using key {
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  MUST have a 
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  bits (the key size must be greater than or equal to the hash 
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  bits which 
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: .  See 
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: .key() 
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: builder to create a key guaranteed to be secure enough for 
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: is not secure enough for the 
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: output size). Consider using the Jwts.SIG.
io/jsonwebtoken/impl/security/DefaultMacAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: size >= 
io/jsonwebtoken/impl/security/DefaultRsaKeyAlgorithm	validate	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  algorithm. 
io/jsonwebtoken/impl/security/DefaultRsaKeyAlgorithm	validate	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  bits. See 
io/jsonwebtoken/impl/security/DefaultRsaKeyAlgorithm	validate	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: ) states that RSA keys MUST 
io/jsonwebtoken/impl/security/DefaultRsaKeyAlgorithm	validate	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: The JWT JWA Specification (RFC 7518, Section 
io/jsonwebtoken/impl/security/DefaultRsaKeyAlgorithm	validate	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: have a size >= 
io/jsonwebtoken/impl/security/DefaultRsaKeyAlgorithm	validate	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: https://www.rfc-editor.org/rfc/rfc7518.html#section-
io/jsonwebtoken/impl/security/EcSignatureAlgorithm$2	apply	(Ljava/security/Signature;)Ljava/lang/Boolean;	CONSTANT	 type: class java.lang.String; value:  per [RFC 7518, Section 3.4 (validation)]
io/jsonwebtoken/impl/security/EcSignatureAlgorithm$2	apply	(Ljava/security/Signature;)Ljava/lang/Boolean;	CONSTANT	 type: class java.lang.String; value: (https://www.rfc-editor.org/rfc/rfc7518.html#section-3.4).
io/jsonwebtoken/impl/security/EcdhKeyAlgorithm	assertCurve	(Ljava/security/Key;)Lio/jsonwebtoken/impl/security/AbstractCurve;	CONSTANT	 type: class java.lang.String; value:  keys may not be used with ECDH-ES key agreement algorithms per 
io/jsonwebtoken/impl/security/EcdhKeyAlgorithm	assertCurve	(Ljava/security/Key;)Lio/jsonwebtoken/impl/security/AbstractCurve;	CONSTANT	 type: class java.lang.String; value: https://www.rfc-editor.org/rfc/rfc8037#section-3.1.
io/jsonwebtoken/impl/security/EcdhKeyAlgorithm	getDecryptionKey	(Lio/jsonwebtoken/security/DecryptionKeyRequest;)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value:  value does not represent 
io/jsonwebtoken/impl/security/EcdhKeyAlgorithm	getDecryptionKey	(Lio/jsonwebtoken/security/DecryptionKeyRequest;)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value:  value is not an Elliptic Curve 
io/jsonwebtoken/impl/security/EcdhKeyAlgorithm	getDecryptionKey	(Lio/jsonwebtoken/security/DecryptionKeyRequest;)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: Public JWK. Value: 
io/jsonwebtoken/impl/security/EcdhKeyAlgorithm	getDecryptionKey	(Lio/jsonwebtoken/security/DecryptionKeyRequest;)Ljavax/crypto/SecretKey;	CONSTANT	 type: class java.lang.String; value: a point on the expected curve. Value: 
io/jsonwebtoken/impl/security/EdSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  digital signatures per 
io/jsonwebtoken/impl/security/EdSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: https://www.rfc-editor.org/rfc/rfc8037.html#section-3.2
io/jsonwebtoken/impl/security/RsaPrivateJwkFactory	<clinit>	()V	CONSTANT	 type: class java.lang.String; value:  interfaces.  If the specified RSAPrivateKey cannot be one of these two, you must explicitly 
io/jsonwebtoken/impl/security/RsaPrivateJwkFactory	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: [JWA RFC, Section 6.3.2](https://www.rfc-editor.org/rfc/rfc7518.html#section-6.3.2) 
io/jsonwebtoken/impl/security/RsaPrivateJwkFactory	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: provide an RSAPublicKey in addition to the RSAPrivateKey, as the 
io/jsonwebtoken/impl/security/RsaPrivateJwkFactory	<clinit>	()V	CONSTANT	 type: class java.lang.String; value: requires public values to be present in private RSA JWKs.
io/jsonwebtoken/impl/security/RsaSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  algorithm.  The JWT JWA Specification 
io/jsonwebtoken/impl/security/RsaSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value:  bits 
io/jsonwebtoken/impl/security/RsaSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: (RFC 7518, Section 
io/jsonwebtoken/impl/security/RsaSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: .  See 
io/jsonwebtoken/impl/security/RsaSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: https://tools.ietf.org/html/rfc7518#section-
io/jsonwebtoken/impl/security/RsaSignatureAlgorithm	validateKey	(Ljava/security/Key;Z)V	CONSTANT	 type: class java.lang.String; value: which is not secure enough for the 
io/jsonwebtoken/impl/security/SecretJwkFactory	assertKeyBitLength	([BLio/jsonwebtoken/security/MacAlgorithm;)V	CONSTANT	 type: class java.lang.String; value: . This discrepancy could be the result of an algorithm 
io/jsonwebtoken/impl/security/SecretJwkFactory	assertKeyBitLength	([BLio/jsonwebtoken/security/MacAlgorithm;)V	CONSTANT	 type: class java.lang.String; value: substitution attack or simply an erroneously constructed JWK. In either case, it is likely 
io/jsonwebtoken/impl/security/SecretJwkFactory	assertKeyBitLength	([BLio/jsonwebtoken/security/MacAlgorithm;)V	CONSTANT	 type: class java.lang.String; value: to result in unexpected or undesired security consequences.
